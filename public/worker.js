"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x + '" is not supported');
  });
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/jszip/dist/jszip.min.js
  var require_jszip_min = __commonJS({
    "node_modules/jszip/dist/jszip.min.js"(exports, module) {
      !function(e) {
        if ("object" == typeof exports && "undefined" != typeof module)
          module.exports = e();
        else if ("function" == typeof define && define.amd)
          define([], e);
        else {
          ("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this).JSZip = e();
        }
      }(function() {
        return function s(a, o, h) {
          function u(r, e2) {
            if (!o[r]) {
              if (!a[r]) {
                var t = "function" == typeof __require && __require;
                if (!e2 && t)
                  return t(r, true);
                if (l)
                  return l(r, true);
                var n = new Error("Cannot find module '" + r + "'");
                throw n.code = "MODULE_NOT_FOUND", n;
              }
              var i = o[r] = { exports: {} };
              a[r][0].call(i.exports, function(e3) {
                var t2 = a[r][1][e3];
                return u(t2 || e3);
              }, i, i.exports, s, a, o, h);
            }
            return o[r].exports;
          }
          for (var l = "function" == typeof __require && __require, e = 0; e < h.length; e++)
            u(h[e]);
          return u;
        }({ 1: [function(e, t, r) {
          "use strict";
          var d = e("./utils"), c = e("./support"), p = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
          r.encode = function(e2) {
            for (var t2, r2, n, i, s, a, o, h = [], u = 0, l = e2.length, f = l, c2 = "string" !== d.getTypeOf(e2); u < e2.length; )
              f = l - u, n = c2 ? (t2 = e2[u++], r2 = u < l ? e2[u++] : 0, u < l ? e2[u++] : 0) : (t2 = e2.charCodeAt(u++), r2 = u < l ? e2.charCodeAt(u++) : 0, u < l ? e2.charCodeAt(u++) : 0), i = t2 >> 2, s = (3 & t2) << 4 | r2 >> 4, a = 1 < f ? (15 & r2) << 2 | n >> 6 : 64, o = 2 < f ? 63 & n : 64, h.push(p.charAt(i) + p.charAt(s) + p.charAt(a) + p.charAt(o));
            return h.join("");
          }, r.decode = function(e2) {
            var t2, r2, n, i, s, a, o = 0, h = 0, u = "data:";
            if (e2.substr(0, u.length) === u)
              throw new Error("Invalid base64 input, it looks like a data url.");
            var l, f = 3 * (e2 = e2.replace(/[^A-Za-z0-9+/=]/g, "")).length / 4;
            if (e2.charAt(e2.length - 1) === p.charAt(64) && f--, e2.charAt(e2.length - 2) === p.charAt(64) && f--, f % 1 != 0)
              throw new Error("Invalid base64 input, bad content length.");
            for (l = c.uint8array ? new Uint8Array(0 | f) : new Array(0 | f); o < e2.length; )
              t2 = p.indexOf(e2.charAt(o++)) << 2 | (i = p.indexOf(e2.charAt(o++))) >> 4, r2 = (15 & i) << 4 | (s = p.indexOf(e2.charAt(o++))) >> 2, n = (3 & s) << 6 | (a = p.indexOf(e2.charAt(o++))), l[h++] = t2, 64 !== s && (l[h++] = r2), 64 !== a && (l[h++] = n);
            return l;
          };
        }, { "./support": 30, "./utils": 32 }], 2: [function(e, t, r) {
          "use strict";
          var n = e("./external"), i = e("./stream/DataWorker"), s = e("./stream/Crc32Probe"), a = e("./stream/DataLengthProbe");
          function o(e2, t2, r2, n2, i2) {
            this.compressedSize = e2, this.uncompressedSize = t2, this.crc32 = r2, this.compression = n2, this.compressedContent = i2;
          }
          o.prototype = { getContentWorker: function() {
            var e2 = new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")), t2 = this;
            return e2.on("end", function() {
              if (this.streamInfo.data_length !== t2.uncompressedSize)
                throw new Error("Bug : uncompressed data size mismatch");
            }), e2;
          }, getCompressedWorker: function() {
            return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize", this.compressedSize).withStreamInfo("uncompressedSize", this.uncompressedSize).withStreamInfo("crc32", this.crc32).withStreamInfo("compression", this.compression);
          } }, o.createWorkerFrom = function(e2, t2, r2) {
            return e2.pipe(new s()).pipe(new a("uncompressedSize")).pipe(t2.compressWorker(r2)).pipe(new a("compressedSize")).withStreamInfo("compression", t2);
          }, t.exports = o;
        }, { "./external": 6, "./stream/Crc32Probe": 25, "./stream/DataLengthProbe": 26, "./stream/DataWorker": 27 }], 3: [function(e, t, r) {
          "use strict";
          var n = e("./stream/GenericWorker");
          r.STORE = { magic: "\0\0", compressWorker: function() {
            return new n("STORE compression");
          }, uncompressWorker: function() {
            return new n("STORE decompression");
          } }, r.DEFLATE = e("./flate");
        }, { "./flate": 7, "./stream/GenericWorker": 28 }], 4: [function(e, t, r) {
          "use strict";
          var n = e("./utils");
          var o = function() {
            for (var e2, t2 = [], r2 = 0; r2 < 256; r2++) {
              e2 = r2;
              for (var n2 = 0; n2 < 8; n2++)
                e2 = 1 & e2 ? 3988292384 ^ e2 >>> 1 : e2 >>> 1;
              t2[r2] = e2;
            }
            return t2;
          }();
          t.exports = function(e2, t2) {
            return void 0 !== e2 && e2.length ? "string" !== n.getTypeOf(e2) ? function(e3, t3, r2, n2) {
              var i = o, s = n2 + r2;
              e3 ^= -1;
              for (var a = n2; a < s; a++)
                e3 = e3 >>> 8 ^ i[255 & (e3 ^ t3[a])];
              return -1 ^ e3;
            }(0 | t2, e2, e2.length, 0) : function(e3, t3, r2, n2) {
              var i = o, s = n2 + r2;
              e3 ^= -1;
              for (var a = n2; a < s; a++)
                e3 = e3 >>> 8 ^ i[255 & (e3 ^ t3.charCodeAt(a))];
              return -1 ^ e3;
            }(0 | t2, e2, e2.length, 0) : 0;
          };
        }, { "./utils": 32 }], 5: [function(e, t, r) {
          "use strict";
          r.base64 = false, r.binary = false, r.dir = false, r.createFolders = true, r.date = null, r.compression = null, r.compressionOptions = null, r.comment = null, r.unixPermissions = null, r.dosPermissions = null;
        }, {}], 6: [function(e, t, r) {
          "use strict";
          var n = null;
          n = "undefined" != typeof Promise ? Promise : e("lie"), t.exports = { Promise: n };
        }, { lie: 37 }], 7: [function(e, t, r) {
          "use strict";
          var n = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Uint32Array, i = e("pako"), s = e("./utils"), a = e("./stream/GenericWorker"), o = n ? "uint8array" : "array";
          function h(e2, t2) {
            a.call(this, "FlateWorker/" + e2), this._pako = null, this._pakoAction = e2, this._pakoOptions = t2, this.meta = {};
          }
          r.magic = "\b\0", s.inherits(h, a), h.prototype.processChunk = function(e2) {
            this.meta = e2.meta, null === this._pako && this._createPako(), this._pako.push(s.transformTo(o, e2.data), false);
          }, h.prototype.flush = function() {
            a.prototype.flush.call(this), null === this._pako && this._createPako(), this._pako.push([], true);
          }, h.prototype.cleanUp = function() {
            a.prototype.cleanUp.call(this), this._pako = null;
          }, h.prototype._createPako = function() {
            this._pako = new i[this._pakoAction]({ raw: true, level: this._pakoOptions.level || -1 });
            var t2 = this;
            this._pako.onData = function(e2) {
              t2.push({ data: e2, meta: t2.meta });
            };
          }, r.compressWorker = function(e2) {
            return new h("Deflate", e2);
          }, r.uncompressWorker = function() {
            return new h("Inflate", {});
          };
        }, { "./stream/GenericWorker": 28, "./utils": 32, pako: 38 }], 8: [function(e, t, r) {
          "use strict";
          function A(e2, t2) {
            var r2, n2 = "";
            for (r2 = 0; r2 < t2; r2++)
              n2 += String.fromCharCode(255 & e2), e2 >>>= 8;
            return n2;
          }
          function n(e2, t2, r2, n2, i2, s2) {
            var a, o, h = e2.file, u = e2.compression, l = s2 !== O.utf8encode, f = I.transformTo("string", s2(h.name)), c = I.transformTo("string", O.utf8encode(h.name)), d = h.comment, p = I.transformTo("string", s2(d)), m = I.transformTo("string", O.utf8encode(d)), _ = c.length !== h.name.length, g = m.length !== d.length, b = "", v = "", y = "", w = h.dir, k = h.date, x = { crc32: 0, compressedSize: 0, uncompressedSize: 0 };
            t2 && !r2 || (x.crc32 = e2.crc32, x.compressedSize = e2.compressedSize, x.uncompressedSize = e2.uncompressedSize);
            var S = 0;
            t2 && (S |= 8), l || !_ && !g || (S |= 2048);
            var z2 = 0, C = 0;
            w && (z2 |= 16), "UNIX" === i2 ? (C = 798, z2 |= function(e3, t3) {
              var r3 = e3;
              return e3 || (r3 = t3 ? 16893 : 33204), (65535 & r3) << 16;
            }(h.unixPermissions, w)) : (C = 20, z2 |= function(e3) {
              return 63 & (e3 || 0);
            }(h.dosPermissions)), a = k.getUTCHours(), a <<= 6, a |= k.getUTCMinutes(), a <<= 5, a |= k.getUTCSeconds() / 2, o = k.getUTCFullYear() - 1980, o <<= 4, o |= k.getUTCMonth() + 1, o <<= 5, o |= k.getUTCDate(), _ && (v = A(1, 1) + A(B(f), 4) + c, b += "up" + A(v.length, 2) + v), g && (y = A(1, 1) + A(B(p), 4) + m, b += "uc" + A(y.length, 2) + y);
            var E = "";
            return E += "\n\0", E += A(S, 2), E += u.magic, E += A(a, 2), E += A(o, 2), E += A(x.crc32, 4), E += A(x.compressedSize, 4), E += A(x.uncompressedSize, 4), E += A(f.length, 2), E += A(b.length, 2), { fileRecord: R.LOCAL_FILE_HEADER + E + f + b, dirRecord: R.CENTRAL_FILE_HEADER + A(C, 2) + E + A(p.length, 2) + "\0\0\0\0" + A(z2, 4) + A(n2, 4) + f + b + p };
          }
          var I = e("../utils"), i = e("../stream/GenericWorker"), O = e("../utf8"), B = e("../crc32"), R = e("../signature");
          function s(e2, t2, r2, n2) {
            i.call(this, "ZipFileWorker"), this.bytesWritten = 0, this.zipComment = t2, this.zipPlatform = r2, this.encodeFileName = n2, this.streamFiles = e2, this.accumulate = false, this.contentBuffer = [], this.dirRecords = [], this.currentSourceOffset = 0, this.entriesCount = 0, this.currentFile = null, this._sources = [];
          }
          I.inherits(s, i), s.prototype.push = function(e2) {
            var t2 = e2.meta.percent || 0, r2 = this.entriesCount, n2 = this._sources.length;
            this.accumulate ? this.contentBuffer.push(e2) : (this.bytesWritten += e2.data.length, i.prototype.push.call(this, { data: e2.data, meta: { currentFile: this.currentFile, percent: r2 ? (t2 + 100 * (r2 - n2 - 1)) / r2 : 100 } }));
          }, s.prototype.openedSource = function(e2) {
            this.currentSourceOffset = this.bytesWritten, this.currentFile = e2.file.name;
            var t2 = this.streamFiles && !e2.file.dir;
            if (t2) {
              var r2 = n(e2, t2, false, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
              this.push({ data: r2.fileRecord, meta: { percent: 0 } });
            } else
              this.accumulate = true;
          }, s.prototype.closedSource = function(e2) {
            this.accumulate = false;
            var t2 = this.streamFiles && !e2.file.dir, r2 = n(e2, t2, true, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
            if (this.dirRecords.push(r2.dirRecord), t2)
              this.push({ data: function(e3) {
                return R.DATA_DESCRIPTOR + A(e3.crc32, 4) + A(e3.compressedSize, 4) + A(e3.uncompressedSize, 4);
              }(e2), meta: { percent: 100 } });
            else
              for (this.push({ data: r2.fileRecord, meta: { percent: 0 } }); this.contentBuffer.length; )
                this.push(this.contentBuffer.shift());
            this.currentFile = null;
          }, s.prototype.flush = function() {
            for (var e2 = this.bytesWritten, t2 = 0; t2 < this.dirRecords.length; t2++)
              this.push({ data: this.dirRecords[t2], meta: { percent: 100 } });
            var r2 = this.bytesWritten - e2, n2 = function(e3, t3, r3, n3, i2) {
              var s2 = I.transformTo("string", i2(n3));
              return R.CENTRAL_DIRECTORY_END + "\0\0\0\0" + A(e3, 2) + A(e3, 2) + A(t3, 4) + A(r3, 4) + A(s2.length, 2) + s2;
            }(this.dirRecords.length, r2, e2, this.zipComment, this.encodeFileName);
            this.push({ data: n2, meta: { percent: 100 } });
          }, s.prototype.prepareNextSource = function() {
            this.previous = this._sources.shift(), this.openedSource(this.previous.streamInfo), this.isPaused ? this.previous.pause() : this.previous.resume();
          }, s.prototype.registerPrevious = function(e2) {
            this._sources.push(e2);
            var t2 = this;
            return e2.on("data", function(e3) {
              t2.processChunk(e3);
            }), e2.on("end", function() {
              t2.closedSource(t2.previous.streamInfo), t2._sources.length ? t2.prepareNextSource() : t2.end();
            }), e2.on("error", function(e3) {
              t2.error(e3);
            }), this;
          }, s.prototype.resume = function() {
            return !!i.prototype.resume.call(this) && (!this.previous && this._sources.length ? (this.prepareNextSource(), true) : this.previous || this._sources.length || this.generatedError ? void 0 : (this.end(), true));
          }, s.prototype.error = function(e2) {
            var t2 = this._sources;
            if (!i.prototype.error.call(this, e2))
              return false;
            for (var r2 = 0; r2 < t2.length; r2++)
              try {
                t2[r2].error(e2);
              } catch (e3) {
              }
            return true;
          }, s.prototype.lock = function() {
            i.prototype.lock.call(this);
            for (var e2 = this._sources, t2 = 0; t2 < e2.length; t2++)
              e2[t2].lock();
          }, t.exports = s;
        }, { "../crc32": 4, "../signature": 23, "../stream/GenericWorker": 28, "../utf8": 31, "../utils": 32 }], 9: [function(e, t, r) {
          "use strict";
          var u = e("../compressions"), n = e("./ZipFileWorker");
          r.generateWorker = function(e2, a, t2) {
            var o = new n(a.streamFiles, t2, a.platform, a.encodeFileName), h = 0;
            try {
              e2.forEach(function(e3, t3) {
                h++;
                var r2 = function(e4, t4) {
                  var r3 = e4 || t4, n3 = u[r3];
                  if (!n3)
                    throw new Error(r3 + " is not a valid compression method !");
                  return n3;
                }(t3.options.compression, a.compression), n2 = t3.options.compressionOptions || a.compressionOptions || {}, i = t3.dir, s = t3.date;
                t3._compressWorker(r2, n2).withStreamInfo("file", { name: e3, dir: i, date: s, comment: t3.comment || "", unixPermissions: t3.unixPermissions, dosPermissions: t3.dosPermissions }).pipe(o);
              }), o.entriesCount = h;
            } catch (e3) {
              o.error(e3);
            }
            return o;
          };
        }, { "../compressions": 3, "./ZipFileWorker": 8 }], 10: [function(e, t, r) {
          "use strict";
          function n() {
            if (!(this instanceof n))
              return new n();
            if (arguments.length)
              throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");
            this.files = /* @__PURE__ */ Object.create(null), this.comment = null, this.root = "", this.clone = function() {
              var e2 = new n();
              for (var t2 in this)
                "function" != typeof this[t2] && (e2[t2] = this[t2]);
              return e2;
            };
          }
          (n.prototype = e("./object")).loadAsync = e("./load"), n.support = e("./support"), n.defaults = e("./defaults"), n.version = "3.10.1", n.loadAsync = function(e2, t2) {
            return new n().loadAsync(e2, t2);
          }, n.external = e("./external"), t.exports = n;
        }, { "./defaults": 5, "./external": 6, "./load": 11, "./object": 15, "./support": 30 }], 11: [function(e, t, r) {
          "use strict";
          var u = e("./utils"), i = e("./external"), n = e("./utf8"), s = e("./zipEntries"), a = e("./stream/Crc32Probe"), l = e("./nodejsUtils");
          function f(n2) {
            return new i.Promise(function(e2, t2) {
              var r2 = n2.decompressed.getContentWorker().pipe(new a());
              r2.on("error", function(e3) {
                t2(e3);
              }).on("end", function() {
                r2.streamInfo.crc32 !== n2.decompressed.crc32 ? t2(new Error("Corrupted zip : CRC32 mismatch")) : e2();
              }).resume();
            });
          }
          t.exports = function(e2, o) {
            var h = this;
            return o = u.extend(o || {}, { base64: false, checkCRC32: false, optimizedBinaryString: false, createFolders: false, decodeFileName: n.utf8decode }), l.isNode && l.isStream(e2) ? i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")) : u.prepareContent("the loaded zip file", e2, true, o.optimizedBinaryString, o.base64).then(function(e3) {
              var t2 = new s(o);
              return t2.load(e3), t2;
            }).then(function(e3) {
              var t2 = [i.Promise.resolve(e3)], r2 = e3.files;
              if (o.checkCRC32)
                for (var n2 = 0; n2 < r2.length; n2++)
                  t2.push(f(r2[n2]));
              return i.Promise.all(t2);
            }).then(function(e3) {
              for (var t2 = e3.shift(), r2 = t2.files, n2 = 0; n2 < r2.length; n2++) {
                var i2 = r2[n2], s2 = i2.fileNameStr, a2 = u.resolve(i2.fileNameStr);
                h.file(a2, i2.decompressed, { binary: true, optimizedBinaryString: true, date: i2.date, dir: i2.dir, comment: i2.fileCommentStr.length ? i2.fileCommentStr : null, unixPermissions: i2.unixPermissions, dosPermissions: i2.dosPermissions, createFolders: o.createFolders }), i2.dir || (h.file(a2).unsafeOriginalName = s2);
              }
              return t2.zipComment.length && (h.comment = t2.zipComment), h;
            });
          };
        }, { "./external": 6, "./nodejsUtils": 14, "./stream/Crc32Probe": 25, "./utf8": 31, "./utils": 32, "./zipEntries": 33 }], 12: [function(e, t, r) {
          "use strict";
          var n = e("../utils"), i = e("../stream/GenericWorker");
          function s(e2, t2) {
            i.call(this, "Nodejs stream input adapter for " + e2), this._upstreamEnded = false, this._bindStream(t2);
          }
          n.inherits(s, i), s.prototype._bindStream = function(e2) {
            var t2 = this;
            (this._stream = e2).pause(), e2.on("data", function(e3) {
              t2.push({ data: e3, meta: { percent: 0 } });
            }).on("error", function(e3) {
              t2.isPaused ? this.generatedError = e3 : t2.error(e3);
            }).on("end", function() {
              t2.isPaused ? t2._upstreamEnded = true : t2.end();
            });
          }, s.prototype.pause = function() {
            return !!i.prototype.pause.call(this) && (this._stream.pause(), true);
          }, s.prototype.resume = function() {
            return !!i.prototype.resume.call(this) && (this._upstreamEnded ? this.end() : this._stream.resume(), true);
          }, t.exports = s;
        }, { "../stream/GenericWorker": 28, "../utils": 32 }], 13: [function(e, t, r) {
          "use strict";
          var i = e("readable-stream").Readable;
          function n(e2, t2, r2) {
            i.call(this, t2), this._helper = e2;
            var n2 = this;
            e2.on("data", function(e3, t3) {
              n2.push(e3) || n2._helper.pause(), r2 && r2(t3);
            }).on("error", function(e3) {
              n2.emit("error", e3);
            }).on("end", function() {
              n2.push(null);
            });
          }
          e("../utils").inherits(n, i), n.prototype._read = function() {
            this._helper.resume();
          }, t.exports = n;
        }, { "../utils": 32, "readable-stream": 16 }], 14: [function(e, t, r) {
          "use strict";
          t.exports = { isNode: "undefined" != typeof Buffer, newBufferFrom: function(e2, t2) {
            if (Buffer.from && Buffer.from !== Uint8Array.from)
              return Buffer.from(e2, t2);
            if ("number" == typeof e2)
              throw new Error('The "data" argument must not be a number');
            return new Buffer(e2, t2);
          }, allocBuffer: function(e2) {
            if (Buffer.alloc)
              return Buffer.alloc(e2);
            var t2 = new Buffer(e2);
            return t2.fill(0), t2;
          }, isBuffer: function(e2) {
            return Buffer.isBuffer(e2);
          }, isStream: function(e2) {
            return e2 && "function" == typeof e2.on && "function" == typeof e2.pause && "function" == typeof e2.resume;
          } };
        }, {}], 15: [function(e, t, r) {
          "use strict";
          function s(e2, t2, r2) {
            var n2, i2 = u.getTypeOf(t2), s2 = u.extend(r2 || {}, f);
            s2.date = s2.date || /* @__PURE__ */ new Date(), null !== s2.compression && (s2.compression = s2.compression.toUpperCase()), "string" == typeof s2.unixPermissions && (s2.unixPermissions = parseInt(s2.unixPermissions, 8)), s2.unixPermissions && 16384 & s2.unixPermissions && (s2.dir = true), s2.dosPermissions && 16 & s2.dosPermissions && (s2.dir = true), s2.dir && (e2 = g(e2)), s2.createFolders && (n2 = _(e2)) && b.call(this, n2, true);
            var a2 = "string" === i2 && false === s2.binary && false === s2.base64;
            r2 && void 0 !== r2.binary || (s2.binary = !a2), (t2 instanceof c && 0 === t2.uncompressedSize || s2.dir || !t2 || 0 === t2.length) && (s2.base64 = false, s2.binary = true, t2 = "", s2.compression = "STORE", i2 = "string");
            var o2 = null;
            o2 = t2 instanceof c || t2 instanceof l ? t2 : p.isNode && p.isStream(t2) ? new m(e2, t2) : u.prepareContent(e2, t2, s2.binary, s2.optimizedBinaryString, s2.base64);
            var h2 = new d(e2, o2, s2);
            this.files[e2] = h2;
          }
          var i = e("./utf8"), u = e("./utils"), l = e("./stream/GenericWorker"), a = e("./stream/StreamHelper"), f = e("./defaults"), c = e("./compressedObject"), d = e("./zipObject"), o = e("./generate"), p = e("./nodejsUtils"), m = e("./nodejs/NodejsStreamInputAdapter"), _ = function(e2) {
            "/" === e2.slice(-1) && (e2 = e2.substring(0, e2.length - 1));
            var t2 = e2.lastIndexOf("/");
            return 0 < t2 ? e2.substring(0, t2) : "";
          }, g = function(e2) {
            return "/" !== e2.slice(-1) && (e2 += "/"), e2;
          }, b = function(e2, t2) {
            return t2 = void 0 !== t2 ? t2 : f.createFolders, e2 = g(e2), this.files[e2] || s.call(this, e2, null, { dir: true, createFolders: t2 }), this.files[e2];
          };
          function h(e2) {
            return "[object RegExp]" === Object.prototype.toString.call(e2);
          }
          var n = { load: function() {
            throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
          }, forEach: function(e2) {
            var t2, r2, n2;
            for (t2 in this.files)
              n2 = this.files[t2], (r2 = t2.slice(this.root.length, t2.length)) && t2.slice(0, this.root.length) === this.root && e2(r2, n2);
          }, filter: function(r2) {
            var n2 = [];
            return this.forEach(function(e2, t2) {
              r2(e2, t2) && n2.push(t2);
            }), n2;
          }, file: function(e2, t2, r2) {
            if (1 !== arguments.length)
              return e2 = this.root + e2, s.call(this, e2, t2, r2), this;
            if (h(e2)) {
              var n2 = e2;
              return this.filter(function(e3, t3) {
                return !t3.dir && n2.test(e3);
              });
            }
            var i2 = this.files[this.root + e2];
            return i2 && !i2.dir ? i2 : null;
          }, folder: function(r2) {
            if (!r2)
              return this;
            if (h(r2))
              return this.filter(function(e3, t3) {
                return t3.dir && r2.test(e3);
              });
            var e2 = this.root + r2, t2 = b.call(this, e2), n2 = this.clone();
            return n2.root = t2.name, n2;
          }, remove: function(r2) {
            r2 = this.root + r2;
            var e2 = this.files[r2];
            if (e2 || ("/" !== r2.slice(-1) && (r2 += "/"), e2 = this.files[r2]), e2 && !e2.dir)
              delete this.files[r2];
            else
              for (var t2 = this.filter(function(e3, t3) {
                return t3.name.slice(0, r2.length) === r2;
              }), n2 = 0; n2 < t2.length; n2++)
                delete this.files[t2[n2].name];
            return this;
          }, generate: function() {
            throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
          }, generateInternalStream: function(e2) {
            var t2, r2 = {};
            try {
              if ((r2 = u.extend(e2 || {}, { streamFiles: false, compression: "STORE", compressionOptions: null, type: "", platform: "DOS", comment: null, mimeType: "application/zip", encodeFileName: i.utf8encode })).type = r2.type.toLowerCase(), r2.compression = r2.compression.toUpperCase(), "binarystring" === r2.type && (r2.type = "string"), !r2.type)
                throw new Error("No output type specified.");
              u.checkSupport(r2.type), "darwin" !== r2.platform && "freebsd" !== r2.platform && "linux" !== r2.platform && "sunos" !== r2.platform || (r2.platform = "UNIX"), "win32" === r2.platform && (r2.platform = "DOS");
              var n2 = r2.comment || this.comment || "";
              t2 = o.generateWorker(this, r2, n2);
            } catch (e3) {
              (t2 = new l("error")).error(e3);
            }
            return new a(t2, r2.type || "string", r2.mimeType);
          }, generateAsync: function(e2, t2) {
            return this.generateInternalStream(e2).accumulate(t2);
          }, generateNodeStream: function(e2, t2) {
            return (e2 = e2 || {}).type || (e2.type = "nodebuffer"), this.generateInternalStream(e2).toNodejsStream(t2);
          } };
          t.exports = n;
        }, { "./compressedObject": 2, "./defaults": 5, "./generate": 9, "./nodejs/NodejsStreamInputAdapter": 12, "./nodejsUtils": 14, "./stream/GenericWorker": 28, "./stream/StreamHelper": 29, "./utf8": 31, "./utils": 32, "./zipObject": 35 }], 16: [function(e, t, r) {
          "use strict";
          t.exports = e("stream");
        }, { stream: void 0 }], 17: [function(e, t, r) {
          "use strict";
          var n = e("./DataReader");
          function i(e2) {
            n.call(this, e2);
            for (var t2 = 0; t2 < this.data.length; t2++)
              e2[t2] = 255 & e2[t2];
          }
          e("../utils").inherits(i, n), i.prototype.byteAt = function(e2) {
            return this.data[this.zero + e2];
          }, i.prototype.lastIndexOfSignature = function(e2) {
            for (var t2 = e2.charCodeAt(0), r2 = e2.charCodeAt(1), n2 = e2.charCodeAt(2), i2 = e2.charCodeAt(3), s = this.length - 4; 0 <= s; --s)
              if (this.data[s] === t2 && this.data[s + 1] === r2 && this.data[s + 2] === n2 && this.data[s + 3] === i2)
                return s - this.zero;
            return -1;
          }, i.prototype.readAndCheckSignature = function(e2) {
            var t2 = e2.charCodeAt(0), r2 = e2.charCodeAt(1), n2 = e2.charCodeAt(2), i2 = e2.charCodeAt(3), s = this.readData(4);
            return t2 === s[0] && r2 === s[1] && n2 === s[2] && i2 === s[3];
          }, i.prototype.readData = function(e2) {
            if (this.checkOffset(e2), 0 === e2)
              return [];
            var t2 = this.data.slice(this.zero + this.index, this.zero + this.index + e2);
            return this.index += e2, t2;
          }, t.exports = i;
        }, { "../utils": 32, "./DataReader": 18 }], 18: [function(e, t, r) {
          "use strict";
          var n = e("../utils");
          function i(e2) {
            this.data = e2, this.length = e2.length, this.index = 0, this.zero = 0;
          }
          i.prototype = { checkOffset: function(e2) {
            this.checkIndex(this.index + e2);
          }, checkIndex: function(e2) {
            if (this.length < this.zero + e2 || e2 < 0)
              throw new Error("End of data reached (data length = " + this.length + ", asked index = " + e2 + "). Corrupted zip ?");
          }, setIndex: function(e2) {
            this.checkIndex(e2), this.index = e2;
          }, skip: function(e2) {
            this.setIndex(this.index + e2);
          }, byteAt: function() {
          }, readInt: function(e2) {
            var t2, r2 = 0;
            for (this.checkOffset(e2), t2 = this.index + e2 - 1; t2 >= this.index; t2--)
              r2 = (r2 << 8) + this.byteAt(t2);
            return this.index += e2, r2;
          }, readString: function(e2) {
            return n.transformTo("string", this.readData(e2));
          }, readData: function() {
          }, lastIndexOfSignature: function() {
          }, readAndCheckSignature: function() {
          }, readDate: function() {
            var e2 = this.readInt(4);
            return new Date(Date.UTC(1980 + (e2 >> 25 & 127), (e2 >> 21 & 15) - 1, e2 >> 16 & 31, e2 >> 11 & 31, e2 >> 5 & 63, (31 & e2) << 1));
          } }, t.exports = i;
        }, { "../utils": 32 }], 19: [function(e, t, r) {
          "use strict";
          var n = e("./Uint8ArrayReader");
          function i(e2) {
            n.call(this, e2);
          }
          e("../utils").inherits(i, n), i.prototype.readData = function(e2) {
            this.checkOffset(e2);
            var t2 = this.data.slice(this.zero + this.index, this.zero + this.index + e2);
            return this.index += e2, t2;
          }, t.exports = i;
        }, { "../utils": 32, "./Uint8ArrayReader": 21 }], 20: [function(e, t, r) {
          "use strict";
          var n = e("./DataReader");
          function i(e2) {
            n.call(this, e2);
          }
          e("../utils").inherits(i, n), i.prototype.byteAt = function(e2) {
            return this.data.charCodeAt(this.zero + e2);
          }, i.prototype.lastIndexOfSignature = function(e2) {
            return this.data.lastIndexOf(e2) - this.zero;
          }, i.prototype.readAndCheckSignature = function(e2) {
            return e2 === this.readData(4);
          }, i.prototype.readData = function(e2) {
            this.checkOffset(e2);
            var t2 = this.data.slice(this.zero + this.index, this.zero + this.index + e2);
            return this.index += e2, t2;
          }, t.exports = i;
        }, { "../utils": 32, "./DataReader": 18 }], 21: [function(e, t, r) {
          "use strict";
          var n = e("./ArrayReader");
          function i(e2) {
            n.call(this, e2);
          }
          e("../utils").inherits(i, n), i.prototype.readData = function(e2) {
            if (this.checkOffset(e2), 0 === e2)
              return new Uint8Array(0);
            var t2 = this.data.subarray(this.zero + this.index, this.zero + this.index + e2);
            return this.index += e2, t2;
          }, t.exports = i;
        }, { "../utils": 32, "./ArrayReader": 17 }], 22: [function(e, t, r) {
          "use strict";
          var n = e("../utils"), i = e("../support"), s = e("./ArrayReader"), a = e("./StringReader"), o = e("./NodeBufferReader"), h = e("./Uint8ArrayReader");
          t.exports = function(e2) {
            var t2 = n.getTypeOf(e2);
            return n.checkSupport(t2), "string" !== t2 || i.uint8array ? "nodebuffer" === t2 ? new o(e2) : i.uint8array ? new h(n.transformTo("uint8array", e2)) : new s(n.transformTo("array", e2)) : new a(e2);
          };
        }, { "../support": 30, "../utils": 32, "./ArrayReader": 17, "./NodeBufferReader": 19, "./StringReader": 20, "./Uint8ArrayReader": 21 }], 23: [function(e, t, r) {
          "use strict";
          r.LOCAL_FILE_HEADER = "PK", r.CENTRAL_FILE_HEADER = "PK", r.CENTRAL_DIRECTORY_END = "PK", r.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x07", r.ZIP64_CENTRAL_DIRECTORY_END = "PK", r.DATA_DESCRIPTOR = "PK\x07\b";
        }, {}], 24: [function(e, t, r) {
          "use strict";
          var n = e("./GenericWorker"), i = e("../utils");
          function s(e2) {
            n.call(this, "ConvertWorker to " + e2), this.destType = e2;
          }
          i.inherits(s, n), s.prototype.processChunk = function(e2) {
            this.push({ data: i.transformTo(this.destType, e2.data), meta: e2.meta });
          }, t.exports = s;
        }, { "../utils": 32, "./GenericWorker": 28 }], 25: [function(e, t, r) {
          "use strict";
          var n = e("./GenericWorker"), i = e("../crc32");
          function s() {
            n.call(this, "Crc32Probe"), this.withStreamInfo("crc32", 0);
          }
          e("../utils").inherits(s, n), s.prototype.processChunk = function(e2) {
            this.streamInfo.crc32 = i(e2.data, this.streamInfo.crc32 || 0), this.push(e2);
          }, t.exports = s;
        }, { "../crc32": 4, "../utils": 32, "./GenericWorker": 28 }], 26: [function(e, t, r) {
          "use strict";
          var n = e("../utils"), i = e("./GenericWorker");
          function s(e2) {
            i.call(this, "DataLengthProbe for " + e2), this.propName = e2, this.withStreamInfo(e2, 0);
          }
          n.inherits(s, i), s.prototype.processChunk = function(e2) {
            if (e2) {
              var t2 = this.streamInfo[this.propName] || 0;
              this.streamInfo[this.propName] = t2 + e2.data.length;
            }
            i.prototype.processChunk.call(this, e2);
          }, t.exports = s;
        }, { "../utils": 32, "./GenericWorker": 28 }], 27: [function(e, t, r) {
          "use strict";
          var n = e("../utils"), i = e("./GenericWorker");
          function s(e2) {
            i.call(this, "DataWorker");
            var t2 = this;
            this.dataIsReady = false, this.index = 0, this.max = 0, this.data = null, this.type = "", this._tickScheduled = false, e2.then(function(e3) {
              t2.dataIsReady = true, t2.data = e3, t2.max = e3 && e3.length || 0, t2.type = n.getTypeOf(e3), t2.isPaused || t2._tickAndRepeat();
            }, function(e3) {
              t2.error(e3);
            });
          }
          n.inherits(s, i), s.prototype.cleanUp = function() {
            i.prototype.cleanUp.call(this), this.data = null;
          }, s.prototype.resume = function() {
            return !!i.prototype.resume.call(this) && (!this._tickScheduled && this.dataIsReady && (this._tickScheduled = true, n.delay(this._tickAndRepeat, [], this)), true);
          }, s.prototype._tickAndRepeat = function() {
            this._tickScheduled = false, this.isPaused || this.isFinished || (this._tick(), this.isFinished || (n.delay(this._tickAndRepeat, [], this), this._tickScheduled = true));
          }, s.prototype._tick = function() {
            if (this.isPaused || this.isFinished)
              return false;
            var e2 = null, t2 = Math.min(this.max, this.index + 16384);
            if (this.index >= this.max)
              return this.end();
            switch (this.type) {
              case "string":
                e2 = this.data.substring(this.index, t2);
                break;
              case "uint8array":
                e2 = this.data.subarray(this.index, t2);
                break;
              case "array":
              case "nodebuffer":
                e2 = this.data.slice(this.index, t2);
            }
            return this.index = t2, this.push({ data: e2, meta: { percent: this.max ? this.index / this.max * 100 : 0 } });
          }, t.exports = s;
        }, { "../utils": 32, "./GenericWorker": 28 }], 28: [function(e, t, r) {
          "use strict";
          function n(e2) {
            this.name = e2 || "default", this.streamInfo = {}, this.generatedError = null, this.extraStreamInfo = {}, this.isPaused = true, this.isFinished = false, this.isLocked = false, this._listeners = { data: [], end: [], error: [] }, this.previous = null;
          }
          n.prototype = { push: function(e2) {
            this.emit("data", e2);
          }, end: function() {
            if (this.isFinished)
              return false;
            this.flush();
            try {
              this.emit("end"), this.cleanUp(), this.isFinished = true;
            } catch (e2) {
              this.emit("error", e2);
            }
            return true;
          }, error: function(e2) {
            return !this.isFinished && (this.isPaused ? this.generatedError = e2 : (this.isFinished = true, this.emit("error", e2), this.previous && this.previous.error(e2), this.cleanUp()), true);
          }, on: function(e2, t2) {
            return this._listeners[e2].push(t2), this;
          }, cleanUp: function() {
            this.streamInfo = this.generatedError = this.extraStreamInfo = null, this._listeners = [];
          }, emit: function(e2, t2) {
            if (this._listeners[e2])
              for (var r2 = 0; r2 < this._listeners[e2].length; r2++)
                this._listeners[e2][r2].call(this, t2);
          }, pipe: function(e2) {
            return e2.registerPrevious(this);
          }, registerPrevious: function(e2) {
            if (this.isLocked)
              throw new Error("The stream '" + this + "' has already been used.");
            this.streamInfo = e2.streamInfo, this.mergeStreamInfo(), this.previous = e2;
            var t2 = this;
            return e2.on("data", function(e3) {
              t2.processChunk(e3);
            }), e2.on("end", function() {
              t2.end();
            }), e2.on("error", function(e3) {
              t2.error(e3);
            }), this;
          }, pause: function() {
            return !this.isPaused && !this.isFinished && (this.isPaused = true, this.previous && this.previous.pause(), true);
          }, resume: function() {
            if (!this.isPaused || this.isFinished)
              return false;
            var e2 = this.isPaused = false;
            return this.generatedError && (this.error(this.generatedError), e2 = true), this.previous && this.previous.resume(), !e2;
          }, flush: function() {
          }, processChunk: function(e2) {
            this.push(e2);
          }, withStreamInfo: function(e2, t2) {
            return this.extraStreamInfo[e2] = t2, this.mergeStreamInfo(), this;
          }, mergeStreamInfo: function() {
            for (var e2 in this.extraStreamInfo)
              Object.prototype.hasOwnProperty.call(this.extraStreamInfo, e2) && (this.streamInfo[e2] = this.extraStreamInfo[e2]);
          }, lock: function() {
            if (this.isLocked)
              throw new Error("The stream '" + this + "' has already been used.");
            this.isLocked = true, this.previous && this.previous.lock();
          }, toString: function() {
            var e2 = "Worker " + this.name;
            return this.previous ? this.previous + " -> " + e2 : e2;
          } }, t.exports = n;
        }, {}], 29: [function(e, t, r) {
          "use strict";
          var h = e("../utils"), i = e("./ConvertWorker"), s = e("./GenericWorker"), u = e("../base64"), n = e("../support"), a = e("../external"), o = null;
          if (n.nodestream)
            try {
              o = e("../nodejs/NodejsStreamOutputAdapter");
            } catch (e2) {
            }
          function l(e2, o2) {
            return new a.Promise(function(t2, r2) {
              var n2 = [], i2 = e2._internalType, s2 = e2._outputType, a2 = e2._mimeType;
              e2.on("data", function(e3, t3) {
                n2.push(e3), o2 && o2(t3);
              }).on("error", function(e3) {
                n2 = [], r2(e3);
              }).on("end", function() {
                try {
                  var e3 = function(e4, t3, r3) {
                    switch (e4) {
                      case "blob":
                        return h.newBlob(h.transformTo("arraybuffer", t3), r3);
                      case "base64":
                        return u.encode(t3);
                      default:
                        return h.transformTo(e4, t3);
                    }
                  }(s2, function(e4, t3) {
                    var r3, n3 = 0, i3 = null, s3 = 0;
                    for (r3 = 0; r3 < t3.length; r3++)
                      s3 += t3[r3].length;
                    switch (e4) {
                      case "string":
                        return t3.join("");
                      case "array":
                        return Array.prototype.concat.apply([], t3);
                      case "uint8array":
                        for (i3 = new Uint8Array(s3), r3 = 0; r3 < t3.length; r3++)
                          i3.set(t3[r3], n3), n3 += t3[r3].length;
                        return i3;
                      case "nodebuffer":
                        return Buffer.concat(t3);
                      default:
                        throw new Error("concat : unsupported type '" + e4 + "'");
                    }
                  }(i2, n2), a2);
                  t2(e3);
                } catch (e4) {
                  r2(e4);
                }
                n2 = [];
              }).resume();
            });
          }
          function f(e2, t2, r2) {
            var n2 = t2;
            switch (t2) {
              case "blob":
              case "arraybuffer":
                n2 = "uint8array";
                break;
              case "base64":
                n2 = "string";
            }
            try {
              this._internalType = n2, this._outputType = t2, this._mimeType = r2, h.checkSupport(n2), this._worker = e2.pipe(new i(n2)), e2.lock();
            } catch (e3) {
              this._worker = new s("error"), this._worker.error(e3);
            }
          }
          f.prototype = { accumulate: function(e2) {
            return l(this, e2);
          }, on: function(e2, t2) {
            var r2 = this;
            return "data" === e2 ? this._worker.on(e2, function(e3) {
              t2.call(r2, e3.data, e3.meta);
            }) : this._worker.on(e2, function() {
              h.delay(t2, arguments, r2);
            }), this;
          }, resume: function() {
            return h.delay(this._worker.resume, [], this._worker), this;
          }, pause: function() {
            return this._worker.pause(), this;
          }, toNodejsStream: function(e2) {
            if (h.checkSupport("nodestream"), "nodebuffer" !== this._outputType)
              throw new Error(this._outputType + " is not supported by this method");
            return new o(this, { objectMode: "nodebuffer" !== this._outputType }, e2);
          } }, t.exports = f;
        }, { "../base64": 1, "../external": 6, "../nodejs/NodejsStreamOutputAdapter": 13, "../support": 30, "../utils": 32, "./ConvertWorker": 24, "./GenericWorker": 28 }], 30: [function(e, t, r) {
          "use strict";
          if (r.base64 = true, r.array = true, r.string = true, r.arraybuffer = "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array, r.nodebuffer = "undefined" != typeof Buffer, r.uint8array = "undefined" != typeof Uint8Array, "undefined" == typeof ArrayBuffer)
            r.blob = false;
          else {
            var n = new ArrayBuffer(0);
            try {
              r.blob = 0 === new Blob([n], { type: "application/zip" }).size;
            } catch (e2) {
              try {
                var i = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();
                i.append(n), r.blob = 0 === i.getBlob("application/zip").size;
              } catch (e3) {
                r.blob = false;
              }
            }
          }
          try {
            r.nodestream = !!e("readable-stream").Readable;
          } catch (e2) {
            r.nodestream = false;
          }
        }, { "readable-stream": 16 }], 31: [function(e, t, s) {
          "use strict";
          for (var o = e("./utils"), h = e("./support"), r = e("./nodejsUtils"), n = e("./stream/GenericWorker"), u = new Array(256), i = 0; i < 256; i++)
            u[i] = 252 <= i ? 6 : 248 <= i ? 5 : 240 <= i ? 4 : 224 <= i ? 3 : 192 <= i ? 2 : 1;
          u[254] = u[254] = 1;
          function a() {
            n.call(this, "utf-8 decode"), this.leftOver = null;
          }
          function l() {
            n.call(this, "utf-8 encode");
          }
          s.utf8encode = function(e2) {
            return h.nodebuffer ? r.newBufferFrom(e2, "utf-8") : function(e3) {
              var t2, r2, n2, i2, s2, a2 = e3.length, o2 = 0;
              for (i2 = 0; i2 < a2; i2++)
                55296 == (64512 & (r2 = e3.charCodeAt(i2))) && i2 + 1 < a2 && 56320 == (64512 & (n2 = e3.charCodeAt(i2 + 1))) && (r2 = 65536 + (r2 - 55296 << 10) + (n2 - 56320), i2++), o2 += r2 < 128 ? 1 : r2 < 2048 ? 2 : r2 < 65536 ? 3 : 4;
              for (t2 = h.uint8array ? new Uint8Array(o2) : new Array(o2), i2 = s2 = 0; s2 < o2; i2++)
                55296 == (64512 & (r2 = e3.charCodeAt(i2))) && i2 + 1 < a2 && 56320 == (64512 & (n2 = e3.charCodeAt(i2 + 1))) && (r2 = 65536 + (r2 - 55296 << 10) + (n2 - 56320), i2++), r2 < 128 ? t2[s2++] = r2 : (r2 < 2048 ? t2[s2++] = 192 | r2 >>> 6 : (r2 < 65536 ? t2[s2++] = 224 | r2 >>> 12 : (t2[s2++] = 240 | r2 >>> 18, t2[s2++] = 128 | r2 >>> 12 & 63), t2[s2++] = 128 | r2 >>> 6 & 63), t2[s2++] = 128 | 63 & r2);
              return t2;
            }(e2);
          }, s.utf8decode = function(e2) {
            return h.nodebuffer ? o.transformTo("nodebuffer", e2).toString("utf-8") : function(e3) {
              var t2, r2, n2, i2, s2 = e3.length, a2 = new Array(2 * s2);
              for (t2 = r2 = 0; t2 < s2; )
                if ((n2 = e3[t2++]) < 128)
                  a2[r2++] = n2;
                else if (4 < (i2 = u[n2]))
                  a2[r2++] = 65533, t2 += i2 - 1;
                else {
                  for (n2 &= 2 === i2 ? 31 : 3 === i2 ? 15 : 7; 1 < i2 && t2 < s2; )
                    n2 = n2 << 6 | 63 & e3[t2++], i2--;
                  1 < i2 ? a2[r2++] = 65533 : n2 < 65536 ? a2[r2++] = n2 : (n2 -= 65536, a2[r2++] = 55296 | n2 >> 10 & 1023, a2[r2++] = 56320 | 1023 & n2);
                }
              return a2.length !== r2 && (a2.subarray ? a2 = a2.subarray(0, r2) : a2.length = r2), o.applyFromCharCode(a2);
            }(e2 = o.transformTo(h.uint8array ? "uint8array" : "array", e2));
          }, o.inherits(a, n), a.prototype.processChunk = function(e2) {
            var t2 = o.transformTo(h.uint8array ? "uint8array" : "array", e2.data);
            if (this.leftOver && this.leftOver.length) {
              if (h.uint8array) {
                var r2 = t2;
                (t2 = new Uint8Array(r2.length + this.leftOver.length)).set(this.leftOver, 0), t2.set(r2, this.leftOver.length);
              } else
                t2 = this.leftOver.concat(t2);
              this.leftOver = null;
            }
            var n2 = function(e3, t3) {
              var r3;
              for ((t3 = t3 || e3.length) > e3.length && (t3 = e3.length), r3 = t3 - 1; 0 <= r3 && 128 == (192 & e3[r3]); )
                r3--;
              return r3 < 0 ? t3 : 0 === r3 ? t3 : r3 + u[e3[r3]] > t3 ? r3 : t3;
            }(t2), i2 = t2;
            n2 !== t2.length && (h.uint8array ? (i2 = t2.subarray(0, n2), this.leftOver = t2.subarray(n2, t2.length)) : (i2 = t2.slice(0, n2), this.leftOver = t2.slice(n2, t2.length))), this.push({ data: s.utf8decode(i2), meta: e2.meta });
          }, a.prototype.flush = function() {
            this.leftOver && this.leftOver.length && (this.push({ data: s.utf8decode(this.leftOver), meta: {} }), this.leftOver = null);
          }, s.Utf8DecodeWorker = a, o.inherits(l, n), l.prototype.processChunk = function(e2) {
            this.push({ data: s.utf8encode(e2.data), meta: e2.meta });
          }, s.Utf8EncodeWorker = l;
        }, { "./nodejsUtils": 14, "./stream/GenericWorker": 28, "./support": 30, "./utils": 32 }], 32: [function(e, t, a) {
          "use strict";
          var o = e("./support"), h = e("./base64"), r = e("./nodejsUtils"), u = e("./external");
          function n(e2) {
            return e2;
          }
          function l(e2, t2) {
            for (var r2 = 0; r2 < e2.length; ++r2)
              t2[r2] = 255 & e2.charCodeAt(r2);
            return t2;
          }
          e("setimmediate"), a.newBlob = function(t2, r2) {
            a.checkSupport("blob");
            try {
              return new Blob([t2], { type: r2 });
            } catch (e2) {
              try {
                var n2 = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();
                return n2.append(t2), n2.getBlob(r2);
              } catch (e3) {
                throw new Error("Bug : can't construct the Blob.");
              }
            }
          };
          var i = { stringifyByChunk: function(e2, t2, r2) {
            var n2 = [], i2 = 0, s2 = e2.length;
            if (s2 <= r2)
              return String.fromCharCode.apply(null, e2);
            for (; i2 < s2; )
              "array" === t2 || "nodebuffer" === t2 ? n2.push(String.fromCharCode.apply(null, e2.slice(i2, Math.min(i2 + r2, s2)))) : n2.push(String.fromCharCode.apply(null, e2.subarray(i2, Math.min(i2 + r2, s2)))), i2 += r2;
            return n2.join("");
          }, stringifyByChar: function(e2) {
            for (var t2 = "", r2 = 0; r2 < e2.length; r2++)
              t2 += String.fromCharCode(e2[r2]);
            return t2;
          }, applyCanBeUsed: { uint8array: function() {
            try {
              return o.uint8array && 1 === String.fromCharCode.apply(null, new Uint8Array(1)).length;
            } catch (e2) {
              return false;
            }
          }(), nodebuffer: function() {
            try {
              return o.nodebuffer && 1 === String.fromCharCode.apply(null, r.allocBuffer(1)).length;
            } catch (e2) {
              return false;
            }
          }() } };
          function s(e2) {
            var t2 = 65536, r2 = a.getTypeOf(e2), n2 = true;
            if ("uint8array" === r2 ? n2 = i.applyCanBeUsed.uint8array : "nodebuffer" === r2 && (n2 = i.applyCanBeUsed.nodebuffer), n2)
              for (; 1 < t2; )
                try {
                  return i.stringifyByChunk(e2, r2, t2);
                } catch (e3) {
                  t2 = Math.floor(t2 / 2);
                }
            return i.stringifyByChar(e2);
          }
          function f(e2, t2) {
            for (var r2 = 0; r2 < e2.length; r2++)
              t2[r2] = e2[r2];
            return t2;
          }
          a.applyFromCharCode = s;
          var c = {};
          c.string = { string: n, array: function(e2) {
            return l(e2, new Array(e2.length));
          }, arraybuffer: function(e2) {
            return c.string.uint8array(e2).buffer;
          }, uint8array: function(e2) {
            return l(e2, new Uint8Array(e2.length));
          }, nodebuffer: function(e2) {
            return l(e2, r.allocBuffer(e2.length));
          } }, c.array = { string: s, array: n, arraybuffer: function(e2) {
            return new Uint8Array(e2).buffer;
          }, uint8array: function(e2) {
            return new Uint8Array(e2);
          }, nodebuffer: function(e2) {
            return r.newBufferFrom(e2);
          } }, c.arraybuffer = { string: function(e2) {
            return s(new Uint8Array(e2));
          }, array: function(e2) {
            return f(new Uint8Array(e2), new Array(e2.byteLength));
          }, arraybuffer: n, uint8array: function(e2) {
            return new Uint8Array(e2);
          }, nodebuffer: function(e2) {
            return r.newBufferFrom(new Uint8Array(e2));
          } }, c.uint8array = { string: s, array: function(e2) {
            return f(e2, new Array(e2.length));
          }, arraybuffer: function(e2) {
            return e2.buffer;
          }, uint8array: n, nodebuffer: function(e2) {
            return r.newBufferFrom(e2);
          } }, c.nodebuffer = { string: s, array: function(e2) {
            return f(e2, new Array(e2.length));
          }, arraybuffer: function(e2) {
            return c.nodebuffer.uint8array(e2).buffer;
          }, uint8array: function(e2) {
            return f(e2, new Uint8Array(e2.length));
          }, nodebuffer: n }, a.transformTo = function(e2, t2) {
            if (t2 = t2 || "", !e2)
              return t2;
            a.checkSupport(e2);
            var r2 = a.getTypeOf(t2);
            return c[r2][e2](t2);
          }, a.resolve = function(e2) {
            for (var t2 = e2.split("/"), r2 = [], n2 = 0; n2 < t2.length; n2++) {
              var i2 = t2[n2];
              "." === i2 || "" === i2 && 0 !== n2 && n2 !== t2.length - 1 || (".." === i2 ? r2.pop() : r2.push(i2));
            }
            return r2.join("/");
          }, a.getTypeOf = function(e2) {
            return "string" == typeof e2 ? "string" : "[object Array]" === Object.prototype.toString.call(e2) ? "array" : o.nodebuffer && r.isBuffer(e2) ? "nodebuffer" : o.uint8array && e2 instanceof Uint8Array ? "uint8array" : o.arraybuffer && e2 instanceof ArrayBuffer ? "arraybuffer" : void 0;
          }, a.checkSupport = function(e2) {
            if (!o[e2.toLowerCase()])
              throw new Error(e2 + " is not supported by this platform");
          }, a.MAX_VALUE_16BITS = 65535, a.MAX_VALUE_32BITS = -1, a.pretty = function(e2) {
            var t2, r2, n2 = "";
            for (r2 = 0; r2 < (e2 || "").length; r2++)
              n2 += "\\x" + ((t2 = e2.charCodeAt(r2)) < 16 ? "0" : "") + t2.toString(16).toUpperCase();
            return n2;
          }, a.delay = function(e2, t2, r2) {
            setImmediate(function() {
              e2.apply(r2 || null, t2 || []);
            });
          }, a.inherits = function(e2, t2) {
            function r2() {
            }
            r2.prototype = t2.prototype, e2.prototype = new r2();
          }, a.extend = function() {
            var e2, t2, r2 = {};
            for (e2 = 0; e2 < arguments.length; e2++)
              for (t2 in arguments[e2])
                Object.prototype.hasOwnProperty.call(arguments[e2], t2) && void 0 === r2[t2] && (r2[t2] = arguments[e2][t2]);
            return r2;
          }, a.prepareContent = function(r2, e2, n2, i2, s2) {
            return u.Promise.resolve(e2).then(function(n3) {
              return o.blob && (n3 instanceof Blob || -1 !== ["[object File]", "[object Blob]"].indexOf(Object.prototype.toString.call(n3))) && "undefined" != typeof FileReader ? new u.Promise(function(t2, r3) {
                var e3 = new FileReader();
                e3.onload = function(e4) {
                  t2(e4.target.result);
                }, e3.onerror = function(e4) {
                  r3(e4.target.error);
                }, e3.readAsArrayBuffer(n3);
              }) : n3;
            }).then(function(e3) {
              var t2 = a.getTypeOf(e3);
              return t2 ? ("arraybuffer" === t2 ? e3 = a.transformTo("uint8array", e3) : "string" === t2 && (s2 ? e3 = h.decode(e3) : n2 && true !== i2 && (e3 = function(e4) {
                return l(e4, o.uint8array ? new Uint8Array(e4.length) : new Array(e4.length));
              }(e3))), e3) : u.Promise.reject(new Error("Can't read the data of '" + r2 + "'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"));
            });
          };
        }, { "./base64": 1, "./external": 6, "./nodejsUtils": 14, "./support": 30, setimmediate: 54 }], 33: [function(e, t, r) {
          "use strict";
          var n = e("./reader/readerFor"), i = e("./utils"), s = e("./signature"), a = e("./zipEntry"), o = e("./support");
          function h(e2) {
            this.files = [], this.loadOptions = e2;
          }
          h.prototype = { checkSignature: function(e2) {
            if (!this.reader.readAndCheckSignature(e2)) {
              this.reader.index -= 4;
              var t2 = this.reader.readString(4);
              throw new Error("Corrupted zip or bug: unexpected signature (" + i.pretty(t2) + ", expected " + i.pretty(e2) + ")");
            }
          }, isSignature: function(e2, t2) {
            var r2 = this.reader.index;
            this.reader.setIndex(e2);
            var n2 = this.reader.readString(4) === t2;
            return this.reader.setIndex(r2), n2;
          }, readBlockEndOfCentral: function() {
            this.diskNumber = this.reader.readInt(2), this.diskWithCentralDirStart = this.reader.readInt(2), this.centralDirRecordsOnThisDisk = this.reader.readInt(2), this.centralDirRecords = this.reader.readInt(2), this.centralDirSize = this.reader.readInt(4), this.centralDirOffset = this.reader.readInt(4), this.zipCommentLength = this.reader.readInt(2);
            var e2 = this.reader.readData(this.zipCommentLength), t2 = o.uint8array ? "uint8array" : "array", r2 = i.transformTo(t2, e2);
            this.zipComment = this.loadOptions.decodeFileName(r2);
          }, readBlockZip64EndOfCentral: function() {
            this.zip64EndOfCentralSize = this.reader.readInt(8), this.reader.skip(4), this.diskNumber = this.reader.readInt(4), this.diskWithCentralDirStart = this.reader.readInt(4), this.centralDirRecordsOnThisDisk = this.reader.readInt(8), this.centralDirRecords = this.reader.readInt(8), this.centralDirSize = this.reader.readInt(8), this.centralDirOffset = this.reader.readInt(8), this.zip64ExtensibleData = {};
            for (var e2, t2, r2, n2 = this.zip64EndOfCentralSize - 44; 0 < n2; )
              e2 = this.reader.readInt(2), t2 = this.reader.readInt(4), r2 = this.reader.readData(t2), this.zip64ExtensibleData[e2] = { id: e2, length: t2, value: r2 };
          }, readBlockZip64EndOfCentralLocator: function() {
            if (this.diskWithZip64CentralDirStart = this.reader.readInt(4), this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8), this.disksCount = this.reader.readInt(4), 1 < this.disksCount)
              throw new Error("Multi-volumes zip are not supported");
          }, readLocalFiles: function() {
            var e2, t2;
            for (e2 = 0; e2 < this.files.length; e2++)
              t2 = this.files[e2], this.reader.setIndex(t2.localHeaderOffset), this.checkSignature(s.LOCAL_FILE_HEADER), t2.readLocalPart(this.reader), t2.handleUTF8(), t2.processAttributes();
          }, readCentralDir: function() {
            var e2;
            for (this.reader.setIndex(this.centralDirOffset); this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER); )
              (e2 = new a({ zip64: this.zip64 }, this.loadOptions)).readCentralPart(this.reader), this.files.push(e2);
            if (this.centralDirRecords !== this.files.length && 0 !== this.centralDirRecords && 0 === this.files.length)
              throw new Error("Corrupted zip or bug: expected " + this.centralDirRecords + " records in central dir, got " + this.files.length);
          }, readEndOfCentral: function() {
            var e2 = this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);
            if (e2 < 0)
              throw !this.isSignature(0, s.LOCAL_FILE_HEADER) ? new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html") : new Error("Corrupted zip: can't find end of central directory");
            this.reader.setIndex(e2);
            var t2 = e2;
            if (this.checkSignature(s.CENTRAL_DIRECTORY_END), this.readBlockEndOfCentral(), this.diskNumber === i.MAX_VALUE_16BITS || this.diskWithCentralDirStart === i.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === i.MAX_VALUE_16BITS || this.centralDirRecords === i.MAX_VALUE_16BITS || this.centralDirSize === i.MAX_VALUE_32BITS || this.centralDirOffset === i.MAX_VALUE_32BITS) {
              if (this.zip64 = true, (e2 = this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR)) < 0)
                throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");
              if (this.reader.setIndex(e2), this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR), this.readBlockZip64EndOfCentralLocator(), !this.isSignature(this.relativeOffsetEndOfZip64CentralDir, s.ZIP64_CENTRAL_DIRECTORY_END) && (this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END), this.relativeOffsetEndOfZip64CentralDir < 0))
                throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");
              this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir), this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END), this.readBlockZip64EndOfCentral();
            }
            var r2 = this.centralDirOffset + this.centralDirSize;
            this.zip64 && (r2 += 20, r2 += 12 + this.zip64EndOfCentralSize);
            var n2 = t2 - r2;
            if (0 < n2)
              this.isSignature(t2, s.CENTRAL_FILE_HEADER) || (this.reader.zero = n2);
            else if (n2 < 0)
              throw new Error("Corrupted zip: missing " + Math.abs(n2) + " bytes.");
          }, prepareReader: function(e2) {
            this.reader = n(e2);
          }, load: function(e2) {
            this.prepareReader(e2), this.readEndOfCentral(), this.readCentralDir(), this.readLocalFiles();
          } }, t.exports = h;
        }, { "./reader/readerFor": 22, "./signature": 23, "./support": 30, "./utils": 32, "./zipEntry": 34 }], 34: [function(e, t, r) {
          "use strict";
          var n = e("./reader/readerFor"), s = e("./utils"), i = e("./compressedObject"), a = e("./crc32"), o = e("./utf8"), h = e("./compressions"), u = e("./support");
          function l(e2, t2) {
            this.options = e2, this.loadOptions = t2;
          }
          l.prototype = { isEncrypted: function() {
            return 1 == (1 & this.bitFlag);
          }, useUTF8: function() {
            return 2048 == (2048 & this.bitFlag);
          }, readLocalPart: function(e2) {
            var t2, r2;
            if (e2.skip(22), this.fileNameLength = e2.readInt(2), r2 = e2.readInt(2), this.fileName = e2.readData(this.fileNameLength), e2.skip(r2), -1 === this.compressedSize || -1 === this.uncompressedSize)
              throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");
            if (null === (t2 = function(e3) {
              for (var t3 in h)
                if (Object.prototype.hasOwnProperty.call(h, t3) && h[t3].magic === e3)
                  return h[t3];
              return null;
            }(this.compressionMethod)))
              throw new Error("Corrupted zip : compression " + s.pretty(this.compressionMethod) + " unknown (inner file : " + s.transformTo("string", this.fileName) + ")");
            this.decompressed = new i(this.compressedSize, this.uncompressedSize, this.crc32, t2, e2.readData(this.compressedSize));
          }, readCentralPart: function(e2) {
            this.versionMadeBy = e2.readInt(2), e2.skip(2), this.bitFlag = e2.readInt(2), this.compressionMethod = e2.readString(2), this.date = e2.readDate(), this.crc32 = e2.readInt(4), this.compressedSize = e2.readInt(4), this.uncompressedSize = e2.readInt(4);
            var t2 = e2.readInt(2);
            if (this.extraFieldsLength = e2.readInt(2), this.fileCommentLength = e2.readInt(2), this.diskNumberStart = e2.readInt(2), this.internalFileAttributes = e2.readInt(2), this.externalFileAttributes = e2.readInt(4), this.localHeaderOffset = e2.readInt(4), this.isEncrypted())
              throw new Error("Encrypted zip are not supported");
            e2.skip(t2), this.readExtraFields(e2), this.parseZIP64ExtraField(e2), this.fileComment = e2.readData(this.fileCommentLength);
          }, processAttributes: function() {
            this.unixPermissions = null, this.dosPermissions = null;
            var e2 = this.versionMadeBy >> 8;
            this.dir = !!(16 & this.externalFileAttributes), 0 == e2 && (this.dosPermissions = 63 & this.externalFileAttributes), 3 == e2 && (this.unixPermissions = this.externalFileAttributes >> 16 & 65535), this.dir || "/" !== this.fileNameStr.slice(-1) || (this.dir = true);
          }, parseZIP64ExtraField: function() {
            if (this.extraFields[1]) {
              var e2 = n(this.extraFields[1].value);
              this.uncompressedSize === s.MAX_VALUE_32BITS && (this.uncompressedSize = e2.readInt(8)), this.compressedSize === s.MAX_VALUE_32BITS && (this.compressedSize = e2.readInt(8)), this.localHeaderOffset === s.MAX_VALUE_32BITS && (this.localHeaderOffset = e2.readInt(8)), this.diskNumberStart === s.MAX_VALUE_32BITS && (this.diskNumberStart = e2.readInt(4));
            }
          }, readExtraFields: function(e2) {
            var t2, r2, n2, i2 = e2.index + this.extraFieldsLength;
            for (this.extraFields || (this.extraFields = {}); e2.index + 4 < i2; )
              t2 = e2.readInt(2), r2 = e2.readInt(2), n2 = e2.readData(r2), this.extraFields[t2] = { id: t2, length: r2, value: n2 };
            e2.setIndex(i2);
          }, handleUTF8: function() {
            var e2 = u.uint8array ? "uint8array" : "array";
            if (this.useUTF8())
              this.fileNameStr = o.utf8decode(this.fileName), this.fileCommentStr = o.utf8decode(this.fileComment);
            else {
              var t2 = this.findExtraFieldUnicodePath();
              if (null !== t2)
                this.fileNameStr = t2;
              else {
                var r2 = s.transformTo(e2, this.fileName);
                this.fileNameStr = this.loadOptions.decodeFileName(r2);
              }
              var n2 = this.findExtraFieldUnicodeComment();
              if (null !== n2)
                this.fileCommentStr = n2;
              else {
                var i2 = s.transformTo(e2, this.fileComment);
                this.fileCommentStr = this.loadOptions.decodeFileName(i2);
              }
            }
          }, findExtraFieldUnicodePath: function() {
            var e2 = this.extraFields[28789];
            if (e2) {
              var t2 = n(e2.value);
              return 1 !== t2.readInt(1) ? null : a(this.fileName) !== t2.readInt(4) ? null : o.utf8decode(t2.readData(e2.length - 5));
            }
            return null;
          }, findExtraFieldUnicodeComment: function() {
            var e2 = this.extraFields[25461];
            if (e2) {
              var t2 = n(e2.value);
              return 1 !== t2.readInt(1) ? null : a(this.fileComment) !== t2.readInt(4) ? null : o.utf8decode(t2.readData(e2.length - 5));
            }
            return null;
          } }, t.exports = l;
        }, { "./compressedObject": 2, "./compressions": 3, "./crc32": 4, "./reader/readerFor": 22, "./support": 30, "./utf8": 31, "./utils": 32 }], 35: [function(e, t, r) {
          "use strict";
          function n(e2, t2, r2) {
            this.name = e2, this.dir = r2.dir, this.date = r2.date, this.comment = r2.comment, this.unixPermissions = r2.unixPermissions, this.dosPermissions = r2.dosPermissions, this._data = t2, this._dataBinary = r2.binary, this.options = { compression: r2.compression, compressionOptions: r2.compressionOptions };
          }
          var s = e("./stream/StreamHelper"), i = e("./stream/DataWorker"), a = e("./utf8"), o = e("./compressedObject"), h = e("./stream/GenericWorker");
          n.prototype = { internalStream: function(e2) {
            var t2 = null, r2 = "string";
            try {
              if (!e2)
                throw new Error("No output type specified.");
              var n2 = "string" === (r2 = e2.toLowerCase()) || "text" === r2;
              "binarystring" !== r2 && "text" !== r2 || (r2 = "string"), t2 = this._decompressWorker();
              var i2 = !this._dataBinary;
              i2 && !n2 && (t2 = t2.pipe(new a.Utf8EncodeWorker())), !i2 && n2 && (t2 = t2.pipe(new a.Utf8DecodeWorker()));
            } catch (e3) {
              (t2 = new h("error")).error(e3);
            }
            return new s(t2, r2, "");
          }, async: function(e2, t2) {
            return this.internalStream(e2).accumulate(t2);
          }, nodeStream: function(e2, t2) {
            return this.internalStream(e2 || "nodebuffer").toNodejsStream(t2);
          }, _compressWorker: function(e2, t2) {
            if (this._data instanceof o && this._data.compression.magic === e2.magic)
              return this._data.getCompressedWorker();
            var r2 = this._decompressWorker();
            return this._dataBinary || (r2 = r2.pipe(new a.Utf8EncodeWorker())), o.createWorkerFrom(r2, e2, t2);
          }, _decompressWorker: function() {
            return this._data instanceof o ? this._data.getContentWorker() : this._data instanceof h ? this._data : new i(this._data);
          } };
          for (var u = ["asText", "asBinary", "asNodeBuffer", "asUint8Array", "asArrayBuffer"], l = function() {
            throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
          }, f = 0; f < u.length; f++)
            n.prototype[u[f]] = l;
          t.exports = n;
        }, { "./compressedObject": 2, "./stream/DataWorker": 27, "./stream/GenericWorker": 28, "./stream/StreamHelper": 29, "./utf8": 31 }], 36: [function(e, l, t) {
          (function(t2) {
            "use strict";
            var r, n, e2 = t2.MutationObserver || t2.WebKitMutationObserver;
            if (e2) {
              var i = 0, s = new e2(u), a = t2.document.createTextNode("");
              s.observe(a, { characterData: true }), r = function() {
                a.data = i = ++i % 2;
              };
            } else if (t2.setImmediate || void 0 === t2.MessageChannel)
              r = "document" in t2 && "onreadystatechange" in t2.document.createElement("script") ? function() {
                var e3 = t2.document.createElement("script");
                e3.onreadystatechange = function() {
                  u(), e3.onreadystatechange = null, e3.parentNode.removeChild(e3), e3 = null;
                }, t2.document.documentElement.appendChild(e3);
              } : function() {
                setTimeout(u, 0);
              };
            else {
              var o = new t2.MessageChannel();
              o.port1.onmessage = u, r = function() {
                o.port2.postMessage(0);
              };
            }
            var h = [];
            function u() {
              var e3, t3;
              n = true;
              for (var r2 = h.length; r2; ) {
                for (t3 = h, h = [], e3 = -1; ++e3 < r2; )
                  t3[e3]();
                r2 = h.length;
              }
              n = false;
            }
            l.exports = function(e3) {
              1 !== h.push(e3) || n || r();
            };
          }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
        }, {}], 37: [function(e, t, r) {
          "use strict";
          var i = e("immediate");
          function u() {
          }
          var l = {}, s = ["REJECTED"], a = ["FULFILLED"], n = ["PENDING"];
          function o(e2) {
            if ("function" != typeof e2)
              throw new TypeError("resolver must be a function");
            this.state = n, this.queue = [], this.outcome = void 0, e2 !== u && d(this, e2);
          }
          function h(e2, t2, r2) {
            this.promise = e2, "function" == typeof t2 && (this.onFulfilled = t2, this.callFulfilled = this.otherCallFulfilled), "function" == typeof r2 && (this.onRejected = r2, this.callRejected = this.otherCallRejected);
          }
          function f(t2, r2, n2) {
            i(function() {
              var e2;
              try {
                e2 = r2(n2);
              } catch (e3) {
                return l.reject(t2, e3);
              }
              e2 === t2 ? l.reject(t2, new TypeError("Cannot resolve promise with itself")) : l.resolve(t2, e2);
            });
          }
          function c(e2) {
            var t2 = e2 && e2.then;
            if (e2 && ("object" == typeof e2 || "function" == typeof e2) && "function" == typeof t2)
              return function() {
                t2.apply(e2, arguments);
              };
          }
          function d(t2, e2) {
            var r2 = false;
            function n2(e3) {
              r2 || (r2 = true, l.reject(t2, e3));
            }
            function i2(e3) {
              r2 || (r2 = true, l.resolve(t2, e3));
            }
            var s2 = p(function() {
              e2(i2, n2);
            });
            "error" === s2.status && n2(s2.value);
          }
          function p(e2, t2) {
            var r2 = {};
            try {
              r2.value = e2(t2), r2.status = "success";
            } catch (e3) {
              r2.status = "error", r2.value = e3;
            }
            return r2;
          }
          (t.exports = o).prototype.finally = function(t2) {
            if ("function" != typeof t2)
              return this;
            var r2 = this.constructor;
            return this.then(function(e2) {
              return r2.resolve(t2()).then(function() {
                return e2;
              });
            }, function(e2) {
              return r2.resolve(t2()).then(function() {
                throw e2;
              });
            });
          }, o.prototype.catch = function(e2) {
            return this.then(null, e2);
          }, o.prototype.then = function(e2, t2) {
            if ("function" != typeof e2 && this.state === a || "function" != typeof t2 && this.state === s)
              return this;
            var r2 = new this.constructor(u);
            this.state !== n ? f(r2, this.state === a ? e2 : t2, this.outcome) : this.queue.push(new h(r2, e2, t2));
            return r2;
          }, h.prototype.callFulfilled = function(e2) {
            l.resolve(this.promise, e2);
          }, h.prototype.otherCallFulfilled = function(e2) {
            f(this.promise, this.onFulfilled, e2);
          }, h.prototype.callRejected = function(e2) {
            l.reject(this.promise, e2);
          }, h.prototype.otherCallRejected = function(e2) {
            f(this.promise, this.onRejected, e2);
          }, l.resolve = function(e2, t2) {
            var r2 = p(c, t2);
            if ("error" === r2.status)
              return l.reject(e2, r2.value);
            var n2 = r2.value;
            if (n2)
              d(e2, n2);
            else {
              e2.state = a, e2.outcome = t2;
              for (var i2 = -1, s2 = e2.queue.length; ++i2 < s2; )
                e2.queue[i2].callFulfilled(t2);
            }
            return e2;
          }, l.reject = function(e2, t2) {
            e2.state = s, e2.outcome = t2;
            for (var r2 = -1, n2 = e2.queue.length; ++r2 < n2; )
              e2.queue[r2].callRejected(t2);
            return e2;
          }, o.resolve = function(e2) {
            if (e2 instanceof this)
              return e2;
            return l.resolve(new this(u), e2);
          }, o.reject = function(e2) {
            var t2 = new this(u);
            return l.reject(t2, e2);
          }, o.all = function(e2) {
            var r2 = this;
            if ("[object Array]" !== Object.prototype.toString.call(e2))
              return this.reject(new TypeError("must be an array"));
            var n2 = e2.length, i2 = false;
            if (!n2)
              return this.resolve([]);
            var s2 = new Array(n2), a2 = 0, t2 = -1, o2 = new this(u);
            for (; ++t2 < n2; )
              h2(e2[t2], t2);
            return o2;
            function h2(e3, t3) {
              r2.resolve(e3).then(function(e4) {
                s2[t3] = e4, ++a2 !== n2 || i2 || (i2 = true, l.resolve(o2, s2));
              }, function(e4) {
                i2 || (i2 = true, l.reject(o2, e4));
              });
            }
          }, o.race = function(e2) {
            var t2 = this;
            if ("[object Array]" !== Object.prototype.toString.call(e2))
              return this.reject(new TypeError("must be an array"));
            var r2 = e2.length, n2 = false;
            if (!r2)
              return this.resolve([]);
            var i2 = -1, s2 = new this(u);
            for (; ++i2 < r2; )
              a2 = e2[i2], t2.resolve(a2).then(function(e3) {
                n2 || (n2 = true, l.resolve(s2, e3));
              }, function(e3) {
                n2 || (n2 = true, l.reject(s2, e3));
              });
            var a2;
            return s2;
          };
        }, { immediate: 36 }], 38: [function(e, t, r) {
          "use strict";
          var n = {};
          (0, e("./lib/utils/common").assign)(n, e("./lib/deflate"), e("./lib/inflate"), e("./lib/zlib/constants")), t.exports = n;
        }, { "./lib/deflate": 39, "./lib/inflate": 40, "./lib/utils/common": 41, "./lib/zlib/constants": 44 }], 39: [function(e, t, r) {
          "use strict";
          var a = e("./zlib/deflate"), o = e("./utils/common"), h = e("./utils/strings"), i = e("./zlib/messages"), s = e("./zlib/zstream"), u = Object.prototype.toString, l = 0, f = -1, c = 0, d = 8;
          function p(e2) {
            if (!(this instanceof p))
              return new p(e2);
            this.options = o.assign({ level: f, method: d, chunkSize: 16384, windowBits: 15, memLevel: 8, strategy: c, to: "" }, e2 || {});
            var t2 = this.options;
            t2.raw && 0 < t2.windowBits ? t2.windowBits = -t2.windowBits : t2.gzip && 0 < t2.windowBits && t2.windowBits < 16 && (t2.windowBits += 16), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new s(), this.strm.avail_out = 0;
            var r2 = a.deflateInit2(this.strm, t2.level, t2.method, t2.windowBits, t2.memLevel, t2.strategy);
            if (r2 !== l)
              throw new Error(i[r2]);
            if (t2.header && a.deflateSetHeader(this.strm, t2.header), t2.dictionary) {
              var n2;
              if (n2 = "string" == typeof t2.dictionary ? h.string2buf(t2.dictionary) : "[object ArrayBuffer]" === u.call(t2.dictionary) ? new Uint8Array(t2.dictionary) : t2.dictionary, (r2 = a.deflateSetDictionary(this.strm, n2)) !== l)
                throw new Error(i[r2]);
              this._dict_set = true;
            }
          }
          function n(e2, t2) {
            var r2 = new p(t2);
            if (r2.push(e2, true), r2.err)
              throw r2.msg || i[r2.err];
            return r2.result;
          }
          p.prototype.push = function(e2, t2) {
            var r2, n2, i2 = this.strm, s2 = this.options.chunkSize;
            if (this.ended)
              return false;
            n2 = t2 === ~~t2 ? t2 : true === t2 ? 4 : 0, "string" == typeof e2 ? i2.input = h.string2buf(e2) : "[object ArrayBuffer]" === u.call(e2) ? i2.input = new Uint8Array(e2) : i2.input = e2, i2.next_in = 0, i2.avail_in = i2.input.length;
            do {
              if (0 === i2.avail_out && (i2.output = new o.Buf8(s2), i2.next_out = 0, i2.avail_out = s2), 1 !== (r2 = a.deflate(i2, n2)) && r2 !== l)
                return this.onEnd(r2), !(this.ended = true);
              0 !== i2.avail_out && (0 !== i2.avail_in || 4 !== n2 && 2 !== n2) || ("string" === this.options.to ? this.onData(h.buf2binstring(o.shrinkBuf(i2.output, i2.next_out))) : this.onData(o.shrinkBuf(i2.output, i2.next_out)));
            } while ((0 < i2.avail_in || 0 === i2.avail_out) && 1 !== r2);
            return 4 === n2 ? (r2 = a.deflateEnd(this.strm), this.onEnd(r2), this.ended = true, r2 === l) : 2 !== n2 || (this.onEnd(l), !(i2.avail_out = 0));
          }, p.prototype.onData = function(e2) {
            this.chunks.push(e2);
          }, p.prototype.onEnd = function(e2) {
            e2 === l && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = o.flattenChunks(this.chunks)), this.chunks = [], this.err = e2, this.msg = this.strm.msg;
          }, r.Deflate = p, r.deflate = n, r.deflateRaw = function(e2, t2) {
            return (t2 = t2 || {}).raw = true, n(e2, t2);
          }, r.gzip = function(e2, t2) {
            return (t2 = t2 || {}).gzip = true, n(e2, t2);
          };
        }, { "./utils/common": 41, "./utils/strings": 42, "./zlib/deflate": 46, "./zlib/messages": 51, "./zlib/zstream": 53 }], 40: [function(e, t, r) {
          "use strict";
          var c = e("./zlib/inflate"), d = e("./utils/common"), p = e("./utils/strings"), m = e("./zlib/constants"), n = e("./zlib/messages"), i = e("./zlib/zstream"), s = e("./zlib/gzheader"), _ = Object.prototype.toString;
          function a(e2) {
            if (!(this instanceof a))
              return new a(e2);
            this.options = d.assign({ chunkSize: 16384, windowBits: 0, to: "" }, e2 || {});
            var t2 = this.options;
            t2.raw && 0 <= t2.windowBits && t2.windowBits < 16 && (t2.windowBits = -t2.windowBits, 0 === t2.windowBits && (t2.windowBits = -15)), !(0 <= t2.windowBits && t2.windowBits < 16) || e2 && e2.windowBits || (t2.windowBits += 32), 15 < t2.windowBits && t2.windowBits < 48 && 0 == (15 & t2.windowBits) && (t2.windowBits |= 15), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new i(), this.strm.avail_out = 0;
            var r2 = c.inflateInit2(this.strm, t2.windowBits);
            if (r2 !== m.Z_OK)
              throw new Error(n[r2]);
            this.header = new s(), c.inflateGetHeader(this.strm, this.header);
          }
          function o(e2, t2) {
            var r2 = new a(t2);
            if (r2.push(e2, true), r2.err)
              throw r2.msg || n[r2.err];
            return r2.result;
          }
          a.prototype.push = function(e2, t2) {
            var r2, n2, i2, s2, a2, o2, h = this.strm, u = this.options.chunkSize, l = this.options.dictionary, f = false;
            if (this.ended)
              return false;
            n2 = t2 === ~~t2 ? t2 : true === t2 ? m.Z_FINISH : m.Z_NO_FLUSH, "string" == typeof e2 ? h.input = p.binstring2buf(e2) : "[object ArrayBuffer]" === _.call(e2) ? h.input = new Uint8Array(e2) : h.input = e2, h.next_in = 0, h.avail_in = h.input.length;
            do {
              if (0 === h.avail_out && (h.output = new d.Buf8(u), h.next_out = 0, h.avail_out = u), (r2 = c.inflate(h, m.Z_NO_FLUSH)) === m.Z_NEED_DICT && l && (o2 = "string" == typeof l ? p.string2buf(l) : "[object ArrayBuffer]" === _.call(l) ? new Uint8Array(l) : l, r2 = c.inflateSetDictionary(this.strm, o2)), r2 === m.Z_BUF_ERROR && true === f && (r2 = m.Z_OK, f = false), r2 !== m.Z_STREAM_END && r2 !== m.Z_OK)
                return this.onEnd(r2), !(this.ended = true);
              h.next_out && (0 !== h.avail_out && r2 !== m.Z_STREAM_END && (0 !== h.avail_in || n2 !== m.Z_FINISH && n2 !== m.Z_SYNC_FLUSH) || ("string" === this.options.to ? (i2 = p.utf8border(h.output, h.next_out), s2 = h.next_out - i2, a2 = p.buf2string(h.output, i2), h.next_out = s2, h.avail_out = u - s2, s2 && d.arraySet(h.output, h.output, i2, s2, 0), this.onData(a2)) : this.onData(d.shrinkBuf(h.output, h.next_out)))), 0 === h.avail_in && 0 === h.avail_out && (f = true);
            } while ((0 < h.avail_in || 0 === h.avail_out) && r2 !== m.Z_STREAM_END);
            return r2 === m.Z_STREAM_END && (n2 = m.Z_FINISH), n2 === m.Z_FINISH ? (r2 = c.inflateEnd(this.strm), this.onEnd(r2), this.ended = true, r2 === m.Z_OK) : n2 !== m.Z_SYNC_FLUSH || (this.onEnd(m.Z_OK), !(h.avail_out = 0));
          }, a.prototype.onData = function(e2) {
            this.chunks.push(e2);
          }, a.prototype.onEnd = function(e2) {
            e2 === m.Z_OK && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = d.flattenChunks(this.chunks)), this.chunks = [], this.err = e2, this.msg = this.strm.msg;
          }, r.Inflate = a, r.inflate = o, r.inflateRaw = function(e2, t2) {
            return (t2 = t2 || {}).raw = true, o(e2, t2);
          }, r.ungzip = o;
        }, { "./utils/common": 41, "./utils/strings": 42, "./zlib/constants": 44, "./zlib/gzheader": 47, "./zlib/inflate": 49, "./zlib/messages": 51, "./zlib/zstream": 53 }], 41: [function(e, t, r) {
          "use strict";
          var n = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
          r.assign = function(e2) {
            for (var t2 = Array.prototype.slice.call(arguments, 1); t2.length; ) {
              var r2 = t2.shift();
              if (r2) {
                if ("object" != typeof r2)
                  throw new TypeError(r2 + "must be non-object");
                for (var n2 in r2)
                  r2.hasOwnProperty(n2) && (e2[n2] = r2[n2]);
              }
            }
            return e2;
          }, r.shrinkBuf = function(e2, t2) {
            return e2.length === t2 ? e2 : e2.subarray ? e2.subarray(0, t2) : (e2.length = t2, e2);
          };
          var i = { arraySet: function(e2, t2, r2, n2, i2) {
            if (t2.subarray && e2.subarray)
              e2.set(t2.subarray(r2, r2 + n2), i2);
            else
              for (var s2 = 0; s2 < n2; s2++)
                e2[i2 + s2] = t2[r2 + s2];
          }, flattenChunks: function(e2) {
            var t2, r2, n2, i2, s2, a;
            for (t2 = n2 = 0, r2 = e2.length; t2 < r2; t2++)
              n2 += e2[t2].length;
            for (a = new Uint8Array(n2), t2 = i2 = 0, r2 = e2.length; t2 < r2; t2++)
              s2 = e2[t2], a.set(s2, i2), i2 += s2.length;
            return a;
          } }, s = { arraySet: function(e2, t2, r2, n2, i2) {
            for (var s2 = 0; s2 < n2; s2++)
              e2[i2 + s2] = t2[r2 + s2];
          }, flattenChunks: function(e2) {
            return [].concat.apply([], e2);
          } };
          r.setTyped = function(e2) {
            e2 ? (r.Buf8 = Uint8Array, r.Buf16 = Uint16Array, r.Buf32 = Int32Array, r.assign(r, i)) : (r.Buf8 = Array, r.Buf16 = Array, r.Buf32 = Array, r.assign(r, s));
          }, r.setTyped(n);
        }, {}], 42: [function(e, t, r) {
          "use strict";
          var h = e("./common"), i = true, s = true;
          try {
            String.fromCharCode.apply(null, [0]);
          } catch (e2) {
            i = false;
          }
          try {
            String.fromCharCode.apply(null, new Uint8Array(1));
          } catch (e2) {
            s = false;
          }
          for (var u = new h.Buf8(256), n = 0; n < 256; n++)
            u[n] = 252 <= n ? 6 : 248 <= n ? 5 : 240 <= n ? 4 : 224 <= n ? 3 : 192 <= n ? 2 : 1;
          function l(e2, t2) {
            if (t2 < 65537 && (e2.subarray && s || !e2.subarray && i))
              return String.fromCharCode.apply(null, h.shrinkBuf(e2, t2));
            for (var r2 = "", n2 = 0; n2 < t2; n2++)
              r2 += String.fromCharCode(e2[n2]);
            return r2;
          }
          u[254] = u[254] = 1, r.string2buf = function(e2) {
            var t2, r2, n2, i2, s2, a = e2.length, o = 0;
            for (i2 = 0; i2 < a; i2++)
              55296 == (64512 & (r2 = e2.charCodeAt(i2))) && i2 + 1 < a && 56320 == (64512 & (n2 = e2.charCodeAt(i2 + 1))) && (r2 = 65536 + (r2 - 55296 << 10) + (n2 - 56320), i2++), o += r2 < 128 ? 1 : r2 < 2048 ? 2 : r2 < 65536 ? 3 : 4;
            for (t2 = new h.Buf8(o), i2 = s2 = 0; s2 < o; i2++)
              55296 == (64512 & (r2 = e2.charCodeAt(i2))) && i2 + 1 < a && 56320 == (64512 & (n2 = e2.charCodeAt(i2 + 1))) && (r2 = 65536 + (r2 - 55296 << 10) + (n2 - 56320), i2++), r2 < 128 ? t2[s2++] = r2 : (r2 < 2048 ? t2[s2++] = 192 | r2 >>> 6 : (r2 < 65536 ? t2[s2++] = 224 | r2 >>> 12 : (t2[s2++] = 240 | r2 >>> 18, t2[s2++] = 128 | r2 >>> 12 & 63), t2[s2++] = 128 | r2 >>> 6 & 63), t2[s2++] = 128 | 63 & r2);
            return t2;
          }, r.buf2binstring = function(e2) {
            return l(e2, e2.length);
          }, r.binstring2buf = function(e2) {
            for (var t2 = new h.Buf8(e2.length), r2 = 0, n2 = t2.length; r2 < n2; r2++)
              t2[r2] = e2.charCodeAt(r2);
            return t2;
          }, r.buf2string = function(e2, t2) {
            var r2, n2, i2, s2, a = t2 || e2.length, o = new Array(2 * a);
            for (r2 = n2 = 0; r2 < a; )
              if ((i2 = e2[r2++]) < 128)
                o[n2++] = i2;
              else if (4 < (s2 = u[i2]))
                o[n2++] = 65533, r2 += s2 - 1;
              else {
                for (i2 &= 2 === s2 ? 31 : 3 === s2 ? 15 : 7; 1 < s2 && r2 < a; )
                  i2 = i2 << 6 | 63 & e2[r2++], s2--;
                1 < s2 ? o[n2++] = 65533 : i2 < 65536 ? o[n2++] = i2 : (i2 -= 65536, o[n2++] = 55296 | i2 >> 10 & 1023, o[n2++] = 56320 | 1023 & i2);
              }
            return l(o, n2);
          }, r.utf8border = function(e2, t2) {
            var r2;
            for ((t2 = t2 || e2.length) > e2.length && (t2 = e2.length), r2 = t2 - 1; 0 <= r2 && 128 == (192 & e2[r2]); )
              r2--;
            return r2 < 0 ? t2 : 0 === r2 ? t2 : r2 + u[e2[r2]] > t2 ? r2 : t2;
          };
        }, { "./common": 41 }], 43: [function(e, t, r) {
          "use strict";
          t.exports = function(e2, t2, r2, n) {
            for (var i = 65535 & e2 | 0, s = e2 >>> 16 & 65535 | 0, a = 0; 0 !== r2; ) {
              for (r2 -= a = 2e3 < r2 ? 2e3 : r2; s = s + (i = i + t2[n++] | 0) | 0, --a; )
                ;
              i %= 65521, s %= 65521;
            }
            return i | s << 16 | 0;
          };
        }, {}], 44: [function(e, t, r) {
          "use strict";
          t.exports = { Z_NO_FLUSH: 0, Z_PARTIAL_FLUSH: 1, Z_SYNC_FLUSH: 2, Z_FULL_FLUSH: 3, Z_FINISH: 4, Z_BLOCK: 5, Z_TREES: 6, Z_OK: 0, Z_STREAM_END: 1, Z_NEED_DICT: 2, Z_ERRNO: -1, Z_STREAM_ERROR: -2, Z_DATA_ERROR: -3, Z_BUF_ERROR: -5, Z_NO_COMPRESSION: 0, Z_BEST_SPEED: 1, Z_BEST_COMPRESSION: 9, Z_DEFAULT_COMPRESSION: -1, Z_FILTERED: 1, Z_HUFFMAN_ONLY: 2, Z_RLE: 3, Z_FIXED: 4, Z_DEFAULT_STRATEGY: 0, Z_BINARY: 0, Z_TEXT: 1, Z_UNKNOWN: 2, Z_DEFLATED: 8 };
        }, {}], 45: [function(e, t, r) {
          "use strict";
          var o = function() {
            for (var e2, t2 = [], r2 = 0; r2 < 256; r2++) {
              e2 = r2;
              for (var n = 0; n < 8; n++)
                e2 = 1 & e2 ? 3988292384 ^ e2 >>> 1 : e2 >>> 1;
              t2[r2] = e2;
            }
            return t2;
          }();
          t.exports = function(e2, t2, r2, n) {
            var i = o, s = n + r2;
            e2 ^= -1;
            for (var a = n; a < s; a++)
              e2 = e2 >>> 8 ^ i[255 & (e2 ^ t2[a])];
            return -1 ^ e2;
          };
        }, {}], 46: [function(e, t, r) {
          "use strict";
          var h, c = e("../utils/common"), u = e("./trees"), d = e("./adler32"), p = e("./crc32"), n = e("./messages"), l = 0, f = 4, m = 0, _ = -2, g = -1, b = 4, i = 2, v = 8, y = 9, s = 286, a = 30, o = 19, w = 2 * s + 1, k = 15, x = 3, S = 258, z2 = S + x + 1, C = 42, E = 113, A = 1, I = 2, O = 3, B = 4;
          function R(e2, t2) {
            return e2.msg = n[t2], t2;
          }
          function T(e2) {
            return (e2 << 1) - (4 < e2 ? 9 : 0);
          }
          function D(e2) {
            for (var t2 = e2.length; 0 <= --t2; )
              e2[t2] = 0;
          }
          function F(e2) {
            var t2 = e2.state, r2 = t2.pending;
            r2 > e2.avail_out && (r2 = e2.avail_out), 0 !== r2 && (c.arraySet(e2.output, t2.pending_buf, t2.pending_out, r2, e2.next_out), e2.next_out += r2, t2.pending_out += r2, e2.total_out += r2, e2.avail_out -= r2, t2.pending -= r2, 0 === t2.pending && (t2.pending_out = 0));
          }
          function N(e2, t2) {
            u._tr_flush_block(e2, 0 <= e2.block_start ? e2.block_start : -1, e2.strstart - e2.block_start, t2), e2.block_start = e2.strstart, F(e2.strm);
          }
          function U(e2, t2) {
            e2.pending_buf[e2.pending++] = t2;
          }
          function P(e2, t2) {
            e2.pending_buf[e2.pending++] = t2 >>> 8 & 255, e2.pending_buf[e2.pending++] = 255 & t2;
          }
          function L(e2, t2) {
            var r2, n2, i2 = e2.max_chain_length, s2 = e2.strstart, a2 = e2.prev_length, o2 = e2.nice_match, h2 = e2.strstart > e2.w_size - z2 ? e2.strstart - (e2.w_size - z2) : 0, u2 = e2.window, l2 = e2.w_mask, f2 = e2.prev, c2 = e2.strstart + S, d2 = u2[s2 + a2 - 1], p2 = u2[s2 + a2];
            e2.prev_length >= e2.good_match && (i2 >>= 2), o2 > e2.lookahead && (o2 = e2.lookahead);
            do {
              if (u2[(r2 = t2) + a2] === p2 && u2[r2 + a2 - 1] === d2 && u2[r2] === u2[s2] && u2[++r2] === u2[s2 + 1]) {
                s2 += 2, r2++;
                do {
                } while (u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && s2 < c2);
                if (n2 = S - (c2 - s2), s2 = c2 - S, a2 < n2) {
                  if (e2.match_start = t2, o2 <= (a2 = n2))
                    break;
                  d2 = u2[s2 + a2 - 1], p2 = u2[s2 + a2];
                }
              }
            } while ((t2 = f2[t2 & l2]) > h2 && 0 != --i2);
            return a2 <= e2.lookahead ? a2 : e2.lookahead;
          }
          function j(e2) {
            var t2, r2, n2, i2, s2, a2, o2, h2, u2, l2, f2 = e2.w_size;
            do {
              if (i2 = e2.window_size - e2.lookahead - e2.strstart, e2.strstart >= f2 + (f2 - z2)) {
                for (c.arraySet(e2.window, e2.window, f2, f2, 0), e2.match_start -= f2, e2.strstart -= f2, e2.block_start -= f2, t2 = r2 = e2.hash_size; n2 = e2.head[--t2], e2.head[t2] = f2 <= n2 ? n2 - f2 : 0, --r2; )
                  ;
                for (t2 = r2 = f2; n2 = e2.prev[--t2], e2.prev[t2] = f2 <= n2 ? n2 - f2 : 0, --r2; )
                  ;
                i2 += f2;
              }
              if (0 === e2.strm.avail_in)
                break;
              if (a2 = e2.strm, o2 = e2.window, h2 = e2.strstart + e2.lookahead, u2 = i2, l2 = void 0, l2 = a2.avail_in, u2 < l2 && (l2 = u2), r2 = 0 === l2 ? 0 : (a2.avail_in -= l2, c.arraySet(o2, a2.input, a2.next_in, l2, h2), 1 === a2.state.wrap ? a2.adler = d(a2.adler, o2, l2, h2) : 2 === a2.state.wrap && (a2.adler = p(a2.adler, o2, l2, h2)), a2.next_in += l2, a2.total_in += l2, l2), e2.lookahead += r2, e2.lookahead + e2.insert >= x)
                for (s2 = e2.strstart - e2.insert, e2.ins_h = e2.window[s2], e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[s2 + 1]) & e2.hash_mask; e2.insert && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[s2 + x - 1]) & e2.hash_mask, e2.prev[s2 & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = s2, s2++, e2.insert--, !(e2.lookahead + e2.insert < x)); )
                  ;
            } while (e2.lookahead < z2 && 0 !== e2.strm.avail_in);
          }
          function Z(e2, t2) {
            for (var r2, n2; ; ) {
              if (e2.lookahead < z2) {
                if (j(e2), e2.lookahead < z2 && t2 === l)
                  return A;
                if (0 === e2.lookahead)
                  break;
              }
              if (r2 = 0, e2.lookahead >= x && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), 0 !== r2 && e2.strstart - r2 <= e2.w_size - z2 && (e2.match_length = L(e2, r2)), e2.match_length >= x)
                if (n2 = u._tr_tally(e2, e2.strstart - e2.match_start, e2.match_length - x), e2.lookahead -= e2.match_length, e2.match_length <= e2.max_lazy_match && e2.lookahead >= x) {
                  for (e2.match_length--; e2.strstart++, e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart, 0 != --e2.match_length; )
                    ;
                  e2.strstart++;
                } else
                  e2.strstart += e2.match_length, e2.match_length = 0, e2.ins_h = e2.window[e2.strstart], e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + 1]) & e2.hash_mask;
              else
                n2 = u._tr_tally(e2, 0, e2.window[e2.strstart]), e2.lookahead--, e2.strstart++;
              if (n2 && (N(e2, false), 0 === e2.strm.avail_out))
                return A;
            }
            return e2.insert = e2.strstart < x - 1 ? e2.strstart : x - 1, t2 === f ? (N(e2, true), 0 === e2.strm.avail_out ? O : B) : e2.last_lit && (N(e2, false), 0 === e2.strm.avail_out) ? A : I;
          }
          function W(e2, t2) {
            for (var r2, n2, i2; ; ) {
              if (e2.lookahead < z2) {
                if (j(e2), e2.lookahead < z2 && t2 === l)
                  return A;
                if (0 === e2.lookahead)
                  break;
              }
              if (r2 = 0, e2.lookahead >= x && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), e2.prev_length = e2.match_length, e2.prev_match = e2.match_start, e2.match_length = x - 1, 0 !== r2 && e2.prev_length < e2.max_lazy_match && e2.strstart - r2 <= e2.w_size - z2 && (e2.match_length = L(e2, r2), e2.match_length <= 5 && (1 === e2.strategy || e2.match_length === x && 4096 < e2.strstart - e2.match_start) && (e2.match_length = x - 1)), e2.prev_length >= x && e2.match_length <= e2.prev_length) {
                for (i2 = e2.strstart + e2.lookahead - x, n2 = u._tr_tally(e2, e2.strstart - 1 - e2.prev_match, e2.prev_length - x), e2.lookahead -= e2.prev_length - 1, e2.prev_length -= 2; ++e2.strstart <= i2 && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), 0 != --e2.prev_length; )
                  ;
                if (e2.match_available = 0, e2.match_length = x - 1, e2.strstart++, n2 && (N(e2, false), 0 === e2.strm.avail_out))
                  return A;
              } else if (e2.match_available) {
                if ((n2 = u._tr_tally(e2, 0, e2.window[e2.strstart - 1])) && N(e2, false), e2.strstart++, e2.lookahead--, 0 === e2.strm.avail_out)
                  return A;
              } else
                e2.match_available = 1, e2.strstart++, e2.lookahead--;
            }
            return e2.match_available && (n2 = u._tr_tally(e2, 0, e2.window[e2.strstart - 1]), e2.match_available = 0), e2.insert = e2.strstart < x - 1 ? e2.strstart : x - 1, t2 === f ? (N(e2, true), 0 === e2.strm.avail_out ? O : B) : e2.last_lit && (N(e2, false), 0 === e2.strm.avail_out) ? A : I;
          }
          function M(e2, t2, r2, n2, i2) {
            this.good_length = e2, this.max_lazy = t2, this.nice_length = r2, this.max_chain = n2, this.func = i2;
          }
          function H() {
            this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = v, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new c.Buf16(2 * w), this.dyn_dtree = new c.Buf16(2 * (2 * a + 1)), this.bl_tree = new c.Buf16(2 * (2 * o + 1)), D(this.dyn_ltree), D(this.dyn_dtree), D(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new c.Buf16(k + 1), this.heap = new c.Buf16(2 * s + 1), D(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new c.Buf16(2 * s + 1), D(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
          }
          function G(e2) {
            var t2;
            return e2 && e2.state ? (e2.total_in = e2.total_out = 0, e2.data_type = i, (t2 = e2.state).pending = 0, t2.pending_out = 0, t2.wrap < 0 && (t2.wrap = -t2.wrap), t2.status = t2.wrap ? C : E, e2.adler = 2 === t2.wrap ? 0 : 1, t2.last_flush = l, u._tr_init(t2), m) : R(e2, _);
          }
          function K(e2) {
            var t2 = G(e2);
            return t2 === m && function(e3) {
              e3.window_size = 2 * e3.w_size, D(e3.head), e3.max_lazy_match = h[e3.level].max_lazy, e3.good_match = h[e3.level].good_length, e3.nice_match = h[e3.level].nice_length, e3.max_chain_length = h[e3.level].max_chain, e3.strstart = 0, e3.block_start = 0, e3.lookahead = 0, e3.insert = 0, e3.match_length = e3.prev_length = x - 1, e3.match_available = 0, e3.ins_h = 0;
            }(e2.state), t2;
          }
          function Y(e2, t2, r2, n2, i2, s2) {
            if (!e2)
              return _;
            var a2 = 1;
            if (t2 === g && (t2 = 6), n2 < 0 ? (a2 = 0, n2 = -n2) : 15 < n2 && (a2 = 2, n2 -= 16), i2 < 1 || y < i2 || r2 !== v || n2 < 8 || 15 < n2 || t2 < 0 || 9 < t2 || s2 < 0 || b < s2)
              return R(e2, _);
            8 === n2 && (n2 = 9);
            var o2 = new H();
            return (e2.state = o2).strm = e2, o2.wrap = a2, o2.gzhead = null, o2.w_bits = n2, o2.w_size = 1 << o2.w_bits, o2.w_mask = o2.w_size - 1, o2.hash_bits = i2 + 7, o2.hash_size = 1 << o2.hash_bits, o2.hash_mask = o2.hash_size - 1, o2.hash_shift = ~~((o2.hash_bits + x - 1) / x), o2.window = new c.Buf8(2 * o2.w_size), o2.head = new c.Buf16(o2.hash_size), o2.prev = new c.Buf16(o2.w_size), o2.lit_bufsize = 1 << i2 + 6, o2.pending_buf_size = 4 * o2.lit_bufsize, o2.pending_buf = new c.Buf8(o2.pending_buf_size), o2.d_buf = 1 * o2.lit_bufsize, o2.l_buf = 3 * o2.lit_bufsize, o2.level = t2, o2.strategy = s2, o2.method = r2, K(e2);
          }
          h = [new M(0, 0, 0, 0, function(e2, t2) {
            var r2 = 65535;
            for (r2 > e2.pending_buf_size - 5 && (r2 = e2.pending_buf_size - 5); ; ) {
              if (e2.lookahead <= 1) {
                if (j(e2), 0 === e2.lookahead && t2 === l)
                  return A;
                if (0 === e2.lookahead)
                  break;
              }
              e2.strstart += e2.lookahead, e2.lookahead = 0;
              var n2 = e2.block_start + r2;
              if ((0 === e2.strstart || e2.strstart >= n2) && (e2.lookahead = e2.strstart - n2, e2.strstart = n2, N(e2, false), 0 === e2.strm.avail_out))
                return A;
              if (e2.strstart - e2.block_start >= e2.w_size - z2 && (N(e2, false), 0 === e2.strm.avail_out))
                return A;
            }
            return e2.insert = 0, t2 === f ? (N(e2, true), 0 === e2.strm.avail_out ? O : B) : (e2.strstart > e2.block_start && (N(e2, false), e2.strm.avail_out), A);
          }), new M(4, 4, 8, 4, Z), new M(4, 5, 16, 8, Z), new M(4, 6, 32, 32, Z), new M(4, 4, 16, 16, W), new M(8, 16, 32, 32, W), new M(8, 16, 128, 128, W), new M(8, 32, 128, 256, W), new M(32, 128, 258, 1024, W), new M(32, 258, 258, 4096, W)], r.deflateInit = function(e2, t2) {
            return Y(e2, t2, v, 15, 8, 0);
          }, r.deflateInit2 = Y, r.deflateReset = K, r.deflateResetKeep = G, r.deflateSetHeader = function(e2, t2) {
            return e2 && e2.state ? 2 !== e2.state.wrap ? _ : (e2.state.gzhead = t2, m) : _;
          }, r.deflate = function(e2, t2) {
            var r2, n2, i2, s2;
            if (!e2 || !e2.state || 5 < t2 || t2 < 0)
              return e2 ? R(e2, _) : _;
            if (n2 = e2.state, !e2.output || !e2.input && 0 !== e2.avail_in || 666 === n2.status && t2 !== f)
              return R(e2, 0 === e2.avail_out ? -5 : _);
            if (n2.strm = e2, r2 = n2.last_flush, n2.last_flush = t2, n2.status === C)
              if (2 === n2.wrap)
                e2.adler = 0, U(n2, 31), U(n2, 139), U(n2, 8), n2.gzhead ? (U(n2, (n2.gzhead.text ? 1 : 0) + (n2.gzhead.hcrc ? 2 : 0) + (n2.gzhead.extra ? 4 : 0) + (n2.gzhead.name ? 8 : 0) + (n2.gzhead.comment ? 16 : 0)), U(n2, 255 & n2.gzhead.time), U(n2, n2.gzhead.time >> 8 & 255), U(n2, n2.gzhead.time >> 16 & 255), U(n2, n2.gzhead.time >> 24 & 255), U(n2, 9 === n2.level ? 2 : 2 <= n2.strategy || n2.level < 2 ? 4 : 0), U(n2, 255 & n2.gzhead.os), n2.gzhead.extra && n2.gzhead.extra.length && (U(n2, 255 & n2.gzhead.extra.length), U(n2, n2.gzhead.extra.length >> 8 & 255)), n2.gzhead.hcrc && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending, 0)), n2.gzindex = 0, n2.status = 69) : (U(n2, 0), U(n2, 0), U(n2, 0), U(n2, 0), U(n2, 0), U(n2, 9 === n2.level ? 2 : 2 <= n2.strategy || n2.level < 2 ? 4 : 0), U(n2, 3), n2.status = E);
              else {
                var a2 = v + (n2.w_bits - 8 << 4) << 8;
                a2 |= (2 <= n2.strategy || n2.level < 2 ? 0 : n2.level < 6 ? 1 : 6 === n2.level ? 2 : 3) << 6, 0 !== n2.strstart && (a2 |= 32), a2 += 31 - a2 % 31, n2.status = E, P(n2, a2), 0 !== n2.strstart && (P(n2, e2.adler >>> 16), P(n2, 65535 & e2.adler)), e2.adler = 1;
              }
            if (69 === n2.status)
              if (n2.gzhead.extra) {
                for (i2 = n2.pending; n2.gzindex < (65535 & n2.gzhead.extra.length) && (n2.pending !== n2.pending_buf_size || (n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), F(e2), i2 = n2.pending, n2.pending !== n2.pending_buf_size)); )
                  U(n2, 255 & n2.gzhead.extra[n2.gzindex]), n2.gzindex++;
                n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), n2.gzindex === n2.gzhead.extra.length && (n2.gzindex = 0, n2.status = 73);
              } else
                n2.status = 73;
            if (73 === n2.status)
              if (n2.gzhead.name) {
                i2 = n2.pending;
                do {
                  if (n2.pending === n2.pending_buf_size && (n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), F(e2), i2 = n2.pending, n2.pending === n2.pending_buf_size)) {
                    s2 = 1;
                    break;
                  }
                  s2 = n2.gzindex < n2.gzhead.name.length ? 255 & n2.gzhead.name.charCodeAt(n2.gzindex++) : 0, U(n2, s2);
                } while (0 !== s2);
                n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), 0 === s2 && (n2.gzindex = 0, n2.status = 91);
              } else
                n2.status = 91;
            if (91 === n2.status)
              if (n2.gzhead.comment) {
                i2 = n2.pending;
                do {
                  if (n2.pending === n2.pending_buf_size && (n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), F(e2), i2 = n2.pending, n2.pending === n2.pending_buf_size)) {
                    s2 = 1;
                    break;
                  }
                  s2 = n2.gzindex < n2.gzhead.comment.length ? 255 & n2.gzhead.comment.charCodeAt(n2.gzindex++) : 0, U(n2, s2);
                } while (0 !== s2);
                n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), 0 === s2 && (n2.status = 103);
              } else
                n2.status = 103;
            if (103 === n2.status && (n2.gzhead.hcrc ? (n2.pending + 2 > n2.pending_buf_size && F(e2), n2.pending + 2 <= n2.pending_buf_size && (U(n2, 255 & e2.adler), U(n2, e2.adler >> 8 & 255), e2.adler = 0, n2.status = E)) : n2.status = E), 0 !== n2.pending) {
              if (F(e2), 0 === e2.avail_out)
                return n2.last_flush = -1, m;
            } else if (0 === e2.avail_in && T(t2) <= T(r2) && t2 !== f)
              return R(e2, -5);
            if (666 === n2.status && 0 !== e2.avail_in)
              return R(e2, -5);
            if (0 !== e2.avail_in || 0 !== n2.lookahead || t2 !== l && 666 !== n2.status) {
              var o2 = 2 === n2.strategy ? function(e3, t3) {
                for (var r3; ; ) {
                  if (0 === e3.lookahead && (j(e3), 0 === e3.lookahead)) {
                    if (t3 === l)
                      return A;
                    break;
                  }
                  if (e3.match_length = 0, r3 = u._tr_tally(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++, r3 && (N(e3, false), 0 === e3.strm.avail_out))
                    return A;
                }
                return e3.insert = 0, t3 === f ? (N(e3, true), 0 === e3.strm.avail_out ? O : B) : e3.last_lit && (N(e3, false), 0 === e3.strm.avail_out) ? A : I;
              }(n2, t2) : 3 === n2.strategy ? function(e3, t3) {
                for (var r3, n3, i3, s3, a3 = e3.window; ; ) {
                  if (e3.lookahead <= S) {
                    if (j(e3), e3.lookahead <= S && t3 === l)
                      return A;
                    if (0 === e3.lookahead)
                      break;
                  }
                  if (e3.match_length = 0, e3.lookahead >= x && 0 < e3.strstart && (n3 = a3[i3 = e3.strstart - 1]) === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3]) {
                    s3 = e3.strstart + S;
                    do {
                    } while (n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && i3 < s3);
                    e3.match_length = S - (s3 - i3), e3.match_length > e3.lookahead && (e3.match_length = e3.lookahead);
                  }
                  if (e3.match_length >= x ? (r3 = u._tr_tally(e3, 1, e3.match_length - x), e3.lookahead -= e3.match_length, e3.strstart += e3.match_length, e3.match_length = 0) : (r3 = u._tr_tally(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++), r3 && (N(e3, false), 0 === e3.strm.avail_out))
                    return A;
                }
                return e3.insert = 0, t3 === f ? (N(e3, true), 0 === e3.strm.avail_out ? O : B) : e3.last_lit && (N(e3, false), 0 === e3.strm.avail_out) ? A : I;
              }(n2, t2) : h[n2.level].func(n2, t2);
              if (o2 !== O && o2 !== B || (n2.status = 666), o2 === A || o2 === O)
                return 0 === e2.avail_out && (n2.last_flush = -1), m;
              if (o2 === I && (1 === t2 ? u._tr_align(n2) : 5 !== t2 && (u._tr_stored_block(n2, 0, 0, false), 3 === t2 && (D(n2.head), 0 === n2.lookahead && (n2.strstart = 0, n2.block_start = 0, n2.insert = 0))), F(e2), 0 === e2.avail_out))
                return n2.last_flush = -1, m;
            }
            return t2 !== f ? m : n2.wrap <= 0 ? 1 : (2 === n2.wrap ? (U(n2, 255 & e2.adler), U(n2, e2.adler >> 8 & 255), U(n2, e2.adler >> 16 & 255), U(n2, e2.adler >> 24 & 255), U(n2, 255 & e2.total_in), U(n2, e2.total_in >> 8 & 255), U(n2, e2.total_in >> 16 & 255), U(n2, e2.total_in >> 24 & 255)) : (P(n2, e2.adler >>> 16), P(n2, 65535 & e2.adler)), F(e2), 0 < n2.wrap && (n2.wrap = -n2.wrap), 0 !== n2.pending ? m : 1);
          }, r.deflateEnd = function(e2) {
            var t2;
            return e2 && e2.state ? (t2 = e2.state.status) !== C && 69 !== t2 && 73 !== t2 && 91 !== t2 && 103 !== t2 && t2 !== E && 666 !== t2 ? R(e2, _) : (e2.state = null, t2 === E ? R(e2, -3) : m) : _;
          }, r.deflateSetDictionary = function(e2, t2) {
            var r2, n2, i2, s2, a2, o2, h2, u2, l2 = t2.length;
            if (!e2 || !e2.state)
              return _;
            if (2 === (s2 = (r2 = e2.state).wrap) || 1 === s2 && r2.status !== C || r2.lookahead)
              return _;
            for (1 === s2 && (e2.adler = d(e2.adler, t2, l2, 0)), r2.wrap = 0, l2 >= r2.w_size && (0 === s2 && (D(r2.head), r2.strstart = 0, r2.block_start = 0, r2.insert = 0), u2 = new c.Buf8(r2.w_size), c.arraySet(u2, t2, l2 - r2.w_size, r2.w_size, 0), t2 = u2, l2 = r2.w_size), a2 = e2.avail_in, o2 = e2.next_in, h2 = e2.input, e2.avail_in = l2, e2.next_in = 0, e2.input = t2, j(r2); r2.lookahead >= x; ) {
              for (n2 = r2.strstart, i2 = r2.lookahead - (x - 1); r2.ins_h = (r2.ins_h << r2.hash_shift ^ r2.window[n2 + x - 1]) & r2.hash_mask, r2.prev[n2 & r2.w_mask] = r2.head[r2.ins_h], r2.head[r2.ins_h] = n2, n2++, --i2; )
                ;
              r2.strstart = n2, r2.lookahead = x - 1, j(r2);
            }
            return r2.strstart += r2.lookahead, r2.block_start = r2.strstart, r2.insert = r2.lookahead, r2.lookahead = 0, r2.match_length = r2.prev_length = x - 1, r2.match_available = 0, e2.next_in = o2, e2.input = h2, e2.avail_in = a2, r2.wrap = s2, m;
          }, r.deflateInfo = "pako deflate (from Nodeca project)";
        }, { "../utils/common": 41, "./adler32": 43, "./crc32": 45, "./messages": 51, "./trees": 52 }], 47: [function(e, t, r) {
          "use strict";
          t.exports = function() {
            this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = false;
          };
        }, {}], 48: [function(e, t, r) {
          "use strict";
          t.exports = function(e2, t2) {
            var r2, n, i, s, a, o, h, u, l, f, c, d, p, m, _, g, b, v, y, w, k, x, S, z2, C;
            r2 = e2.state, n = e2.next_in, z2 = e2.input, i = n + (e2.avail_in - 5), s = e2.next_out, C = e2.output, a = s - (t2 - e2.avail_out), o = s + (e2.avail_out - 257), h = r2.dmax, u = r2.wsize, l = r2.whave, f = r2.wnext, c = r2.window, d = r2.hold, p = r2.bits, m = r2.lencode, _ = r2.distcode, g = (1 << r2.lenbits) - 1, b = (1 << r2.distbits) - 1;
            e:
              do {
                p < 15 && (d += z2[n++] << p, p += 8, d += z2[n++] << p, p += 8), v = m[d & g];
                t:
                  for (; ; ) {
                    if (d >>>= y = v >>> 24, p -= y, 0 === (y = v >>> 16 & 255))
                      C[s++] = 65535 & v;
                    else {
                      if (!(16 & y)) {
                        if (0 == (64 & y)) {
                          v = m[(65535 & v) + (d & (1 << y) - 1)];
                          continue t;
                        }
                        if (32 & y) {
                          r2.mode = 12;
                          break e;
                        }
                        e2.msg = "invalid literal/length code", r2.mode = 30;
                        break e;
                      }
                      w = 65535 & v, (y &= 15) && (p < y && (d += z2[n++] << p, p += 8), w += d & (1 << y) - 1, d >>>= y, p -= y), p < 15 && (d += z2[n++] << p, p += 8, d += z2[n++] << p, p += 8), v = _[d & b];
                      r:
                        for (; ; ) {
                          if (d >>>= y = v >>> 24, p -= y, !(16 & (y = v >>> 16 & 255))) {
                            if (0 == (64 & y)) {
                              v = _[(65535 & v) + (d & (1 << y) - 1)];
                              continue r;
                            }
                            e2.msg = "invalid distance code", r2.mode = 30;
                            break e;
                          }
                          if (k = 65535 & v, p < (y &= 15) && (d += z2[n++] << p, (p += 8) < y && (d += z2[n++] << p, p += 8)), h < (k += d & (1 << y) - 1)) {
                            e2.msg = "invalid distance too far back", r2.mode = 30;
                            break e;
                          }
                          if (d >>>= y, p -= y, (y = s - a) < k) {
                            if (l < (y = k - y) && r2.sane) {
                              e2.msg = "invalid distance too far back", r2.mode = 30;
                              break e;
                            }
                            if (S = c, (x = 0) === f) {
                              if (x += u - y, y < w) {
                                for (w -= y; C[s++] = c[x++], --y; )
                                  ;
                                x = s - k, S = C;
                              }
                            } else if (f < y) {
                              if (x += u + f - y, (y -= f) < w) {
                                for (w -= y; C[s++] = c[x++], --y; )
                                  ;
                                if (x = 0, f < w) {
                                  for (w -= y = f; C[s++] = c[x++], --y; )
                                    ;
                                  x = s - k, S = C;
                                }
                              }
                            } else if (x += f - y, y < w) {
                              for (w -= y; C[s++] = c[x++], --y; )
                                ;
                              x = s - k, S = C;
                            }
                            for (; 2 < w; )
                              C[s++] = S[x++], C[s++] = S[x++], C[s++] = S[x++], w -= 3;
                            w && (C[s++] = S[x++], 1 < w && (C[s++] = S[x++]));
                          } else {
                            for (x = s - k; C[s++] = C[x++], C[s++] = C[x++], C[s++] = C[x++], 2 < (w -= 3); )
                              ;
                            w && (C[s++] = C[x++], 1 < w && (C[s++] = C[x++]));
                          }
                          break;
                        }
                    }
                    break;
                  }
              } while (n < i && s < o);
            n -= w = p >> 3, d &= (1 << (p -= w << 3)) - 1, e2.next_in = n, e2.next_out = s, e2.avail_in = n < i ? i - n + 5 : 5 - (n - i), e2.avail_out = s < o ? o - s + 257 : 257 - (s - o), r2.hold = d, r2.bits = p;
          };
        }, {}], 49: [function(e, t, r) {
          "use strict";
          var I = e("../utils/common"), O = e("./adler32"), B = e("./crc32"), R = e("./inffast"), T = e("./inftrees"), D = 1, F = 2, N = 0, U = -2, P = 1, n = 852, i = 592;
          function L(e2) {
            return (e2 >>> 24 & 255) + (e2 >>> 8 & 65280) + ((65280 & e2) << 8) + ((255 & e2) << 24);
          }
          function s() {
            this.mode = 0, this.last = false, this.wrap = 0, this.havedict = false, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new I.Buf16(320), this.work = new I.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
          }
          function a(e2) {
            var t2;
            return e2 && e2.state ? (t2 = e2.state, e2.total_in = e2.total_out = t2.total = 0, e2.msg = "", t2.wrap && (e2.adler = 1 & t2.wrap), t2.mode = P, t2.last = 0, t2.havedict = 0, t2.dmax = 32768, t2.head = null, t2.hold = 0, t2.bits = 0, t2.lencode = t2.lendyn = new I.Buf32(n), t2.distcode = t2.distdyn = new I.Buf32(i), t2.sane = 1, t2.back = -1, N) : U;
          }
          function o(e2) {
            var t2;
            return e2 && e2.state ? ((t2 = e2.state).wsize = 0, t2.whave = 0, t2.wnext = 0, a(e2)) : U;
          }
          function h(e2, t2) {
            var r2, n2;
            return e2 && e2.state ? (n2 = e2.state, t2 < 0 ? (r2 = 0, t2 = -t2) : (r2 = 1 + (t2 >> 4), t2 < 48 && (t2 &= 15)), t2 && (t2 < 8 || 15 < t2) ? U : (null !== n2.window && n2.wbits !== t2 && (n2.window = null), n2.wrap = r2, n2.wbits = t2, o(e2))) : U;
          }
          function u(e2, t2) {
            var r2, n2;
            return e2 ? (n2 = new s(), (e2.state = n2).window = null, (r2 = h(e2, t2)) !== N && (e2.state = null), r2) : U;
          }
          var l, f, c = true;
          function j(e2) {
            if (c) {
              var t2;
              for (l = new I.Buf32(512), f = new I.Buf32(32), t2 = 0; t2 < 144; )
                e2.lens[t2++] = 8;
              for (; t2 < 256; )
                e2.lens[t2++] = 9;
              for (; t2 < 280; )
                e2.lens[t2++] = 7;
              for (; t2 < 288; )
                e2.lens[t2++] = 8;
              for (T(D, e2.lens, 0, 288, l, 0, e2.work, { bits: 9 }), t2 = 0; t2 < 32; )
                e2.lens[t2++] = 5;
              T(F, e2.lens, 0, 32, f, 0, e2.work, { bits: 5 }), c = false;
            }
            e2.lencode = l, e2.lenbits = 9, e2.distcode = f, e2.distbits = 5;
          }
          function Z(e2, t2, r2, n2) {
            var i2, s2 = e2.state;
            return null === s2.window && (s2.wsize = 1 << s2.wbits, s2.wnext = 0, s2.whave = 0, s2.window = new I.Buf8(s2.wsize)), n2 >= s2.wsize ? (I.arraySet(s2.window, t2, r2 - s2.wsize, s2.wsize, 0), s2.wnext = 0, s2.whave = s2.wsize) : (n2 < (i2 = s2.wsize - s2.wnext) && (i2 = n2), I.arraySet(s2.window, t2, r2 - n2, i2, s2.wnext), (n2 -= i2) ? (I.arraySet(s2.window, t2, r2 - n2, n2, 0), s2.wnext = n2, s2.whave = s2.wsize) : (s2.wnext += i2, s2.wnext === s2.wsize && (s2.wnext = 0), s2.whave < s2.wsize && (s2.whave += i2))), 0;
          }
          r.inflateReset = o, r.inflateReset2 = h, r.inflateResetKeep = a, r.inflateInit = function(e2) {
            return u(e2, 15);
          }, r.inflateInit2 = u, r.inflate = function(e2, t2) {
            var r2, n2, i2, s2, a2, o2, h2, u2, l2, f2, c2, d, p, m, _, g, b, v, y, w, k, x, S, z2, C = 0, E = new I.Buf8(4), A = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
            if (!e2 || !e2.state || !e2.output || !e2.input && 0 !== e2.avail_in)
              return U;
            12 === (r2 = e2.state).mode && (r2.mode = 13), a2 = e2.next_out, i2 = e2.output, h2 = e2.avail_out, s2 = e2.next_in, n2 = e2.input, o2 = e2.avail_in, u2 = r2.hold, l2 = r2.bits, f2 = o2, c2 = h2, x = N;
            e:
              for (; ; )
                switch (r2.mode) {
                  case P:
                    if (0 === r2.wrap) {
                      r2.mode = 13;
                      break;
                    }
                    for (; l2 < 16; ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    if (2 & r2.wrap && 35615 === u2) {
                      E[r2.check = 0] = 255 & u2, E[1] = u2 >>> 8 & 255, r2.check = B(r2.check, E, 2, 0), l2 = u2 = 0, r2.mode = 2;
                      break;
                    }
                    if (r2.flags = 0, r2.head && (r2.head.done = false), !(1 & r2.wrap) || (((255 & u2) << 8) + (u2 >> 8)) % 31) {
                      e2.msg = "incorrect header check", r2.mode = 30;
                      break;
                    }
                    if (8 != (15 & u2)) {
                      e2.msg = "unknown compression method", r2.mode = 30;
                      break;
                    }
                    if (l2 -= 4, k = 8 + (15 & (u2 >>>= 4)), 0 === r2.wbits)
                      r2.wbits = k;
                    else if (k > r2.wbits) {
                      e2.msg = "invalid window size", r2.mode = 30;
                      break;
                    }
                    r2.dmax = 1 << k, e2.adler = r2.check = 1, r2.mode = 512 & u2 ? 10 : 12, l2 = u2 = 0;
                    break;
                  case 2:
                    for (; l2 < 16; ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    if (r2.flags = u2, 8 != (255 & r2.flags)) {
                      e2.msg = "unknown compression method", r2.mode = 30;
                      break;
                    }
                    if (57344 & r2.flags) {
                      e2.msg = "unknown header flags set", r2.mode = 30;
                      break;
                    }
                    r2.head && (r2.head.text = u2 >> 8 & 1), 512 & r2.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, r2.check = B(r2.check, E, 2, 0)), l2 = u2 = 0, r2.mode = 3;
                  case 3:
                    for (; l2 < 32; ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    r2.head && (r2.head.time = u2), 512 & r2.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, E[2] = u2 >>> 16 & 255, E[3] = u2 >>> 24 & 255, r2.check = B(r2.check, E, 4, 0)), l2 = u2 = 0, r2.mode = 4;
                  case 4:
                    for (; l2 < 16; ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    r2.head && (r2.head.xflags = 255 & u2, r2.head.os = u2 >> 8), 512 & r2.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, r2.check = B(r2.check, E, 2, 0)), l2 = u2 = 0, r2.mode = 5;
                  case 5:
                    if (1024 & r2.flags) {
                      for (; l2 < 16; ) {
                        if (0 === o2)
                          break e;
                        o2--, u2 += n2[s2++] << l2, l2 += 8;
                      }
                      r2.length = u2, r2.head && (r2.head.extra_len = u2), 512 & r2.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, r2.check = B(r2.check, E, 2, 0)), l2 = u2 = 0;
                    } else
                      r2.head && (r2.head.extra = null);
                    r2.mode = 6;
                  case 6:
                    if (1024 & r2.flags && (o2 < (d = r2.length) && (d = o2), d && (r2.head && (k = r2.head.extra_len - r2.length, r2.head.extra || (r2.head.extra = new Array(r2.head.extra_len)), I.arraySet(r2.head.extra, n2, s2, d, k)), 512 & r2.flags && (r2.check = B(r2.check, n2, d, s2)), o2 -= d, s2 += d, r2.length -= d), r2.length))
                      break e;
                    r2.length = 0, r2.mode = 7;
                  case 7:
                    if (2048 & r2.flags) {
                      if (0 === o2)
                        break e;
                      for (d = 0; k = n2[s2 + d++], r2.head && k && r2.length < 65536 && (r2.head.name += String.fromCharCode(k)), k && d < o2; )
                        ;
                      if (512 & r2.flags && (r2.check = B(r2.check, n2, d, s2)), o2 -= d, s2 += d, k)
                        break e;
                    } else
                      r2.head && (r2.head.name = null);
                    r2.length = 0, r2.mode = 8;
                  case 8:
                    if (4096 & r2.flags) {
                      if (0 === o2)
                        break e;
                      for (d = 0; k = n2[s2 + d++], r2.head && k && r2.length < 65536 && (r2.head.comment += String.fromCharCode(k)), k && d < o2; )
                        ;
                      if (512 & r2.flags && (r2.check = B(r2.check, n2, d, s2)), o2 -= d, s2 += d, k)
                        break e;
                    } else
                      r2.head && (r2.head.comment = null);
                    r2.mode = 9;
                  case 9:
                    if (512 & r2.flags) {
                      for (; l2 < 16; ) {
                        if (0 === o2)
                          break e;
                        o2--, u2 += n2[s2++] << l2, l2 += 8;
                      }
                      if (u2 !== (65535 & r2.check)) {
                        e2.msg = "header crc mismatch", r2.mode = 30;
                        break;
                      }
                      l2 = u2 = 0;
                    }
                    r2.head && (r2.head.hcrc = r2.flags >> 9 & 1, r2.head.done = true), e2.adler = r2.check = 0, r2.mode = 12;
                    break;
                  case 10:
                    for (; l2 < 32; ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    e2.adler = r2.check = L(u2), l2 = u2 = 0, r2.mode = 11;
                  case 11:
                    if (0 === r2.havedict)
                      return e2.next_out = a2, e2.avail_out = h2, e2.next_in = s2, e2.avail_in = o2, r2.hold = u2, r2.bits = l2, 2;
                    e2.adler = r2.check = 1, r2.mode = 12;
                  case 12:
                    if (5 === t2 || 6 === t2)
                      break e;
                  case 13:
                    if (r2.last) {
                      u2 >>>= 7 & l2, l2 -= 7 & l2, r2.mode = 27;
                      break;
                    }
                    for (; l2 < 3; ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    switch (r2.last = 1 & u2, l2 -= 1, 3 & (u2 >>>= 1)) {
                      case 0:
                        r2.mode = 14;
                        break;
                      case 1:
                        if (j(r2), r2.mode = 20, 6 !== t2)
                          break;
                        u2 >>>= 2, l2 -= 2;
                        break e;
                      case 2:
                        r2.mode = 17;
                        break;
                      case 3:
                        e2.msg = "invalid block type", r2.mode = 30;
                    }
                    u2 >>>= 2, l2 -= 2;
                    break;
                  case 14:
                    for (u2 >>>= 7 & l2, l2 -= 7 & l2; l2 < 32; ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    if ((65535 & u2) != (u2 >>> 16 ^ 65535)) {
                      e2.msg = "invalid stored block lengths", r2.mode = 30;
                      break;
                    }
                    if (r2.length = 65535 & u2, l2 = u2 = 0, r2.mode = 15, 6 === t2)
                      break e;
                  case 15:
                    r2.mode = 16;
                  case 16:
                    if (d = r2.length) {
                      if (o2 < d && (d = o2), h2 < d && (d = h2), 0 === d)
                        break e;
                      I.arraySet(i2, n2, s2, d, a2), o2 -= d, s2 += d, h2 -= d, a2 += d, r2.length -= d;
                      break;
                    }
                    r2.mode = 12;
                    break;
                  case 17:
                    for (; l2 < 14; ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    if (r2.nlen = 257 + (31 & u2), u2 >>>= 5, l2 -= 5, r2.ndist = 1 + (31 & u2), u2 >>>= 5, l2 -= 5, r2.ncode = 4 + (15 & u2), u2 >>>= 4, l2 -= 4, 286 < r2.nlen || 30 < r2.ndist) {
                      e2.msg = "too many length or distance symbols", r2.mode = 30;
                      break;
                    }
                    r2.have = 0, r2.mode = 18;
                  case 18:
                    for (; r2.have < r2.ncode; ) {
                      for (; l2 < 3; ) {
                        if (0 === o2)
                          break e;
                        o2--, u2 += n2[s2++] << l2, l2 += 8;
                      }
                      r2.lens[A[r2.have++]] = 7 & u2, u2 >>>= 3, l2 -= 3;
                    }
                    for (; r2.have < 19; )
                      r2.lens[A[r2.have++]] = 0;
                    if (r2.lencode = r2.lendyn, r2.lenbits = 7, S = { bits: r2.lenbits }, x = T(0, r2.lens, 0, 19, r2.lencode, 0, r2.work, S), r2.lenbits = S.bits, x) {
                      e2.msg = "invalid code lengths set", r2.mode = 30;
                      break;
                    }
                    r2.have = 0, r2.mode = 19;
                  case 19:
                    for (; r2.have < r2.nlen + r2.ndist; ) {
                      for (; g = (C = r2.lencode[u2 & (1 << r2.lenbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l2); ) {
                        if (0 === o2)
                          break e;
                        o2--, u2 += n2[s2++] << l2, l2 += 8;
                      }
                      if (b < 16)
                        u2 >>>= _, l2 -= _, r2.lens[r2.have++] = b;
                      else {
                        if (16 === b) {
                          for (z2 = _ + 2; l2 < z2; ) {
                            if (0 === o2)
                              break e;
                            o2--, u2 += n2[s2++] << l2, l2 += 8;
                          }
                          if (u2 >>>= _, l2 -= _, 0 === r2.have) {
                            e2.msg = "invalid bit length repeat", r2.mode = 30;
                            break;
                          }
                          k = r2.lens[r2.have - 1], d = 3 + (3 & u2), u2 >>>= 2, l2 -= 2;
                        } else if (17 === b) {
                          for (z2 = _ + 3; l2 < z2; ) {
                            if (0 === o2)
                              break e;
                            o2--, u2 += n2[s2++] << l2, l2 += 8;
                          }
                          l2 -= _, k = 0, d = 3 + (7 & (u2 >>>= _)), u2 >>>= 3, l2 -= 3;
                        } else {
                          for (z2 = _ + 7; l2 < z2; ) {
                            if (0 === o2)
                              break e;
                            o2--, u2 += n2[s2++] << l2, l2 += 8;
                          }
                          l2 -= _, k = 0, d = 11 + (127 & (u2 >>>= _)), u2 >>>= 7, l2 -= 7;
                        }
                        if (r2.have + d > r2.nlen + r2.ndist) {
                          e2.msg = "invalid bit length repeat", r2.mode = 30;
                          break;
                        }
                        for (; d--; )
                          r2.lens[r2.have++] = k;
                      }
                    }
                    if (30 === r2.mode)
                      break;
                    if (0 === r2.lens[256]) {
                      e2.msg = "invalid code -- missing end-of-block", r2.mode = 30;
                      break;
                    }
                    if (r2.lenbits = 9, S = { bits: r2.lenbits }, x = T(D, r2.lens, 0, r2.nlen, r2.lencode, 0, r2.work, S), r2.lenbits = S.bits, x) {
                      e2.msg = "invalid literal/lengths set", r2.mode = 30;
                      break;
                    }
                    if (r2.distbits = 6, r2.distcode = r2.distdyn, S = { bits: r2.distbits }, x = T(F, r2.lens, r2.nlen, r2.ndist, r2.distcode, 0, r2.work, S), r2.distbits = S.bits, x) {
                      e2.msg = "invalid distances set", r2.mode = 30;
                      break;
                    }
                    if (r2.mode = 20, 6 === t2)
                      break e;
                  case 20:
                    r2.mode = 21;
                  case 21:
                    if (6 <= o2 && 258 <= h2) {
                      e2.next_out = a2, e2.avail_out = h2, e2.next_in = s2, e2.avail_in = o2, r2.hold = u2, r2.bits = l2, R(e2, c2), a2 = e2.next_out, i2 = e2.output, h2 = e2.avail_out, s2 = e2.next_in, n2 = e2.input, o2 = e2.avail_in, u2 = r2.hold, l2 = r2.bits, 12 === r2.mode && (r2.back = -1);
                      break;
                    }
                    for (r2.back = 0; g = (C = r2.lencode[u2 & (1 << r2.lenbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l2); ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    if (g && 0 == (240 & g)) {
                      for (v = _, y = g, w = b; g = (C = r2.lencode[w + ((u2 & (1 << v + y) - 1) >> v)]) >>> 16 & 255, b = 65535 & C, !(v + (_ = C >>> 24) <= l2); ) {
                        if (0 === o2)
                          break e;
                        o2--, u2 += n2[s2++] << l2, l2 += 8;
                      }
                      u2 >>>= v, l2 -= v, r2.back += v;
                    }
                    if (u2 >>>= _, l2 -= _, r2.back += _, r2.length = b, 0 === g) {
                      r2.mode = 26;
                      break;
                    }
                    if (32 & g) {
                      r2.back = -1, r2.mode = 12;
                      break;
                    }
                    if (64 & g) {
                      e2.msg = "invalid literal/length code", r2.mode = 30;
                      break;
                    }
                    r2.extra = 15 & g, r2.mode = 22;
                  case 22:
                    if (r2.extra) {
                      for (z2 = r2.extra; l2 < z2; ) {
                        if (0 === o2)
                          break e;
                        o2--, u2 += n2[s2++] << l2, l2 += 8;
                      }
                      r2.length += u2 & (1 << r2.extra) - 1, u2 >>>= r2.extra, l2 -= r2.extra, r2.back += r2.extra;
                    }
                    r2.was = r2.length, r2.mode = 23;
                  case 23:
                    for (; g = (C = r2.distcode[u2 & (1 << r2.distbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l2); ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    if (0 == (240 & g)) {
                      for (v = _, y = g, w = b; g = (C = r2.distcode[w + ((u2 & (1 << v + y) - 1) >> v)]) >>> 16 & 255, b = 65535 & C, !(v + (_ = C >>> 24) <= l2); ) {
                        if (0 === o2)
                          break e;
                        o2--, u2 += n2[s2++] << l2, l2 += 8;
                      }
                      u2 >>>= v, l2 -= v, r2.back += v;
                    }
                    if (u2 >>>= _, l2 -= _, r2.back += _, 64 & g) {
                      e2.msg = "invalid distance code", r2.mode = 30;
                      break;
                    }
                    r2.offset = b, r2.extra = 15 & g, r2.mode = 24;
                  case 24:
                    if (r2.extra) {
                      for (z2 = r2.extra; l2 < z2; ) {
                        if (0 === o2)
                          break e;
                        o2--, u2 += n2[s2++] << l2, l2 += 8;
                      }
                      r2.offset += u2 & (1 << r2.extra) - 1, u2 >>>= r2.extra, l2 -= r2.extra, r2.back += r2.extra;
                    }
                    if (r2.offset > r2.dmax) {
                      e2.msg = "invalid distance too far back", r2.mode = 30;
                      break;
                    }
                    r2.mode = 25;
                  case 25:
                    if (0 === h2)
                      break e;
                    if (d = c2 - h2, r2.offset > d) {
                      if ((d = r2.offset - d) > r2.whave && r2.sane) {
                        e2.msg = "invalid distance too far back", r2.mode = 30;
                        break;
                      }
                      p = d > r2.wnext ? (d -= r2.wnext, r2.wsize - d) : r2.wnext - d, d > r2.length && (d = r2.length), m = r2.window;
                    } else
                      m = i2, p = a2 - r2.offset, d = r2.length;
                    for (h2 < d && (d = h2), h2 -= d, r2.length -= d; i2[a2++] = m[p++], --d; )
                      ;
                    0 === r2.length && (r2.mode = 21);
                    break;
                  case 26:
                    if (0 === h2)
                      break e;
                    i2[a2++] = r2.length, h2--, r2.mode = 21;
                    break;
                  case 27:
                    if (r2.wrap) {
                      for (; l2 < 32; ) {
                        if (0 === o2)
                          break e;
                        o2--, u2 |= n2[s2++] << l2, l2 += 8;
                      }
                      if (c2 -= h2, e2.total_out += c2, r2.total += c2, c2 && (e2.adler = r2.check = r2.flags ? B(r2.check, i2, c2, a2 - c2) : O(r2.check, i2, c2, a2 - c2)), c2 = h2, (r2.flags ? u2 : L(u2)) !== r2.check) {
                        e2.msg = "incorrect data check", r2.mode = 30;
                        break;
                      }
                      l2 = u2 = 0;
                    }
                    r2.mode = 28;
                  case 28:
                    if (r2.wrap && r2.flags) {
                      for (; l2 < 32; ) {
                        if (0 === o2)
                          break e;
                        o2--, u2 += n2[s2++] << l2, l2 += 8;
                      }
                      if (u2 !== (4294967295 & r2.total)) {
                        e2.msg = "incorrect length check", r2.mode = 30;
                        break;
                      }
                      l2 = u2 = 0;
                    }
                    r2.mode = 29;
                  case 29:
                    x = 1;
                    break e;
                  case 30:
                    x = -3;
                    break e;
                  case 31:
                    return -4;
                  case 32:
                  default:
                    return U;
                }
            return e2.next_out = a2, e2.avail_out = h2, e2.next_in = s2, e2.avail_in = o2, r2.hold = u2, r2.bits = l2, (r2.wsize || c2 !== e2.avail_out && r2.mode < 30 && (r2.mode < 27 || 4 !== t2)) && Z(e2, e2.output, e2.next_out, c2 - e2.avail_out) ? (r2.mode = 31, -4) : (f2 -= e2.avail_in, c2 -= e2.avail_out, e2.total_in += f2, e2.total_out += c2, r2.total += c2, r2.wrap && c2 && (e2.adler = r2.check = r2.flags ? B(r2.check, i2, c2, e2.next_out - c2) : O(r2.check, i2, c2, e2.next_out - c2)), e2.data_type = r2.bits + (r2.last ? 64 : 0) + (12 === r2.mode ? 128 : 0) + (20 === r2.mode || 15 === r2.mode ? 256 : 0), (0 == f2 && 0 === c2 || 4 === t2) && x === N && (x = -5), x);
          }, r.inflateEnd = function(e2) {
            if (!e2 || !e2.state)
              return U;
            var t2 = e2.state;
            return t2.window && (t2.window = null), e2.state = null, N;
          }, r.inflateGetHeader = function(e2, t2) {
            var r2;
            return e2 && e2.state ? 0 == (2 & (r2 = e2.state).wrap) ? U : ((r2.head = t2).done = false, N) : U;
          }, r.inflateSetDictionary = function(e2, t2) {
            var r2, n2 = t2.length;
            return e2 && e2.state ? 0 !== (r2 = e2.state).wrap && 11 !== r2.mode ? U : 11 === r2.mode && O(1, t2, n2, 0) !== r2.check ? -3 : Z(e2, t2, n2, n2) ? (r2.mode = 31, -4) : (r2.havedict = 1, N) : U;
          }, r.inflateInfo = "pako inflate (from Nodeca project)";
        }, { "../utils/common": 41, "./adler32": 43, "./crc32": 45, "./inffast": 48, "./inftrees": 50 }], 50: [function(e, t, r) {
          "use strict";
          var D = e("../utils/common"), F = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0], N = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78], U = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0], P = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
          t.exports = function(e2, t2, r2, n, i, s, a, o) {
            var h, u, l, f, c, d, p, m, _, g = o.bits, b = 0, v = 0, y = 0, w = 0, k = 0, x = 0, S = 0, z2 = 0, C = 0, E = 0, A = null, I = 0, O = new D.Buf16(16), B = new D.Buf16(16), R = null, T = 0;
            for (b = 0; b <= 15; b++)
              O[b] = 0;
            for (v = 0; v < n; v++)
              O[t2[r2 + v]]++;
            for (k = g, w = 15; 1 <= w && 0 === O[w]; w--)
              ;
            if (w < k && (k = w), 0 === w)
              return i[s++] = 20971520, i[s++] = 20971520, o.bits = 1, 0;
            for (y = 1; y < w && 0 === O[y]; y++)
              ;
            for (k < y && (k = y), b = z2 = 1; b <= 15; b++)
              if (z2 <<= 1, (z2 -= O[b]) < 0)
                return -1;
            if (0 < z2 && (0 === e2 || 1 !== w))
              return -1;
            for (B[1] = 0, b = 1; b < 15; b++)
              B[b + 1] = B[b] + O[b];
            for (v = 0; v < n; v++)
              0 !== t2[r2 + v] && (a[B[t2[r2 + v]]++] = v);
            if (d = 0 === e2 ? (A = R = a, 19) : 1 === e2 ? (A = F, I -= 257, R = N, T -= 257, 256) : (A = U, R = P, -1), b = y, c = s, S = v = E = 0, l = -1, f = (C = 1 << (x = k)) - 1, 1 === e2 && 852 < C || 2 === e2 && 592 < C)
              return 1;
            for (; ; ) {
              for (p = b - S, _ = a[v] < d ? (m = 0, a[v]) : a[v] > d ? (m = R[T + a[v]], A[I + a[v]]) : (m = 96, 0), h = 1 << b - S, y = u = 1 << x; i[c + (E >> S) + (u -= h)] = p << 24 | m << 16 | _ | 0, 0 !== u; )
                ;
              for (h = 1 << b - 1; E & h; )
                h >>= 1;
              if (0 !== h ? (E &= h - 1, E += h) : E = 0, v++, 0 == --O[b]) {
                if (b === w)
                  break;
                b = t2[r2 + a[v]];
              }
              if (k < b && (E & f) !== l) {
                for (0 === S && (S = k), c += y, z2 = 1 << (x = b - S); x + S < w && !((z2 -= O[x + S]) <= 0); )
                  x++, z2 <<= 1;
                if (C += 1 << x, 1 === e2 && 852 < C || 2 === e2 && 592 < C)
                  return 1;
                i[l = E & f] = k << 24 | x << 16 | c - s | 0;
              }
            }
            return 0 !== E && (i[c + E] = b - S << 24 | 64 << 16 | 0), o.bits = k, 0;
          };
        }, { "../utils/common": 41 }], 51: [function(e, t, r) {
          "use strict";
          t.exports = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" };
        }, {}], 52: [function(e, t, r) {
          "use strict";
          var i = e("../utils/common"), o = 0, h = 1;
          function n(e2) {
            for (var t2 = e2.length; 0 <= --t2; )
              e2[t2] = 0;
          }
          var s = 0, a = 29, u = 256, l = u + 1 + a, f = 30, c = 19, _ = 2 * l + 1, g = 15, d = 16, p = 7, m = 256, b = 16, v = 17, y = 18, w = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0], k = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13], x = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7], S = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], z2 = new Array(2 * (l + 2));
          n(z2);
          var C = new Array(2 * f);
          n(C);
          var E = new Array(512);
          n(E);
          var A = new Array(256);
          n(A);
          var I = new Array(a);
          n(I);
          var O, B, R, T = new Array(f);
          function D(e2, t2, r2, n2, i2) {
            this.static_tree = e2, this.extra_bits = t2, this.extra_base = r2, this.elems = n2, this.max_length = i2, this.has_stree = e2 && e2.length;
          }
          function F(e2, t2) {
            this.dyn_tree = e2, this.max_code = 0, this.stat_desc = t2;
          }
          function N(e2) {
            return e2 < 256 ? E[e2] : E[256 + (e2 >>> 7)];
          }
          function U(e2, t2) {
            e2.pending_buf[e2.pending++] = 255 & t2, e2.pending_buf[e2.pending++] = t2 >>> 8 & 255;
          }
          function P(e2, t2, r2) {
            e2.bi_valid > d - r2 ? (e2.bi_buf |= t2 << e2.bi_valid & 65535, U(e2, e2.bi_buf), e2.bi_buf = t2 >> d - e2.bi_valid, e2.bi_valid += r2 - d) : (e2.bi_buf |= t2 << e2.bi_valid & 65535, e2.bi_valid += r2);
          }
          function L(e2, t2, r2) {
            P(e2, r2[2 * t2], r2[2 * t2 + 1]);
          }
          function j(e2, t2) {
            for (var r2 = 0; r2 |= 1 & e2, e2 >>>= 1, r2 <<= 1, 0 < --t2; )
              ;
            return r2 >>> 1;
          }
          function Z(e2, t2, r2) {
            var n2, i2, s2 = new Array(g + 1), a2 = 0;
            for (n2 = 1; n2 <= g; n2++)
              s2[n2] = a2 = a2 + r2[n2 - 1] << 1;
            for (i2 = 0; i2 <= t2; i2++) {
              var o2 = e2[2 * i2 + 1];
              0 !== o2 && (e2[2 * i2] = j(s2[o2]++, o2));
            }
          }
          function W(e2) {
            var t2;
            for (t2 = 0; t2 < l; t2++)
              e2.dyn_ltree[2 * t2] = 0;
            for (t2 = 0; t2 < f; t2++)
              e2.dyn_dtree[2 * t2] = 0;
            for (t2 = 0; t2 < c; t2++)
              e2.bl_tree[2 * t2] = 0;
            e2.dyn_ltree[2 * m] = 1, e2.opt_len = e2.static_len = 0, e2.last_lit = e2.matches = 0;
          }
          function M(e2) {
            8 < e2.bi_valid ? U(e2, e2.bi_buf) : 0 < e2.bi_valid && (e2.pending_buf[e2.pending++] = e2.bi_buf), e2.bi_buf = 0, e2.bi_valid = 0;
          }
          function H(e2, t2, r2, n2) {
            var i2 = 2 * t2, s2 = 2 * r2;
            return e2[i2] < e2[s2] || e2[i2] === e2[s2] && n2[t2] <= n2[r2];
          }
          function G(e2, t2, r2) {
            for (var n2 = e2.heap[r2], i2 = r2 << 1; i2 <= e2.heap_len && (i2 < e2.heap_len && H(t2, e2.heap[i2 + 1], e2.heap[i2], e2.depth) && i2++, !H(t2, n2, e2.heap[i2], e2.depth)); )
              e2.heap[r2] = e2.heap[i2], r2 = i2, i2 <<= 1;
            e2.heap[r2] = n2;
          }
          function K(e2, t2, r2) {
            var n2, i2, s2, a2, o2 = 0;
            if (0 !== e2.last_lit)
              for (; n2 = e2.pending_buf[e2.d_buf + 2 * o2] << 8 | e2.pending_buf[e2.d_buf + 2 * o2 + 1], i2 = e2.pending_buf[e2.l_buf + o2], o2++, 0 === n2 ? L(e2, i2, t2) : (L(e2, (s2 = A[i2]) + u + 1, t2), 0 !== (a2 = w[s2]) && P(e2, i2 -= I[s2], a2), L(e2, s2 = N(--n2), r2), 0 !== (a2 = k[s2]) && P(e2, n2 -= T[s2], a2)), o2 < e2.last_lit; )
                ;
            L(e2, m, t2);
          }
          function Y(e2, t2) {
            var r2, n2, i2, s2 = t2.dyn_tree, a2 = t2.stat_desc.static_tree, o2 = t2.stat_desc.has_stree, h2 = t2.stat_desc.elems, u2 = -1;
            for (e2.heap_len = 0, e2.heap_max = _, r2 = 0; r2 < h2; r2++)
              0 !== s2[2 * r2] ? (e2.heap[++e2.heap_len] = u2 = r2, e2.depth[r2] = 0) : s2[2 * r2 + 1] = 0;
            for (; e2.heap_len < 2; )
              s2[2 * (i2 = e2.heap[++e2.heap_len] = u2 < 2 ? ++u2 : 0)] = 1, e2.depth[i2] = 0, e2.opt_len--, o2 && (e2.static_len -= a2[2 * i2 + 1]);
            for (t2.max_code = u2, r2 = e2.heap_len >> 1; 1 <= r2; r2--)
              G(e2, s2, r2);
            for (i2 = h2; r2 = e2.heap[1], e2.heap[1] = e2.heap[e2.heap_len--], G(e2, s2, 1), n2 = e2.heap[1], e2.heap[--e2.heap_max] = r2, e2.heap[--e2.heap_max] = n2, s2[2 * i2] = s2[2 * r2] + s2[2 * n2], e2.depth[i2] = (e2.depth[r2] >= e2.depth[n2] ? e2.depth[r2] : e2.depth[n2]) + 1, s2[2 * r2 + 1] = s2[2 * n2 + 1] = i2, e2.heap[1] = i2++, G(e2, s2, 1), 2 <= e2.heap_len; )
              ;
            e2.heap[--e2.heap_max] = e2.heap[1], function(e3, t3) {
              var r3, n3, i3, s3, a3, o3, h3 = t3.dyn_tree, u3 = t3.max_code, l2 = t3.stat_desc.static_tree, f2 = t3.stat_desc.has_stree, c2 = t3.stat_desc.extra_bits, d2 = t3.stat_desc.extra_base, p2 = t3.stat_desc.max_length, m2 = 0;
              for (s3 = 0; s3 <= g; s3++)
                e3.bl_count[s3] = 0;
              for (h3[2 * e3.heap[e3.heap_max] + 1] = 0, r3 = e3.heap_max + 1; r3 < _; r3++)
                p2 < (s3 = h3[2 * h3[2 * (n3 = e3.heap[r3]) + 1] + 1] + 1) && (s3 = p2, m2++), h3[2 * n3 + 1] = s3, u3 < n3 || (e3.bl_count[s3]++, a3 = 0, d2 <= n3 && (a3 = c2[n3 - d2]), o3 = h3[2 * n3], e3.opt_len += o3 * (s3 + a3), f2 && (e3.static_len += o3 * (l2[2 * n3 + 1] + a3)));
              if (0 !== m2) {
                do {
                  for (s3 = p2 - 1; 0 === e3.bl_count[s3]; )
                    s3--;
                  e3.bl_count[s3]--, e3.bl_count[s3 + 1] += 2, e3.bl_count[p2]--, m2 -= 2;
                } while (0 < m2);
                for (s3 = p2; 0 !== s3; s3--)
                  for (n3 = e3.bl_count[s3]; 0 !== n3; )
                    u3 < (i3 = e3.heap[--r3]) || (h3[2 * i3 + 1] !== s3 && (e3.opt_len += (s3 - h3[2 * i3 + 1]) * h3[2 * i3], h3[2 * i3 + 1] = s3), n3--);
              }
            }(e2, t2), Z(s2, u2, e2.bl_count);
          }
          function X(e2, t2, r2) {
            var n2, i2, s2 = -1, a2 = t2[1], o2 = 0, h2 = 7, u2 = 4;
            for (0 === a2 && (h2 = 138, u2 = 3), t2[2 * (r2 + 1) + 1] = 65535, n2 = 0; n2 <= r2; n2++)
              i2 = a2, a2 = t2[2 * (n2 + 1) + 1], ++o2 < h2 && i2 === a2 || (o2 < u2 ? e2.bl_tree[2 * i2] += o2 : 0 !== i2 ? (i2 !== s2 && e2.bl_tree[2 * i2]++, e2.bl_tree[2 * b]++) : o2 <= 10 ? e2.bl_tree[2 * v]++ : e2.bl_tree[2 * y]++, s2 = i2, u2 = (o2 = 0) === a2 ? (h2 = 138, 3) : i2 === a2 ? (h2 = 6, 3) : (h2 = 7, 4));
          }
          function V(e2, t2, r2) {
            var n2, i2, s2 = -1, a2 = t2[1], o2 = 0, h2 = 7, u2 = 4;
            for (0 === a2 && (h2 = 138, u2 = 3), n2 = 0; n2 <= r2; n2++)
              if (i2 = a2, a2 = t2[2 * (n2 + 1) + 1], !(++o2 < h2 && i2 === a2)) {
                if (o2 < u2)
                  for (; L(e2, i2, e2.bl_tree), 0 != --o2; )
                    ;
                else
                  0 !== i2 ? (i2 !== s2 && (L(e2, i2, e2.bl_tree), o2--), L(e2, b, e2.bl_tree), P(e2, o2 - 3, 2)) : o2 <= 10 ? (L(e2, v, e2.bl_tree), P(e2, o2 - 3, 3)) : (L(e2, y, e2.bl_tree), P(e2, o2 - 11, 7));
                s2 = i2, u2 = (o2 = 0) === a2 ? (h2 = 138, 3) : i2 === a2 ? (h2 = 6, 3) : (h2 = 7, 4);
              }
          }
          n(T);
          var q = false;
          function J(e2, t2, r2, n2) {
            P(e2, (s << 1) + (n2 ? 1 : 0), 3), function(e3, t3, r3, n3) {
              M(e3), n3 && (U(e3, r3), U(e3, ~r3)), i.arraySet(e3.pending_buf, e3.window, t3, r3, e3.pending), e3.pending += r3;
            }(e2, t2, r2, true);
          }
          r._tr_init = function(e2) {
            q || (function() {
              var e3, t2, r2, n2, i2, s2 = new Array(g + 1);
              for (n2 = r2 = 0; n2 < a - 1; n2++)
                for (I[n2] = r2, e3 = 0; e3 < 1 << w[n2]; e3++)
                  A[r2++] = n2;
              for (A[r2 - 1] = n2, n2 = i2 = 0; n2 < 16; n2++)
                for (T[n2] = i2, e3 = 0; e3 < 1 << k[n2]; e3++)
                  E[i2++] = n2;
              for (i2 >>= 7; n2 < f; n2++)
                for (T[n2] = i2 << 7, e3 = 0; e3 < 1 << k[n2] - 7; e3++)
                  E[256 + i2++] = n2;
              for (t2 = 0; t2 <= g; t2++)
                s2[t2] = 0;
              for (e3 = 0; e3 <= 143; )
                z2[2 * e3 + 1] = 8, e3++, s2[8]++;
              for (; e3 <= 255; )
                z2[2 * e3 + 1] = 9, e3++, s2[9]++;
              for (; e3 <= 279; )
                z2[2 * e3 + 1] = 7, e3++, s2[7]++;
              for (; e3 <= 287; )
                z2[2 * e3 + 1] = 8, e3++, s2[8]++;
              for (Z(z2, l + 1, s2), e3 = 0; e3 < f; e3++)
                C[2 * e3 + 1] = 5, C[2 * e3] = j(e3, 5);
              O = new D(z2, w, u + 1, l, g), B = new D(C, k, 0, f, g), R = new D(new Array(0), x, 0, c, p);
            }(), q = true), e2.l_desc = new F(e2.dyn_ltree, O), e2.d_desc = new F(e2.dyn_dtree, B), e2.bl_desc = new F(e2.bl_tree, R), e2.bi_buf = 0, e2.bi_valid = 0, W(e2);
          }, r._tr_stored_block = J, r._tr_flush_block = function(e2, t2, r2, n2) {
            var i2, s2, a2 = 0;
            0 < e2.level ? (2 === e2.strm.data_type && (e2.strm.data_type = function(e3) {
              var t3, r3 = 4093624447;
              for (t3 = 0; t3 <= 31; t3++, r3 >>>= 1)
                if (1 & r3 && 0 !== e3.dyn_ltree[2 * t3])
                  return o;
              if (0 !== e3.dyn_ltree[18] || 0 !== e3.dyn_ltree[20] || 0 !== e3.dyn_ltree[26])
                return h;
              for (t3 = 32; t3 < u; t3++)
                if (0 !== e3.dyn_ltree[2 * t3])
                  return h;
              return o;
            }(e2)), Y(e2, e2.l_desc), Y(e2, e2.d_desc), a2 = function(e3) {
              var t3;
              for (X(e3, e3.dyn_ltree, e3.l_desc.max_code), X(e3, e3.dyn_dtree, e3.d_desc.max_code), Y(e3, e3.bl_desc), t3 = c - 1; 3 <= t3 && 0 === e3.bl_tree[2 * S[t3] + 1]; t3--)
                ;
              return e3.opt_len += 3 * (t3 + 1) + 5 + 5 + 4, t3;
            }(e2), i2 = e2.opt_len + 3 + 7 >>> 3, (s2 = e2.static_len + 3 + 7 >>> 3) <= i2 && (i2 = s2)) : i2 = s2 = r2 + 5, r2 + 4 <= i2 && -1 !== t2 ? J(e2, t2, r2, n2) : 4 === e2.strategy || s2 === i2 ? (P(e2, 2 + (n2 ? 1 : 0), 3), K(e2, z2, C)) : (P(e2, 4 + (n2 ? 1 : 0), 3), function(e3, t3, r3, n3) {
              var i3;
              for (P(e3, t3 - 257, 5), P(e3, r3 - 1, 5), P(e3, n3 - 4, 4), i3 = 0; i3 < n3; i3++)
                P(e3, e3.bl_tree[2 * S[i3] + 1], 3);
              V(e3, e3.dyn_ltree, t3 - 1), V(e3, e3.dyn_dtree, r3 - 1);
            }(e2, e2.l_desc.max_code + 1, e2.d_desc.max_code + 1, a2 + 1), K(e2, e2.dyn_ltree, e2.dyn_dtree)), W(e2), n2 && M(e2);
          }, r._tr_tally = function(e2, t2, r2) {
            return e2.pending_buf[e2.d_buf + 2 * e2.last_lit] = t2 >>> 8 & 255, e2.pending_buf[e2.d_buf + 2 * e2.last_lit + 1] = 255 & t2, e2.pending_buf[e2.l_buf + e2.last_lit] = 255 & r2, e2.last_lit++, 0 === t2 ? e2.dyn_ltree[2 * r2]++ : (e2.matches++, t2--, e2.dyn_ltree[2 * (A[r2] + u + 1)]++, e2.dyn_dtree[2 * N(t2)]++), e2.last_lit === e2.lit_bufsize - 1;
          }, r._tr_align = function(e2) {
            P(e2, 2, 3), L(e2, m, z2), function(e3) {
              16 === e3.bi_valid ? (U(e3, e3.bi_buf), e3.bi_buf = 0, e3.bi_valid = 0) : 8 <= e3.bi_valid && (e3.pending_buf[e3.pending++] = 255 & e3.bi_buf, e3.bi_buf >>= 8, e3.bi_valid -= 8);
            }(e2);
          };
        }, { "../utils/common": 41 }], 53: [function(e, t, r) {
          "use strict";
          t.exports = function() {
            this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
          };
        }, {}], 54: [function(e, t, r) {
          (function(e2) {
            !function(r2, n) {
              "use strict";
              if (!r2.setImmediate) {
                var i, s, t2, a, o = 1, h = {}, u = false, l = r2.document, e3 = Object.getPrototypeOf && Object.getPrototypeOf(r2);
                e3 = e3 && e3.setTimeout ? e3 : r2, i = "[object process]" === {}.toString.call(r2.process) ? function(e4) {
                  process.nextTick(function() {
                    c(e4);
                  });
                } : function() {
                  if (r2.postMessage && !r2.importScripts) {
                    var e4 = true, t3 = r2.onmessage;
                    return r2.onmessage = function() {
                      e4 = false;
                    }, r2.postMessage("", "*"), r2.onmessage = t3, e4;
                  }
                }() ? (a = "setImmediate$" + Math.random() + "$", r2.addEventListener ? r2.addEventListener("message", d, false) : r2.attachEvent("onmessage", d), function(e4) {
                  r2.postMessage(a + e4, "*");
                }) : r2.MessageChannel ? ((t2 = new MessageChannel()).port1.onmessage = function(e4) {
                  c(e4.data);
                }, function(e4) {
                  t2.port2.postMessage(e4);
                }) : l && "onreadystatechange" in l.createElement("script") ? (s = l.documentElement, function(e4) {
                  var t3 = l.createElement("script");
                  t3.onreadystatechange = function() {
                    c(e4), t3.onreadystatechange = null, s.removeChild(t3), t3 = null;
                  }, s.appendChild(t3);
                }) : function(e4) {
                  setTimeout(c, 0, e4);
                }, e3.setImmediate = function(e4) {
                  "function" != typeof e4 && (e4 = new Function("" + e4));
                  for (var t3 = new Array(arguments.length - 1), r3 = 0; r3 < t3.length; r3++)
                    t3[r3] = arguments[r3 + 1];
                  var n2 = { callback: e4, args: t3 };
                  return h[o] = n2, i(o), o++;
                }, e3.clearImmediate = f;
              }
              function f(e4) {
                delete h[e4];
              }
              function c(e4) {
                if (u)
                  setTimeout(c, 0, e4);
                else {
                  var t3 = h[e4];
                  if (t3) {
                    u = true;
                    try {
                      !function(e5) {
                        var t4 = e5.callback, r3 = e5.args;
                        switch (r3.length) {
                          case 0:
                            t4();
                            break;
                          case 1:
                            t4(r3[0]);
                            break;
                          case 2:
                            t4(r3[0], r3[1]);
                            break;
                          case 3:
                            t4(r3[0], r3[1], r3[2]);
                            break;
                          default:
                            t4.apply(n, r3);
                        }
                      }(t3);
                    } finally {
                      f(e4), u = false;
                    }
                  }
                }
              }
              function d(e4) {
                e4.source === r2 && "string" == typeof e4.data && 0 === e4.data.indexOf(a) && c(+e4.data.slice(a.length));
              }
            }("undefined" == typeof self ? void 0 === e2 ? this : e2 : self);
          }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
        }, {}] }, {}, [10])(10);
      });
    }
  });

  // node_modules/xmlbuilder2/lib/xmlbuilder2.min.js
  var require_xmlbuilder2_min = __commonJS({
    "node_modules/xmlbuilder2/lib/xmlbuilder2.min.js"(exports, module) {
      !function(e, t) {
        "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.xmlbuilder2 = t() : e.xmlbuilder2 = t();
      }(exports, function() {
        return function(e) {
          var t = {};
          function r(n) {
            if (t[n])
              return t[n].exports;
            var i = t[n] = { i: n, l: false, exports: {} };
            return e[n].call(i.exports, i, i.exports, r), i.l = true, i.exports;
          }
          return r.m = e, r.c = t, r.d = function(e2, t2, n) {
            r.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: n });
          }, r.r = function(e2) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
          }, r.t = function(e2, t2) {
            if (1 & t2 && (e2 = r(e2)), 8 & t2)
              return e2;
            if (4 & t2 && "object" == typeof e2 && e2 && e2.__esModule)
              return e2;
            var n = /* @__PURE__ */ Object.create(null);
            if (r.r(n), Object.defineProperty(n, "default", { enumerable: true, value: e2 }), 2 & t2 && "string" != typeof e2)
              for (var i in e2)
                r.d(n, i, function(t3) {
                  return e2[t3];
                }.bind(null, i));
            return n;
          }, r.n = function(e2) {
            var t2 = e2 && e2.__esModule ? function() {
              return e2.default;
            } : function() {
              return e2;
            };
            return r.d(t2, "a", t2), t2;
          }, r.o = function(e2, t2) {
            return Object.prototype.hasOwnProperty.call(e2, t2);
          }, r.p = "", r(r.s = 184);
        }([function(e, t, r) {
          "use strict";
          function n(e2) {
            for (var r2 in e2)
              t.hasOwnProperty(r2) || (t[r2] = e2[r2]);
          }
          Object.defineProperty(t, "__esModule", { value: true }), n(r(240)), n(r(251)), n(r(175)), n(r(107)), n(r(29)), n(r(73)), n(r(106)), n(r(30)), n(r(252)), n(r(52)), n(r(97)), n(r(253)), n(r(37)), n(r(51)), n(r(173)), n(r(176)), n(r(172)), n(r(108)), n(r(254)), n(r(255)), n(r(256)), n(r(72)), n(r(177)), n(r(105)), n(r(17)), n(r(257)), n(r(12)), n(r(174));
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true }), function(e2) {
            e2[e2.Before = 0] = "Before", e2[e2.Equal = 1] = "Equal", e2[e2.After = 2] = "After";
          }(t.BoundaryPosition || (t.BoundaryPosition = {})), function(e2) {
            e2[e2.None = 0] = "None", e2[e2.Capturing = 1] = "Capturing", e2[e2.AtTarget = 2] = "AtTarget", e2[e2.Bubbling = 3] = "Bubbling";
          }(t.EventPhase || (t.EventPhase = {})), function(e2) {
            e2[e2.Element = 1] = "Element", e2[e2.Attribute = 2] = "Attribute", e2[e2.Text = 3] = "Text", e2[e2.CData = 4] = "CData", e2[e2.EntityReference = 5] = "EntityReference", e2[e2.Entity = 6] = "Entity", e2[e2.ProcessingInstruction = 7] = "ProcessingInstruction", e2[e2.Comment = 8] = "Comment", e2[e2.Document = 9] = "Document", e2[e2.DocumentType = 10] = "DocumentType", e2[e2.DocumentFragment = 11] = "DocumentFragment", e2[e2.Notation = 12] = "Notation";
          }(t.NodeType || (t.NodeType = {})), function(e2) {
            e2[e2.Disconnected = 1] = "Disconnected", e2[e2.Preceding = 2] = "Preceding", e2[e2.Following = 4] = "Following", e2[e2.Contains = 8] = "Contains", e2[e2.ContainedBy = 16] = "ContainedBy", e2[e2.ImplementationSpecific = 32] = "ImplementationSpecific";
          }(t.Position || (t.Position = {})), function(e2) {
            e2[e2.Accept = 1] = "Accept", e2[e2.Reject = 2] = "Reject", e2[e2.Skip = 3] = "Skip";
          }(t.FilterResult || (t.FilterResult = {})), function(e2) {
            e2[e2.All = 4294967295] = "All", e2[e2.Element = 1] = "Element", e2[e2.Attribute = 2] = "Attribute", e2[e2.Text = 4] = "Text", e2[e2.CDataSection = 8] = "CDataSection", e2[e2.EntityReference = 16] = "EntityReference", e2[e2.Entity = 32] = "Entity", e2[e2.ProcessingInstruction = 64] = "ProcessingInstruction", e2[e2.Comment = 128] = "Comment", e2[e2.Document = 256] = "Document", e2[e2.DocumentType = 512] = "DocumentType", e2[e2.DocumentFragment = 1024] = "DocumentFragment", e2[e2.Notation = 2048] = "Notation";
          }(t.WhatToShow || (t.WhatToShow = {})), function(e2) {
            e2[e2.StartToStart = 0] = "StartToStart", e2[e2.StartToEnd = 1] = "StartToEnd", e2[e2.EndToEnd = 2] = "EndToEnd", e2[e2.EndToStart = 3] = "EndToStart";
          }(t.HowToCompare || (t.HowToCompare = {}));
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(212);
          t.FixedSizeSet = i.FixedSizeSet;
          var o = r(213);
          t.ObjectCache = o.ObjectCache;
          var a = r(214);
          t.CompareCache = a.CompareCache;
          var s = r(215);
          t.Lazy = s.Lazy;
          var u = r(216);
          function l(e2, t2, r2) {
            if (m(e2))
              e2.forEach(function(e3, n3) {
                return t2.call(r2, n3, e3);
              });
            else
              for (var n2 in e2)
                e2.hasOwnProperty(n2) && t2.call(r2, n2, e2[n2]);
          }
          function c(e2) {
            var t2, r2;
            if (h(e2))
              return e2;
            if (f(e2)) {
              var i2 = [];
              try {
                for (var o2 = n(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                  var s2 = a2.value;
                  i2.push(c(s2));
                }
              } catch (e3) {
                t2 = { error: e3 };
              } finally {
                try {
                  a2 && !a2.done && (r2 = o2.return) && r2.call(o2);
                } finally {
                  if (t2)
                    throw t2.error;
                }
              }
              return i2;
            }
            if (p(e2)) {
              i2 = {};
              for (var u2 in e2)
                if (e2.hasOwnProperty(u2)) {
                  var l2 = e2[u2];
                  i2[u2] = c(l2);
                }
              return i2;
            }
            return e2;
          }
          function h(e2) {
            return !!e2 && "[object Function]" === Object.prototype.toString.call(e2);
          }
          function p(e2) {
            var t2 = typeof e2;
            return !!e2 && ("function" === t2 || "object" === t2);
          }
          function f(e2) {
            return Array.isArray(e2);
          }
          function d(e2) {
            return e2 instanceof Set;
          }
          function m(e2) {
            return e2 instanceof Map;
          }
          function y(e2) {
            if (p(e2)) {
              var t2 = Object.getPrototypeOf(e2), r2 = t2.constructor;
              return t2 && r2 && "function" == typeof r2 && r2 instanceof r2 && Function.prototype.toString.call(r2) === Function.prototype.toString.call(Object);
            }
            return false;
          }
          t.StringWalker = u.StringWalker, t.applyMixin = function(e2, t2) {
            for (var r2 = [], n2 = 2; n2 < arguments.length; n2++)
              r2[n2 - 2] = arguments[n2];
            Object.getOwnPropertyNames(t2.prototype).forEach(function(n3) {
              if ("constructor" !== n3) {
                if (-1 !== r2.indexOf(n3)) {
                  var i2 = Object.getOwnPropertyDescriptor(e2.prototype, n3);
                  i2 && Object.defineProperty(e2.prototype, "_" + n3, i2);
                }
                var o2 = Object.getOwnPropertyDescriptor(t2.prototype, n3);
                o2 && Object.defineProperty(e2.prototype, n3, o2);
              }
            });
          }, t.applyDefaults = function e2(t2, r2, n2) {
            void 0 === n2 && (n2 = false);
            var i2 = c(t2 || {});
            return l(r2, function(t3, r3) {
              y(r3) ? i2[t3] = e2(i2[t3], r3, n2) : (n2 || void 0 === i2[t3]) && (i2[t3] = r3);
            }), i2;
          }, t.forEachArray = function(e2, t2, r2) {
            e2.forEach(t2, r2);
          }, t.forEachObject = l, t.arrayLength = function(e2) {
            return d(e2) ? e2.size : e2.length;
          }, t.objectLength = function(e2) {
            return m(e2) ? e2.size : Object.keys(e2).length;
          }, t.getObjectValue = function(e2, t2) {
            return m(e2) ? e2.get(t2) : e2[t2];
          }, t.removeObjectValue = function(e2, t2) {
            m(e2) ? e2.delete(t2) : delete e2[t2];
          }, t.clone = c, t.isBoolean = function(e2) {
            return "boolean" == typeof e2;
          }, t.isNumber = function(e2) {
            return "number" == typeof e2;
          }, t.isString = function(e2) {
            return "string" == typeof e2;
          }, t.isFunction = h, t.isObject = p, t.isArray = f, t.isSet = d, t.isMap = m, t.isEmpty = function(e2) {
            if (f(e2))
              return !e2.length;
            if (d(e2))
              return !e2.size;
            if (m(e2))
              return !e2.size;
            if (p(e2)) {
              for (var t2 in e2)
                if (e2.hasOwnProperty(t2))
                  return false;
              return true;
            }
            return false;
          }, t.isPlainObject = y, t.isIterable = function(e2) {
            return e2 && "function" == typeof e2[Symbol.iterator];
          }, t.getValue = function(e2) {
            return h(e2.valueOf) ? e2.valueOf() : e2;
          }, t.utf8Encode = function(e2) {
            for (var t2 = new Uint8Array(4 * e2.length), r2 = 0, n2 = 0; n2 < e2.length; n2++) {
              var i2 = e2.charCodeAt(n2);
              if (i2 < 128)
                t2[r2++] = i2;
              else {
                if (i2 < 2048)
                  t2[r2++] = i2 >> 6 | 192;
                else {
                  if (i2 > 55295 && i2 < 56320) {
                    if (++n2 >= e2.length)
                      throw new Error("Incomplete surrogate pair.");
                    var o2 = e2.charCodeAt(n2);
                    if (o2 < 56320 || o2 > 57343)
                      throw new Error("Invalid surrogate character.");
                    i2 = 65536 + ((1023 & i2) << 10) + (1023 & o2), t2[r2++] = i2 >> 18 | 240, t2[r2++] = i2 >> 12 & 63 | 128;
                  } else
                    t2[r2++] = i2 >> 12 | 224;
                  t2[r2++] = i2 >> 6 & 63 | 128;
                }
                t2[r2++] = 63 & i2 | 128;
              }
            }
            return t2.subarray(0, r2);
          }, t.utf8Decode = function(e2) {
            for (var t2 = "", r2 = 0; r2 < e2.length; ) {
              var n2 = e2[r2++];
              if (n2 > 127)
                if (n2 > 191 && n2 < 224) {
                  if (r2 >= e2.length)
                    throw new Error("Incomplete 2-byte sequence.");
                  n2 = (31 & n2) << 6 | 63 & e2[r2++];
                } else if (n2 > 223 && n2 < 240) {
                  if (r2 + 1 >= e2.length)
                    throw new Error("Incomplete 3-byte sequence.");
                  n2 = (15 & n2) << 12 | (63 & e2[r2++]) << 6 | 63 & e2[r2++];
                } else {
                  if (!(n2 > 239 && n2 < 248))
                    throw new Error("Unknown multi-byte start.");
                  if (r2 + 2 >= e2.length)
                    throw new Error("Incomplete 4-byte sequence.");
                  n2 = (7 & n2) << 18 | (63 & e2[r2++]) << 12 | (63 & e2[r2++]) << 6 | 63 & e2[r2++];
                }
              if (n2 <= 65535)
                t2 += String.fromCharCode(n2);
              else {
                if (!(n2 <= 1114111))
                  throw new Error("Code point exceeds UTF-16 limit.");
                n2 -= 65536, t2 += String.fromCharCode(n2 >> 10 | 55296), t2 += String.fromCharCode(1023 & n2 | 56320);
              }
            }
            return t2;
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(241);
          t.Cast = n.Cast;
          var i = r(150);
          t.Guard = i.Guard;
          var o = r(242);
          t.EmptySet = o.EmptySet;
        }, function(e, t, r) {
          var n = r(11), i = r(55).f, o = r(21), a = r(25), s = r(80), u = r(119), l = r(123);
          e.exports = function(e2, t2) {
            var r2, c, h, p, f, d = e2.target, m = e2.global, y = e2.stat;
            if (r2 = m ? n : y ? n[d] || s(d, {}) : (n[d] || {}).prototype)
              for (c in t2) {
                if (p = t2[c], h = e2.noTargetGet ? (f = i(r2, c)) && f.value : r2[c], !l(m ? c : d + (y ? "." : "#") + c, e2.forced) && void 0 !== h) {
                  if (typeof p == typeof h)
                    continue;
                  u(p, h);
                }
                (e2.sham || h && h.sham) && o(p, "sham", true), a(r2, c, p, e2);
              }
          };
        }, function(e, t, r) {
          var n = r(11), i = r(81), o = r(14), a = r(58), s = r(86), u = r(124), l = i("wks"), c = n.Symbol, h = u ? c : c && c.withoutSetter || a;
          e.exports = function(e2) {
            return o(l, e2) || (s && o(c, e2) ? l[e2] = c[e2] : l[e2] = h("Symbol." + e2)), l[e2];
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(2), i = r(29), o = function() {
            function e2() {
              this._features = { mutationObservers: true, customElements: true, slots: true, steps: true }, this._window = null, this._compareCache = new n.CompareCache(), this._rangeList = new n.FixedSizeSet();
            }
            return e2.prototype.setFeatures = function(e3) {
              if (void 0 === e3 && (e3 = true), n.isObject(e3))
                for (var t2 in e3)
                  this._features[t2] = e3[t2] || false;
              else
                for (var t2 in this._features)
                  this._features[t2] = e3;
            }, Object.defineProperty(e2.prototype, "features", { get: function() {
              return this._features;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "window", { get: function() {
              return null === this._window && (this._window = i.create_window()), this._window;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "compareCache", { get: function() {
              return this._compareCache;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "rangeList", { get: function() {
              return this._rangeList;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2, "instance", { get: function() {
              return e2._instance || (e2._instance = new e2()), e2._instance;
            }, enumerable: true, configurable: true }), e2;
          }();
          t.dom = o.instance;
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__importStar || function(e2) {
            if (e2 && e2.__esModule)
              return e2;
            var t2 = {};
            if (null != e2)
              for (var r2 in e2)
                Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
            return t2.default = e2, t2;
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = n(r(228));
          t.base64 = i;
          var o = n(r(146));
          t.byte = o;
          var a = n(r(147));
          t.byteSequence = a;
          var s = n(r(96));
          t.codePoint = s;
          var u = n(r(232));
          t.json = u;
          var l = n(r(233));
          t.list = l;
          var c = n(r(234));
          t.map = c;
          var h = n(r(235));
          t.namespace = h;
          var p = n(r(236));
          t.queue = p;
          var f = n(r(237));
          t.set = f;
          var d = n(r(238));
          t.stack = d;
          var m = n(r(239));
          t.string = m;
        }, function(e, t) {
          e.exports = function(e2) {
            try {
              return !!e2();
            } catch (e3) {
              return true;
            }
          };
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = function(e2) {
            function t2(t3, r2) {
              void 0 === r2 && (r2 = "");
              var n2 = e2.call(this, r2) || this;
              return n2.name = t3, n2;
            }
            return i(t2, e2), t2;
          }(Error);
          t.DOMException = o;
          var a = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "DOMStringSizeError", t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.DOMStringSizeError = a;
          var s = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "WrongDocumentError", "The object is in the wrong document. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.WrongDocumentError = s;
          var u = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "NoDataAllowedError", t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.NoDataAllowedError = u;
          var l = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "NoModificationAllowedError", "The object can not be modified. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.NoModificationAllowedError = l;
          var c = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "NotSupportedError", "The operation is not supported. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.NotSupportedError = c;
          var h = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "InUseAttributeError", t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.InUseAttributeError = h;
          var p = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "InvalidStateError", "The object is in an invalid state. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.InvalidStateError = p;
          var f = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "InvalidModificationError", "The object can not be modified in this way. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.InvalidModificationError = f;
          var d = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "NamespaceError", "The operation is not allowed by Namespaces in XML. [XMLNS] " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.NamespaceError = d;
          var m = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "InvalidAccessError", "The object does not support the operation or argument. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.InvalidAccessError = m;
          var y = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "ValidationError", t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.ValidationError = y;
          var v = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "TypeMismatchError", t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.TypeMismatchError = v;
          var _ = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "SecurityError", "The operation is insecure. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.SecurityError = _;
          var g = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "NetworkError", "A network error occurred. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.NetworkError = g;
          var b = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "AbortError", "The operation was aborted. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.AbortError = b;
          var x = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "URLMismatchError", "The given URL does not match another URL. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.URLMismatchError = x;
          var w = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "QuotaExceededError", "The quota has been exceeded. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.QuotaExceededError = w;
          var E = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "TimeoutError", "The operation timed out. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.TimeoutError = E;
          var D = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "InvalidNodeTypeError", "The supplied node is incorrect or has an incorrect ancestor for this operation. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.InvalidNodeTypeError = D;
          var S = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "DataCloneError", "The object can not be cloned. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.DataCloneError = S;
          var C = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "NotImplementedError", "The DOM method is not implemented by this module. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.NotImplementedError = C;
          var A = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "HierarchyRequestError", "The operation would yield an incorrect node tree. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.HierarchyRequestError = A;
          var N = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "NotFoundError", "The object can not be found here. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.NotFoundError = N;
          var T = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "IndexSizeError", "The index is not in the allowed range. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.IndexSizeError = T;
          var O = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "SyntaxError", "The string did not match the expected pattern. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.SyntaxError = O;
          var F = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, "InvalidCharacterError", "The string contains invalid characters. " + t3) || this;
            }
            return i(t2, e2), t2;
          }(o);
          t.InvalidCharacterError = F;
        }, function(e, t, r) {
          "use strict";
          var n = r(53), i = ["kind", "resolve", "construct", "instanceOf", "predicate", "represent", "defaultStyle", "styleAliases"], o = ["scalar", "sequence", "mapping"];
          e.exports = function(e2, t2) {
            var r2, a;
            if (t2 = t2 || {}, Object.keys(t2).forEach(function(t3) {
              if (-1 === i.indexOf(t3))
                throw new n('Unknown option "' + t3 + '" is met in definition of "' + e2 + '" YAML type.');
            }), this.tag = e2, this.kind = t2.kind || null, this.resolve = t2.resolve || function() {
              return true;
            }, this.construct = t2.construct || function(e3) {
              return e3;
            }, this.instanceOf = t2.instanceOf || null, this.predicate = t2.predicate || null, this.represent = t2.represent || null, this.defaultStyle = t2.defaultStyle || null, this.styleAliases = (r2 = t2.styleAliases || null, a = {}, null !== r2 && Object.keys(r2).forEach(function(e3) {
              r2[e3].forEach(function(t3) {
                a[String(t3)] = e3;
              });
            }), a), -1 === o.indexOf(this.kind))
              throw new n('Unknown kind "' + this.kind + '" is specified for "' + e2 + '" YAML type.');
          };
        }, function(e, t, r) {
          (function(t2) {
            var r2 = function(e2) {
              return e2 && e2.Math == Math && e2;
            };
            e.exports = r2("object" == typeof globalThis && globalThis) || r2("object" == typeof window && window) || r2("object" == typeof self && self) || r2("object" == typeof t2 && t2) || Function("return this")();
          }).call(this, r(78));
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true }), t.idl_defineConst = function(e2, t2, r2) {
            Object.defineProperty(e2, t2, { writable: false, enumerable: true, configurable: false, value: r2 });
          };
        }, function(e, t) {
          e.exports = function(e2) {
            return "object" == typeof e2 ? null !== e2 : "function" == typeof e2;
          };
        }, function(e, t) {
          var r = {}.hasOwnProperty;
          e.exports = function(e2, t2) {
            return r.call(e2, t2);
          };
        }, function(e, t, r) {
          var n = r(16), i = r(115), o = r(18), a = r(56), s = Object.defineProperty;
          t.f = n ? s : function(e2, t2, r2) {
            if (o(e2), t2 = a(t2, true), o(r2), i)
              try {
                return s(e2, t2, r2);
              } catch (e3) {
              }
            if ("get" in r2 || "set" in r2)
              throw TypeError("Accessors not supported");
            return "value" in r2 && (e2[t2] = r2.value), e2;
          };
        }, function(e, t, r) {
          var n = r(8);
          e.exports = !n(function() {
            return 7 != Object.defineProperty({}, 1, { get: function() {
              return 7;
            } })[1];
          });
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(3), o = r(1);
          function a(e2, t2, r2) {
            if (void 0 === r2 && (r2 = false), r2 && i.Guard.isElementNode(t2) && i.Guard.isShadowRoot(t2.shadowRoot) && t2.shadowRoot._firstChild)
              return t2.shadowRoot._firstChild;
            if (t2._firstChild)
              return t2._firstChild;
            if (t2 === e2)
              return null;
            if (t2._nextSibling)
              return t2._nextSibling;
            for (var n2 = t2._parent; n2 && n2 !== e2; ) {
              if (n2._nextSibling)
                return n2._nextSibling;
              n2 = n2._parent;
            }
            return null;
          }
          function s() {
            var e2;
            return (e2 = {})[Symbol.iterator] = function() {
              return { next: function() {
                return { done: true, value: null };
              } };
            }, e2;
          }
          function u(e2, t2, r2, n2) {
            void 0 === t2 && (t2 = false), void 0 === r2 && (r2 = false);
            for (var i2 = t2 ? e2 : a(e2, e2, r2); i2 && n2 && !n2(i2); )
              i2 = a(e2, i2, r2);
            return i2;
          }
          function l(e2, t2, r2, n2, i2) {
            void 0 === r2 && (r2 = false), void 0 === n2 && (n2 = false);
            for (var o2 = a(e2, t2, n2); o2 && i2 && !i2(o2); )
              o2 = a(e2, o2, n2);
            return o2;
          }
          function c(e2, t2, r2, n2) {
            var i2;
            return void 0 === t2 && (t2 = false), void 0 === r2 && (r2 = false), t2 || 0 !== e2._children.size ? ((i2 = {})[Symbol.iterator] = function() {
              var i3 = t2 ? e2 : a(e2, e2, r2);
              return { next: function() {
                for (; i3 && n2 && !n2(i3); )
                  i3 = a(e2, i3, r2);
                if (null === i3)
                  return { done: true, value: null };
                var t3 = { done: false, value: i3 };
                return i3 = a(e2, i3, r2), t3;
              } };
            }, i2) : s();
          }
          function h(e2, t2, r2) {
            void 0 === t2 && (t2 = false);
            for (var n2 = t2 ? e2 : e2._parent; n2 && r2 && !r2(n2); )
              n2 = n2._parent;
            return n2;
          }
          function p(e2, t2, r2, n2) {
            void 0 === r2 && (r2 = false);
            for (var i2 = t2._parent; i2 && n2 && !n2(i2); )
              i2 = i2._parent;
            return i2;
          }
          function f(e2) {
            return i.Guard.isDocumentTypeNode(e2) ? 0 : i.Guard.isCharacterDataNode(e2) ? e2._data.length : e2._children.size;
          }
          function d(e2, t2) {
            if (void 0 === t2 && (t2 = false), t2) {
              var r2 = d(e2, false);
              return i.Guard.isShadowRoot(r2) ? d(r2._host, true) : r2;
            }
            return e2._parent ? d(e2._parent) : e2;
          }
          function m(e2, t2, r2, n2) {
            void 0 === r2 && (r2 = false), void 0 === n2 && (n2 = false);
            for (var o2 = r2 ? e2 : n2 && i.Guard.isShadowRoot(e2) ? e2._host : e2._parent; null !== o2; ) {
              if (o2 === t2)
                return true;
              o2 = n2 && i.Guard.isShadowRoot(o2) ? o2._host : o2._parent;
            }
            return false;
          }
          function y(e2) {
            for (var t2 = d(e2), r2 = 0, n2 = u(t2); null !== n2; ) {
              if (r2++, n2 === e2)
                return r2;
              n2 = l(t2, n2);
            }
            return -1;
          }
          t.tree_getFirstDescendantNode = u, t.tree_getNextDescendantNode = l, t.tree_getDescendantNodes = c, t.tree_getDescendantElements = function(e2, t2, r2, n2) {
            var o2;
            return void 0 === t2 && (t2 = false), void 0 === r2 && (r2 = false), t2 || 0 !== e2._children.size ? ((o2 = {})[Symbol.iterator] = function() {
              var o3 = c(e2, t2, r2, function(e3) {
                return i.Guard.isElementNode(e3);
              })[Symbol.iterator](), a2 = o3.next().value;
              return { next: function() {
                for (; a2 && n2 && !n2(a2); )
                  a2 = o3.next().value;
                if (null === a2)
                  return { done: true, value: null };
                var e3 = { done: false, value: a2 };
                return a2 = o3.next().value, e3;
              } };
            }, o2) : s();
          }, t.tree_getSiblingNodes = function(e2, t2, r2) {
            var n2;
            return void 0 === t2 && (t2 = false), e2._parent && 0 !== e2._parent._children.size ? ((n2 = {})[Symbol.iterator] = function() {
              var n3 = e2._parent ? e2._parent._firstChild : null;
              return { next: function() {
                for (; n3 && (r2 && !r2(n3) || !t2 && n3 === e2); )
                  n3 = n3._nextSibling;
                if (null === n3)
                  return { done: true, value: null };
                var i2 = { done: false, value: n3 };
                return n3 = n3._nextSibling, i2;
              } };
            }, n2) : s();
          }, t.tree_getFirstAncestorNode = h, t.tree_getNextAncestorNode = p, t.tree_getAncestorNodes = function(e2, t2, r2) {
            var n2;
            return void 0 === t2 && (t2 = false), t2 || e2._parent ? ((n2 = {})[Symbol.iterator] = function() {
              var n3 = h(e2, t2, r2);
              return { next: function() {
                if (null === n3)
                  return { done: true, value: null };
                var e3 = { done: false, value: n3 };
                return n3 = p(0, n3, t2, r2), e3;
              } };
            }, n2) : s();
          }, t.tree_getCommonAncestor = function(e2, t2) {
            if (e2 === t2)
              return e2._parent;
            for (var r2 = [], n2 = [], i2 = h(e2, true); null !== i2; )
              r2.push(i2), i2 = p(0, i2, true);
            for (var o2 = h(t2, true); null !== o2; )
              n2.push(o2), o2 = p(0, o2, true);
            for (var a2 = r2.length, s2 = n2.length, u2 = null, l2 = Math.min(a2, s2); l2 > 0; l2--) {
              var c2 = r2[--a2];
              if (c2 !== n2[--s2])
                break;
              u2 = c2;
            }
            return u2;
          }, t.tree_getFollowingNode = function(e2, t2) {
            if (t2._firstChild)
              return t2._firstChild;
            if (t2._nextSibling)
              return t2._nextSibling;
            for (; ; ) {
              var r2 = t2._parent;
              if (null === r2 || r2 === e2)
                return null;
              if (r2._nextSibling)
                return r2._nextSibling;
              t2 = r2;
            }
          }, t.tree_getPrecedingNode = function(e2, t2) {
            return t2 === e2 ? null : t2._previousSibling ? (t2 = t2._previousSibling)._lastChild ? t2._lastChild : t2 : t2._parent;
          }, t.tree_isConstrained = function e2(t2) {
            var r2, i2, a2, s2, u2, l2;
            switch (t2._nodeType) {
              case o.NodeType.Document:
                var c2 = false, h2 = false;
                try {
                  for (var p2 = n(t2._children), f2 = p2.next(); !f2.done; f2 = p2.next()) {
                    switch (f2.value._nodeType) {
                      case o.NodeType.ProcessingInstruction:
                      case o.NodeType.Comment:
                        break;
                      case o.NodeType.DocumentType:
                        if (c2 || h2)
                          return false;
                        c2 = true;
                        break;
                      case o.NodeType.Element:
                        if (h2)
                          return false;
                        h2 = true;
                        break;
                      default:
                        return false;
                    }
                  }
                } catch (e3) {
                  r2 = { error: e3 };
                } finally {
                  try {
                    f2 && !f2.done && (i2 = p2.return) && i2.call(p2);
                  } finally {
                    if (r2)
                      throw r2.error;
                  }
                }
                break;
              case o.NodeType.DocumentFragment:
              case o.NodeType.Element:
                try {
                  for (var d2 = n(t2._children), m2 = d2.next(); !m2.done; m2 = d2.next()) {
                    switch (m2.value._nodeType) {
                      case o.NodeType.Element:
                      case o.NodeType.Text:
                      case o.NodeType.ProcessingInstruction:
                      case o.NodeType.CData:
                      case o.NodeType.Comment:
                        break;
                      default:
                        return false;
                    }
                  }
                } catch (e3) {
                  a2 = { error: e3 };
                } finally {
                  try {
                    m2 && !m2.done && (s2 = d2.return) && s2.call(d2);
                  } finally {
                    if (a2)
                      throw a2.error;
                  }
                }
                break;
              case o.NodeType.DocumentType:
              case o.NodeType.Text:
              case o.NodeType.ProcessingInstruction:
              case o.NodeType.CData:
              case o.NodeType.Comment:
                return !t2.hasChildNodes();
            }
            try {
              for (var y2 = n(t2._children), v = y2.next(); !v.done; v = y2.next()) {
                if (!e2(v.value))
                  return false;
              }
            } catch (e3) {
              u2 = { error: e3 };
            } finally {
              try {
                v && !v.done && (l2 = y2.return) && l2.call(y2);
              } finally {
                if (u2)
                  throw u2.error;
              }
            }
            return true;
          }, t.tree_nodeLength = f, t.tree_isEmpty = function(e2) {
            return 0 === f(e2);
          }, t.tree_rootNode = d, t.tree_isDescendantOf = function(e2, t2, r2, n2) {
            void 0 === r2 && (r2 = false), void 0 === n2 && (n2 = false);
            for (var i2 = u(e2, r2, n2); null !== i2; ) {
              if (i2 === t2)
                return true;
              i2 = l(e2, i2, r2, n2);
            }
            return false;
          }, t.tree_isAncestorOf = m, t.tree_isHostIncludingAncestorOf = function e2(t2, r2, n2) {
            if (void 0 === n2 && (n2 = false), m(t2, r2, n2))
              return true;
            var o2 = d(t2);
            return !(!i.Guard.isDocumentFragmentNode(o2) || null === o2._host || !e2(o2._host, r2, n2));
          }, t.tree_isSiblingOf = function(e2, t2, r2) {
            return void 0 === r2 && (r2 = false), e2 !== t2 ? null !== e2._parent && e2._parent === t2._parent : !!r2;
          }, t.tree_isPreceding = function(e2, t2) {
            var r2 = y(e2), n2 = y(t2);
            return -1 !== r2 && -1 !== n2 && (d(e2) === d(t2) && n2 < r2);
          }, t.tree_isFollowing = function(e2, t2) {
            var r2 = y(e2), n2 = y(t2);
            return -1 !== r2 && -1 !== n2 && (d(e2) === d(t2) && n2 > r2);
          }, t.tree_isParentOf = function(e2, t2) {
            return e2._parent === t2;
          }, t.tree_isChildOf = function(e2, t2) {
            return t2._parent === e2;
          }, t.tree_previousSibling = function(e2) {
            return e2._previousSibling;
          }, t.tree_nextSibling = function(e2) {
            return e2._nextSibling;
          }, t.tree_firstChild = function(e2) {
            return e2._firstChild;
          }, t.tree_lastChild = function(e2) {
            return e2._lastChild;
          }, t.tree_treePosition = y, t.tree_index = function(e2) {
            for (var t2 = 0; null !== e2._previousSibling; )
              t2++, e2 = e2._previousSibling;
            return t2;
          }, t.tree_retarget = function(e2, t2) {
            for (; ; ) {
              if (!e2 || !i.Guard.isNode(e2))
                return e2;
              var r2 = d(e2);
              if (!i.Guard.isShadowRoot(r2))
                return e2;
              if (t2 && i.Guard.isNode(t2) && m(r2, t2, true, true))
                return e2;
              e2 = r2.host;
            }
          };
        }, function(e, t, r) {
          var n = r(13);
          e.exports = function(e2) {
            if (!n(e2))
              throw TypeError(String(e2) + " is not an object");
            return e2;
          };
        }, function(e, t, r) {
          "use strict";
          var n = r(24), i = r(130), o = r(49), a = r(43), s = r(88), u = a.set, l = a.getterFor("Array Iterator");
          e.exports = s(Array, "Array", function(e2, t2) {
            u(this, { type: "Array Iterator", target: n(e2), index: 0, kind: t2 });
          }, function() {
            var e2 = l(this), t2 = e2.target, r2 = e2.kind, n2 = e2.index++;
            return !t2 || n2 >= t2.length ? (e2.target = void 0, { value: void 0, done: true }) : "keys" == r2 ? { value: n2, done: false } : "values" == r2 ? { value: t2[n2], done: false } : { value: [n2, t2[n2]], done: false };
          }, "values"), o.Arguments = o.Array, i("keys"), i("values"), i("entries");
        }, function(e, t, r) {
          var n = r(90), i = r(25), o = r(202);
          n || i(Object.prototype, "toString", o, { unsafe: true });
        }, function(e, t, r) {
          var n = r(16), i = r(15), o = r(40);
          e.exports = n ? function(e2, t2, r2) {
            return i.f(e2, t2, o(1, r2));
          } : function(e2, t2, r2) {
            return e2[t2] = r2, e2;
          };
        }, function(e, t, r) {
          "use strict";
          var n = r(137).charAt, i = r(43), o = r(88), a = i.set, s = i.getterFor("String Iterator");
          o(String, "String", function(e2) {
            a(this, { type: "String Iterator", string: String(e2), index: 0 });
          }, function() {
            var e2, t2 = s(this), r2 = t2.string, i2 = t2.index;
            return i2 >= r2.length ? { value: void 0, done: true } : (e2 = n(r2, i2), t2.index += e2.length, { value: e2, done: false });
          });
        }, function(e, t, r) {
          var n = r(11), i = r(203), o = r(19), a = r(21), s = r(5), u = s("iterator"), l = s("toStringTag"), c = o.values;
          for (var h in i) {
            var p = n[h], f = p && p.prototype;
            if (f) {
              if (f[u] !== c)
                try {
                  a(f, u, c);
                } catch (e2) {
                  f[u] = c;
                }
              if (f[l] || a(f, l, h), i[h]) {
                for (var d in o)
                  if (f[d] !== o[d])
                    try {
                      a(f, d, o[d]);
                    } catch (e2) {
                      f[d] = o[d];
                    }
              }
            }
          }
        }, function(e, t, r) {
          var n = r(41), i = r(35);
          e.exports = function(e2) {
            return n(i(e2));
          };
        }, function(e, t, r) {
          var n = r(11), i = r(21), o = r(14), a = r(80), s = r(117), u = r(43), l = u.get, c = u.enforce, h = String(String).split("String");
          (e.exports = function(e2, t2, r2, s2) {
            var u2 = !!s2 && !!s2.unsafe, l2 = !!s2 && !!s2.enumerable, p = !!s2 && !!s2.noTargetGet;
            "function" == typeof r2 && ("string" != typeof t2 || o(r2, "name") || i(r2, "name", t2), c(r2).source = h.join("string" == typeof t2 ? t2 : "")), e2 !== n ? (u2 ? !p && e2[t2] && (l2 = true) : delete e2[t2], l2 ? e2[t2] = r2 : i(e2, t2, r2)) : l2 ? e2[t2] = r2 : a(t2, r2);
          })(Function.prototype, "toString", function() {
            return "function" == typeof this && l(this).source || s(this);
          });
        }, function(e, t, r) {
          var n = r(47), i = Math.min;
          e.exports = function(e2) {
            return e2 > 0 ? i(n(e2), 9007199254740991) : 0;
          };
        }, function(e, t, r) {
          var n = r(35);
          e.exports = function(e2) {
            return Object(n(e2));
          };
        }, function(e, t, r) {
          var n = r(16), i = r(8), o = r(14), a = Object.defineProperty, s = {}, u = function(e2) {
            throw e2;
          };
          e.exports = function(e2, t2) {
            if (o(s, e2))
              return s[e2];
            t2 || (t2 = {});
            var r2 = [][e2], l = !!o(t2, "ACCESSORS") && t2.ACCESSORS, c = o(t2, 0) ? t2[0] : u, h = o(t2, 1) ? t2[1] : void 0;
            return s[e2] = !!r2 && !i(function() {
              if (l && !n)
                return true;
              var e3 = { length: -1 };
              l ? a(e3, 1, { enumerable: true, get: u }) : e3[1] = 1, r2.call(e3, c, h);
            });
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(148), i = r(149), o = r(151), a = r(98), s = r(153), u = r(154), l = r(155), c = r(99), h = r(100), p = r(156), f = r(157), d = r(101), m = r(158), y = r(159), v = r(160), _ = r(161), g = r(162), b = r(163), x = r(164), w = r(165), E = r(166), D = r(167), S = r(168), C = r(169), A = r(170);
          t.create_domImplementation = function(e2) {
            return n.DOMImplementationImpl._create(e2);
          }, t.create_window = function() {
            return i.WindowImpl._create();
          }, t.create_xmlDocument = function() {
            return new o.XMLDocumentImpl();
          }, t.create_document = function() {
            return new a.DocumentImpl();
          }, t.create_abortController = function() {
            return new s.AbortControllerImpl();
          }, t.create_abortSignal = function() {
            return u.AbortSignalImpl._create();
          }, t.create_documentType = function(e2, t2, r2, n2) {
            return l.DocumentTypeImpl._create(e2, t2, r2, n2);
          }, t.create_element = function(e2, t2, r2, n2) {
            return c.ElementImpl._create(e2, t2, r2, n2);
          }, t.create_htmlElement = function(e2, t2, r2, n2) {
            return c.ElementImpl._create(e2, t2, r2, n2);
          }, t.create_htmlUnknownElement = function(e2, t2, r2, n2) {
            return c.ElementImpl._create(e2, t2, r2, n2);
          }, t.create_documentFragment = function(e2) {
            return h.DocumentFragmentImpl._create(e2);
          }, t.create_shadowRoot = function(e2, t2) {
            return p.ShadowRootImpl._create(e2, t2);
          }, t.create_attr = function(e2, t2) {
            return f.AttrImpl._create(e2, t2);
          }, t.create_text = function(e2, t2) {
            return d.TextImpl._create(e2, t2);
          }, t.create_cdataSection = function(e2, t2) {
            return m.CDATASectionImpl._create(e2, t2);
          }, t.create_comment = function(e2, t2) {
            return y.CommentImpl._create(e2, t2);
          }, t.create_processingInstruction = function(e2, t2, r2) {
            return v.ProcessingInstructionImpl._create(e2, t2, r2);
          }, t.create_htmlCollection = function(e2, t2) {
            return void 0 === t2 && (t2 = function() {
              return true;
            }), _.HTMLCollectionImpl._create(e2, t2);
          }, t.create_nodeList = function(e2) {
            return g.NodeListImpl._create(e2);
          }, t.create_nodeListStatic = function(e2, t2) {
            return b.NodeListStaticImpl._create(e2, t2);
          }, t.create_namedNodeMap = function(e2) {
            return x.NamedNodeMapImpl._create(e2);
          }, t.create_range = function(e2, t2) {
            return w.RangeImpl._create(e2, t2);
          }, t.create_nodeIterator = function(e2, t2, r2) {
            return E.NodeIteratorImpl._create(e2, t2, r2);
          }, t.create_treeWalker = function(e2, t2) {
            return D.TreeWalkerImpl._create(e2, t2);
          }, t.create_nodeFilter = function() {
            return S.NodeFilterImpl._create();
          }, t.create_mutationRecord = function(e2, t2, r2, n2, i2, o2, a2, s2, u2) {
            return C.MutationRecordImpl._create(e2, t2, r2, n2, i2, o2, a2, s2, u2);
          }, t.create_domTokenList = function(e2, t2) {
            return A.DOMTokenListImpl._create(e2, t2);
          };
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(6), o = r(17), a = r(3), s = r(72), u = /* @__PURE__ */ new Map();
          function l(e2, t2) {
            if (t2 !== e2._root && o.tree_isAncestorOf(e2._reference, t2, true)) {
              if (e2._pointerBeforeReference)
                for (; ; ) {
                  var r2 = o.tree_getFollowingNode(e2._root, t2);
                  if (null !== r2 && o.tree_isDescendantOf(e2._root, r2, true) && !o.tree_isDescendantOf(t2, r2, true))
                    return void (e2._reference = r2);
                  if (null === r2)
                    return void (e2._pointerBeforeReference = false);
                }
              if (null === t2._previousSibling)
                null !== t2._parent && (e2._reference = t2._parent);
              else {
                for (var n2 = t2._previousSibling, i2 = o.tree_getFirstDescendantNode(t2._previousSibling, true, false); null !== i2; )
                  null !== i2 && (n2 = i2), i2 = o.tree_getNextDescendantNode(t2._previousSibling, i2, true, false);
                e2._reference = n2;
              }
            }
          }
          function c(e2, t2, r2, n2, i2) {
            if (a.Guard.isSlot(e2) && "name" === t2 && null === i2) {
              if (n2 === r2)
                return;
              if (null === n2 && "" === r2)
                return;
              if ("" === n2 && null === r2)
                return;
              e2._name = null === n2 || "" === n2 ? "" : n2, s.shadowTree_assignSlotablesForATree(o.tree_rootNode(e2));
            }
          }
          function h(e2, t2, r2, n2, i2) {
            if (a.Guard.isSlotable(e2) && "slot" === t2 && null === i2) {
              if (n2 === r2)
                return;
              if (null === n2 && "" === r2)
                return;
              if ("" === n2 && null === r2)
                return;
              e2._name = null === n2 || "" === n2 ? "" : n2, s.shadowTree_isAssigned(e2) && s.shadowTree_assignSlotables(e2._assignedSlot), s.shadowTree_assignASlot(e2);
            }
          }
          function p(e2, t2, r2, n2) {
            "id" === t2 && null === n2 && (e2._uniqueIdentifier = r2 || void 0);
          }
          t.dom_runRemovingSteps = function(e2, t2) {
          }, t.dom_runCloningSteps = function(e2, t2, r2, n2) {
          }, t.dom_runAdoptingSteps = function(e2, t2) {
          }, t.dom_runAttributeChangeSteps = function(e2, t2, r2, o2, a2) {
            var s2, u2;
            i.dom.features.slots && (h.call(e2, e2, t2, r2, o2, a2), c.call(e2, e2, t2, r2, o2, a2)), p.call(e2, e2, t2, o2, a2);
            try {
              for (var l2 = n(e2._attributeChangeSteps), f = l2.next(); !f.done; f = l2.next()) {
                f.value.call(e2, e2, t2, r2, o2, a2);
              }
            } catch (e3) {
              s2 = { error: e3 };
            } finally {
              try {
                f && !f.done && (u2 = l2.return) && u2.call(l2);
              } finally {
                if (s2)
                  throw s2.error;
              }
            }
          }, t.dom_runInsertionSteps = function(e2) {
          }, t.dom_runNodeIteratorPreRemovingSteps = function(e2, t2) {
            l.call(e2, e2, t2);
          }, t.dom_hasSupportedTokens = function(e2) {
            return u.has(e2);
          }, t.dom_getSupportedTokens = function(e2) {
            return u.get(e2) || /* @__PURE__ */ new Set();
          }, t.dom_runEventConstructingSteps = function(e2) {
          }, t.dom_runChildTextContentChangeSteps = function(e2) {
          };
        }, function(e, t, r) {
          "use strict";
          var n = r(4), i = r(11), o = r(46), a = r(44), s = r(16), u = r(86), l = r(124), c = r(8), h = r(14), p = r(59), f = r(13), d = r(18), m = r(27), y = r(24), v = r(56), _ = r(40), g = r(60), b = r(61), x = r(82), w = r(190), E = r(85), D = r(55), S = r(15), C = r(79), A = r(21), N = r(25), T = r(81), O = r(57), F = r(45), k = r(58), P = r(5), I = r(125), L = r(126), M = r(62), B = r(43), j = r(36).forEach, R = O("hidden"), z2 = P("toPrimitive"), U = B.set, G = B.getterFor("Symbol"), X = Object.prototype, q = i.Symbol, W = o("JSON", "stringify"), H = D.f, J = S.f, Y = w.f, V = C.f, K = T("symbols"), $ = T("op-symbols"), Q = T("string-to-symbol-registry"), Z = T("symbol-to-string-registry"), ee = T("wks"), te = i.QObject, re = !te || !te.prototype || !te.prototype.findChild, ne = s && c(function() {
            return 7 != g(J({}, "a", { get: function() {
              return J(this, "a", { value: 7 }).a;
            } })).a;
          }) ? function(e2, t2, r2) {
            var n2 = H(X, t2);
            n2 && delete X[t2], J(e2, t2, r2), n2 && e2 !== X && J(X, t2, n2);
          } : J, ie = function(e2, t2) {
            var r2 = K[e2] = g(q.prototype);
            return U(r2, { type: "Symbol", tag: e2, description: t2 }), s || (r2.description = t2), r2;
          }, oe = l ? function(e2) {
            return "symbol" == typeof e2;
          } : function(e2) {
            return Object(e2) instanceof q;
          }, ae = function(e2, t2, r2) {
            e2 === X && ae($, t2, r2), d(e2);
            var n2 = v(t2, true);
            return d(r2), h(K, n2) ? (r2.enumerable ? (h(e2, R) && e2[R][n2] && (e2[R][n2] = false), r2 = g(r2, { enumerable: _(0, false) })) : (h(e2, R) || J(e2, R, _(1, {})), e2[R][n2] = true), ne(e2, n2, r2)) : J(e2, n2, r2);
          }, se = function(e2, t2) {
            d(e2);
            var r2 = y(t2), n2 = b(r2).concat(he(r2));
            return j(n2, function(t3) {
              s && !ue.call(r2, t3) || ae(e2, t3, r2[t3]);
            }), e2;
          }, ue = function(e2) {
            var t2 = v(e2, true), r2 = V.call(this, t2);
            return !(this === X && h(K, t2) && !h($, t2)) && (!(r2 || !h(this, t2) || !h(K, t2) || h(this, R) && this[R][t2]) || r2);
          }, le = function(e2, t2) {
            var r2 = y(e2), n2 = v(t2, true);
            if (r2 !== X || !h(K, n2) || h($, n2)) {
              var i2 = H(r2, n2);
              return !i2 || !h(K, n2) || h(r2, R) && r2[R][n2] || (i2.enumerable = true), i2;
            }
          }, ce = function(e2) {
            var t2 = Y(y(e2)), r2 = [];
            return j(t2, function(e3) {
              h(K, e3) || h(F, e3) || r2.push(e3);
            }), r2;
          }, he = function(e2) {
            var t2 = e2 === X, r2 = Y(t2 ? $ : y(e2)), n2 = [];
            return j(r2, function(e3) {
              !h(K, e3) || t2 && !h(X, e3) || n2.push(K[e3]);
            }), n2;
          };
          (u || (N((q = function() {
            if (this instanceof q)
              throw TypeError("Symbol is not a constructor");
            var e2 = arguments.length && void 0 !== arguments[0] ? String(arguments[0]) : void 0, t2 = k(e2), r2 = function(e3) {
              this === X && r2.call($, e3), h(this, R) && h(this[R], t2) && (this[R][t2] = false), ne(this, t2, _(1, e3));
            };
            return s && re && ne(X, t2, { configurable: true, set: r2 }), ie(t2, e2);
          }).prototype, "toString", function() {
            return G(this).tag;
          }), N(q, "withoutSetter", function(e2) {
            return ie(k(e2), e2);
          }), C.f = ue, S.f = ae, D.f = le, x.f = w.f = ce, E.f = he, I.f = function(e2) {
            return ie(P(e2), e2);
          }, s && (J(q.prototype, "description", { configurable: true, get: function() {
            return G(this).description;
          } }), a || N(X, "propertyIsEnumerable", ue, { unsafe: true }))), n({ global: true, wrap: true, forced: !u, sham: !u }, { Symbol: q }), j(b(ee), function(e2) {
            L(e2);
          }), n({ target: "Symbol", stat: true, forced: !u }, { for: function(e2) {
            var t2 = String(e2);
            if (h(Q, t2))
              return Q[t2];
            var r2 = q(t2);
            return Q[t2] = r2, Z[r2] = t2, r2;
          }, keyFor: function(e2) {
            if (!oe(e2))
              throw TypeError(e2 + " is not a symbol");
            if (h(Z, e2))
              return Z[e2];
          }, useSetter: function() {
            re = true;
          }, useSimple: function() {
            re = false;
          } }), n({ target: "Object", stat: true, forced: !u, sham: !s }, { create: function(e2, t2) {
            return void 0 === t2 ? g(e2) : se(g(e2), t2);
          }, defineProperty: ae, defineProperties: se, getOwnPropertyDescriptor: le }), n({ target: "Object", stat: true, forced: !u }, { getOwnPropertyNames: ce, getOwnPropertySymbols: he }), n({ target: "Object", stat: true, forced: c(function() {
            E.f(1);
          }) }, { getOwnPropertySymbols: function(e2) {
            return E.f(m(e2));
          } }), W) && n({ target: "JSON", stat: true, forced: !u || c(function() {
            var e2 = q();
            return "[null]" != W([e2]) || "{}" != W({ a: e2 }) || "{}" != W(Object(e2));
          }) }, { stringify: function(e2, t2, r2) {
            for (var n2, i2 = [e2], o2 = 1; arguments.length > o2; )
              i2.push(arguments[o2++]);
            if (n2 = t2, (f(t2) || void 0 !== e2) && !oe(e2))
              return p(t2) || (t2 = function(e3, t3) {
                if ("function" == typeof n2 && (t3 = n2.call(this, e3, t3)), !oe(t3))
                  return t3;
              }), i2[1] = t2, W.apply(null, i2);
          } });
          q.prototype[z2] || A(q.prototype, z2, q.prototype.valueOf), M(q, "Symbol"), F[R] = true;
        }, function(e, t, r) {
          "use strict";
          var n = r(4), i = r(16), o = r(11), a = r(14), s = r(13), u = r(15).f, l = r(119), c = o.Symbol;
          if (i && "function" == typeof c && (!("description" in c.prototype) || void 0 !== c().description)) {
            var h = {}, p = function() {
              var e2 = arguments.length < 1 || void 0 === arguments[0] ? void 0 : String(arguments[0]), t2 = this instanceof p ? new c(e2) : void 0 === e2 ? c() : c(e2);
              return "" === e2 && (h[t2] = true), t2;
            };
            l(p, c);
            var f = p.prototype = c.prototype;
            f.constructor = p;
            var d = f.toString, m = "Symbol(test)" == String(c("test")), y = /^Symbol\((.*)\)[^)]+$/;
            u(f, "description", { configurable: true, get: function() {
              var e2 = s(this) ? this.valueOf() : this, t2 = d.call(e2);
              if (a(h, e2))
                return "";
              var r2 = m ? t2.slice(7, -1) : t2.replace(y, "$1");
              return "" === r2 ? void 0 : r2;
            } }), n({ global: true, forced: true }, { Symbol: p });
          }
        }, function(e, t, r) {
          r(126)("iterator");
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          }), o = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var a = r(6), s = r(1), u = r(70), l = r(3), c = r(9), h = r(0), p = r(152), f = r(12), d = function(e2) {
            function t2() {
              var t3 = e2.call(this) || this;
              return t3._parent = null, t3._firstChild = null, t3._lastChild = null, t3._previousSibling = null, t3._nextSibling = null, t3;
            }
            return i(t2, e2), Object.defineProperty(t2.prototype, "_childNodes", { get: function() {
              return this.__childNodes || (this.__childNodes = h.create_nodeList(this));
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "_nodeDocument", { get: function() {
              return this._nodeDocumentOverride || a.dom.window._associatedDocument;
            }, set: function(e3) {
              this._nodeDocumentOverride = e3;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "_registeredObserverList", { get: function() {
              return this.__registeredObserverList || (this.__registeredObserverList = []);
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nodeType", { get: function() {
              return this._nodeType;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nodeName", { get: function() {
              return l.Guard.isElementNode(this) ? this._htmlUppercasedQualifiedName : l.Guard.isAttrNode(this) ? this._qualifiedName : l.Guard.isExclusiveTextNode(this) ? "#text" : l.Guard.isCDATASectionNode(this) ? "#cdata-section" : l.Guard.isProcessingInstructionNode(this) ? this._target : l.Guard.isCommentNode(this) ? "#comment" : l.Guard.isDocumentNode(this) ? "#document" : l.Guard.isDocumentTypeNode(this) ? this._name : l.Guard.isDocumentFragmentNode(this) ? "#document-fragment" : "";
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "baseURI", { get: function() {
              return p.urlSerializer(this._nodeDocument._URL);
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "isConnected", { get: function() {
              return l.Guard.isElementNode(this) && h.shadowTree_isConnected(this);
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "ownerDocument", { get: function() {
              return this._nodeType === s.NodeType.Document ? null : this._nodeDocument;
            }, enumerable: true, configurable: true }), t2.prototype.getRootNode = function(e3) {
              return h.tree_rootNode(this, !!e3 && e3.composed);
            }, Object.defineProperty(t2.prototype, "parentNode", { get: function() {
              return this._nodeType === s.NodeType.Attribute ? null : this._parent;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "parentElement", { get: function() {
              return this._parent && l.Guard.isElementNode(this._parent) ? this._parent : null;
            }, enumerable: true, configurable: true }), t2.prototype.hasChildNodes = function() {
              return null !== this._firstChild;
            }, Object.defineProperty(t2.prototype, "childNodes", { get: function() {
              return this._childNodes;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "firstChild", { get: function() {
              return this._firstChild;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "lastChild", { get: function() {
              return this._lastChild;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "previousSibling", { get: function() {
              return this._previousSibling;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nextSibling", { get: function() {
              return this._nextSibling;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nodeValue", { get: function() {
              return l.Guard.isAttrNode(this) ? this._value : l.Guard.isCharacterDataNode(this) ? this._data : null;
            }, set: function(e3) {
              null === e3 && (e3 = ""), l.Guard.isAttrNode(this) ? h.attr_setAnExistingAttributeValue(this, e3) : l.Guard.isCharacterDataNode(this) && h.characterData_replaceData(this, 0, this._data.length, e3);
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "textContent", { get: function() {
              return l.Guard.isDocumentFragmentNode(this) || l.Guard.isElementNode(this) ? h.text_descendantTextContent(this) : l.Guard.isAttrNode(this) ? this._value : l.Guard.isCharacterDataNode(this) ? this._data : null;
            }, set: function(e3) {
              null === e3 && (e3 = ""), l.Guard.isDocumentFragmentNode(this) || l.Guard.isElementNode(this) ? h.node_stringReplaceAll(e3, this) : l.Guard.isAttrNode(this) ? h.attr_setAnExistingAttributeValue(this, e3) : l.Guard.isCharacterDataNode(this) && h.characterData_replaceData(this, 0, h.tree_nodeLength(this), e3);
            }, enumerable: true, configurable: true }), t2.prototype.normalize = function() {
              for (var e3, t3, r2, n2, i2 = [], s2 = h.tree_getFirstDescendantNode(this, false, false, function(e4) {
                return l.Guard.isExclusiveTextNode(e4);
              }); null !== s2; )
                i2.push(s2), s2 = h.tree_getNextDescendantNode(this, s2, false, false, function(e4) {
                  return l.Guard.isExclusiveTextNode(e4);
                });
              for (var u2 = 0; u2 < i2.length; u2++) {
                var c2 = i2[u2];
                if (null !== c2._parent) {
                  var p2 = h.tree_nodeLength(c2);
                  if (0 !== p2) {
                    var f2 = [], d2 = "";
                    try {
                      for (var m = (e3 = void 0, o(h.text_contiguousExclusiveTextNodes(c2))), y = m.next(); !y.done; y = m.next()) {
                        var v = y.value;
                        f2.push(v), d2 += v._data;
                      }
                    } catch (t4) {
                      e3 = { error: t4 };
                    } finally {
                      try {
                        y && !y.done && (t3 = m.return) && t3.call(m);
                      } finally {
                        if (e3)
                          throw e3.error;
                      }
                    }
                    if (h.characterData_replaceData(c2, p2, 0, d2), 0 !== a.dom.rangeList.size)
                      for (var _ = c2._nextSibling; null !== _ && l.Guard.isExclusiveTextNode(_); ) {
                        var g = _, b = h.tree_index(g);
                        try {
                          for (var x = (r2 = void 0, o(a.dom.rangeList)), w = x.next(); !w.done; w = x.next()) {
                            var E = w.value;
                            E._start[0] === g && (E._start[0] = c2, E._start[1] += p2), E._end[0] === g && (E._end[0] = c2, E._end[1] += p2), E._start[0] === g._parent && E._start[1] === b && (E._start[0] = c2, E._start[1] = p2), E._end[0] === g._parent && E._end[1] === b && (E._end[0] = c2, E._end[1] = p2);
                          }
                        } catch (e4) {
                          r2 = { error: e4 };
                        } finally {
                          try {
                            w && !w.done && (n2 = x.return) && n2.call(x);
                          } finally {
                            if (r2)
                              throw r2.error;
                          }
                        }
                        p2 += h.tree_nodeLength(_), _ = _._nextSibling;
                      }
                    for (var D = 0; D < f2.length; D++) {
                      null !== (v = f2[D])._parent && h.mutation_remove(v, v._parent);
                    }
                  } else
                    h.mutation_remove(c2, c2._parent);
                }
              }
            }, t2.prototype.cloneNode = function(e3) {
              if (void 0 === e3 && (e3 = false), l.Guard.isShadowRoot(this))
                throw new c.NotSupportedError();
              return h.node_clone(this, null, e3);
            }, t2.prototype.isEqualNode = function(e3) {
              return void 0 === e3 && (e3 = null), null !== e3 && h.node_equals(this, e3);
            }, t2.prototype.isSameNode = function(e3) {
              return void 0 === e3 && (e3 = null), this === e3;
            }, t2.prototype.compareDocumentPosition = function(e3) {
              if (e3 === this)
                return 0;
              var t3 = e3, r2 = this, n2 = null, i2 = null;
              if (l.Guard.isAttrNode(t3) && (t3 = (n2 = t3)._element), l.Guard.isAttrNode(r2) && (r2 = (i2 = r2)._element, n2 && t3 && t3 === r2))
                for (var o2 = 0; o2 < r2._attributeList.length; o2++) {
                  var u2 = r2._attributeList[o2];
                  if (h.node_equals(u2, n2))
                    return s.Position.ImplementationSpecific | s.Position.Preceding;
                  if (h.node_equals(u2, i2))
                    return s.Position.ImplementationSpecific | s.Position.Following;
                }
              return null === t3 || null === r2 || h.tree_rootNode(t3) !== h.tree_rootNode(r2) ? s.Position.Disconnected | s.Position.ImplementationSpecific | (a.dom.compareCache.check(this, e3) ? s.Position.Preceding : s.Position.Following) : !n2 && h.tree_isAncestorOf(r2, t3) || i2 && t3 === r2 ? s.Position.Contains | s.Position.Preceding : !i2 && h.tree_isDescendantOf(r2, t3) || n2 && t3 === r2 ? s.Position.ContainedBy | s.Position.Following : h.tree_isPreceding(r2, t3) ? s.Position.Preceding : s.Position.Following;
            }, t2.prototype.contains = function(e3) {
              return null !== e3 && h.tree_isDescendantOf(this, e3, true);
            }, t2.prototype.lookupPrefix = function(e3) {
              return e3 ? l.Guard.isElementNode(this) ? h.node_locateANamespacePrefix(this, e3) : l.Guard.isDocumentNode(this) ? null === this.documentElement ? null : h.node_locateANamespacePrefix(this.documentElement, e3) : l.Guard.isDocumentTypeNode(this) || l.Guard.isDocumentFragmentNode(this) ? null : l.Guard.isAttrNode(this) ? null === this._element ? null : h.node_locateANamespacePrefix(this._element, e3) : null !== this._parent && l.Guard.isElementNode(this._parent) ? h.node_locateANamespacePrefix(this._parent, e3) : null : null;
            }, t2.prototype.lookupNamespaceURI = function(e3) {
              return h.node_locateANamespace(this, e3 || null);
            }, t2.prototype.isDefaultNamespace = function(e3) {
              return e3 || (e3 = null), h.node_locateANamespace(this, null) === e3;
            }, t2.prototype.insertBefore = function(e3, t3) {
              return h.mutation_preInsert(e3, this, t3);
            }, t2.prototype.appendChild = function(e3) {
              return h.mutation_append(e3, this);
            }, t2.prototype.replaceChild = function(e3, t3) {
              return h.mutation_replace(t3, e3, this);
            }, t2.prototype.removeChild = function(e3) {
              return h.mutation_preRemove(e3, this);
            }, t2.prototype._getTheParent = function(e3) {
              return l.Guard.isSlotable(this) && h.shadowTree_isAssigned(this) ? this._assignedSlot : this._parent;
            }, t2.ELEMENT_NODE = 1, t2.ATTRIBUTE_NODE = 2, t2.TEXT_NODE = 3, t2.CDATA_SECTION_NODE = 4, t2.ENTITY_REFERENCE_NODE = 5, t2.ENTITY_NODE = 6, t2.PROCESSING_INSTRUCTION_NODE = 7, t2.COMMENT_NODE = 8, t2.DOCUMENT_NODE = 9, t2.DOCUMENT_TYPE_NODE = 10, t2.DOCUMENT_FRAGMENT_NODE = 11, t2.NOTATION_NODE = 12, t2.DOCUMENT_POSITION_DISCONNECTED = 1, t2.DOCUMENT_POSITION_PRECEDING = 2, t2.DOCUMENT_POSITION_FOLLOWING = 4, t2.DOCUMENT_POSITION_CONTAINS = 8, t2.DOCUMENT_POSITION_CONTAINED_BY = 16, t2.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32, t2;
          }(u.EventTargetImpl);
          t.NodeImpl = d, d.prototype._children = new l.EmptySet(), f.idl_defineConst(d.prototype, "ELEMENT_NODE", 1), f.idl_defineConst(d.prototype, "ATTRIBUTE_NODE", 2), f.idl_defineConst(d.prototype, "TEXT_NODE", 3), f.idl_defineConst(d.prototype, "CDATA_SECTION_NODE", 4), f.idl_defineConst(d.prototype, "ENTITY_REFERENCE_NODE", 5), f.idl_defineConst(d.prototype, "ENTITY_NODE", 6), f.idl_defineConst(d.prototype, "PROCESSING_INSTRUCTION_NODE", 7), f.idl_defineConst(d.prototype, "COMMENT_NODE", 8), f.idl_defineConst(d.prototype, "DOCUMENT_NODE", 9), f.idl_defineConst(d.prototype, "DOCUMENT_TYPE_NODE", 10), f.idl_defineConst(d.prototype, "DOCUMENT_FRAGMENT_NODE", 11), f.idl_defineConst(d.prototype, "NOTATION_NODE", 12), f.idl_defineConst(d.prototype, "DOCUMENT_POSITION_DISCONNECTED", 1), f.idl_defineConst(d.prototype, "DOCUMENT_POSITION_PRECEDING", 2), f.idl_defineConst(d.prototype, "DOCUMENT_POSITION_FOLLOWING", 4), f.idl_defineConst(d.prototype, "DOCUMENT_POSITION_CONTAINS", 8), f.idl_defineConst(d.prototype, "DOCUMENT_POSITION_CONTAINED_BY", 16), f.idl_defineConst(d.prototype, "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC", 32);
        }, function(e, t) {
          e.exports = function(e2) {
            if (null == e2)
              throw TypeError("Can't call method on " + e2);
            return e2;
          };
        }, function(e, t, r) {
          var n = r(87), i = r(41), o = r(27), a = r(26), s = r(128), u = [].push, l = function(e2) {
            var t2 = 1 == e2, r2 = 2 == e2, l2 = 3 == e2, c = 4 == e2, h = 6 == e2, p = 5 == e2 || h;
            return function(f, d, m, y) {
              for (var v, _, g = o(f), b = i(g), x = n(d, m, 3), w = a(b.length), E = 0, D = y || s, S = t2 ? D(f, w) : r2 ? D(f, 0) : void 0; w > E; E++)
                if ((p || E in b) && (_ = x(v = b[E], E, g), e2)) {
                  if (t2)
                    S[E] = _;
                  else if (_)
                    switch (e2) {
                      case 3:
                        return true;
                      case 5:
                        return v;
                      case 6:
                        return E;
                      case 2:
                        u.call(S, v);
                    }
                  else if (c)
                    return false;
                }
              return h ? -1 : l2 || c ? c : S;
            };
          };
          e.exports = { forEach: l(0), map: l(1), filter: l(2), some: l(3), every: l(4), find: l(5), findIndex: l(6) };
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          }, i = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          }, o = this && this.__spread || function() {
            for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
              e2 = e2.concat(i(arguments[t2]));
            return e2;
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var a = r(6), s = r(9), u = r(1), l = r(3), c = r(2), h = r(7), p = r(73), f = r(17), d = r(172), m = r(72), y = r(51), v = r(30), _ = r(106);
          function g(e2, t2, r2) {
            var i2, o2, a2, l2, c2, h2, p2, d2, m2 = t2._nodeType, y2 = e2._nodeType, v2 = r2 ? r2._nodeType : null;
            if (m2 !== u.NodeType.Document && m2 !== u.NodeType.DocumentFragment && m2 !== u.NodeType.Element)
              throw new s.HierarchyRequestError("Only document, document fragment and element nodes can contain child nodes. Parent node is " + t2.nodeName + ".");
            if (f.tree_isHostIncludingAncestorOf(t2, e2, true))
              throw new s.HierarchyRequestError("The node to be inserted cannot be an inclusive ancestor of parent node. Node is " + e2.nodeName + ", parent node is " + t2.nodeName + ".");
            if (null !== r2 && r2._parent !== t2)
              throw new s.NotFoundError("The reference child node cannot be found under parent node. Child node is " + r2.nodeName + ", parent node is " + t2.nodeName + ".");
            if (y2 !== u.NodeType.DocumentFragment && y2 !== u.NodeType.DocumentType && y2 !== u.NodeType.Element && y2 !== u.NodeType.Text && y2 !== u.NodeType.ProcessingInstruction && y2 !== u.NodeType.CData && y2 !== u.NodeType.Comment)
              throw new s.HierarchyRequestError("Only document fragment, document type, element, text, processing instruction, cdata section or comment nodes can be inserted. Node is " + e2.nodeName + ".");
            if (y2 === u.NodeType.Text && m2 === u.NodeType.Document)
              throw new s.HierarchyRequestError("Cannot insert a text node as a child of a document node. Node is " + e2.nodeName + ".");
            if (y2 === u.NodeType.DocumentType && m2 !== u.NodeType.Document)
              throw new s.HierarchyRequestError("A document type node can only be inserted under a document node. Parent node is " + t2.nodeName + ".");
            if (m2 === u.NodeType.Document) {
              if (y2 === u.NodeType.DocumentFragment) {
                var _2 = 0;
                try {
                  for (var g2 = n(e2._children), b2 = g2.next(); !b2.done; b2 = g2.next()) {
                    var x2 = b2.value;
                    if (x2._nodeType === u.NodeType.Element)
                      _2++;
                    else if (x2._nodeType === u.NodeType.Text)
                      throw new s.HierarchyRequestError("Cannot insert text a node as a child of a document node. Node is " + x2.nodeName + ".");
                  }
                } catch (e3) {
                  i2 = { error: e3 };
                } finally {
                  try {
                    b2 && !b2.done && (o2 = g2.return) && o2.call(g2);
                  } finally {
                    if (i2)
                      throw i2.error;
                  }
                }
                if (_2 > 1)
                  throw new s.HierarchyRequestError("A document node can only have one document element node. Document fragment to be inserted has " + _2 + " element nodes.");
                if (1 === _2) {
                  try {
                    for (var w2 = n(t2._children), E = w2.next(); !E.done; E = w2.next()) {
                      if (E.value._nodeType === u.NodeType.Element)
                        throw new s.HierarchyRequestError("The document node already has a document element node.");
                    }
                  } catch (e3) {
                    a2 = { error: e3 };
                  } finally {
                    try {
                      E && !E.done && (l2 = w2.return) && l2.call(w2);
                    } finally {
                      if (a2)
                        throw a2.error;
                    }
                  }
                  if (r2) {
                    if (v2 === u.NodeType.DocumentType)
                      throw new s.HierarchyRequestError("Cannot insert an element node before a document type node.");
                    for (var D = r2._nextSibling; D; ) {
                      if (D._nodeType === u.NodeType.DocumentType)
                        throw new s.HierarchyRequestError("Cannot insert an element node before a document type node.");
                      D = D._nextSibling;
                    }
                  }
                }
              } else if (y2 === u.NodeType.Element) {
                try {
                  for (var S = n(t2._children), C = S.next(); !C.done; C = S.next()) {
                    if (C.value._nodeType === u.NodeType.Element)
                      throw new s.HierarchyRequestError("Document already has a document element node. Node is " + e2.nodeName + ".");
                  }
                } catch (e3) {
                  c2 = { error: e3 };
                } finally {
                  try {
                    C && !C.done && (h2 = S.return) && h2.call(S);
                  } finally {
                    if (c2)
                      throw c2.error;
                  }
                }
                if (r2) {
                  if (v2 === u.NodeType.DocumentType)
                    throw new s.HierarchyRequestError("Cannot insert an element node before a document type node. Node is " + e2.nodeName + ".");
                  for (D = r2._nextSibling; D; ) {
                    if (D._nodeType === u.NodeType.DocumentType)
                      throw new s.HierarchyRequestError("Cannot insert an element node before a document type node. Node is " + e2.nodeName + ".");
                    D = D._nextSibling;
                  }
                }
              } else if (y2 === u.NodeType.DocumentType) {
                try {
                  for (var A = n(t2._children), N = A.next(); !N.done; N = A.next()) {
                    if (N.value._nodeType === u.NodeType.DocumentType)
                      throw new s.HierarchyRequestError("Document already has a document type node. Node is " + e2.nodeName + ".");
                  }
                } catch (e3) {
                  p2 = { error: e3 };
                } finally {
                  try {
                    N && !N.done && (d2 = A.return) && d2.call(A);
                  } finally {
                    if (p2)
                      throw p2.error;
                  }
                }
                if (r2)
                  for (var T = r2._previousSibling; T; ) {
                    if (T._nodeType === u.NodeType.Element)
                      throw new s.HierarchyRequestError("Cannot insert a document type node before an element node. Node is " + e2.nodeName + ".");
                    T = T._previousSibling;
                  }
                else
                  for (T = t2._firstChild; T; ) {
                    if (T._nodeType === u.NodeType.Element)
                      throw new s.HierarchyRequestError("Cannot insert a document type node before an element node. Node is " + e2.nodeName + ".");
                    T = T._nextSibling;
                  }
              }
            }
          }
          function b(e2, t2, r2) {
            g(e2, t2, r2);
            var n2 = r2;
            return n2 === e2 && (n2 = e2._nextSibling), _.document_adopt(e2, t2._nodeDocument), x(e2, t2, n2), e2;
          }
          function x(e2, t2, r2, i2) {
            var s2, d2;
            if (null !== r2 || e2._nodeType === u.NodeType.DocumentFragment) {
              var _2 = e2._nodeType === u.NodeType.DocumentFragment ? e2._children.size : 1;
              if (null !== r2 && 0 !== a.dom.rangeList.size) {
                var g2 = f.tree_index(r2);
                try {
                  for (var b2 = n(a.dom.rangeList), x2 = b2.next(); !x2.done; x2 = b2.next()) {
                    var E = x2.value;
                    E._start[0] === t2 && E._start[1] > g2 && (E._start[1] += _2), E._end[0] === t2 && E._end[1] > g2 && (E._end[1] += _2);
                  }
                } catch (e3) {
                  s2 = { error: e3 };
                } finally {
                  try {
                    x2 && !x2.done && (d2 = b2.return) && d2.call(b2);
                  } finally {
                    if (s2)
                      throw s2.error;
                  }
                }
              }
              var D = e2._nodeType === u.NodeType.DocumentFragment ? new (Array.bind.apply(Array, o([void 0], e2._children)))() : [e2];
              if (e2._nodeType === u.NodeType.DocumentFragment)
                for (; e2._firstChild; )
                  w(e2._firstChild, e2, true);
              a.dom.features.mutationObservers && e2._nodeType === u.NodeType.DocumentFragment && y.observer_queueTreeMutationRecord(e2, [], D, null, null);
              for (var S = r2 ? r2._previousSibling : t2._lastChild, C = null === r2 ? -1 : f.tree_index(r2), A = 0; A < D.length; A++) {
                var N = D[A];
                if (l.Guard.isElementNode(N) && (l.Guard.isDocumentNode(t2) && (t2._documentElement = N), N._nodeDocument._hasNamespaces || null === N._namespace && null === N._namespacePrefix || (N._nodeDocument._hasNamespaces = true)), N._parent = t2, null === r2 ? h.set.append(t2._children, N) : (h.set.insert(t2._children, N, C), C++), null === t2._firstChild)
                  N._previousSibling = null, N._nextSibling = null, t2._firstChild = N, t2._lastChild = N;
                else {
                  var T = r2 ? r2._previousSibling : t2._lastChild, O = r2 || null;
                  N._previousSibling = T, N._nextSibling = O, T && (T._nextSibling = N), O && (O._previousSibling = N), T || (t2._firstChild = N), O || (t2._lastChild = N);
                }
                a.dom.features.slots && null !== t2._shadowRoot && l.Guard.isSlotable(N) && m.shadowTree_assignASlot(N), a.dom.features.steps && l.Guard.isTextNode(N) && v.dom_runChildTextContentChangeSteps(t2), a.dom.features.slots && l.Guard.isShadowRoot(f.tree_rootNode(t2)) && l.Guard.isSlot(t2) && c.isEmpty(t2._assignedNodes) && m.shadowTree_signalASlotChange(t2), a.dom.features.slots && m.shadowTree_assignSlotablesForATree(f.tree_rootNode(N));
                for (var F = f.tree_getFirstDescendantNode(N, true, true); null !== F; )
                  a.dom.features.steps && v.dom_runInsertionSteps(F), a.dom.features.customElements && l.Guard.isElementNode(F) && m.shadowTree_isConnected(F) && (l.Guard.isCustomElementNode(F) ? p.customElement_enqueueACustomElementCallbackReaction(F, "connectedCallback", []) : p.customElement_tryToUpgrade(F)), F = f.tree_getNextDescendantNode(N, F, true, true);
              }
              a.dom.features.mutationObservers && (i2 || y.observer_queueTreeMutationRecord(t2, D, [], S, r2));
            } else
              !function(e3, t3, r3) {
                var n2 = t3._lastChild;
                l.Guard.isElementNode(e3) && (l.Guard.isDocumentNode(t3) && (t3._documentElement = e3), e3._nodeDocument._hasNamespaces || null === e3._namespace && null === e3._namespacePrefix || (e3._nodeDocument._hasNamespaces = true));
                if (e3._parent = t3, t3._children.add(e3), null === t3._firstChild)
                  e3._previousSibling = null, e3._nextSibling = null, t3._firstChild = e3, t3._lastChild = e3;
                else {
                  var i3 = t3._lastChild;
                  e3._previousSibling = i3, e3._nextSibling = null, i3 && (i3._nextSibling = e3), i3 || (t3._firstChild = e3), t3._lastChild = e3;
                }
                a.dom.features.slots && null !== t3._shadowRoot && l.Guard.isSlotable(e3) && m.shadowTree_assignASlot(e3);
                a.dom.features.steps && l.Guard.isTextNode(e3) && v.dom_runChildTextContentChangeSteps(t3);
                a.dom.features.slots && l.Guard.isShadowRoot(f.tree_rootNode(t3)) && l.Guard.isSlot(t3) && c.isEmpty(t3._assignedNodes) && m.shadowTree_signalASlotChange(t3);
                a.dom.features.slots && m.shadowTree_assignSlotablesForATree(f.tree_rootNode(e3));
                a.dom.features.steps && v.dom_runInsertionSteps(e3);
                a.dom.features.customElements && l.Guard.isElementNode(e3) && m.shadowTree_isConnected(e3) && (l.Guard.isCustomElementNode(e3) ? p.customElement_enqueueACustomElementCallbackReaction(e3, "connectedCallback", []) : p.customElement_tryToUpgrade(e3));
                a.dom.features.mutationObservers && (r3 || y.observer_queueTreeMutationRecord(t3, [e3], [], n2, null));
              }(e2, t2, i2);
          }
          function w(e2, t2, r2) {
            var i2, o2, s2, u2, h2, _2, g2, b2;
            if (0 !== a.dom.rangeList.size) {
              var x2 = f.tree_index(e2);
              try {
                for (var w2 = n(a.dom.rangeList), E = w2.next(); !E.done; E = w2.next()) {
                  var D = E.value;
                  f.tree_isDescendantOf(e2, D._start[0], true) && (D._start = [t2, x2]), f.tree_isDescendantOf(e2, D._end[0], true) && (D._end = [t2, x2]), D._start[0] === t2 && D._start[1] > x2 && D._start[1]--, D._end[0] === t2 && D._end[1] > x2 && D._end[1]--;
                }
              } catch (e3) {
                i2 = { error: e3 };
              } finally {
                try {
                  E && !E.done && (o2 = w2.return) && o2.call(w2);
                } finally {
                  if (i2)
                    throw i2.error;
                }
              }
              try {
                for (var S = n(a.dom.rangeList), C = S.next(); !C.done; C = S.next()) {
                  (D = C.value)._start[0] === t2 && D._start[1] > x2 && (D._start[1] -= 1), D._end[0] === t2 && D._end[1] > x2 && (D._end[1] -= 1);
                }
              } catch (e3) {
                s2 = { error: e3 };
              } finally {
                try {
                  C && !C.done && (u2 = S.return) && u2.call(S);
                } finally {
                  if (s2)
                    throw s2.error;
                }
              }
            }
            if (a.dom.features.steps)
              try {
                for (var A = n(d.nodeIterator_iteratorList()), N = A.next(); !N.done; N = A.next()) {
                  var T = N.value;
                  T._root._nodeDocument === e2._nodeDocument && v.dom_runNodeIteratorPreRemovingSteps(T, e2);
                }
              } catch (e3) {
                h2 = { error: e3 };
              } finally {
                try {
                  N && !N.done && (_2 = A.return) && _2.call(A);
                } finally {
                  if (h2)
                    throw h2.error;
                }
              }
            var O = e2._previousSibling, F = e2._nextSibling;
            l.Guard.isDocumentNode(t2) && l.Guard.isElementNode(e2) && (t2._documentElement = null), e2._parent = null, t2._children.delete(e2);
            var k = e2._previousSibling, P = e2._nextSibling;
            (e2._previousSibling = null, e2._nextSibling = null, k && (k._nextSibling = P), P && (P._previousSibling = k), k || (t2._firstChild = P), P || (t2._lastChild = k), a.dom.features.slots && l.Guard.isSlotable(e2) && null !== e2._assignedSlot && m.shadowTree_isAssigned(e2) && m.shadowTree_assignSlotables(e2._assignedSlot), a.dom.features.slots && l.Guard.isShadowRoot(f.tree_rootNode(t2)) && l.Guard.isSlot(t2) && c.isEmpty(t2._assignedNodes) && m.shadowTree_signalASlotChange(t2), a.dom.features.slots) && (null !== f.tree_getFirstDescendantNode(e2, true, false, function(e3) {
              return l.Guard.isSlot(e3);
            }) && (m.shadowTree_assignSlotablesForATree(f.tree_rootNode(t2)), m.shadowTree_assignSlotablesForATree(e2)));
            a.dom.features.steps && v.dom_runRemovingSteps(e2, t2), a.dom.features.customElements && l.Guard.isCustomElementNode(e2) && p.customElement_enqueueACustomElementCallbackReaction(e2, "disconnectedCallback", []);
            for (var I = f.tree_getFirstDescendantNode(e2, false, true); null !== I; )
              a.dom.features.steps && v.dom_runRemovingSteps(I, e2), a.dom.features.customElements && l.Guard.isCustomElementNode(I) && p.customElement_enqueueACustomElementCallbackReaction(I, "disconnectedCallback", []), I = f.tree_getNextDescendantNode(e2, I, false, true);
            if (a.dom.features.mutationObservers)
              for (var L = f.tree_getFirstAncestorNode(t2, true); null !== L; ) {
                try {
                  for (var M = (g2 = void 0, n(L._registeredObserverList)), B = M.next(); !B.done; B = M.next()) {
                    var j = B.value;
                    j.options.subtree && e2._registeredObserverList.push({ observer: j.observer, options: j.options, source: j });
                  }
                } catch (e3) {
                  g2 = { error: e3 };
                } finally {
                  try {
                    B && !B.done && (b2 = M.return) && b2.call(M);
                  } finally {
                    if (g2)
                      throw g2.error;
                  }
                }
                L = f.tree_getNextAncestorNode(t2, L, true);
              }
            a.dom.features.mutationObservers && (r2 || y.observer_queueTreeMutationRecord(t2, [], [e2], O, F)), a.dom.features.steps && l.Guard.isTextNode(e2) && v.dom_runChildTextContentChangeSteps(t2);
          }
          t.mutation_ensurePreInsertionValidity = g, t.mutation_preInsert = b, t.mutation_insert = x, t.mutation_append = function(e2, t2) {
            return b(e2, t2, null);
          }, t.mutation_replace = function(e2, t2, r2) {
            var i2, o2, l2, c2, h2, p2, d2, m2;
            if (r2._nodeType !== u.NodeType.Document && r2._nodeType !== u.NodeType.DocumentFragment && r2._nodeType !== u.NodeType.Element)
              throw new s.HierarchyRequestError("Only document, document fragment and element nodes can contain child nodes. Parent node is " + r2.nodeName + ".");
            if (f.tree_isHostIncludingAncestorOf(r2, t2, true))
              throw new s.HierarchyRequestError("The node to be inserted cannot be an ancestor of parent node. Node is " + t2.nodeName + ", parent node is " + r2.nodeName + ".");
            if (e2._parent !== r2)
              throw new s.NotFoundError("The reference child node cannot be found under parent node. Child node is " + e2.nodeName + ", parent node is " + r2.nodeName + ".");
            if (t2._nodeType !== u.NodeType.DocumentFragment && t2._nodeType !== u.NodeType.DocumentType && t2._nodeType !== u.NodeType.Element && t2._nodeType !== u.NodeType.Text && t2._nodeType !== u.NodeType.ProcessingInstruction && t2._nodeType !== u.NodeType.CData && t2._nodeType !== u.NodeType.Comment)
              throw new s.HierarchyRequestError("Only document fragment, document type, element, text, processing instruction, cdata section or comment nodes can be inserted. Node is " + t2.nodeName + ".");
            if (t2._nodeType === u.NodeType.Text && r2._nodeType === u.NodeType.Document)
              throw new s.HierarchyRequestError("Cannot insert a text node as a child of a document node. Node is " + t2.nodeName + ".");
            if (t2._nodeType === u.NodeType.DocumentType && r2._nodeType !== u.NodeType.Document)
              throw new s.HierarchyRequestError("A document type node can only be inserted under a document node. Parent node is " + r2.nodeName + ".");
            if (r2._nodeType === u.NodeType.Document) {
              if (t2._nodeType === u.NodeType.DocumentFragment) {
                var v2 = 0;
                try {
                  for (var g2 = n(t2._children), b2 = g2.next(); !b2.done; b2 = g2.next()) {
                    var E = b2.value;
                    if (E._nodeType === u.NodeType.Element)
                      v2++;
                    else if (E._nodeType === u.NodeType.Text)
                      throw new s.HierarchyRequestError("Cannot insert text a node as a child of a document node. Node is " + E.nodeName + ".");
                  }
                } catch (e3) {
                  i2 = { error: e3 };
                } finally {
                  try {
                    b2 && !b2.done && (o2 = g2.return) && o2.call(g2);
                  } finally {
                    if (i2)
                      throw i2.error;
                  }
                }
                if (v2 > 1)
                  throw new s.HierarchyRequestError("A document node can only have one document element node. Document fragment to be inserted has " + v2 + " element nodes.");
                if (1 === v2) {
                  try {
                    for (var D = n(r2._children), S = D.next(); !S.done; S = D.next()) {
                      if ((F = S.value)._nodeType === u.NodeType.Element && F !== e2)
                        throw new s.HierarchyRequestError("The document node already has a document element node.");
                    }
                  } catch (e3) {
                    l2 = { error: e3 };
                  } finally {
                    try {
                      S && !S.done && (c2 = D.return) && c2.call(D);
                    } finally {
                      if (l2)
                        throw l2.error;
                    }
                  }
                  for (var C = e2._nextSibling; C; ) {
                    if (C._nodeType === u.NodeType.DocumentType)
                      throw new s.HierarchyRequestError("Cannot insert an element node before a document type node.");
                    C = C._nextSibling;
                  }
                }
              } else if (t2._nodeType === u.NodeType.Element) {
                try {
                  for (var A = n(r2._children), N = A.next(); !N.done; N = A.next()) {
                    if ((F = N.value)._nodeType === u.NodeType.Element && F !== e2)
                      throw new s.HierarchyRequestError("Document already has a document element node. Node is " + t2.nodeName + ".");
                  }
                } catch (e3) {
                  h2 = { error: e3 };
                } finally {
                  try {
                    N && !N.done && (p2 = A.return) && p2.call(A);
                  } finally {
                    if (h2)
                      throw h2.error;
                  }
                }
                for (C = e2._nextSibling; C; ) {
                  if (C._nodeType === u.NodeType.DocumentType)
                    throw new s.HierarchyRequestError("Cannot insert an element node before a document type node. Node is " + t2.nodeName + ".");
                  C = C._nextSibling;
                }
              } else if (t2._nodeType === u.NodeType.DocumentType) {
                try {
                  for (var T = n(r2._children), O = T.next(); !O.done; O = T.next()) {
                    var F;
                    if ((F = O.value)._nodeType === u.NodeType.DocumentType && F !== e2)
                      throw new s.HierarchyRequestError("Document already has a document type node. Node is " + t2.nodeName + ".");
                  }
                } catch (e3) {
                  d2 = { error: e3 };
                } finally {
                  try {
                    O && !O.done && (m2 = T.return) && m2.call(T);
                  } finally {
                    if (d2)
                      throw d2.error;
                  }
                }
                for (var k = e2._previousSibling; k; ) {
                  if (k._nodeType === u.NodeType.Element)
                    throw new s.HierarchyRequestError("Cannot insert a document type node before an element node. Node is " + t2.nodeName + ".");
                  k = k._previousSibling;
                }
              }
            }
            var P = e2._nextSibling;
            P === t2 && (P = t2._nextSibling);
            var I = e2._previousSibling;
            _.document_adopt(t2, r2._nodeDocument);
            var L = [];
            null !== e2._parent && (L.push(e2), w(e2, e2._parent, true));
            var M = [];
            return t2._nodeType === u.NodeType.DocumentFragment ? M = Array.from(t2._children) : M.push(t2), x(t2, r2, P, true), a.dom.features.mutationObservers && y.observer_queueTreeMutationRecord(r2, M, L, I, P), e2;
          }, t.mutation_replaceAll = function(e2, t2) {
            var r2, i2;
            null !== e2 && _.document_adopt(e2, t2._nodeDocument);
            var o2 = Array.from(t2._children), s2 = [];
            e2 && e2._nodeType === u.NodeType.DocumentFragment ? s2 = Array.from(e2._children) : null !== e2 && s2.push(e2);
            try {
              for (var l2 = n(o2), c2 = l2.next(); !c2.done; c2 = l2.next()) {
                w(c2.value, t2, true);
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                c2 && !c2.done && (i2 = l2.return) && i2.call(l2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            null !== e2 && x(e2, t2, null, true), a.dom.features.mutationObservers && y.observer_queueTreeMutationRecord(t2, s2, o2, null, null);
          }, t.mutation_preRemove = function(e2, t2) {
            if (e2._parent !== t2)
              throw new s.NotFoundError("The child node cannot be found under parent node. Child node is " + e2.nodeName + ", parent node is " + t2.nodeName + ".");
            return w(e2, t2), e2;
          }, t.mutation_remove = w;
        }, function(e, t, r) {
          "use strict";
          function n(e2) {
            return null == e2;
          }
          e.exports.isNothing = n, e.exports.isObject = function(e2) {
            return "object" == typeof e2 && null !== e2;
          }, e.exports.toArray = function(e2) {
            return Array.isArray(e2) ? e2 : n(e2) ? [] : [e2];
          }, e.exports.repeat = function(e2, t2) {
            var r2, n2 = "";
            for (r2 = 0; r2 < t2; r2 += 1)
              n2 += e2;
            return n2;
          }, e.exports.isNegativeZero = function(e2) {
            return 0 === e2 && Number.NEGATIVE_INFINITY === 1 / e2;
          }, e.exports.extend = function(e2, t2) {
            var r2, n2, i, o;
            if (t2)
              for (r2 = 0, n2 = (o = Object.keys(t2)).length; r2 < n2; r2 += 1)
                e2[i = o[r2]] = t2[i];
            return e2;
          };
        }, function(e, t, r) {
          "use strict";
          var n = r(38), i = r(53), o = r(10);
          function a(e2, t2, r2) {
            var n2 = [];
            return e2.include.forEach(function(e3) {
              r2 = a(e3, t2, r2);
            }), e2[t2].forEach(function(e3) {
              r2.forEach(function(t3, r3) {
                t3.tag === e3.tag && t3.kind === e3.kind && n2.push(r3);
              }), r2.push(e3);
            }), r2.filter(function(e3, t3) {
              return -1 === n2.indexOf(t3);
            });
          }
          function s(e2) {
            this.include = e2.include || [], this.implicit = e2.implicit || [], this.explicit = e2.explicit || [], this.implicit.forEach(function(e3) {
              if (e3.loadKind && "scalar" !== e3.loadKind)
                throw new i("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
            }), this.compiledImplicit = a(this, "implicit", []), this.compiledExplicit = a(this, "explicit", []), this.compiledTypeMap = function() {
              var e3, t2, r2 = { scalar: {}, sequence: {}, mapping: {}, fallback: {} };
              function n2(e4) {
                r2[e4.kind][e4.tag] = r2.fallback[e4.tag] = e4;
              }
              for (e3 = 0, t2 = arguments.length; e3 < t2; e3 += 1)
                arguments[e3].forEach(n2);
              return r2;
            }(this.compiledImplicit, this.compiledExplicit);
          }
          s.DEFAULT = null, s.create = function() {
            var e2, t2;
            switch (arguments.length) {
              case 1:
                e2 = s.DEFAULT, t2 = arguments[0];
                break;
              case 2:
                e2 = arguments[0], t2 = arguments[1];
                break;
              default:
                throw new i("Wrong number of arguments for Schema.create function");
            }
            if (e2 = n.toArray(e2), t2 = n.toArray(t2), !e2.every(function(e3) {
              return e3 instanceof s;
            }))
              throw new i("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");
            if (!t2.every(function(e3) {
              return e3 instanceof o;
            }))
              throw new i("Specified list of YAML types (or a single Type object) contains a non-Type object.");
            return new s({ include: e2, explicit: t2 });
          }, e.exports = s;
        }, function(e, t) {
          e.exports = function(e2, t2) {
            return { enumerable: !(1 & e2), configurable: !(2 & e2), writable: !(4 & e2), value: t2 };
          };
        }, function(e, t, r) {
          var n = r(8), i = r(42), o = "".split;
          e.exports = n(function() {
            return !Object("z").propertyIsEnumerable(0);
          }) ? function(e2) {
            return "String" == i(e2) ? o.call(e2, "") : Object(e2);
          } : Object;
        }, function(e, t) {
          var r = {}.toString;
          e.exports = function(e2) {
            return r.call(e2).slice(8, -1);
          };
        }, function(e, t, r) {
          var n, i, o, a = r(186), s = r(11), u = r(13), l = r(21), c = r(14), h = r(57), p = r(45), f = s.WeakMap;
          if (a) {
            var d = new f(), m = d.get, y = d.has, v = d.set;
            n = function(e2, t2) {
              return v.call(d, e2, t2), t2;
            }, i = function(e2) {
              return m.call(d, e2) || {};
            }, o = function(e2) {
              return y.call(d, e2);
            };
          } else {
            var _ = h("state");
            p[_] = true, n = function(e2, t2) {
              return l(e2, _, t2), t2;
            }, i = function(e2) {
              return c(e2, _) ? e2[_] : {};
            }, o = function(e2) {
              return c(e2, _);
            };
          }
          e.exports = { set: n, get: i, has: o, enforce: function(e2) {
            return o(e2) ? i(e2) : n(e2, {});
          }, getterFor: function(e2) {
            return function(t2) {
              var r2;
              if (!u(t2) || (r2 = i(t2)).type !== e2)
                throw TypeError("Incompatible receiver, " + e2 + " required");
              return r2;
            };
          } };
        }, function(e, t) {
          e.exports = false;
        }, function(e, t) {
          e.exports = {};
        }, function(e, t, r) {
          var n = r(120), i = r(11), o = function(e2) {
            return "function" == typeof e2 ? e2 : void 0;
          };
          e.exports = function(e2, t2) {
            return arguments.length < 2 ? o(n[e2]) || o(i[e2]) : n[e2] && n[e2][t2] || i[e2] && i[e2][t2];
          };
        }, function(e, t) {
          var r = Math.ceil, n = Math.floor;
          e.exports = function(e2) {
            return isNaN(e2 = +e2) ? 0 : (e2 > 0 ? n : r)(e2);
          };
        }, function(e, t, r) {
          "use strict";
          var n = r(8);
          e.exports = function(e2, t2) {
            var r2 = [][e2];
            return !!r2 && n(function() {
              r2.call(null, t2 || function() {
                throw 1;
              }, 1);
            });
          };
        }, function(e, t) {
          e.exports = {};
        }, function(e, t, r) {
          "use strict";
          r(31), r(32), r(33), r(220), r(64), r(19), r(65), r(20), r(68), r(66), r(92), r(144), r(22), r(94), r(23);
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          }, i = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          }, o = this && this.__spread || function() {
            for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
              e2 = e2.concat(i(arguments[t2]));
            return e2;
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var a = r(1), s = r(69), u = r(95), l = r(7), c = r(0), h = r(258), p = function() {
            function e2(e3) {
              this.level = 0, this._builderOptions = e3;
            }
            return e2.prototype.declaration = function(e3, t2, r2) {
            }, e2.prototype.docType = function(e3, t2, r2) {
            }, e2.prototype.comment = function(e3) {
            }, e2.prototype.text = function(e3) {
            }, e2.prototype.instruction = function(e3, t2) {
            }, e2.prototype.cdata = function(e3) {
            }, e2.prototype.openTagBegin = function(e3) {
            }, e2.prototype.openTagEnd = function(e3, t2, r2) {
            }, e2.prototype.closeTag = function(e3) {
            }, e2.prototype.attributes = function(e3) {
              var t2, r2;
              try {
                for (var i2 = n(e3), o2 = i2.next(); !o2.done; o2 = i2.next()) {
                  var a2 = o2.value;
                  this.attribute(null === a2[1] ? a2[2] : a2[1] + ":" + a2[2], a2[3]);
                }
              } catch (e4) {
                t2 = { error: e4 };
              } finally {
                try {
                  o2 && !o2.done && (r2 = i2.return) && r2.call(i2);
                } finally {
                  if (t2)
                    throw t2.error;
                }
              }
            }, e2.prototype.attribute = function(e3, t2) {
            }, e2.prototype.beginElement = function(e3) {
            }, e2.prototype.endElement = function(e3) {
            }, e2.prototype.serializeNode = function(e3, t2) {
              var r2 = void 0 !== e3._nodeDocument && e3._nodeDocument._hasNamespaces;
              if (this.level = 0, this.currentNode = e3, r2) {
                var n2 = new u.NamespacePrefixMap();
                n2.set("xml", l.namespace.XML);
                this._serializeNodeNS(e3, null, n2, { value: 1 }, t2);
              } else
                this._serializeNode(e3, t2);
            }, e2.prototype._serializeNodeNS = function(e3, t2, r2, n2, i2) {
              switch (this.currentNode = e3, e3.nodeType) {
                case a.NodeType.Element:
                  this._serializeElementNS(e3, t2, r2, n2, i2);
                  break;
                case a.NodeType.Document:
                  this._serializeDocumentNS(e3, t2, r2, n2, i2);
                  break;
                case a.NodeType.Comment:
                  this._serializeComment(e3, i2);
                  break;
                case a.NodeType.Text:
                  this._serializeText(e3, i2);
                  break;
                case a.NodeType.DocumentFragment:
                  this._serializeDocumentFragmentNS(e3, t2, r2, n2, i2);
                  break;
                case a.NodeType.DocumentType:
                  this._serializeDocumentType(e3, i2);
                  break;
                case a.NodeType.ProcessingInstruction:
                  this._serializeProcessingInstruction(e3, i2);
                  break;
                case a.NodeType.CData:
                  this._serializeCData(e3, i2);
                  break;
                default:
                  throw new Error("Unknown node type: " + e3.nodeType);
              }
            }, e2.prototype._serializeNode = function(e3, t2) {
              switch (this.currentNode = e3, e3.nodeType) {
                case a.NodeType.Element:
                  this._serializeElement(e3, t2);
                  break;
                case a.NodeType.Document:
                  this._serializeDocument(e3, t2);
                  break;
                case a.NodeType.Comment:
                  this._serializeComment(e3, t2);
                  break;
                case a.NodeType.Text:
                  this._serializeText(e3, t2);
                  break;
                case a.NodeType.DocumentFragment:
                  this._serializeDocumentFragment(e3, t2);
                  break;
                case a.NodeType.DocumentType:
                  this._serializeDocumentType(e3, t2);
                  break;
                case a.NodeType.ProcessingInstruction:
                  this._serializeProcessingInstruction(e3, t2);
                  break;
                case a.NodeType.CData:
                  this._serializeCData(e3, t2);
                  break;
                default:
                  throw new Error("Unknown node type: " + e3.nodeType);
              }
            }, e2.prototype._serializeElementNS = function(t2, r2, i2, a2, s2) {
              var u2, h2, p2 = [];
              if (s2 && (-1 !== t2.localName.indexOf(":") || !c.xml_isName(t2.localName)))
                throw new Error("Node local name contains invalid characters (well-formed required).");
              var f = "", d = false, m = false, y = i2.copy(), v = {}, _ = this._recordNamespaceInformation(t2, y, v), g = r2, b = t2.namespaceURI;
              if (g === b)
                null !== _ && (m = true), f = b === l.namespace.XML ? "xml:" + t2.localName : t2.localName, this.beginElement(f), this.openTagBegin(f);
              else {
                var x = t2.prefix, w = null;
                if (null === x && b === _ || (w = y.get(x, b)), "xmlns" === x) {
                  if (s2)
                    throw new Error("An element cannot have the 'xmlns' prefix (well-formed required).");
                  w = x;
                }
                null !== w ? (f = w + ":" + t2.localName, null !== _ && _ !== l.namespace.XML && (g = _ || null), this.beginElement(f), this.openTagBegin(f)) : null !== x ? (x in v && (x = this._generatePrefix(b, y, a2)), y.set(x, b), f += x + ":" + t2.localName, this.beginElement(f), this.openTagBegin(f), p2.push([null, "xmlns", x, this._serializeAttributeValue(b, s2)]), null !== _ && (g = _ || null)) : null === _ || null !== _ && _ !== b ? (m = true, f += t2.localName, g = b, this.beginElement(f), this.openTagBegin(f), p2.push([null, null, "xmlns", this._serializeAttributeValue(b, s2)])) : (f += t2.localName, g = b, this.beginElement(f), this.openTagBegin(f));
              }
              p2.push.apply(p2, o(this._serializeAttributesNS(t2, y, a2, v, m, s2))), this.attributes(p2);
              var E = b === l.namespace.HTML;
              if (E && 0 === t2.childNodes.length && e2._VoidElementNames.has(t2.localName) ? (this.openTagEnd(f, true, true), this.endElement(f), d = true) : E || 0 !== t2.childNodes.length ? this.openTagEnd(f, false, false) : (this.openTagEnd(f, true, false), this.endElement(f), d = true), !d) {
                if (E && "template" === t2.localName)
                  ;
                else
                  try {
                    for (var D = n(t2.childNodes), S = D.next(); !S.done; S = D.next()) {
                      var C = S.value;
                      this.level++, this._serializeNodeNS(C, g, y, a2, s2), this.level--;
                    }
                  } catch (e3) {
                    u2 = { error: e3 };
                  } finally {
                    try {
                      S && !S.done && (h2 = D.return) && h2.call(D);
                    } finally {
                      if (u2)
                        throw u2.error;
                    }
                  }
                this.closeTag(f), this.endElement(f);
              }
            }, e2.prototype._serializeElement = function(e3, t2) {
              var r2, i2;
              if (t2 && (-1 !== e3.localName.indexOf(":") || !c.xml_isName(e3.localName)))
                throw new Error("Node local name contains invalid characters (well-formed required).");
              var o2 = false, a2 = e3.localName;
              this.beginElement(a2), this.openTagBegin(a2);
              var s2 = this._serializeAttributes(e3, t2);
              if (this.attributes(s2), e3.hasChildNodes() ? this.openTagEnd(a2, false, false) : (this.openTagEnd(a2, true, false), this.endElement(a2), o2 = true), !o2) {
                try {
                  for (var u2 = n(e3._children), l2 = u2.next(); !l2.done; l2 = u2.next()) {
                    var h2 = l2.value;
                    this.level++, this._serializeNode(h2, t2), this.level--;
                  }
                } catch (e4) {
                  r2 = { error: e4 };
                } finally {
                  try {
                    l2 && !l2.done && (i2 = u2.return) && i2.call(u2);
                  } finally {
                    if (r2)
                      throw r2.error;
                  }
                }
                this.closeTag(a2), this.endElement(a2);
              }
            }, e2.prototype._serializeDocumentNS = function(e3, t2, r2, i2, o2) {
              var a2, s2;
              if (o2 && null === e3.documentElement)
                throw new Error("Missing document element (well-formed required).");
              try {
                for (var u2 = n(e3.childNodes), l2 = u2.next(); !l2.done; l2 = u2.next()) {
                  var c2 = l2.value;
                  this._serializeNodeNS(c2, t2, r2, i2, o2);
                }
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  l2 && !l2.done && (s2 = u2.return) && s2.call(u2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
            }, e2.prototype._serializeDocument = function(e3, t2) {
              var r2, i2;
              if (t2 && null === e3.documentElement)
                throw new Error("Missing document element (well-formed required).");
              try {
                for (var o2 = n(e3._children), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                  var s2 = a2.value;
                  this._serializeNode(s2, t2);
                }
              } catch (e4) {
                r2 = { error: e4 };
              } finally {
                try {
                  a2 && !a2.done && (i2 = o2.return) && i2.call(o2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
            }, e2.prototype._serializeComment = function(e3, t2) {
              if (t2 && (!c.xml_isLegalChar(e3.data) || -1 !== e3.data.indexOf("--") || e3.data.endsWith("-")))
                throw new Error("Comment data contains invalid characters (well-formed required).");
              this.comment(e3.data);
            }, e2.prototype._serializeText = function(e3, t2) {
              if (t2 && !c.xml_isLegalChar(e3.data))
                throw new Error("Text data contains invalid characters (well-formed required).");
              var r2 = e3.data.replace(h.nonEntityAmpersandRegex, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
              this.text(r2);
            }, e2.prototype._serializeDocumentFragmentNS = function(e3, t2, r2, i2, o2) {
              var a2, s2;
              try {
                for (var u2 = n(e3.childNodes), l2 = u2.next(); !l2.done; l2 = u2.next()) {
                  var c2 = l2.value;
                  this._serializeNodeNS(c2, t2, r2, i2, o2);
                }
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  l2 && !l2.done && (s2 = u2.return) && s2.call(u2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
            }, e2.prototype._serializeDocumentFragment = function(e3, t2) {
              var r2, i2;
              try {
                for (var o2 = n(e3._children), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                  var s2 = a2.value;
                  this._serializeNode(s2, t2);
                }
              } catch (e4) {
                r2 = { error: e4 };
              } finally {
                try {
                  a2 && !a2.done && (i2 = o2.return) && i2.call(o2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
            }, e2.prototype._serializeDocumentType = function(e3, t2) {
              if (t2 && !c.xml_isPubidChar(e3.publicId))
                throw new Error("DocType public identifier does not match PubidChar construct (well-formed required).");
              if (t2 && (!c.xml_isLegalChar(e3.systemId) || -1 !== e3.systemId.indexOf('"') && -1 !== e3.systemId.indexOf("'")))
                throw new Error("DocType system identifier contains invalid characters (well-formed required).");
              this.docType(e3.name, e3.publicId, e3.systemId);
            }, e2.prototype._serializeProcessingInstruction = function(e3, t2) {
              if (t2 && (-1 !== e3.target.indexOf(":") || /^xml$/i.test(e3.target)))
                throw new Error("Processing instruction target contains invalid characters (well-formed required).");
              if (t2 && (!c.xml_isLegalChar(e3.data) || -1 !== e3.data.indexOf("?>")))
                throw new Error("Processing instruction data contains invalid characters (well-formed required).");
              this.instruction(e3.target, e3.data);
            }, e2.prototype._serializeCData = function(e3, t2) {
              if (t2 && -1 !== e3.data.indexOf("]]>"))
                throw new Error("CDATA contains invalid characters (well-formed required).");
              this.cdata(e3.data);
            }, e2.prototype._serializeAttributesNS = function(e3, t2, r2, i2, o2, a2) {
              var u2, h2, p2 = [], f = a2 ? new s.LocalNameSet() : void 0;
              try {
                for (var d = n(e3.attributes), m = d.next(); !m.done; m = d.next()) {
                  var y = m.value;
                  if (a2 || o2 || null !== y.namespaceURI) {
                    if (a2 && f && f.has(y.namespaceURI, y.localName))
                      throw new Error("Element contains duplicate attributes (well-formed required).");
                    a2 && f && f.set(y.namespaceURI, y.localName);
                    var v = y.namespaceURI, _ = null;
                    if (null !== v)
                      if (_ = t2.get(y.prefix, v), v === l.namespace.XMLNS) {
                        if (y.value === l.namespace.XML || null === y.prefix && o2 || null !== y.prefix && (!(y.localName in i2) || i2[y.localName] !== y.value) && t2.has(y.localName, y.value))
                          continue;
                        if (a2 && y.value === l.namespace.XMLNS)
                          throw new Error("XMLNS namespace is reserved (well-formed required).");
                        if (a2 && "" === y.value)
                          throw new Error("Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required).");
                        "xmlns" === y.prefix && (_ = "xmlns");
                      } else
                        null === _ && (_ = null === y.prefix || t2.hasPrefix(y.prefix) && !t2.has(y.prefix, v) ? this._generatePrefix(v, t2, r2) : y.prefix, p2.push([null, "xmlns", _, this._serializeAttributeValue(v, a2)]));
                    if (null !== _ && _, a2 && (-1 !== y.localName.indexOf(":") || !c.xml_isName(y.localName) || "xmlns" === y.localName && null === v))
                      throw new Error("Attribute local name contains invalid characters (well-formed required).");
                    p2.push([v, _, y.localName, this._serializeAttributeValue(y.value, a2)]);
                  } else
                    p2.push([null, null, y.localName, this._serializeAttributeValue(y.value, a2)]);
                }
              } catch (e4) {
                u2 = { error: e4 };
              } finally {
                try {
                  m && !m.done && (h2 = d.return) && h2.call(d);
                } finally {
                  if (u2)
                    throw u2.error;
                }
              }
              return p2;
            }, e2.prototype._serializeAttributes = function(e3, t2) {
              var r2, i2, o2 = [], a2 = t2 ? {} : void 0;
              try {
                for (var s2 = n(e3.attributes), u2 = s2.next(); !u2.done; u2 = s2.next()) {
                  var l2 = u2.value;
                  if (t2) {
                    if (t2 && a2 && l2.localName in a2)
                      throw new Error("Element contains duplicate attributes (well-formed required).");
                    if (t2 && a2 && (a2[l2.localName] = true), t2 && (-1 !== l2.localName.indexOf(":") || !c.xml_isName(l2.localName)))
                      throw new Error("Attribute local name contains invalid characters (well-formed required).");
                    o2.push([null, null, l2.localName, this._serializeAttributeValue(l2.value, t2)]);
                  } else
                    o2.push([null, null, l2.localName, this._serializeAttributeValue(l2.value, t2)]);
                }
              } catch (e4) {
                r2 = { error: e4 };
              } finally {
                try {
                  u2 && !u2.done && (i2 = s2.return) && i2.call(s2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              return o2;
            }, e2.prototype._recordNamespaceInformation = function(e3, t2, r2) {
              var i2, o2, a2 = null;
              try {
                for (var s2 = n(e3.attributes), u2 = s2.next(); !u2.done; u2 = s2.next()) {
                  var c2 = u2.value, h2 = c2.namespaceURI, p2 = c2.prefix;
                  if (h2 === l.namespace.XMLNS) {
                    if (null === p2) {
                      a2 = c2.value;
                      continue;
                    }
                    var f = c2.localName, d = c2.value;
                    if (d === l.namespace.XML)
                      continue;
                    if ("" === d && (d = null), t2.has(f, d))
                      continue;
                    t2.set(f, d), r2[f] = d || "";
                  }
                }
              } catch (e4) {
                i2 = { error: e4 };
              } finally {
                try {
                  u2 && !u2.done && (o2 = s2.return) && o2.call(s2);
                } finally {
                  if (i2)
                    throw i2.error;
                }
              }
              return a2;
            }, e2.prototype._generatePrefix = function(e3, t2, r2) {
              var n2 = "ns" + r2.value.toString();
              return r2.value++, t2.set(n2, e3), n2;
            }, e2.prototype._serializeAttributeValue = function(e3, t2) {
              if (t2 && null !== e3 && !c.xml_isLegalChar(e3))
                throw new Error("Invalid characters in attribute value.");
              return null === e3 ? "" : e3.replace(h.nonEntityAmpersandRegex, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            }, e2._VoidElementNames = /* @__PURE__ */ new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), e2;
          }();
          t.BaseWriter = p;
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          }, i = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(6), a = r(3), s = r(7), u = r(29), l = r(17), c = r(97);
          function h() {
            var e2 = o.dom.window;
            e2._mutationObserverMicrotaskQueued || (e2._mutationObserverMicrotaskQueued = true, Promise.resolve().then(function() {
              p();
            }));
          }
          function p() {
            var e2, t2, r2, i2, u2 = o.dom.window;
            u2._mutationObserverMicrotaskQueued = false;
            var l2 = s.set.clone(u2._mutationObservers), h2 = s.set.clone(u2._signalSlots);
            s.set.empty(u2._signalSlots);
            var p2 = function(e3) {
              var t3 = s.list.clone(e3._recordQueue);
              s.list.empty(e3._recordQueue);
              for (var r3 = 0; r3 < e3._nodeList.length; r3++) {
                var n2 = e3._nodeList[r3];
                s.list.remove(n2._registeredObserverList, function(t4) {
                  return a.Guard.isTransientRegisteredObserver(t4) && t4.observer === e3;
                });
              }
              if (!s.list.isEmpty(t3))
                try {
                  e3._callback.call(e3, t3, e3);
                } catch (e4) {
                }
            };
            try {
              for (var f2 = n(l2), d = f2.next(); !d.done; d = f2.next()) {
                p2(d.value);
              }
            } catch (t3) {
              e2 = { error: t3 };
            } finally {
              try {
                d && !d.done && (t2 = f2.return) && t2.call(f2);
              } finally {
                if (e2)
                  throw e2.error;
              }
            }
            if (o.dom.features.slots)
              try {
                for (var m = n(h2), y = m.next(); !y.done; y = m.next()) {
                  var v = y.value;
                  c.event_fireAnEvent("slotchange", v, void 0, { bubbles: true });
                }
              } catch (e3) {
                r2 = { error: e3 };
              } finally {
                try {
                  y && !y.done && (i2 = m.return) && i2.call(m);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
          }
          function f(e2, t2, r2, o2, a2, s2, c2, p2, f2) {
            for (var d, m, y = /* @__PURE__ */ new Map(), v = l.tree_getFirstAncestorNode(t2, true); null !== v; ) {
              for (var _ = 0; _ < v._registeredObserverList.length; _++) {
                var g = v._registeredObserverList[_], b = g.options;
                if ((v === t2 || b.subtree) && (("attributes" !== e2 || b.attributes) && ("attributes" !== e2 || !b.attributeFilter || b.attributeFilter.indexOf(r2 || "") && null === o2) && ("characterData" !== e2 || b.characterData) && ("childList" !== e2 || b.childList))) {
                  var x = g.observer;
                  y.has(x) || y.set(x, null), ("attributes" === e2 && b.attributeOldValue || "characterData" === e2 && b.characterDataOldValue) && y.set(x, a2);
                }
              }
              v = l.tree_getNextAncestorNode(t2, v, true);
            }
            try {
              for (var w = n(y), E = w.next(); !E.done; E = w.next()) {
                var D = i(E.value, 2), S = D[0], C = D[1], A = u.create_mutationRecord(e2, t2, u.create_nodeListStatic(t2, s2), u.create_nodeListStatic(t2, c2), p2, f2, r2, o2, C);
                S._recordQueue.push(A);
              }
            } catch (e3) {
              d = { error: e3 };
            } finally {
              try {
                E && !E.done && (m = w.return) && m.call(w);
              } finally {
                if (d)
                  throw d.error;
              }
            }
            h();
          }
          t.observer_queueAMutationObserverMicrotask = h, t.observer_notifyMutationObservers = p, t.observer_queueMutationRecord = f, t.observer_queueTreeMutationRecord = function(e2, t2, r2, n2, i2) {
            f("childList", e2, null, null, null, t2, r2, n2, i2);
          }, t.observer_queueAttributeMutationRecord = function(e2, t2, r2, n2) {
            f("attributes", e2, t2, r2, n2, [], [], null, null);
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(6), i = r(7), o = r(3), a = r(9), s = r(29), u = r(73), l = r(51), c = r(30), h = r(37), p = r(106);
          function f(e2, t2, r2) {
            n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(t2, e2._localName, e2._namespace, e2._value), n.dom.features.customElements && o.Guard.isCustomElementNode(t2) && u.customElement_enqueueACustomElementCallbackReaction(t2, "attributeChangedCallback", [e2._localName, e2._value, r2, e2._namespace]), n.dom.features.steps && c.dom_runAttributeChangeSteps(t2, e2._localName, e2._value, r2, e2._namespace), e2._value = r2;
          }
          function d(e2, t2) {
            n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(t2, e2._localName, e2._namespace, null), n.dom.features.customElements && o.Guard.isCustomElementNode(t2) && u.customElement_enqueueACustomElementCallbackReaction(t2, "attributeChangedCallback", [e2._localName, null, e2._value, e2._namespace]), n.dom.features.steps && c.dom_runAttributeChangeSteps(t2, e2._localName, null, e2._value, e2._namespace), t2._attributeList._asArray().push(e2), e2._element = t2, t2._nodeDocument._hasNamespaces || null === e2._namespace && null === e2._namespacePrefix && "xmlns" !== e2._localName || (t2._nodeDocument._hasNamespaces = true);
          }
          function m(e2, t2) {
            n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(t2, e2._localName, e2._namespace, e2._value), n.dom.features.customElements && o.Guard.isCustomElementNode(t2) && u.customElement_enqueueACustomElementCallbackReaction(t2, "attributeChangedCallback", [e2._localName, e2._value, null, e2._namespace]), n.dom.features.steps && c.dom_runAttributeChangeSteps(t2, e2._localName, e2._value, null, e2._namespace);
            var r2 = t2._attributeList._asArray().indexOf(e2);
            t2._attributeList._asArray().splice(r2, 1), e2._element = null;
          }
          function y(e2, t2, r2) {
            n.dom.features.mutationObservers && l.observer_queueAttributeMutationRecord(r2, e2._localName, e2._namespace, e2._value), n.dom.features.customElements && o.Guard.isCustomElementNode(r2) && u.customElement_enqueueACustomElementCallbackReaction(r2, "attributeChangedCallback", [e2._localName, e2._value, t2._value, e2._namespace]), n.dom.features.steps && c.dom_runAttributeChangeSteps(r2, e2._localName, e2._value, t2._value, e2._namespace);
            var i2 = r2._attributeList._asArray().indexOf(e2);
            -1 !== i2 && (r2._attributeList._asArray()[i2] = t2), e2._element = null, t2._element = r2, r2._nodeDocument._hasNamespaces || null === t2._namespace && null === t2._namespacePrefix && "xmlns" !== t2._localName || (r2._nodeDocument._hasNamespaces = true);
          }
          function v(e2, t2) {
            return t2._namespace === i.namespace.HTML && "html" === t2._nodeDocument._type && (e2 = e2.toLowerCase()), t2._attributeList._asArray().find(function(t3) {
              return t3._qualifiedName === e2;
            }) || null;
          }
          function _(e2, t2, r2) {
            var n2 = e2 || null;
            return r2._attributeList._asArray().find(function(e3) {
              return e3._namespace === n2 && e3._localName === t2;
            }) || null;
          }
          t.element_has = function(e2, t2) {
            return -1 !== t2._attributeList._asArray().indexOf(e2);
          }, t.element_change = f, t.element_append = d, t.element_remove = m, t.element_replace = y, t.element_getAnAttributeByName = v, t.element_getAnAttributeByNamespaceAndLocalName = _, t.element_getAnAttributeValue = function(e2, t2, r2) {
            void 0 === r2 && (r2 = "");
            var n2 = _(r2, t2, e2);
            return null === n2 ? "" : n2._value;
          }, t.element_setAnAttribute = function(e2, t2) {
            if (null !== e2._element && e2._element !== t2)
              throw new a.InUseAttributeError("This attribute already exists in the document: " + e2._qualifiedName + " as a child of " + e2._element._qualifiedName + ".");
            var r2 = _(e2._namespace || "", e2._localName, t2);
            return r2 === e2 ? e2 : (null !== r2 ? y(r2, e2, t2) : d(e2, t2), r2);
          }, t.element_setAnAttributeValue = function(e2, t2, r2, n2, i2) {
            void 0 === n2 && (n2 = null), void 0 === i2 && (i2 = null);
            var o2 = _(i2 || "", t2, e2);
            if (null === o2) {
              var a2 = s.create_attr(e2._nodeDocument, t2);
              return a2._namespace = i2, a2._namespacePrefix = n2, a2._value = r2, void d(a2, e2);
            }
            f(o2, e2, r2);
          }, t.element_removeAnAttributeByName = function(e2, t2) {
            var r2 = v(e2, t2);
            return null !== r2 && m(r2, t2), r2;
          }, t.element_removeAnAttributeByNamespaceAndLocalName = function(e2, t2, r2) {
            var n2 = _(e2, t2, r2);
            return null !== n2 && m(n2, r2), n2;
          }, t.element_createAnElement = function(e2, t2, r2, o2, l2, c2) {
            void 0 === o2 && (o2 = null), void 0 === l2 && (l2 = null), void 0 === c2 && (c2 = false);
            var h2 = null;
            if (!n.dom.features.customElements)
              return (h2 = s.create_element(e2, t2, r2, o2))._customElementState = "uncustomized", h2._customElementDefinition = null, h2._is = l2, h2;
            var f2 = u.customElement_lookUpACustomElementDefinition(e2, r2, t2, l2);
            if (null !== f2 && f2.name !== f2.localName)
              (h2 = new (p.document_elementInterface(t2, i.namespace.HTML))())._localName = t2, h2._namespace = i.namespace.HTML, h2._namespacePrefix = o2, h2._customElementState = "undefined", h2._customElementDefinition = null, h2._is = l2, h2._nodeDocument = e2, c2 ? u.customElement_upgrade(f2, h2) : u.customElement_enqueueACustomElementUpgradeReaction(h2, f2);
            else if (null !== f2)
              if (c2)
                try {
                  var d2 = new (0, f2.constructor)();
                  if (console.assert(void 0 !== d2._customElementState), console.assert(void 0 !== d2._customElementDefinition), console.assert(d2._namespace === i.namespace.HTML), 0 !== d2._attributeList.length)
                    throw new a.NotSupportedError("Custom element already has attributes.");
                  if (0 !== d2._children.size)
                    throw new a.NotSupportedError("Custom element already has child nodes.");
                  if (null !== d2._parent)
                    throw new a.NotSupportedError("Custom element already has a parent node.");
                  if (d2._nodeDocument !== e2)
                    throw new a.NotSupportedError("Custom element is already in a document.");
                  if (d2._localName !== t2)
                    throw new a.NotSupportedError("Custom element has a different local name.");
                  d2._namespacePrefix = o2, d2._is = null;
                } catch (r3) {
                  (h2 = s.create_htmlUnknownElement(e2, t2, i.namespace.HTML, o2))._customElementState = "failed", h2._customElementDefinition = null, h2._is = null;
                }
              else
                (h2 = s.create_htmlElement(e2, t2, i.namespace.HTML, o2))._customElementState = "undefined", h2._customElementDefinition = null, h2._is = null, u.customElement_enqueueACustomElementUpgradeReaction(h2, f2);
            else {
              (h2 = new (p.document_elementInterface(t2, r2))())._localName = t2, h2._namespace = r2, h2._namespacePrefix = o2, h2._customElementState = "uncustomized", h2._customElementDefinition = null, h2._is = l2, h2._nodeDocument = e2, r2 !== i.namespace.HTML || null === l2 && !u.customElement_isValidCustomElementName(t2) || (h2._customElementState = "undefined");
            }
            if (null === h2)
              throw new Error("Unable to create element.");
            return h2;
          }, t.element_insertAdjacent = function(e2, t2, r2) {
            switch (t2.toLowerCase()) {
              case "beforebegin":
                return null === e2._parent ? null : h.mutation_preInsert(r2, e2._parent, e2);
              case "afterbegin":
                return h.mutation_preInsert(r2, e2, e2._firstChild);
              case "beforeend":
                return h.mutation_preInsert(r2, e2, null);
              case "afterend":
                return null === e2._parent ? null : h.mutation_preInsert(r2, e2._parent, e2._nextSibling);
              default:
                throw new a.SyntaxError(`Invalid 'where' argument. "beforebegin", "afterbegin", "beforeend" or "afterend" expected`);
            }
          };
        }, function(e, t, r) {
          "use strict";
          function n(e2, t2) {
            Error.call(this), this.name = "YAMLException", this.reason = e2, this.mark = t2, this.message = (this.reason || "(unknown reason)") + (this.mark ? " " + this.mark.toString() : ""), Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = new Error().stack || "";
          }
          n.prototype = Object.create(Error.prototype), n.prototype.constructor = n, n.prototype.toString = function(e2) {
            var t2 = this.name + ": ";
            return t2 += this.reason || "(unknown reason)", !e2 && this.mark && (t2 += " " + this.mark.toString()), t2;
          }, e.exports = n;
        }, function(e, t, r) {
          "use strict";
          var n = r(39);
          e.exports = new n({ include: [r(181)], implicit: [r(294), r(295)], explicit: [r(296), r(297), r(298), r(299)] });
        }, function(e, t, r) {
          var n = r(16), i = r(79), o = r(40), a = r(24), s = r(56), u = r(14), l = r(115), c = Object.getOwnPropertyDescriptor;
          t.f = n ? c : function(e2, t2) {
            if (e2 = a(e2), t2 = s(t2, true), l)
              try {
                return c(e2, t2);
              } catch (e3) {
              }
            if (u(e2, t2))
              return o(!i.f.call(e2, t2), e2[t2]);
          };
        }, function(e, t, r) {
          var n = r(13);
          e.exports = function(e2, t2) {
            if (!n(e2))
              return e2;
            var r2, i;
            if (t2 && "function" == typeof (r2 = e2.toString) && !n(i = r2.call(e2)))
              return i;
            if ("function" == typeof (r2 = e2.valueOf) && !n(i = r2.call(e2)))
              return i;
            if (!t2 && "function" == typeof (r2 = e2.toString) && !n(i = r2.call(e2)))
              return i;
            throw TypeError("Can't convert object to primitive value");
          };
        }, function(e, t, r) {
          var n = r(81), i = r(58), o = n("keys");
          e.exports = function(e2) {
            return o[e2] || (o[e2] = i(e2));
          };
        }, function(e, t) {
          var r = 0, n = Math.random();
          e.exports = function(e2) {
            return "Symbol(" + String(void 0 === e2 ? "" : e2) + ")_" + (++r + n).toString(36);
          };
        }, function(e, t, r) {
          var n = r(42);
          e.exports = Array.isArray || function(e2) {
            return "Array" == n(e2);
          };
        }, function(e, t, r) {
          var n, i = r(18), o = r(188), a = r(84), s = r(45), u = r(189), l = r(116), c = r(57), h = c("IE_PROTO"), p = function() {
          }, f = function(e2) {
            return "<script>" + e2 + "<\/script>";
          }, d = function() {
            try {
              n = document.domain && new ActiveXObject("htmlfile");
            } catch (e3) {
            }
            var e2, t2;
            d = n ? function(e3) {
              e3.write(f("")), e3.close();
              var t3 = e3.parentWindow.Object;
              return e3 = null, t3;
            }(n) : ((t2 = l("iframe")).style.display = "none", u.appendChild(t2), t2.src = String("javascript:"), (e2 = t2.contentWindow.document).open(), e2.write(f("document.F=Object")), e2.close(), e2.F);
            for (var r2 = a.length; r2--; )
              delete d.prototype[a[r2]];
            return d();
          };
          s[h] = true, e.exports = Object.create || function(e2, t2) {
            var r2;
            return null !== e2 ? (p.prototype = i(e2), r2 = new p(), p.prototype = null, r2[h] = e2) : r2 = d(), void 0 === t2 ? r2 : o(r2, t2);
          };
        }, function(e, t, r) {
          var n = r(121), i = r(84);
          e.exports = Object.keys || function(e2) {
            return n(e2, i);
          };
        }, function(e, t, r) {
          var n = r(15).f, i = r(14), o = r(5)("toStringTag");
          e.exports = function(e2, t2, r2) {
            e2 && !i(e2 = r2 ? e2 : e2.prototype, o) && n(e2, o, { configurable: true, value: t2 });
          };
        }, function(e, t, r) {
          var n = r(8), i = r(5), o = r(129), a = i("species");
          e.exports = function(e2) {
            return o >= 51 || !n(function() {
              var t2 = [];
              return (t2.constructor = {})[a] = function() {
                return { foo: 1 };
              }, 1 !== t2[e2](Boolean).foo;
            });
          };
        }, function(e, t, r) {
          "use strict";
          var n = r(4), i = r(122).indexOf, o = r(48), a = r(28), s = [].indexOf, u = !!s && 1 / [1].indexOf(1, -0) < 0, l = o("indexOf"), c = a("indexOf", { ACCESSORS: true, 1: 0 });
          n({ target: "Array", proto: true, forced: u || !l || !c }, { indexOf: function(e2) {
            return u ? s.apply(this, arguments) || 0 : i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
          } });
        }, function(e, t, r) {
          var n = r(16), i = r(15).f, o = Function.prototype, a = o.toString, s = /^\s*function ([^ (]*)/;
          n && !("name" in o) && i(o, "name", { configurable: true, get: function() {
            try {
              return a.call(this).match(s)[1];
            } catch (e2) {
              return "";
            }
          } });
        }, function(e, t, r) {
          "use strict";
          var n = r(25), i = r(18), o = r(8), a = r(136), s = RegExp.prototype, u = s.toString, l = o(function() {
            return "/a/b" != u.call({ source: "a", flags: "b" });
          }), c = "toString" != u.name;
          (l || c) && n(RegExp.prototype, "toString", function() {
            var e2 = i(this), t2 = String(e2.source), r2 = e2.flags;
            return "/" + t2 + "/" + String(void 0 === r2 && e2 instanceof RegExp && !("flags" in s) ? a.call(e2) : r2);
          }, { unsafe: true });
        }, function(e, t, r) {
          "use strict";
          r(31), r(32), r(33), r(19), r(138), r(20), r(66), r(22), r(23);
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          }), o = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var a = r(2), s = r(1), u = function(e2) {
            function t2(t3, r2) {
              var n2 = e2.call(this, t3) || this;
              return n2._writerOptions = a.applyDefaults(r2, { format: "object", wellFormed: false, group: false, verbose: false }), n2;
            }
            return i(t2, e2), t2.prototype.serialize = function(e3) {
              return this._currentList = [], this._currentIndex = 0, this._listRegister = [this._currentList], this.serializeNode(e3, this._writerOptions.wellFormed), this._process(this._currentList, this._writerOptions);
            }, t2.prototype._process = function(e3, t3) {
              var r2, n2, i2, o2, u2, l, c;
              if (0 === e3.length)
                return {};
              for (var h = {}, p = false, f = 0, d = 0, m = 0, y = 0, v = 0; v < e3.length; v++) {
                var _ = e3[v];
                switch (I = Object.keys(_)[0]) {
                  case "@":
                    continue;
                  case "#":
                    f++;
                    break;
                  case "!":
                    d++;
                    break;
                  case "?":
                    m++;
                    break;
                  case "$":
                    y++;
                    break;
                  default:
                    h[I] ? p = true : h[I] = true;
                }
              }
              var g = this._getAttrKey(), b = this._getNodeKey(s.NodeType.Text), x = this._getNodeKey(s.NodeType.Comment), w = this._getNodeKey(s.NodeType.ProcessingInstruction), E = this._getNodeKey(s.NodeType.CData);
              if (1 === f && 1 === e3.length && a.isString(e3[0]["#"]))
                return e3[0]["#"];
              if (p) {
                var D = {};
                for (v = 0; v < e3.length; v++) {
                  _ = e3[v];
                  if ("@" === (I = Object.keys(_)[0])) {
                    var S = _["@"];
                    1 === (L = Object.keys(S)).length ? D[g + L[0]] = S[L[0]] : D[g] = _["@"];
                  }
                }
                var C = [];
                for (v = 0; v < e3.length; v++) {
                  _ = e3[v];
                  switch (I = Object.keys(_)[0]) {
                    case "@":
                      break;
                    case "#":
                      C.push(((r2 = {})[b] = _["#"], r2));
                      break;
                    case "!":
                      C.push(((n2 = {})[x] = _["!"], n2));
                      break;
                    case "?":
                      C.push(((i2 = {})[w] = _["?"], i2));
                      break;
                    case "$":
                      C.push(((o2 = {})[E] = _.$, o2));
                      break;
                    default:
                      if (0 !== (B = _)[I].length && a.isArray(B[I][0])) {
                        for (var A = [], N = B[I], T = 0; T < N.length; T++)
                          A.push(this._process(N[T], t3));
                        C.push(((u2 = {})[I] = A, u2));
                      } else
                        t3.verbose ? C.push(((l = {})[I] = [this._process(B[I], t3)], l)) : C.push(((c = {})[I] = this._process(B[I], t3), c));
                  }
                }
                return D[b] = C, D;
              }
              var O = 1, F = 1, k = 1, P = 1;
              for (D = {}, v = 0; v < e3.length; v++) {
                var I;
                _ = e3[v];
                switch (I = Object.keys(_)[0]) {
                  case "@":
                    S = _["@"];
                    var L = Object.keys(S);
                    if (t3.group && 1 !== L.length)
                      D[g] = S;
                    else
                      for (var M in S)
                        D[g + M] = S[M];
                    break;
                  case "#":
                    O = this._processSpecItem(_["#"], D, t3.group, b, f, O);
                    break;
                  case "!":
                    F = this._processSpecItem(_["!"], D, t3.group, x, d, F);
                    break;
                  case "?":
                    k = this._processSpecItem(_["?"], D, t3.group, w, m, k);
                    break;
                  case "$":
                    P = this._processSpecItem(_.$, D, t3.group, E, y, P);
                    break;
                  default:
                    var B;
                    if (0 !== (B = _)[I].length && a.isArray(B[I][0])) {
                      A = [], N = B[I];
                      for (var j = 0; j < N.length; j++)
                        A.push(this._process(N[j], t3));
                      D[I] = A;
                    } else
                      t3.verbose ? D[I] = [this._process(B[I], t3)] : D[I] = this._process(B[I], t3);
                }
              }
              return D;
            }, t2.prototype._processSpecItem = function(e3, t3, r2, n2, i2, s2) {
              var u2, l;
              if (!r2 && a.isArray(e3) && i2 + e3.length > 2)
                try {
                  for (var c = o(e3), h = c.next(); !h.done; h = c.next()) {
                    var p = h.value;
                    t3[n2 + (s2++).toString()] = p;
                  }
                } catch (e4) {
                  u2 = { error: e4 };
                } finally {
                  try {
                    h && !h.done && (l = c.return) && l.call(c);
                  } finally {
                    if (u2)
                      throw u2.error;
                  }
                }
              else
                t3[i2 > 1 ? n2 + (s2++).toString() : n2] = e3;
              return s2;
            }, t2.prototype.beginElement = function(e3) {
              var t3, r2, n2 = [];
              if (0 === this._currentList.length)
                this._currentList.push(((t3 = {})[e3] = n2, t3));
              else {
                var i2 = this._currentList[this._currentList.length - 1];
                if (this._isElementNode(i2, e3))
                  if (0 !== i2[e3].length && a.isArray(i2[e3][0]))
                    i2[e3].push(n2);
                  else
                    i2[e3] = [i2[e3], n2];
                else
                  this._currentList.push(((r2 = {})[e3] = n2, r2));
              }
              this._currentIndex++, this._listRegister.length > this._currentIndex ? this._listRegister[this._currentIndex] = n2 : this._listRegister.push(n2), this._currentList = n2;
            }, t2.prototype.endElement = function() {
              this._currentList = this._listRegister[--this._currentIndex];
            }, t2.prototype.attribute = function(e3, t3) {
              var r2, n2;
              if (0 === this._currentList.length)
                this._currentList.push({ "@": (r2 = {}, r2[e3] = t3, r2) });
              else {
                var i2 = this._currentList[this._currentList.length - 1];
                this._isAttrNode(i2) ? i2["@"][e3] = t3 : this._currentList.push({ "@": (n2 = {}, n2[e3] = t3, n2) });
              }
            }, t2.prototype.comment = function(e3) {
              if (0 === this._currentList.length)
                this._currentList.push({ "!": e3 });
              else {
                var t3 = this._currentList[this._currentList.length - 1];
                this._isCommentNode(t3) ? a.isArray(t3["!"]) ? t3["!"].push(e3) : t3["!"] = [t3["!"], e3] : this._currentList.push({ "!": e3 });
              }
            }, t2.prototype.text = function(e3) {
              if (0 === this._currentList.length)
                this._currentList.push({ "#": e3 });
              else {
                var t3 = this._currentList[this._currentList.length - 1];
                this._isTextNode(t3) ? a.isArray(t3["#"]) ? t3["#"].push(e3) : t3["#"] = [t3["#"], e3] : this._currentList.push({ "#": e3 });
              }
            }, t2.prototype.instruction = function(e3, t3) {
              var r2 = "" === t3 ? e3 : e3 + " " + t3;
              if (0 === this._currentList.length)
                this._currentList.push({ "?": r2 });
              else {
                var n2 = this._currentList[this._currentList.length - 1];
                this._isInstructionNode(n2) ? a.isArray(n2["?"]) ? n2["?"].push(r2) : n2["?"] = [n2["?"], r2] : this._currentList.push({ "?": r2 });
              }
            }, t2.prototype.cdata = function(e3) {
              if (0 === this._currentList.length)
                this._currentList.push({ $: e3 });
              else {
                var t3 = this._currentList[this._currentList.length - 1];
                this._isCDATANode(t3) ? a.isArray(t3.$) ? t3.$.push(e3) : t3.$ = [t3.$, e3] : this._currentList.push({ $: e3 });
              }
            }, t2.prototype._isAttrNode = function(e3) {
              return "@" in e3;
            }, t2.prototype._isTextNode = function(e3) {
              return "#" in e3;
            }, t2.prototype._isCommentNode = function(e3) {
              return "!" in e3;
            }, t2.prototype._isInstructionNode = function(e3) {
              return "?" in e3;
            }, t2.prototype._isCDATANode = function(e3) {
              return "$" in e3;
            }, t2.prototype._isElementNode = function(e3, t3) {
              return t3 in e3;
            }, t2.prototype._getAttrKey = function() {
              return this._builderOptions.convert.att;
            }, t2.prototype._getNodeKey = function(e3) {
              switch (e3) {
                case s.NodeType.Comment:
                  return this._builderOptions.convert.comment;
                case s.NodeType.Text:
                  return this._builderOptions.convert.text;
                case s.NodeType.ProcessingInstruction:
                  return this._builderOptions.convert.ins;
                case s.NodeType.CData:
                  return this._builderOptions.convert.cdata;
                default:
                  throw new Error("Invalid node type.");
              }
            }, t2;
          }(r(50).BaseWriter);
          t.ObjectWriter = u;
        }, function(e, t, r) {
          "use strict";
          var n = r(4), i = r(93);
          n({ target: "RegExp", proto: true, forced: /./.exec !== i }, { exec: i });
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = function() {
            function e2() {
              this._items = {}, this._nullItems = {};
            }
            return e2.prototype.set = function(e3, t2) {
              null === e3 ? this._nullItems[t2] = true : (this._items[e3] || (this._items[e3] = {}), this._items[e3][t2] = true);
            }, e2.prototype.has = function(e3, t2) {
              return null === e3 ? true === this._nullItems[t2] : !!this._items[e3] && true === this._items[e3][t2];
            }, e2;
          }();
          t.LocalNameSet = n;
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(9), o = r(3), a = r(0), s = function() {
            function e2() {
            }
            return Object.defineProperty(e2.prototype, "_eventListenerList", { get: function() {
              return this.__eventListenerList || (this.__eventListenerList = []);
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "_eventHandlerMap", { get: function() {
              return this.__eventHandlerMap || (this.__eventHandlerMap = {});
            }, enumerable: true, configurable: true }), e2.prototype.addEventListener = function(e3, t2, r2) {
              void 0 === r2 && (r2 = { passive: false, once: false, capture: false });
              var i2, s2 = n(a.eventTarget_flattenMore(r2), 3), u = s2[0], l = s2[1], c = s2[2];
              t2 && (i2 = o.Guard.isEventListener(t2) ? t2 : { handleEvent: t2 }, a.eventTarget_addEventListener(this, { type: e3, callback: i2, capture: u, passive: l, once: c, removed: false }));
            }, e2.prototype.removeEventListener = function(e3, t2, r2) {
              void 0 === r2 && (r2 = { capture: false });
              var n2 = a.eventTarget_flatten(r2);
              if (t2)
                for (var i2 = 0; i2 < this._eventListenerList.length; i2++) {
                  var s2 = this._eventListenerList[i2];
                  if (s2.type === e3 && s2.capture === n2) {
                    if (o.Guard.isEventListener(t2) && s2.callback === t2) {
                      a.eventTarget_removeEventListener(this, s2, i2);
                      break;
                    }
                    if (t2 && s2.callback.handleEvent === t2) {
                      a.eventTarget_removeEventListener(this, s2, i2);
                      break;
                    }
                  }
                }
            }, e2.prototype.dispatchEvent = function(e3) {
              if (e3._dispatchFlag || !e3._initializedFlag)
                throw new i.InvalidStateError();
              return e3._isTrusted = false, a.event_dispatch(e3, this);
            }, e2.prototype._getTheParent = function(e3) {
              return null;
            }, e2;
          }();
          t.EventTargetImpl = s;
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(34), a = r(0), s = function(e2) {
            function t2(t3) {
              var r2 = e2.call(this) || this;
              return r2._data = t3, r2;
            }
            return i(t2, e2), Object.defineProperty(t2.prototype, "data", { get: function() {
              return this._data;
            }, set: function(e3) {
              a.characterData_replaceData(this, 0, this._data.length, e3);
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "length", { get: function() {
              return this._data.length;
            }, enumerable: true, configurable: true }), t2.prototype.substringData = function(e3, t3) {
              return a.characterData_substringData(this, e3, t3);
            }, t2.prototype.appendData = function(e3) {
              return a.characterData_replaceData(this, this._data.length, 0, e3);
            }, t2.prototype.insertData = function(e3, t3) {
              a.characterData_replaceData(this, e3, 0, t3);
            }, t2.prototype.deleteData = function(e3, t3) {
              a.characterData_replaceData(this, e3, t3, "");
            }, t2.prototype.replaceData = function(e3, t3, r2) {
              a.characterData_replaceData(this, e3, t3, r2);
            }, Object.defineProperty(t2.prototype, "previousElementSibling", { get: function() {
              throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nextElementSibling", { get: function() {
              throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
            }, enumerable: true, configurable: true }), t2.prototype.before = function() {
              for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
                e3[t3] = arguments[t3];
              throw new Error("Mixin: ChildNode not implemented.");
            }, t2.prototype.after = function() {
              for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
                e3[t3] = arguments[t3];
              throw new Error("Mixin: ChildNode not implemented.");
            }, t2.prototype.replaceWith = function() {
              for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
                e3[t3] = arguments[t3];
              throw new Error("Mixin: ChildNode not implemented.");
            }, t2.prototype.remove = function() {
              throw new Error("Mixin: ChildNode not implemented.");
            }, t2;
          }(o.NodeImpl);
          t.CharacterDataImpl = s;
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          }, i = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          }, o = this && this.__spread || function() {
            for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
              e2 = e2.concat(i(arguments[t2]));
            return e2;
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var a = r(6), s = r(3), u = r(2), l = r(17), c = r(51);
          function h(e2) {
            a.dom.window._signalSlots.add(e2), c.observer_queueAMutationObserverMicrotask();
          }
          function p(e2, t2) {
            void 0 === t2 && (t2 = false);
            var r2 = s.Cast.asNode(e2)._parent;
            if (null === r2)
              return null;
            var n2 = r2._shadowRoot || null;
            if (null === n2)
              return null;
            if (t2 && "open" !== n2._mode)
              return null;
            for (var i2 = l.tree_getFirstDescendantNode(n2, false, true, function(e3) {
              return s.Guard.isSlot(e3);
            }); null !== i2; ) {
              if (i2._name === e2._name)
                return i2;
              i2 = l.tree_getNextDescendantNode(n2, i2, false, true, function(e3) {
                return s.Guard.isSlot(e3);
              });
            }
            return null;
          }
          function f(e2) {
            var t2, r2, i2 = [], o2 = l.tree_rootNode(e2);
            if (!s.Guard.isShadowRoot(o2))
              return i2;
            var a2 = o2._host;
            try {
              for (var u2 = n(a2._children), c2 = u2.next(); !c2.done; c2 = u2.next()) {
                var h2 = c2.value;
                if (s.Guard.isSlotable(h2))
                  p(h2) === e2 && i2.push(h2);
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                c2 && !c2.done && (r2 = u2.return) && r2.call(u2);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            return i2;
          }
          function d(e2) {
            var t2, r2, i2 = f(e2);
            if (i2.length === e2._assignedNodes.length) {
              for (var o2 = true, a2 = 0; a2 < i2.length; a2++)
                if (i2[a2] !== e2._assignedNodes[a2]) {
                  o2 = false;
                  break;
                }
              o2 || h(e2);
            }
            e2._assignedNodes = i2;
            try {
              for (var s2 = n(i2), u2 = s2.next(); !u2.done; u2 = s2.next()) {
                u2.value._assignedSlot = e2;
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                u2 && !u2.done && (r2 = s2.return) && r2.call(s2);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
          }
          t.shadowTree_signalASlotChange = h, t.shadowTree_isConnected = function(e2) {
            return s.Guard.isDocumentNode(l.tree_rootNode(e2, true));
          }, t.shadowTree_isAssigned = function(e2) {
            return null !== e2._assignedSlot;
          }, t.shadowTree_findASlot = p, t.shadowTree_findSlotables = f, t.shadowTree_findFlattenedSlotables = function e2(t2) {
            var r2, i2, a2, c2, h2 = [], p2 = l.tree_rootNode(t2);
            if (!s.Guard.isShadowRoot(p2))
              return h2;
            var d2 = f(t2);
            if (u.isEmpty(d2))
              try {
                for (var m = n(t2._children), y = m.next(); !y.done; y = m.next()) {
                  var v = y.value;
                  s.Guard.isSlotable(v) && d2.push(v);
                }
              } catch (e3) {
                r2 = { error: e3 };
              } finally {
                try {
                  y && !y.done && (i2 = m.return) && i2.call(m);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
            try {
              for (var _ = n(d2), g = _.next(); !g.done; g = _.next()) {
                var b = g.value;
                if (s.Guard.isSlot(b) && s.Guard.isShadowRoot(l.tree_rootNode(b))) {
                  var x = e2(b);
                  h2.push.apply(h2, o(x));
                } else
                  h2.push(b);
              }
            } catch (e3) {
              a2 = { error: e3 };
            } finally {
              try {
                g && !g.done && (c2 = _.return) && c2.call(_);
              } finally {
                if (a2)
                  throw a2.error;
              }
            }
            return h2;
          }, t.shadowTree_assignSlotables = d, t.shadowTree_assignSlotablesForATree = function(e2) {
            for (var t2 = l.tree_getFirstDescendantNode(e2, true, false, function(e3) {
              return s.Guard.isSlot(e3);
            }); null !== t2; )
              d(t2), t2 = l.tree_getNextDescendantNode(e2, t2, true, false, function(e3) {
                return s.Guard.isSlot(e3);
              });
          }, t.shadowTree_assignASlot = function(e2) {
            var t2 = p(e2);
            null !== t2 && d(t2);
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = /[a-z]([\0-\t\x2D\._a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*-([\0-\t\x2D\._a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*/, i = /* @__PURE__ */ new Set(["annotation-xml", "color-profile", "font-face", "font-face-src", "font-face-uri", "font-face-format", "font-face-name", "missing-glyph"]), o = /* @__PURE__ */ new Set(["article", "aside", "blockquote", "body", "div", "footer", "h1", "h2", "h3", "h4", "h5", "h6", "header", "main", "nav", "p", "section", "span"]), a = /* @__PURE__ */ new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), s = /* @__PURE__ */ new Set(["article", "aside", "blockquote", "body", "div", "footer", "h1", "h2", "h3", "h4", "h5", "h6", "header", "main", "nav", "p", "section", "span"]);
          t.customElement_isValidCustomElementName = function(e2) {
            return !!n.test(e2) && !i.has(e2);
          }, t.customElement_isValidElementName = function(e2) {
            return o.has(e2);
          }, t.customElement_isVoidElementName = function(e2) {
            return a.has(e2);
          }, t.customElement_isValidShadowHostName = function(e2) {
            return s.has(e2);
          }, t.customElement_enqueueACustomElementUpgradeReaction = function(e2, t2) {
          }, t.customElement_enqueueACustomElementCallbackReaction = function(e2, t2, r2) {
          }, t.customElement_upgrade = function(e2, t2) {
          }, t.customElement_tryToUpgrade = function(e2) {
          }, t.customElement_lookUpACustomElementDefinition = function(e2, t2, r2, n2) {
            return null;
          };
        }, function(e, t, r) {
          r(4)({ target: "String", proto: true }, { repeat: r(260) });
        }, function(e, t, r) {
          "use strict";
          r(279), r(68), r(179), r(94), Object.defineProperty(t, "__esModule", { value: true });
          var n = r(109), i = function() {
            function e2(e3) {
              this._builderOptions = e3, e3.parser && Object.assign(this, e3.parser);
            }
            return e2.prototype._docType = function(e3, t2, r2, n2) {
              return e3.dtd({ name: t2, pubID: r2, sysID: n2 });
            }, e2.prototype._comment = function(e3, t2) {
              return e3.com(t2);
            }, e2.prototype._text = function(e3, t2) {
              return e3.txt(t2);
            }, e2.prototype._instruction = function(e3, t2, r2) {
              return e3.ins(t2, r2);
            }, e2.prototype._cdata = function(e3, t2) {
              return e3.dat(t2);
            }, e2.prototype._element = function(e3, t2, r2) {
              return void 0 === t2 ? e3.ele(r2) : e3.ele(t2, r2);
            }, e2.prototype._attribute = function(e3, t2, r2, n2) {
              return void 0 === t2 ? e3.att(r2, n2) : e3.att(t2, r2, n2);
            }, e2.prototype._sanitize = function(e3) {
              return n.sanitizeInput(e3, this._builderOptions.invalidCharReplacement);
            }, e2.prototype._decodeText = function(t2) {
              return null == t2 ? t2 : t2.replace(/&(quot|amp|apos|lt|gt);/g, function(t3, r2) {
                return e2._entityTable[r2];
              }).replace(/&#(?:x([a-fA-F0-9]+)|([0-9]+));/g, function(e3, t3, r2) {
                return String.fromCodePoint(parseInt(t3 || r2, t3 ? 16 : 10));
              });
            }, e2.prototype._decodeAttributeValue = function(e3) {
              return this._decodeText(e3);
            }, e2.prototype.parse = function(e3, t2) {
              return this._parse(e3, t2);
            }, e2.prototype.docType = function(e3, t2, r2, n2) {
              return this._docType(e3, t2, r2, n2);
            }, e2.prototype.comment = function(e3, t2) {
              return this._comment(e3, t2);
            }, e2.prototype.text = function(e3, t2) {
              return this._text(e3, t2);
            }, e2.prototype.instruction = function(e3, t2, r2) {
              return this._instruction(e3, t2, r2);
            }, e2.prototype.cdata = function(e3, t2) {
              return this._cdata(e3, t2);
            }, e2.prototype.element = function(e3, t2, r2) {
              return this._element(e3, t2, r2);
            }, e2.prototype.attribute = function(e3, t2, r2, n2) {
              return this._attribute(e3, t2, r2, n2);
            }, e2.prototype.sanitize = function(e3) {
              return this._sanitize(e3);
            }, e2._entityTable = { lt: "<", gt: ">", amp: "&", quot: '"', apos: "'" }, e2;
          }();
          t.BaseReader = i;
        }, function(e, t, r) {
          "use strict";
          var n = r(39);
          e.exports = n.DEFAULT = new n({ include: [r(54)], explicit: [r(300), r(301), r(302)] });
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(185);
          t.XMLBuilderImpl = n.XMLBuilderImpl;
          var i = r(305);
          t.XMLBuilderCBImpl = i.XMLBuilderCBImpl;
          var o = r(183);
          t.builder = o.builder, t.create = o.create, t.fragment = o.fragment, t.convert = o.convert;
          var a = r(310);
          t.createCB = a.createCB, t.fragmentCB = a.fragmentCB;
        }, function(e, t) {
          var r;
          r = function() {
            return this;
          }();
          try {
            r = r || new Function("return this")();
          } catch (e2) {
            "object" == typeof window && (r = window);
          }
          e.exports = r;
        }, function(e, t, r) {
          "use strict";
          var n = {}.propertyIsEnumerable, i = Object.getOwnPropertyDescriptor, o = i && !n.call({ 1: 2 }, 1);
          t.f = o ? function(e2) {
            var t2 = i(this, e2);
            return !!t2 && t2.enumerable;
          } : n;
        }, function(e, t, r) {
          var n = r(11), i = r(21);
          e.exports = function(e2, t2) {
            try {
              i(n, e2, t2);
            } catch (r2) {
              n[e2] = t2;
            }
            return t2;
          };
        }, function(e, t, r) {
          var n = r(44), i = r(118);
          (e.exports = function(e2, t2) {
            return i[e2] || (i[e2] = void 0 !== t2 ? t2 : {});
          })("versions", []).push({ version: "3.6.5", mode: n ? "pure" : "global", copyright: "\xA9 2020 Denis Pushkarev (zloirock.ru)" });
        }, function(e, t, r) {
          var n = r(121), i = r(84).concat("length", "prototype");
          t.f = Object.getOwnPropertyNames || function(e2) {
            return n(e2, i);
          };
        }, function(e, t, r) {
          var n = r(47), i = Math.max, o = Math.min;
          e.exports = function(e2, t2) {
            var r2 = n(e2);
            return r2 < 0 ? i(r2 + t2, 0) : o(r2, t2);
          };
        }, function(e, t) {
          e.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
        }, function(e, t) {
          t.f = Object.getOwnPropertySymbols;
        }, function(e, t, r) {
          var n = r(8);
          e.exports = !!Object.getOwnPropertySymbols && !n(function() {
            return !String(Symbol());
          });
        }, function(e, t, r) {
          var n = r(127);
          e.exports = function(e2, t2, r2) {
            if (n(e2), void 0 === t2)
              return e2;
            switch (r2) {
              case 0:
                return function() {
                  return e2.call(t2);
                };
              case 1:
                return function(r3) {
                  return e2.call(t2, r3);
                };
              case 2:
                return function(r3, n2) {
                  return e2.call(t2, r3, n2);
                };
              case 3:
                return function(r3, n2, i) {
                  return e2.call(t2, r3, n2, i);
                };
            }
            return function() {
              return e2.apply(t2, arguments);
            };
          };
        }, function(e, t, r) {
          "use strict";
          var n = r(4), i = r(195), o = r(132), a = r(133), s = r(62), u = r(21), l = r(25), c = r(5), h = r(44), p = r(49), f = r(131), d = f.IteratorPrototype, m = f.BUGGY_SAFARI_ITERATORS, y = c("iterator"), v = function() {
            return this;
          };
          e.exports = function(e2, t2, r2, c2, f2, _, g) {
            i(r2, t2, c2);
            var b, x, w, E = function(e3) {
              if (e3 === f2 && N)
                return N;
              if (!m && e3 in C)
                return C[e3];
              switch (e3) {
                case "keys":
                case "values":
                case "entries":
                  return function() {
                    return new r2(this, e3);
                  };
              }
              return function() {
                return new r2(this);
              };
            }, D = t2 + " Iterator", S = false, C = e2.prototype, A = C[y] || C["@@iterator"] || f2 && C[f2], N = !m && A || E(f2), T = "Array" == t2 && C.entries || A;
            if (T && (b = o(T.call(new e2())), d !== Object.prototype && b.next && (h || o(b) === d || (a ? a(b, d) : "function" != typeof b[y] && u(b, y, v)), s(b, D, true, true), h && (p[D] = v))), "values" == f2 && A && "values" !== A.name && (S = true, N = function() {
              return A.call(this);
            }), h && !g || C[y] === N || u(C, y, N), p[t2] = N, f2)
              if (x = { values: E("values"), keys: _ ? N : E("keys"), entries: E("entries") }, g)
                for (w in x)
                  (m || S || !(w in C)) && l(C, w, x[w]);
              else
                n({ target: t2, proto: true, forced: m || S }, x);
            return x;
          };
        }, function(e, t, r) {
          "use strict";
          var n = r(4), i = r(13), o = r(59), a = r(83), s = r(26), u = r(24), l = r(134), c = r(5), h = r(63), p = r(28), f = h("slice"), d = p("slice", { ACCESSORS: true, 0: 0, 1: 2 }), m = c("species"), y = [].slice, v = Math.max;
          n({ target: "Array", proto: true, forced: !f || !d }, { slice: function(e2, t2) {
            var r2, n2, c2, h2 = u(this), p2 = s(h2.length), f2 = a(e2, p2), d2 = a(void 0 === t2 ? p2 : t2, p2);
            if (o(h2) && ("function" != typeof (r2 = h2.constructor) || r2 !== Array && !o(r2.prototype) ? i(r2) && null === (r2 = r2[m]) && (r2 = void 0) : r2 = void 0, r2 === Array || void 0 === r2))
              return y.call(h2, f2, d2);
            for (n2 = new (void 0 === r2 ? Array : r2)(v(d2 - f2, 0)), c2 = 0; f2 < d2; f2++, c2++)
              f2 in h2 && l(n2, c2, h2[f2]);
            return n2.length = c2, n2;
          } });
        }, function(e, t, r) {
          var n = {};
          n[r(5)("toStringTag")] = "z", e.exports = "[object z]" === String(n);
        }, function(e, t, r) {
          "use strict";
          r(19), r(138), r(20), r(92), r(22), r(23), Object.defineProperty(t, "__esModule", { value: true }), t.DefaultBuilderOptions = { version: "1.0", encoding: void 0, standalone: void 0, keepNullNodes: false, keepNullAttributes: false, ignoreConverters: false, skipWhitespaceOnlyText: true, convert: { att: "@", ins: "?", text: "#", cdata: "$", comment: "!" }, defaultNamespace: { ele: void 0, att: void 0 }, namespaceAlias: { html: "http://www.w3.org/1999/xhtml", xml: "http://www.w3.org/XML/1998/namespace", xmlns: "http://www.w3.org/2000/xmlns/", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg", xlink: "http://www.w3.org/1999/xlink" }, invalidCharReplacement: void 0, parser: void 0 }, t.XMLBuilderOptionKeys = new Set(Object.keys(t.DefaultBuilderOptions)), t.DefaultXMLBuilderCBOptions = { format: "xml", wellFormed: false, prettyPrint: false, indent: "  ", newline: "\n", offset: 0, width: 0, allowEmptyTags: false, spaceBeforeSlash: false, keepNullNodes: false, keepNullAttributes: false, ignoreConverters: false, convert: { att: "@", ins: "?", text: "#", cdata: "$", comment: "!" }, defaultNamespace: { ele: void 0, att: void 0 }, namespaceAlias: { html: "http://www.w3.org/1999/xhtml", xml: "http://www.w3.org/XML/1998/namespace", xmlns: "http://www.w3.org/2000/xmlns/", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg", xlink: "http://www.w3.org/1999/xlink" } };
        }, function(e, t, r) {
          "use strict";
          var n = r(139), i = r(143);
          e.exports = n("Set", function(e2) {
            return function() {
              return e2(this, arguments.length ? arguments[0] : void 0);
            };
          }, i);
        }, function(e, t, r) {
          "use strict";
          var n, i, o = r(136), a = r(221), s = RegExp.prototype.exec, u = String.prototype.replace, l = s, c = (n = /a/, i = /b*/g, s.call(n, "a"), s.call(i, "a"), 0 !== n.lastIndex || 0 !== i.lastIndex), h = a.UNSUPPORTED_Y || a.BROKEN_CARET, p = void 0 !== /()??/.exec("")[1];
          (c || p || h) && (l = function(e2) {
            var t2, r2, n2, i2, a2 = this, l2 = h && a2.sticky, f = o.call(a2), d = a2.source, m = 0, y = e2;
            return l2 && (-1 === (f = f.replace("y", "")).indexOf("g") && (f += "g"), y = String(e2).slice(a2.lastIndex), a2.lastIndex > 0 && (!a2.multiline || a2.multiline && "\n" !== e2[a2.lastIndex - 1]) && (d = "(?: " + d + ")", y = " " + y, m++), r2 = new RegExp("^(?:" + d + ")", f)), p && (r2 = new RegExp("^" + d + "$(?!\\s)", f)), c && (t2 = a2.lastIndex), n2 = s.call(l2 ? r2 : a2, y), l2 ? n2 ? (n2.input = n2.input.slice(m), n2[0] = n2[0].slice(m), n2.index = a2.lastIndex, a2.lastIndex += n2[0].length) : a2.lastIndex = 0 : c && n2 && (a2.lastIndex = a2.global ? n2.index + n2[0].length : t2), p && n2 && n2.length > 1 && u.call(n2[0], r2, function() {
              for (i2 = 1; i2 < arguments.length - 2; i2++)
                void 0 === arguments[i2] && (n2[i2] = void 0);
            }), n2;
          }), e.exports = l;
        }, function(e, t, r) {
          "use strict";
          var n = r(225), i = r(18), o = r(27), a = r(26), s = r(47), u = r(35), l = r(226), c = r(227), h = Math.max, p = Math.min, f = Math.floor, d = /\$([$&'`]|\d\d?|<[^>]*>)/g, m = /\$([$&'`]|\d\d?)/g;
          n("replace", 2, function(e2, t2, r2, n2) {
            var y = n2.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE, v = n2.REPLACE_KEEPS_$0, _ = y ? "$" : "$0";
            return [function(r3, n3) {
              var i2 = u(this), o2 = null == r3 ? void 0 : r3[e2];
              return void 0 !== o2 ? o2.call(r3, i2, n3) : t2.call(String(i2), r3, n3);
            }, function(e3, n3) {
              if (!y && v || "string" == typeof n3 && -1 === n3.indexOf(_)) {
                var o2 = r2(t2, e3, this, n3);
                if (o2.done)
                  return o2.value;
              }
              var u2 = i(e3), f2 = String(this), d2 = "function" == typeof n3;
              d2 || (n3 = String(n3));
              var m2 = u2.global;
              if (m2) {
                var b = u2.unicode;
                u2.lastIndex = 0;
              }
              for (var x = []; ; ) {
                var w = c(u2, f2);
                if (null === w)
                  break;
                if (x.push(w), !m2)
                  break;
                "" === String(w[0]) && (u2.lastIndex = l(f2, a(u2.lastIndex), b));
              }
              for (var E, D = "", S = 0, C = 0; C < x.length; C++) {
                w = x[C];
                for (var A = String(w[0]), N = h(p(s(w.index), f2.length), 0), T = [], O = 1; O < w.length; O++)
                  T.push(void 0 === (E = w[O]) ? E : String(E));
                var F = w.groups;
                if (d2) {
                  var k = [A].concat(T, N, f2);
                  void 0 !== F && k.push(F);
                  var P = String(n3.apply(void 0, k));
                } else
                  P = g(A, f2, N, T, F, n3);
                N >= S && (D += f2.slice(S, N) + P, S = N + A.length);
              }
              return D + f2.slice(S);
            }];
            function g(e3, r3, n3, i2, a2, s2) {
              var u2 = n3 + e3.length, l2 = i2.length, c2 = m;
              return void 0 !== a2 && (a2 = o(a2), c2 = d), t2.call(s2, c2, function(t3, o2) {
                var s3;
                switch (o2.charAt(0)) {
                  case "$":
                    return "$";
                  case "&":
                    return e3;
                  case "`":
                    return r3.slice(0, n3);
                  case "'":
                    return r3.slice(u2);
                  case "<":
                    s3 = a2[o2.slice(1, -1)];
                    break;
                  default:
                    var c3 = +o2;
                    if (0 === c3)
                      return t3;
                    if (c3 > l2) {
                      var h2 = f(c3 / 10);
                      return 0 === h2 ? t3 : h2 <= l2 ? void 0 === i2[h2 - 1] ? o2.charAt(1) : i2[h2 - 1] + o2.charAt(1) : t3;
                    }
                    s3 = i2[c3 - 1];
                }
                return void 0 === s3 ? "" : s3;
              });
            }
          });
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = function() {
            function e2() {
              this._items = {}, this._nullItems = [];
            }
            return e2.prototype.copy = function() {
              var t2 = new e2();
              for (var r2 in this._items)
                t2._items[r2] = this._items[r2].slice(0);
              return t2._nullItems = this._nullItems.slice(0), t2;
            }, e2.prototype.get = function(e3, t2) {
              var r2 = null === t2 ? this._nullItems : this._items[t2] || null;
              if (null === r2)
                return null;
              for (var n2 = null, i = 0; i < r2.length; i++)
                if ((n2 = r2[i]) === e3)
                  return n2;
              return n2;
            }, e2.prototype.has = function(e3, t2) {
              var r2 = null === t2 ? this._nullItems : this._items[t2] || null;
              return null !== r2 && -1 !== r2.indexOf(e3);
            }, e2.prototype.hasPrefix = function(e3) {
              if (-1 !== this._nullItems.indexOf(e3))
                return true;
              for (var t2 in this._items)
                if (-1 !== this._items[t2].indexOf(e3))
                  return true;
              return false;
            }, e2.prototype.set = function(e3, t2) {
              var r2 = null === t2 ? this._nullItems : this._items[t2] || null;
              null !== t2 && null === r2 ? this._items[t2] = [e3] : r2.push(e3);
            }, e2;
          }();
          t.NamespacePrefixMap = n;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true }), t.Surrogate = /[\uD800-\uDFFF]/, t.ScalarValue = /[\uD800-\uDFFF]/, t.NonCharacter = /[\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]/, t.ASCIICodePoint = /[\u0000-\u007F]/, t.ASCIITabOrNewLine = /[\t\n\r]/, t.ASCIIWhiteSpace = /[\t\n\f\r ]/, t.C0Control = /[\u0000-\u001F]/, t.C0ControlOrSpace = /[\u0000-\u001F ]/, t.Control = /[\u0000-\u001F\u007F-\u009F]/, t.ASCIIDigit = /[0-9]/, t.ASCIIUpperHexDigit = /[0-9A-F]/, t.ASCIILowerHexDigit = /[0-9a-f]/, t.ASCIIHexDigit = /[0-9A-Fa-f]/, t.ASCIIUpperAlpha = /[A-Z]/, t.ASCIILowerAlpha = /[a-z]/, t.ASCIIAlpha = /[A-Za-z]/, t.ASCIIAlphanumeric = /[0-9A-Za-z]/;
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          }, i = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          }, o = this && this.__spread || function() {
            for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
              e2 = e2.concat(i(arguments[t2]));
            return e2;
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var a = r(6), s = r(1), u = r(3), l = r(171), c = r(104), h = r(9), p = r(17), f = r(72), d = r(30);
          function m(e2, t2) {
            void 0 === t2 && (t2 = void 0), void 0 === t2 && (t2 = null);
            var r2 = y(e2, t2, /* @__PURE__ */ new Date(), {});
            return r2._isTrusted = true, r2;
          }
          function y(e2, t2, r2, n2) {
            var i2 = new e2("");
            return i2._initializedFlag = true, i2._timeStamp = r2.getTime(), Object.assign(i2, n2), a.dom.features.steps && d.dom_runEventConstructingSteps(i2), i2;
          }
          function v(e2, t2, r2, i2) {
            var o2, a2, l2, c2;
            void 0 === r2 && (r2 = false), void 0 === i2 && (i2 = { value: false });
            var h2 = false;
            e2._dispatchFlag = true;
            var d2 = t2;
            if (r2) {
              var m2 = t2._associatedDocument;
              u.Guard.isDocumentNode(m2) && (d2 = m2);
            }
            var y2 = null, v2 = p.tree_retarget(e2._relatedTarget, t2);
            if (t2 !== v2 || t2 === e2._relatedTarget) {
              var b2 = [];
              try {
                for (var x2 = n(e2._touchTargetList), w2 = x2.next(); !w2.done; w2 = x2.next()) {
                  var E2 = w2.value;
                  b2.push(p.tree_retarget(E2, t2));
                }
              } catch (e3) {
                o2 = { error: e3 };
              } finally {
                try {
                  w2 && !w2.done && (a2 = x2.return) && a2.call(x2);
                } finally {
                  if (o2)
                    throw o2.error;
                }
              }
              _(e2, t2, d2, v2, b2, false);
              var D2 = u.Guard.isMouseEvent(e2) && "click" === e2._type;
              D2 && void 0 !== t2._activationBehavior && (y2 = t2);
              for (var S = u.Guard.isSlotable(t2) && f.shadowTree_isAssigned(t2) ? t2 : null, C = false, A = t2._getTheParent(e2); null !== A && u.Guard.isNode(A); ) {
                if (null !== S) {
                  if (!u.Guard.isSlot(A))
                    throw new Error("Parent node of a slotable should be a slot.");
                  S = null;
                  var N = p.tree_rootNode(A, true);
                  u.Guard.isShadowRoot(N) && "closed" === N._mode && (C = true);
                }
                u.Guard.isSlotable(A) && f.shadowTree_isAssigned(A) && (S = A), v2 = p.tree_retarget(e2._relatedTarget, A), b2 = [];
                try {
                  for (var T = (l2 = void 0, n(e2._touchTargetList)), O = T.next(); !O.done; O = T.next()) {
                    E2 = O.value;
                    b2.push(p.tree_retarget(E2, A));
                  }
                } catch (e3) {
                  l2 = { error: e3 };
                } finally {
                  try {
                    O && !O.done && (c2 = T.return) && c2.call(T);
                  } finally {
                    if (l2)
                      throw l2.error;
                  }
                }
                u.Guard.isWindow(A) || u.Guard.isNode(A) && u.Guard.isNode(t2) && p.tree_isAncestorOf(p.tree_rootNode(t2, true), A, true, true) ? (D2 && e2._bubbles && null === y2 && A._activationBehavior && (y2 = A), _(e2, A, null, v2, b2, C)) : A === v2 ? A = null : (t2 = A, D2 && null === y2 && t2._activationBehavior && (y2 = t2), _(e2, A, t2, v2, b2, C)), null !== A && (A = A._getTheParent(e2)), C = false;
              }
              for (var F = null, k = e2._path, P = k.length - 1; P >= 0; P--) {
                if (null !== (L = k[P]).shadowAdjustedTarget) {
                  F = L;
                  break;
                }
              }
              if (null !== F)
                if (u.Guard.isNode(F.shadowAdjustedTarget) && u.Guard.isShadowRoot(p.tree_rootNode(F.shadowAdjustedTarget, true)))
                  h2 = true;
                else if (u.Guard.isNode(F.relatedTarget) && u.Guard.isShadowRoot(p.tree_rootNode(F.relatedTarget, true)))
                  h2 = true;
                else
                  for (var I = 0; I < F.touchTargetList.length; I++) {
                    var L = F.touchTargetList[I];
                    if (u.Guard.isNode(L) && u.Guard.isShadowRoot(p.tree_rootNode(L, true))) {
                      h2 = true;
                      break;
                    }
                  }
              null !== y2 && void 0 !== y2._legacyPreActivationBehavior && y2._legacyPreActivationBehavior(e2);
              for (P = k.length - 1; P >= 0; P--) {
                null !== (L = k[P]).shadowAdjustedTarget ? e2._eventPhase = s.EventPhase.AtTarget : e2._eventPhase = s.EventPhase.Capturing, g(L, e2, "capturing", i2);
              }
              for (P = 0; P < k.length; P++) {
                if (null !== (L = k[P]).shadowAdjustedTarget)
                  e2._eventPhase = s.EventPhase.AtTarget;
                else {
                  if (!e2._bubbles)
                    continue;
                  e2._eventPhase = s.EventPhase.Bubbling;
                }
                g(L, e2, "bubbling", i2);
              }
            }
            return e2._eventPhase = s.EventPhase.None, e2._currentTarget = null, e2._path = [], e2._dispatchFlag = false, e2._stopPropagationFlag = false, e2._stopImmediatePropagationFlag = false, h2 && (e2._target = null, e2._relatedTarget = null, e2._touchTargetList = []), null !== y2 && (e2._canceledFlag || void 0 === y2._activationBehavior ? void 0 !== y2._legacyCanceledActivationBehavior && y2._legacyCanceledActivationBehavior(e2) : y2._activationBehavior(e2)), !e2._canceledFlag;
          }
          function _(e2, t2, r2, n2, i2, o2) {
            var a2 = false;
            u.Guard.isNode(t2) && u.Guard.isShadowRoot(p.tree_rootNode(t2)) && (a2 = true);
            var s2 = false;
            u.Guard.isShadowRoot(t2) && "closed" === t2._mode && (s2 = true), e2._path.push({ invocationTarget: t2, invocationTargetInShadowTree: a2, shadowAdjustedTarget: r2, relatedTarget: n2, touchTargetList: i2, rootOfClosedTree: s2, slotInClosedTree: o2 });
          }
          function g(e2, t2, r2, n2) {
            void 0 === n2 && (n2 = { value: false });
            for (var i2 = t2._path, a2 = -1, s2 = 0; s2 < i2.length; s2++)
              if (i2[s2] === e2) {
                a2 = s2;
                break;
              }
            if (-1 !== a2) {
              var u2 = i2[a2];
              (null !== u2.shadowAdjustedTarget || a2 > 0 && null !== (u2 = i2[a2 - 1]).shadowAdjustedTarget) && (t2._target = u2.shadowAdjustedTarget);
            }
            if (t2._relatedTarget = e2.relatedTarget, t2._touchTargetList = e2.touchTargetList, !t2._stopPropagationFlag) {
              t2._currentTarget = e2.invocationTarget;
              var l2 = t2._currentTarget._eventListenerList, c2 = new (Array.bind.apply(Array, o([void 0], l2)))();
              if (!b(t2, c2, r2, e2, n2) && t2._isTrusted) {
                var h2 = t2._type;
                "animationend" === h2 ? t2._type = "webkitAnimationEnd" : "animationiteration" === h2 ? t2._type = "webkitAnimationIteration" : "animationstart" === h2 ? t2._type = "webkitAnimationStart" : "transitionend" === h2 && (t2._type = "webkitTransitionEnd"), b(t2, c2, r2, e2, n2), t2._type = h2;
              }
            }
          }
          function b(e2, t2, r2, n2, i2) {
            void 0 === i2 && (i2 = { value: false });
            for (var o2 = false, a2 = 0; a2 < t2.length; a2++) {
              var s2 = t2[a2];
              if (!s2.removed) {
                if (e2._type !== s2.type)
                  continue;
                if (o2 = true, "capturing" === r2 && !s2.capture)
                  continue;
                if ("bubbling" === r2 && s2.capture)
                  continue;
                if (s2.once && null !== e2._currentTarget) {
                  for (var l2 = e2._currentTarget, c2 = -1, h2 = 0; h2 < l2._eventListenerList.length; h2++)
                    if (l2._eventListenerList[h2] === s2) {
                      c2 = h2;
                      break;
                    }
                  -1 !== c2 && l2._eventListenerList.splice(c2, 1);
                }
                var p2 = void 0, f2 = void 0;
                u.Guard.isWindow(p2) && (f2 = p2._currentEvent, false === n2.invocationTargetInShadowTree && (p2._currentEvent = e2)), s2.passive && (e2._inPassiveListenerFlag = true);
                try {
                  s2.callback.handleEvent.call(e2._currentTarget, e2);
                } catch (e3) {
                  i2.value = true;
                }
                if (s2.passive && (e2._inPassiveListenerFlag = false), u.Guard.isWindow(p2) && (p2._currentEvent = f2), e2._stopImmediatePropagationFlag)
                  return o2;
              }
            }
            return o2;
          }
          function x(e2, t2) {
            return null;
          }
          function w(e2, t2) {
            return null;
          }
          function E(e2, t2) {
          }
          function D(e2, t2) {
          }
          t.event_setTheCanceledFlag = function(e2) {
            e2._cancelable && !e2._inPassiveListenerFlag && (e2._canceledFlag = true);
          }, t.event_initialize = function(e2, t2, r2, n2) {
            e2._initializedFlag = true, e2._stopPropagationFlag = false, e2._stopImmediatePropagationFlag = false, e2._canceledFlag = false, e2._isTrusted = false, e2._target = null, e2._type = t2, e2._bubbles = r2, e2._cancelable = n2;
          }, t.event_createAnEvent = m, t.event_innerEventCreationSteps = y, t.event_dispatch = v, t.event_appendToAnEventPath = _, t.event_invoke = g, t.event_innerInvoke = b, t.event_fireAnEvent = function(e2, t2, r2, n2, i2) {
            void 0 === r2 && (r2 = c.EventImpl);
            var o2 = m(r2);
            if (o2._type = e2, n2)
              for (var a2 in n2) {
                o2[a2] = n2[a2];
              }
            return v(o2, t2, i2);
          }, t.event_createLegacyEvent = function(e2) {
            var t2 = null;
            switch (e2.toLowerCase()) {
              case "beforeunloadevent":
              case "compositionevent":
                break;
              case "customevent":
                t2 = l.CustomEventImpl;
                break;
              case "devicemotionevent":
              case "deviceorientationevent":
              case "dragevent":
                break;
              case "event":
              case "events":
                t2 = c.EventImpl;
            }
            if (null === t2)
              throw new h.NotSupportedError("Event constructor not found for interface " + e2 + ".");
            var r2 = new t2("");
            return r2._type = "", r2._timeStamp = (/* @__PURE__ */ new Date()).getTime(), r2._isTrusted = false, r2._initializedFlag = false, r2;
          }, t.event_getterEventHandlerIDLAttribute = function(e2, t2) {
            return null;
          }, t.event_setterEventHandlerIDLAttribute = function(e2, t2, r2) {
          }, t.event_determineTheTargetOfAnEventHandler = x, t.event_getTheCurrentValueOfAnEventHandler = w, t.event_activateAnEventHandler = E, t.event_deactivateAnEventHandler = D;
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          }), o = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          }, a = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var s = r(6), u = r(1), l = r(9), c = r(34), h = r(3), p = r(2), f = r(7), d = r(152), m = r(0), y = r(12), v = function(e2) {
            function t2() {
              var t3 = e2.call(this) || this;
              return t3._children = /* @__PURE__ */ new Set(), t3._encoding = { name: "UTF-8", labels: ["unicode-1-1-utf-8", "utf-8", "utf8"] }, t3._contentType = "application/xml", t3._URL = { scheme: "about", username: "", password: "", host: null, port: null, path: ["blank"], query: null, fragment: null, _cannotBeABaseURLFlag: true, _blobURLEntry: null }, t3._origin = null, t3._type = "xml", t3._mode = "no-quirks", t3._documentElement = null, t3._hasNamespaces = false, t3._nodeDocumentOverwrite = null, t3;
            }
            return i(t2, e2), Object.defineProperty(t2.prototype, "_nodeDocument", { get: function() {
              return this._nodeDocumentOverwrite || this;
            }, set: function(e3) {
              this._nodeDocumentOverwrite = e3;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "implementation", { get: function() {
              return this._implementation || (this._implementation = m.create_domImplementation(this));
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "URL", { get: function() {
              return d.urlSerializer(this._URL);
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "documentURI", { get: function() {
              return this.URL;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "origin", { get: function() {
              return "null";
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "compatMode", { get: function() {
              return "quirks" === this._mode ? "BackCompat" : "CSS1Compat";
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "characterSet", { get: function() {
              return this._encoding.name;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "charset", { get: function() {
              return this._encoding.name;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "inputEncoding", { get: function() {
              return this._encoding.name;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "contentType", { get: function() {
              return this._contentType;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "doctype", { get: function() {
              var e3, t3;
              try {
                for (var r2 = o(this._children), n2 = r2.next(); !n2.done; n2 = r2.next()) {
                  var i2 = n2.value;
                  if (h.Guard.isDocumentTypeNode(i2))
                    return i2;
                }
              } catch (t4) {
                e3 = { error: t4 };
              } finally {
                try {
                  n2 && !n2.done && (t3 = r2.return) && t3.call(r2);
                } finally {
                  if (e3)
                    throw e3.error;
                }
              }
              return null;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "documentElement", { get: function() {
              return this._documentElement;
            }, enumerable: true, configurable: true }), t2.prototype.getElementsByTagName = function(e3) {
              return m.node_listOfElementsWithQualifiedName(e3, this);
            }, t2.prototype.getElementsByTagNameNS = function(e3, t3) {
              return m.node_listOfElementsWithNamespace(e3, t3, this);
            }, t2.prototype.getElementsByClassName = function(e3) {
              return m.node_listOfElementsWithClassNames(e3, this);
            }, t2.prototype.createElement = function(e3, t3) {
              if (!m.xml_isName(e3))
                throw new l.InvalidCharacterError();
              "html" === this._type && (e3 = e3.toLowerCase());
              var r2 = null;
              void 0 !== t3 && (r2 = p.isString(t3) ? t3 : t3.is);
              var n2 = "html" === this._type || "application/xhtml+xml" === this._contentType ? f.namespace.HTML : null;
              return m.element_createAnElement(this, e3, n2, null, r2, true);
            }, t2.prototype.createElementNS = function(e3, t3, r2) {
              return m.document_internalCreateElementNS(this, e3, t3, r2);
            }, t2.prototype.createDocumentFragment = function() {
              return m.create_documentFragment(this);
            }, t2.prototype.createTextNode = function(e3) {
              return m.create_text(this, e3);
            }, t2.prototype.createCDATASection = function(e3) {
              if ("html" === this._type)
                throw new l.NotSupportedError();
              if (-1 !== e3.indexOf("]]>"))
                throw new l.InvalidCharacterError();
              return m.create_cdataSection(this, e3);
            }, t2.prototype.createComment = function(e3) {
              return m.create_comment(this, e3);
            }, t2.prototype.createProcessingInstruction = function(e3, t3) {
              if (!m.xml_isName(e3))
                throw new l.InvalidCharacterError();
              if (-1 !== t3.indexOf("?>"))
                throw new l.InvalidCharacterError();
              return m.create_processingInstruction(this, e3, t3);
            }, t2.prototype.importNode = function(e3, t3) {
              if (void 0 === t3 && (t3 = false), h.Guard.isDocumentNode(e3) || h.Guard.isShadowRoot(e3))
                throw new l.NotSupportedError();
              return m.node_clone(e3, this, t3);
            }, t2.prototype.adoptNode = function(e3) {
              if (h.Guard.isDocumentNode(e3))
                throw new l.NotSupportedError();
              if (h.Guard.isShadowRoot(e3))
                throw new l.HierarchyRequestError();
              return m.document_adopt(e3, this), e3;
            }, t2.prototype.createAttribute = function(e3) {
              if (!m.xml_isName(e3))
                throw new l.InvalidCharacterError();
              return "html" === this._type && (e3 = e3.toLowerCase()), m.create_attr(this, e3);
            }, t2.prototype.createAttributeNS = function(e3, t3) {
              var r2 = a(m.namespace_validateAndExtract(e3, t3), 3), n2 = r2[0], i2 = r2[1], o2 = r2[2], s2 = m.create_attr(this, o2);
              return s2._namespace = n2, s2._namespacePrefix = i2, s2;
            }, t2.prototype.createEvent = function(e3) {
              return m.event_createLegacyEvent(e3);
            }, t2.prototype.createRange = function() {
              var e3 = m.create_range();
              return e3._start = [this, 0], e3._end = [this, 0], e3;
            }, t2.prototype.createNodeIterator = function(e3, t3, r2) {
              void 0 === t3 && (t3 = u.WhatToShow.All), void 0 === r2 && (r2 = null);
              var n2 = m.create_nodeIterator(e3, e3, true);
              return n2._whatToShow = t3, n2._iteratorCollection = m.create_nodeList(e3), p.isFunction(r2) ? (n2._filter = m.create_nodeFilter(), n2._filter.acceptNode = r2) : n2._filter = r2, n2;
            }, t2.prototype.createTreeWalker = function(e3, t3, r2) {
              void 0 === t3 && (t3 = u.WhatToShow.All), void 0 === r2 && (r2 = null);
              var n2 = m.create_treeWalker(e3, e3);
              return n2._whatToShow = t3, p.isFunction(r2) ? (n2._filter = m.create_nodeFilter(), n2._filter.acceptNode = r2) : n2._filter = r2, n2;
            }, t2.prototype._getTheParent = function(e3) {
              return "load" === e3._type ? null : s.dom.window;
            }, t2.prototype.getElementById = function(e3) {
              throw new Error("Mixin: NonElementParentNode not implemented.");
            }, Object.defineProperty(t2.prototype, "children", { get: function() {
              throw new Error("Mixin: ParentNode not implemented.");
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "firstElementChild", { get: function() {
              throw new Error("Mixin: ParentNode not implemented.");
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "lastElementChild", { get: function() {
              throw new Error("Mixin: ParentNode not implemented.");
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "childElementCount", { get: function() {
              throw new Error("Mixin: ParentNode not implemented.");
            }, enumerable: true, configurable: true }), t2.prototype.prepend = function() {
              for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
                e3[t3] = arguments[t3];
              throw new Error("Mixin: ParentNode not implemented.");
            }, t2.prototype.append = function() {
              for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
                e3[t3] = arguments[t3];
              throw new Error("Mixin: ParentNode not implemented.");
            }, t2.prototype.querySelector = function(e3) {
              throw new Error("Mixin: ParentNode not implemented.");
            }, t2.prototype.querySelectorAll = function(e3) {
              throw new Error("Mixin: ParentNode not implemented.");
            }, t2;
          }(c.NodeImpl);
          t.DocumentImpl = v, y.idl_defineConst(v.prototype, "_nodeType", u.NodeType.Document);
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          }), o = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          }, a = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var s = r(1), u = r(34), l = r(9), c = r(7), h = r(0), p = r(12), f = function(e2) {
            function t2() {
              var t3 = e2.call(this) || this;
              return t3._children = /* @__PURE__ */ new Set(), t3._namespace = null, t3._namespacePrefix = null, t3._localName = "", t3._customElementState = "undefined", t3._customElementDefinition = null, t3._is = null, t3._shadowRoot = null, t3._attributeList = h.create_namedNodeMap(t3), t3._attributeChangeSteps = [], t3._name = "", t3._assignedSlot = null, t3;
            }
            return i(t2, e2), Object.defineProperty(t2.prototype, "namespaceURI", { get: function() {
              return this._namespace;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "prefix", { get: function() {
              return this._namespacePrefix;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "localName", { get: function() {
              return this._localName;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "tagName", { get: function() {
              return this._htmlUppercasedQualifiedName;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "id", { get: function() {
              return h.element_getAnAttributeValue(this, "id");
            }, set: function(e3) {
              h.element_setAnAttributeValue(this, "id", e3);
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "className", { get: function() {
              return h.element_getAnAttributeValue(this, "class");
            }, set: function(e3) {
              h.element_setAnAttributeValue(this, "class", e3);
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "classList", { get: function() {
              var e3 = h.element_getAnAttributeByName("class", this);
              return null === e3 && (e3 = h.create_attr(this._nodeDocument, "class")), h.create_domTokenList(this, e3);
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "slot", { get: function() {
              return h.element_getAnAttributeValue(this, "slot");
            }, set: function(e3) {
              h.element_setAnAttributeValue(this, "slot", e3);
            }, enumerable: true, configurable: true }), t2.prototype.hasAttributes = function() {
              return 0 !== this._attributeList.length;
            }, Object.defineProperty(t2.prototype, "attributes", { get: function() {
              return this._attributeList;
            }, enumerable: true, configurable: true }), t2.prototype.getAttributeNames = function() {
              var e3, t3, r2 = [];
              try {
                for (var n2 = o(this._attributeList), i2 = n2.next(); !i2.done; i2 = n2.next()) {
                  var a2 = i2.value;
                  r2.push(a2._qualifiedName);
                }
              } catch (t4) {
                e3 = { error: t4 };
              } finally {
                try {
                  i2 && !i2.done && (t3 = n2.return) && t3.call(n2);
                } finally {
                  if (e3)
                    throw e3.error;
                }
              }
              return r2;
            }, t2.prototype.getAttribute = function(e3) {
              var t3 = h.element_getAnAttributeByName(e3, this);
              return t3 ? t3._value : null;
            }, t2.prototype.getAttributeNS = function(e3, t3) {
              var r2 = h.element_getAnAttributeByNamespaceAndLocalName(e3, t3, this);
              return r2 ? r2._value : null;
            }, t2.prototype.setAttribute = function(e3, t3) {
              if (!h.xml_isName(e3))
                throw new l.InvalidCharacterError();
              this._namespace === c.namespace.HTML && "html" === this._nodeDocument._type && (e3 = e3.toLowerCase());
              for (var r2 = null, n2 = 0; n2 < this._attributeList.length; n2++) {
                var i2 = this._attributeList[n2];
                if (i2._qualifiedName === e3) {
                  r2 = i2;
                  break;
                }
              }
              if (null === r2)
                return (r2 = h.create_attr(this._nodeDocument, e3))._value = t3, void h.element_append(r2, this);
              h.element_change(r2, this, t3);
            }, t2.prototype.setAttributeNS = function(e3, t3, r2) {
              var n2 = a(h.namespace_validateAndExtract(e3, t3), 3), i2 = n2[0], o2 = n2[1], s2 = n2[2];
              h.element_setAnAttributeValue(this, s2, r2, o2, i2);
            }, t2.prototype.removeAttribute = function(e3) {
              h.element_removeAnAttributeByName(e3, this);
            }, t2.prototype.removeAttributeNS = function(e3, t3) {
              h.element_removeAnAttributeByNamespaceAndLocalName(e3, t3, this);
            }, t2.prototype.hasAttribute = function(e3) {
              this._namespace === c.namespace.HTML && "html" === this._nodeDocument._type && (e3 = e3.toLowerCase());
              for (var t3 = 0; t3 < this._attributeList.length; t3++) {
                if (this._attributeList[t3]._qualifiedName === e3)
                  return true;
              }
              return false;
            }, t2.prototype.toggleAttribute = function(e3, t3) {
              if (!h.xml_isName(e3))
                throw new l.InvalidCharacterError();
              this._namespace === c.namespace.HTML && "html" === this._nodeDocument._type && (e3 = e3.toLowerCase());
              for (var r2 = null, n2 = 0; n2 < this._attributeList.length; n2++) {
                var i2 = this._attributeList[n2];
                if (i2._qualifiedName === e3) {
                  r2 = i2;
                  break;
                }
              }
              return null === r2 ? (void 0 === t3 || true === t3) && ((r2 = h.create_attr(this._nodeDocument, e3))._value = "", h.element_append(r2, this), true) : void 0 !== t3 && false !== t3 || (h.element_removeAnAttributeByName(e3, this), false);
            }, t2.prototype.hasAttributeNS = function(e3, t3) {
              for (var r2 = e3 || null, n2 = 0; n2 < this._attributeList.length; n2++) {
                var i2 = this._attributeList[n2];
                if (i2._namespace === r2 && i2._localName === t3)
                  return true;
              }
              return false;
            }, t2.prototype.getAttributeNode = function(e3) {
              return h.element_getAnAttributeByName(e3, this);
            }, t2.prototype.getAttributeNodeNS = function(e3, t3) {
              return h.element_getAnAttributeByNamespaceAndLocalName(e3, t3, this);
            }, t2.prototype.setAttributeNode = function(e3) {
              return h.element_setAnAttribute(e3, this);
            }, t2.prototype.setAttributeNodeNS = function(e3) {
              return h.element_setAnAttribute(e3, this);
            }, t2.prototype.removeAttributeNode = function(e3) {
              for (var t3 = false, r2 = 0; r2 < this._attributeList.length; r2++) {
                if (this._attributeList[r2] === e3) {
                  t3 = true;
                  break;
                }
              }
              if (!t3)
                throw new l.NotFoundError();
              return h.element_remove(e3, this), e3;
            }, t2.prototype.attachShadow = function(e3) {
              if (this._namespace !== c.namespace.HTML)
                throw new l.NotSupportedError();
              if (!h.customElement_isValidCustomElementName(this._localName) && !h.customElement_isValidShadowHostName(this._localName))
                throw new l.NotSupportedError();
              if (h.customElement_isValidCustomElementName(this._localName) || null !== this._is) {
                var t3 = h.customElement_lookUpACustomElementDefinition(this._nodeDocument, this._namespace, this._localName, this._is);
                if (null !== t3 && true === t3.disableShadow)
                  throw new l.NotSupportedError();
              }
              if (null !== this._shadowRoot)
                throw new l.NotSupportedError();
              var r2 = h.create_shadowRoot(this._nodeDocument, this);
              return r2._mode = e3.mode, this._shadowRoot = r2, r2;
            }, Object.defineProperty(t2.prototype, "shadowRoot", { get: function() {
              var e3 = this._shadowRoot;
              return null === e3 || "closed" === e3.mode ? null : e3;
            }, enumerable: true, configurable: true }), t2.prototype.closest = function(e3) {
              throw new l.NotImplementedError();
            }, t2.prototype.matches = function(e3) {
              throw new l.NotImplementedError();
            }, t2.prototype.webkitMatchesSelector = function(e3) {
              return this.matches(e3);
            }, t2.prototype.getElementsByTagName = function(e3) {
              return h.node_listOfElementsWithQualifiedName(e3, this);
            }, t2.prototype.getElementsByTagNameNS = function(e3, t3) {
              return h.node_listOfElementsWithNamespace(e3, t3, this);
            }, t2.prototype.getElementsByClassName = function(e3) {
              return h.node_listOfElementsWithClassNames(e3, this);
            }, t2.prototype.insertAdjacentElement = function(e3, t3) {
              return h.element_insertAdjacent(this, e3, t3);
            }, t2.prototype.insertAdjacentText = function(e3, t3) {
              var r2 = h.create_text(this._nodeDocument, t3);
              h.element_insertAdjacent(this, e3, r2);
            }, Object.defineProperty(t2.prototype, "_qualifiedName", { get: function() {
              return this._namespacePrefix ? this._namespacePrefix + ":" + this._localName : this._localName;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "_htmlUppercasedQualifiedName", { get: function() {
              var e3 = this._qualifiedName;
              return this._namespace === c.namespace.HTML && "html" === this._nodeDocument._type && (e3 = e3.toUpperCase()), e3;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "children", { get: function() {
              throw new Error("Mixin: ParentNode not implemented.");
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "firstElementChild", { get: function() {
              throw new Error("Mixin: ParentNode not implemented.");
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "lastElementChild", { get: function() {
              throw new Error("Mixin: ParentNode not implemented.");
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "childElementCount", { get: function() {
              throw new Error("Mixin: ParentNode not implemented.");
            }, enumerable: true, configurable: true }), t2.prototype.prepend = function() {
              for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
                e3[t3] = arguments[t3];
              throw new Error("Mixin: ParentNode not implemented.");
            }, t2.prototype.append = function() {
              for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
                e3[t3] = arguments[t3];
              throw new Error("Mixin: ParentNode not implemented.");
            }, t2.prototype.querySelector = function(e3) {
              throw new Error("Mixin: ParentNode not implemented.");
            }, t2.prototype.querySelectorAll = function(e3) {
              throw new Error("Mixin: ParentNode not implemented.");
            }, Object.defineProperty(t2.prototype, "previousElementSibling", { get: function() {
              throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "nextElementSibling", { get: function() {
              throw new Error("Mixin: NonDocumentTypeChildNode not implemented.");
            }, enumerable: true, configurable: true }), t2.prototype.before = function() {
              for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
                e3[t3] = arguments[t3];
              throw new Error("Mixin: ChildNode not implemented.");
            }, t2.prototype.after = function() {
              for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
                e3[t3] = arguments[t3];
              throw new Error("Mixin: ChildNode not implemented.");
            }, t2.prototype.replaceWith = function() {
              for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
                e3[t3] = arguments[t3];
              throw new Error("Mixin: ChildNode not implemented.");
            }, t2.prototype.remove = function() {
              throw new Error("Mixin: ChildNode not implemented.");
            }, Object.defineProperty(t2.prototype, "assignedSlot", { get: function() {
              throw new Error("Mixin: Slotable not implemented.");
            }, enumerable: true, configurable: true }), t2._create = function(e3, r2, n2, i2) {
              void 0 === n2 && (n2 = null), void 0 === i2 && (i2 = null);
              var o2 = new t2();
              return o2._localName = r2, o2._namespace = n2, o2._namespacePrefix = i2, o2._nodeDocument = e3, o2;
            }, t2;
          }(u.NodeImpl);
          t.ElementImpl = f, p.idl_defineConst(f.prototype, "_nodeType", s.NodeType.Element);
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(1), a = r(34), s = r(12), u = function(e2) {
            function t2(t3) {
              void 0 === t3 && (t3 = null);
              var r2 = e2.call(this) || this;
              return r2._children = /* @__PURE__ */ new Set(), r2._host = t3, r2;
            }
            return i(t2, e2), t2.prototype.getElementById = function(e3) {
              throw new Error("Mixin: NonElementParentNode not implemented.");
            }, Object.defineProperty(t2.prototype, "children", { get: function() {
              throw new Error("Mixin: ParentNode not implemented.");
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "firstElementChild", { get: function() {
              throw new Error("Mixin: ParentNode not implemented.");
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "lastElementChild", { get: function() {
              throw new Error("Mixin: ParentNode not implemented.");
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "childElementCount", { get: function() {
              throw new Error("Mixin: ParentNode not implemented.");
            }, enumerable: true, configurable: true }), t2.prototype.prepend = function() {
              for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
                e3[t3] = arguments[t3];
              throw new Error("Mixin: ParentNode not implemented.");
            }, t2.prototype.append = function() {
              for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
                e3[t3] = arguments[t3];
              throw new Error("Mixin: ParentNode not implemented.");
            }, t2.prototype.querySelector = function(e3) {
              throw new Error("Mixin: ParentNode not implemented.");
            }, t2.prototype.querySelectorAll = function(e3) {
              throw new Error("Mixin: ParentNode not implemented.");
            }, t2._create = function(e3, r2) {
              void 0 === r2 && (r2 = null);
              var n2 = new t2(r2);
              return n2._nodeDocument = e3, n2;
            }, t2;
          }(a.NodeImpl);
          t.DocumentFragmentImpl = u, s.idl_defineConst(u.prototype, "_nodeType", o.NodeType.DocumentFragment);
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          }), o = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var a = r(1), s = r(71), u = r(0), l = r(12), c = function(e2) {
            function t2(t3) {
              void 0 === t3 && (t3 = "");
              var r2 = e2.call(this, t3) || this;
              return r2._name = "", r2._assignedSlot = null, r2;
            }
            return i(t2, e2), Object.defineProperty(t2.prototype, "wholeText", { get: function() {
              var e3, t3, r2 = "";
              try {
                for (var n2 = o(u.text_contiguousTextNodes(this, true)), i2 = n2.next(); !i2.done; i2 = n2.next()) {
                  r2 += i2.value._data;
                }
              } catch (t4) {
                e3 = { error: t4 };
              } finally {
                try {
                  i2 && !i2.done && (t3 = n2.return) && t3.call(n2);
                } finally {
                  if (e3)
                    throw e3.error;
                }
              }
              return r2;
            }, enumerable: true, configurable: true }), t2.prototype.splitText = function(e3) {
              return u.text_split(this, e3);
            }, Object.defineProperty(t2.prototype, "assignedSlot", { get: function() {
              throw new Error("Mixin: Slotable not implemented.");
            }, enumerable: true, configurable: true }), t2._create = function(e3, r2) {
              void 0 === r2 && (r2 = "");
              var n2 = new t2(r2);
              return n2._nodeDocument = e3, n2;
            }, t2;
          }(s.CharacterDataImpl);
          t.TextImpl = c, l.idl_defineConst(c.prototype, "_nodeType", a.NodeType.Text);
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = function() {
            function e2() {
            }
            return Object.defineProperty(e2.prototype, "_startNode", { get: function() {
              return this._start[0];
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "_startOffset", { get: function() {
              return this._start[1];
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "_endNode", { get: function() {
              return this._end[0];
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "_endOffset", { get: function() {
              return this._end[1];
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "_collapsed", { get: function() {
              return this._start[0] === this._end[0] && this._start[1] === this._end[1];
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "startContainer", { get: function() {
              return this._startNode;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "startOffset", { get: function() {
              return this._startOffset;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "endContainer", { get: function() {
              return this._endNode;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "endOffset", { get: function() {
              return this._endOffset;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "collapsed", { get: function() {
              return this._collapsed;
            }, enumerable: true, configurable: true }), e2;
          }();
          t.AbstractRangeImpl = n;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(1), i = function() {
            function e2(e3) {
              this._activeFlag = false, this._root = e3, this._whatToShow = n.WhatToShow.All, this._filter = null;
            }
            return Object.defineProperty(e2.prototype, "root", { get: function() {
              return this._root;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "whatToShow", { get: function() {
              return this._whatToShow;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "filter", { get: function() {
              return this._filter;
            }, enumerable: true, configurable: true }), e2;
          }();
          t.TraverserImpl = i;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(1), i = r(0), o = r(12), a = function() {
            function e2(e3, t2) {
              this._target = null, this._relatedTarget = null, this._touchTargetList = [], this._path = [], this._currentTarget = null, this._eventPhase = n.EventPhase.None, this._stopPropagationFlag = false, this._stopImmediatePropagationFlag = false, this._canceledFlag = false, this._inPassiveListenerFlag = false, this._composedFlag = false, this._initializedFlag = false, this._dispatchFlag = false, this._isTrusted = false, this._bubbles = false, this._cancelable = false, this._type = e3, t2 && (this._bubbles = t2.bubbles || false, this._cancelable = t2.cancelable || false, this._composedFlag = t2.composed || false), this._initializedFlag = true, this._timeStamp = (/* @__PURE__ */ new Date()).getTime();
            }
            return Object.defineProperty(e2.prototype, "type", { get: function() {
              return this._type;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "target", { get: function() {
              return this._target;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "srcElement", { get: function() {
              return this._target;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "currentTarget", { get: function() {
              return this._currentTarget;
            }, enumerable: true, configurable: true }), e2.prototype.composedPath = function() {
              var e3 = [], t2 = this._path;
              if (0 === t2.length)
                return e3;
              var r2 = this._currentTarget;
              if (null === r2)
                throw new Error("Event currentTarget is null.");
              e3.push(r2);
              for (var n2 = 0, i2 = 0, o2 = t2.length - 1; o2 >= 0; ) {
                if (t2[o2].rootOfClosedTree && i2++, t2[o2].invocationTarget === r2) {
                  n2 = o2;
                  break;
                }
                t2[o2].slotInClosedTree && i2--, o2--;
              }
              var a2 = i2, s = i2;
              for (o2 = n2 - 1; o2 >= 0; )
                t2[o2].rootOfClosedTree && a2++, a2 <= s && e3.unshift(t2[o2].invocationTarget), t2[o2].slotInClosedTree && --a2 < s && (s = a2), o2--;
              for (a2 = i2, s = i2, o2 = n2 + 1; o2 < t2.length; )
                t2[o2].slotInClosedTree && a2++, a2 <= s && e3.push(t2[o2].invocationTarget), t2[o2].rootOfClosedTree && --a2 < s && (s = a2), o2++;
              return e3;
            }, Object.defineProperty(e2.prototype, "eventPhase", { get: function() {
              return this._eventPhase;
            }, enumerable: true, configurable: true }), e2.prototype.stopPropagation = function() {
              this._stopPropagationFlag = true;
            }, Object.defineProperty(e2.prototype, "cancelBubble", { get: function() {
              return this._stopPropagationFlag;
            }, set: function(e3) {
              e3 && this.stopPropagation();
            }, enumerable: true, configurable: true }), e2.prototype.stopImmediatePropagation = function() {
              this._stopPropagationFlag = true, this._stopImmediatePropagationFlag = true;
            }, Object.defineProperty(e2.prototype, "bubbles", { get: function() {
              return this._bubbles;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "cancelable", { get: function() {
              return this._cancelable;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "returnValue", { get: function() {
              return !this._canceledFlag;
            }, set: function(e3) {
              e3 || i.event_setTheCanceledFlag(this);
            }, enumerable: true, configurable: true }), e2.prototype.preventDefault = function() {
              i.event_setTheCanceledFlag(this);
            }, Object.defineProperty(e2.prototype, "defaultPrevented", { get: function() {
              return this._canceledFlag;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "composed", { get: function() {
              return this._composedFlag;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "isTrusted", { get: function() {
              return this._isTrusted;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "timeStamp", { get: function() {
              return this._timeStamp;
            }, enumerable: true, configurable: true }), e2.prototype.initEvent = function(e3, t2, r2) {
              void 0 === t2 && (t2 = false), void 0 === r2 && (r2 = false), this._dispatchFlag || i.event_initialize(this, e3, t2, r2);
            }, e2.NONE = 0, e2.CAPTURING_PHASE = 1, e2.AT_TARGET = 2, e2.BUBBLING_PHASE = 3, e2;
          }();
          t.EventImpl = a, o.idl_defineConst(a.prototype, "NONE", 0), o.idl_defineConst(a.prototype, "CAPTURING_PHASE", 1), o.idl_defineConst(a.prototype, "AT_TARGET", 2), o.idl_defineConst(a.prototype, "BUBBLING_PHASE", 3);
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(1), i = r(9);
          t.traversal_filter = function(e2, t2) {
            if (e2._activeFlag)
              throw new i.InvalidStateError();
            var r2 = 1 << t2._nodeType - 1;
            if (0 == (e2.whatToShow & r2))
              return n.FilterResult.Skip;
            if (!e2.filter)
              return n.FilterResult.Accept;
            e2._activeFlag = true;
            var o = n.FilterResult.Reject;
            try {
              o = e2.filter.acceptNode(t2);
            } catch (t3) {
              throw e2._activeFlag = false, t3;
            }
            return e2._activeFlag = false, o;
          };
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          }, i = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(6), a = r(3), s = r(2), u = r(99), l = r(73), c = r(17), h = r(173), p = r(30), f = r(52), d = r(37);
          t.document_elementInterface = function(e2, t2) {
            return u.ElementImpl;
          }, t.document_internalCreateElementNS = function(e2, t2, r2, i2) {
            var o2 = n(h.namespace_validateAndExtract(t2, r2), 3), a2 = o2[0], u2 = o2[1], l2 = o2[2], c2 = null;
            return void 0 !== i2 && (c2 = s.isString(i2) ? i2 : i2.is), f.element_createAnElement(e2, l2, a2, u2, c2, true);
          }, t.document_adopt = function(e2, t2) {
            var r2, n2;
            if (e2._nodeDocument !== t2 || null !== e2._parent) {
              var s2 = e2._nodeDocument;
              if (e2._parent && d.mutation_remove(e2, e2._parent), t2 !== s2)
                for (var u2 = c.tree_getFirstDescendantNode(e2, true, true); null !== u2; ) {
                  if (u2._nodeDocument = t2, a.Guard.isElementNode(u2))
                    try {
                      for (var h2 = (r2 = void 0, i(u2._attributeList._asArray())), f2 = h2.next(); !f2.done; f2 = h2.next()) {
                        f2.value._nodeDocument = t2;
                      }
                    } catch (e3) {
                      r2 = { error: e3 };
                    } finally {
                      try {
                        f2 && !f2.done && (n2 = h2.return) && n2.call(h2);
                      } finally {
                        if (r2)
                          throw r2.error;
                      }
                    }
                  o.dom.features.customElements && a.Guard.isElementNode(u2) && "custom" === u2._customElementState && l.customElement_enqueueACustomElementCallbackReaction(u2, "adoptedCallback", [s2, t2]), o.dom.features.steps && p.dom_runAdoptingSteps(u2, s2), u2 = c.tree_getNextDescendantNode(e2, u2, true, true);
                }
            }
          };
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(6), o = r(3), a = r(9), s = r(17), u = r(51), l = r(30);
          t.characterData_replaceData = function(e2, t2, r2, c) {
            var h, p, f = s.tree_nodeLength(e2);
            if (t2 > f)
              throw new a.IndexSizeError("Offset exceeds character data length. Offset: " + t2 + ", Length: " + f + ", Node is " + e2.nodeName + ".");
            t2 + r2 > f && (r2 = f - t2), i.dom.features.mutationObservers && u.observer_queueMutationRecord("characterData", e2, null, null, e2._data, [], [], null, null);
            var d = e2._data.substring(0, t2) + c + e2._data.substring(t2 + r2);
            e2._data = d;
            try {
              for (var m = n(i.dom.rangeList), y = m.next(); !y.done; y = m.next()) {
                var v = y.value;
                v._start[0] === e2 && v._start[1] > t2 && v._start[1] <= t2 + r2 && (v._start[1] = t2), v._end[0] === e2 && v._end[1] > t2 && v._end[1] <= t2 + r2 && (v._end[1] = t2), v._start[0] === e2 && v._start[1] > t2 + r2 && (v._start[1] += c.length - r2), v._end[0] === e2 && v._end[1] > t2 + r2 && (v._end[1] += c.length - r2);
              }
            } catch (e3) {
              h = { error: e3 };
            } finally {
              try {
                y && !y.done && (p = m.return) && p.call(m);
              } finally {
                if (h)
                  throw h.error;
              }
            }
            i.dom.features.steps && o.Guard.isTextNode(e2) && null !== e2._parent && l.dom_runChildTextContentChangeSteps(e2._parent);
          }, t.characterData_substringData = function(e2, t2, r2) {
            var n2 = s.tree_nodeLength(e2);
            if (t2 > n2)
              throw new a.IndexSizeError("Offset exceeds character data length. Offset: " + t2 + ", Length: " + n2 + ", Node is " + e2.nodeName + ".");
            return t2 + r2 > n2 ? e2._data.substr(t2) : e2._data.substr(t2, r2);
          };
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          }, i = this && this.__spread || function() {
            for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
              e2 = e2.concat(n(arguments[t2]));
            return e2;
          }, o = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var a = r(7);
          function s(e2) {
            var t2 = a.string.splitAStringOnASCIIWhitespace(e2);
            return new Set(t2);
          }
          function u(e2) {
            return i(e2).join(" ");
          }
          t.orderedSet_parse = s, t.orderedSet_serialize = u, t.orderedSet_sanitize = function(e2) {
            return u(s(e2));
          }, t.orderedSet_contains = function(e2, t2, r2) {
            var n2, i2, a2, s2;
            try {
              for (var u2 = o(t2), l = u2.next(); !l.done; l = u2.next()) {
                var c = l.value, h = false;
                try {
                  for (var p = (a2 = void 0, o(e2)), f = p.next(); !f.done; f = p.next()) {
                    var d = f.value;
                    if (r2) {
                      if (d === c) {
                        h = true;
                        break;
                      }
                    } else if (d.toUpperCase() === c.toUpperCase()) {
                      h = true;
                      break;
                    }
                  }
                } catch (e3) {
                  a2 = { error: e3 };
                } finally {
                  try {
                    f && !f.done && (s2 = p.return) && s2.call(p);
                  } finally {
                    if (a2)
                      throw a2.error;
                  }
                }
                if (!h)
                  return false;
              }
            } catch (e3) {
              n2 = { error: e3 };
            } finally {
              try {
                l && !l.done && (i2 = u2.return) && i2.call(u2);
              } finally {
                if (n2)
                  throw n2.error;
              }
            }
            return true;
          };
        }, function(e, t, r) {
          "use strict";
          r(179), Object.defineProperty(t, "__esModule", { value: true });
          var n = r(263), i = r(110), o = r(2);
          i.dom.setFeatures(false), t.createDocument = function() {
            var e2 = new n.DOMImplementation().createDocument(null, "root", null);
            return e2.documentElement && e2.removeChild(e2.documentElement), e2;
          }, t.sanitizeInput = function(e2, t2) {
            if (null == e2)
              return e2;
            if (void 0 === t2)
              return e2 + "";
            var r2 = "";
            e2 += "";
            for (var n2 = 0; n2 < e2.length; n2++) {
              var i2 = e2.charCodeAt(n2);
              if (9 === i2 || 10 === i2 || 13 === i2 || i2 >= 32 && i2 <= 55295 || i2 >= 57344 && i2 <= 65533)
                r2 += e2.charAt(n2);
              else if (i2 >= 55296 && i2 <= 56319 && n2 < e2.length - 1) {
                var a = e2.charCodeAt(n2 + 1);
                a >= 56320 && a <= 57343 ? (i2 = 1024 * (i2 - 55296) + a - 56320 + 65536, r2 += String.fromCodePoint(i2), n2++) : r2 += o.isString(t2) ? t2 : t2(e2.charAt(n2), n2, e2);
              } else
                r2 += o.isString(t2) ? t2 : t2(e2.charAt(n2), n2, e2);
            }
            return r2;
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(2), i = r(153);
          t.AbortController = i.AbortControllerImpl;
          var o = r(154);
          t.AbortSignal = o.AbortSignalImpl;
          var a = r(102);
          t.AbstractRange = a.AbstractRangeImpl;
          var s = r(157);
          t.Attr = s.AttrImpl;
          var u = r(158);
          t.CDATASection = u.CDATASectionImpl;
          var l = r(71);
          t.CharacterData = l.CharacterDataImpl;
          var c = r(264), h = r(159);
          t.Comment = h.CommentImpl;
          var p = r(171);
          t.CustomEvent = p.CustomEventImpl;
          var f = r(100);
          t.DocumentFragment = f.DocumentFragmentImpl;
          var d = r(98);
          t.Document = d.DocumentImpl;
          var m = r(265), y = r(155);
          t.DocumentType = y.DocumentTypeImpl;
          var v = r(6);
          t.dom = v.dom;
          var _ = r(148);
          t.DOMImplementation = _.DOMImplementationImpl;
          var g = r(170);
          t.DOMTokenList = g.DOMTokenListImpl;
          var b = r(99);
          t.Element = b.ElementImpl;
          var x = r(104);
          t.Event = x.EventImpl;
          var w = r(70);
          t.EventTarget = w.EventTargetImpl;
          var E = r(161);
          t.HTMLCollection = E.HTMLCollectionImpl;
          var D = r(266);
          t.MutationObserver = D.MutationObserverImpl;
          var S = r(169);
          t.MutationRecord = S.MutationRecordImpl;
          var C = r(164);
          t.NamedNodeMap = C.NamedNodeMapImpl;
          var A = r(168);
          t.NodeFilter = A.NodeFilterImpl;
          var N = r(34);
          t.Node = N.NodeImpl;
          var T = r(166);
          t.NodeIterator = T.NodeIteratorImpl;
          var O = r(162);
          t.NodeList = O.NodeListImpl;
          var F = r(163);
          t.NodeListStatic = F.NodeListStaticImpl;
          var k = r(267), P = r(268), I = r(269), L = r(160);
          t.ProcessingInstruction = L.ProcessingInstructionImpl;
          var M = r(165);
          t.Range = M.RangeImpl;
          var B = r(156);
          t.ShadowRoot = B.ShadowRootImpl;
          var j = r(270), R = r(271);
          t.StaticRange = R.StaticRangeImpl;
          var z2 = r(101);
          t.Text = z2.TextImpl;
          var U = r(103);
          t.Traverser = U.TraverserImpl;
          var G = r(167);
          t.TreeWalker = G.TreeWalkerImpl;
          var X = r(149);
          t.Window = X.WindowImpl;
          var q = r(151);
          t.XMLDocument = q.XMLDocumentImpl, n.applyMixin(b.ElementImpl, c.ChildNodeImpl), n.applyMixin(l.CharacterDataImpl, c.ChildNodeImpl), n.applyMixin(y.DocumentTypeImpl, c.ChildNodeImpl), n.applyMixin(d.DocumentImpl, m.DocumentOrShadowRootImpl), n.applyMixin(B.ShadowRootImpl, m.DocumentOrShadowRootImpl), n.applyMixin(b.ElementImpl, k.NonDocumentTypeChildNodeImpl), n.applyMixin(l.CharacterDataImpl, k.NonDocumentTypeChildNodeImpl), n.applyMixin(d.DocumentImpl, P.NonElementParentNodeImpl), n.applyMixin(f.DocumentFragmentImpl, P.NonElementParentNodeImpl), n.applyMixin(d.DocumentImpl, I.ParentNodeImpl), n.applyMixin(f.DocumentFragmentImpl, I.ParentNodeImpl), n.applyMixin(b.ElementImpl, I.ParentNodeImpl), n.applyMixin(z2.TextImpl, j.SlotableImpl), n.applyMixin(b.ElementImpl, j.SlotableImpl);
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true }), function(e2) {
            e2[e2.EOF = 0] = "EOF", e2[e2.Declaration = 1] = "Declaration", e2[e2.DocType = 2] = "DocType", e2[e2.Element = 3] = "Element", e2[e2.Text = 4] = "Text", e2[e2.CDATA = 5] = "CDATA", e2[e2.PI = 6] = "PI", e2[e2.Comment = 7] = "Comment", e2[e2.ClosingTag = 8] = "ClosingTag";
          }(t.TokenType || (t.TokenType = {}));
        }, function(e, t, r) {
          "use strict";
          r(64), r(20), r(66);
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(2), a = function(e2) {
            function t2() {
              return null !== e2 && e2.apply(this, arguments) || this;
            }
            return i(t2, e2), t2.prototype._parse = function(e3, t3) {
              var r2 = this, n2 = this._builderOptions, i2 = null;
              return o.isFunction(t3) ? i2 = this.parse(e3, t3.apply(this)) : o.isArray(t3) || o.isSet(t3) ? o.forEachArray(t3, function(t4) {
                return i2 = r2.parse(e3, t4);
              }, this) : o.isMap(t3) || o.isObject(t3) ? o.forEachObject(t3, function(t4, a2) {
                if (o.isFunction(a2) && (a2 = a2.apply(r2)), n2.ignoreConverters || 0 !== t4.indexOf(n2.convert.att))
                  if (n2.ignoreConverters || 0 !== t4.indexOf(n2.convert.text))
                    if (n2.ignoreConverters || 0 !== t4.indexOf(n2.convert.cdata))
                      if (n2.ignoreConverters || 0 !== t4.indexOf(n2.convert.comment))
                        if (n2.ignoreConverters || 0 !== t4.indexOf(n2.convert.ins))
                          if ((o.isArray(a2) || o.isSet(a2)) && o.isEmpty(a2))
                            ;
                          else if ((o.isMap(a2) || o.isObject(a2)) && o.isEmpty(a2))
                            i2 = r2.element(e3, void 0, r2.sanitize(t4)) || i2;
                          else if (n2.keepNullNodes || null != a2)
                            if (o.isArray(a2) || o.isSet(a2))
                              o.forEachArray(a2, function(n3) {
                                var o2 = {};
                                o2[t4] = n3, i2 = r2.parse(e3, o2);
                              }, r2);
                            else if (o.isMap(a2) || o.isObject(a2)) {
                              (s = r2.element(e3, void 0, r2.sanitize(t4))) && (i2 = s, r2.parse(s, a2));
                            } else if (null != a2 && "" !== a2) {
                              var s;
                              (s = r2.element(e3, void 0, r2.sanitize(t4))) && (i2 = s, r2.text(s, r2._decodeText(r2.sanitize(a2))));
                            } else
                              i2 = r2.element(e3, void 0, r2.sanitize(t4)) || i2;
                          else
                            ;
                        else if (o.isString(a2)) {
                          var u = a2.indexOf(" "), l = -1 === u ? a2 : a2.substr(0, u), c = -1 === u ? "" : a2.substr(u + 1);
                          i2 = r2.instruction(e3, r2.sanitize(l), r2.sanitize(c)) || i2;
                        } else
                          o.isArray(a2) || o.isSet(a2) ? o.forEachArray(a2, function(t5) {
                            var n3 = t5.indexOf(" "), o2 = -1 === n3 ? t5 : t5.substr(0, n3), a3 = -1 === n3 ? "" : t5.substr(n3 + 1);
                            i2 = r2.instruction(e3, r2.sanitize(o2), r2.sanitize(a3)) || i2;
                          }, r2) : o.forEachObject(a2, function(t5, n3) {
                            return i2 = r2.instruction(e3, r2.sanitize(t5), r2.sanitize(n3)) || i2;
                          }, r2);
                      else
                        o.isArray(a2) || o.isSet(a2) ? o.forEachArray(a2, function(t5) {
                          return i2 = r2.comment(e3, r2.sanitize(t5)) || i2;
                        }, r2) : i2 = r2.comment(e3, r2.sanitize(a2)) || i2;
                    else
                      o.isArray(a2) || o.isSet(a2) ? o.forEachArray(a2, function(t5) {
                        return i2 = r2.cdata(e3, r2.sanitize(t5)) || i2;
                      }, r2) : i2 = r2.cdata(e3, r2.sanitize(a2)) || i2;
                  else
                    i2 = o.isMap(a2) || o.isObject(a2) ? r2.parse(e3, a2) : r2.text(e3, r2._decodeText(r2.sanitize(a2))) || i2;
                else if (t4 === n2.convert.att) {
                  if (o.isArray(a2) || o.isSet(a2))
                    throw new Error("Invalid attribute: " + a2.toString() + ". " + e3._debugInfo());
                  o.forEachObject(a2, function(t5, n3) {
                    i2 = r2.attribute(e3, void 0, r2.sanitize(t5), r2._decodeAttributeValue(r2.sanitize(n3))) || i2;
                  });
                } else
                  i2 = r2.attribute(e3, void 0, r2.sanitize(t4.substr(n2.convert.att.length)), r2._decodeAttributeValue(r2.sanitize(a2))) || i2;
              }, this) : (n2.keepNullNodes || null != t3) && (i2 = this.text(e3, this._decodeText(this.sanitize(t3))) || i2), i2 || e3;
            }, t2;
          }(r(75).BaseReader);
          t.ObjectReader = a;
        }, function(e, t, r) {
          "use strict";
          var n = r(39);
          e.exports = new n({ explicit: [r(287), r(288), r(289)] });
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = function(e2) {
            this.level = 0, this._builderOptions = e2, this._writerOptions = e2;
          };
          t.BaseCBWriter = n;
        }, function(e, t, r) {
          var n = r(16), i = r(8), o = r(116);
          e.exports = !n && !i(function() {
            return 7 != Object.defineProperty(o("div"), "a", { get: function() {
              return 7;
            } }).a;
          });
        }, function(e, t, r) {
          var n = r(11), i = r(13), o = n.document, a = i(o) && i(o.createElement);
          e.exports = function(e2) {
            return a ? o.createElement(e2) : {};
          };
        }, function(e, t, r) {
          var n = r(118), i = Function.toString;
          "function" != typeof n.inspectSource && (n.inspectSource = function(e2) {
            return i.call(e2);
          }), e.exports = n.inspectSource;
        }, function(e, t, r) {
          var n = r(11), i = r(80), o = n["__core-js_shared__"] || i("__core-js_shared__", {});
          e.exports = o;
        }, function(e, t, r) {
          var n = r(14), i = r(187), o = r(55), a = r(15);
          e.exports = function(e2, t2) {
            for (var r2 = i(t2), s = a.f, u = o.f, l = 0; l < r2.length; l++) {
              var c = r2[l];
              n(e2, c) || s(e2, c, u(t2, c));
            }
          };
        }, function(e, t, r) {
          var n = r(11);
          e.exports = n;
        }, function(e, t, r) {
          var n = r(14), i = r(24), o = r(122).indexOf, a = r(45);
          e.exports = function(e2, t2) {
            var r2, s = i(e2), u = 0, l = [];
            for (r2 in s)
              !n(a, r2) && n(s, r2) && l.push(r2);
            for (; t2.length > u; )
              n(s, r2 = t2[u++]) && (~o(l, r2) || l.push(r2));
            return l;
          };
        }, function(e, t, r) {
          var n = r(24), i = r(26), o = r(83), a = function(e2) {
            return function(t2, r2, a2) {
              var s, u = n(t2), l = i(u.length), c = o(a2, l);
              if (e2 && r2 != r2) {
                for (; l > c; )
                  if ((s = u[c++]) != s)
                    return true;
              } else
                for (; l > c; c++)
                  if ((e2 || c in u) && u[c] === r2)
                    return e2 || c || 0;
              return !e2 && -1;
            };
          };
          e.exports = { includes: a(true), indexOf: a(false) };
        }, function(e, t, r) {
          var n = r(8), i = /#|\.prototype\./, o = function(e2, t2) {
            var r2 = s[a(e2)];
            return r2 == l || r2 != u && ("function" == typeof t2 ? n(t2) : !!t2);
          }, a = o.normalize = function(e2) {
            return String(e2).replace(i, ".").toLowerCase();
          }, s = o.data = {}, u = o.NATIVE = "N", l = o.POLYFILL = "P";
          e.exports = o;
        }, function(e, t, r) {
          var n = r(86);
          e.exports = n && !Symbol.sham && "symbol" == typeof Symbol.iterator;
        }, function(e, t, r) {
          var n = r(5);
          t.f = n;
        }, function(e, t, r) {
          var n = r(120), i = r(14), o = r(125), a = r(15).f;
          e.exports = function(e2) {
            var t2 = n.Symbol || (n.Symbol = {});
            i(t2, e2) || a(t2, e2, { value: o.f(e2) });
          };
        }, function(e, t) {
          e.exports = function(e2) {
            if ("function" != typeof e2)
              throw TypeError(String(e2) + " is not a function");
            return e2;
          };
        }, function(e, t, r) {
          var n = r(13), i = r(59), o = r(5)("species");
          e.exports = function(e2, t2) {
            var r2;
            return i(e2) && ("function" != typeof (r2 = e2.constructor) || r2 !== Array && !i(r2.prototype) ? n(r2) && null === (r2 = r2[o]) && (r2 = void 0) : r2 = void 0), new (void 0 === r2 ? Array : r2)(0 === t2 ? 0 : t2);
          };
        }, function(e, t, r) {
          var n, i, o = r(11), a = r(193), s = o.process, u = s && s.versions, l = u && u.v8;
          l ? i = (n = l.split("."))[0] + n[1] : a && (!(n = a.match(/Edge\/(\d+)/)) || n[1] >= 74) && (n = a.match(/Chrome\/(\d+)/)) && (i = n[1]), e.exports = i && +i;
        }, function(e, t, r) {
          var n = r(5), i = r(60), o = r(15), a = n("unscopables"), s = Array.prototype;
          null == s[a] && o.f(s, a, { configurable: true, value: i(null) }), e.exports = function(e2) {
            s[a][e2] = true;
          };
        }, function(e, t, r) {
          "use strict";
          var n, i, o, a = r(132), s = r(21), u = r(14), l = r(5), c = r(44), h = l("iterator"), p = false;
          [].keys && ("next" in (o = [].keys()) ? (i = a(a(o))) !== Object.prototype && (n = i) : p = true), null == n && (n = {}), c || u(n, h) || s(n, h, function() {
            return this;
          }), e.exports = { IteratorPrototype: n, BUGGY_SAFARI_ITERATORS: p };
        }, function(e, t, r) {
          var n = r(14), i = r(27), o = r(57), a = r(196), s = o("IE_PROTO"), u = Object.prototype;
          e.exports = a ? Object.getPrototypeOf : function(e2) {
            return e2 = i(e2), n(e2, s) ? e2[s] : "function" == typeof e2.constructor && e2 instanceof e2.constructor ? e2.constructor.prototype : e2 instanceof Object ? u : null;
          };
        }, function(e, t, r) {
          var n = r(18), i = r(197);
          e.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
            var e2, t2 = false, r2 = {};
            try {
              (e2 = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(r2, []), t2 = r2 instanceof Array;
            } catch (e3) {
            }
            return function(r3, o) {
              return n(r3), i(o), t2 ? e2.call(r3, o) : r3.__proto__ = o, r3;
            };
          }() : void 0);
        }, function(e, t, r) {
          "use strict";
          var n = r(56), i = r(15), o = r(40);
          e.exports = function(e2, t2, r2) {
            var a = n(t2);
            a in e2 ? i.f(e2, a, o(0, r2)) : e2[a] = r2;
          };
        }, function(e, t, r) {
          var n = r(90), i = r(42), o = r(5)("toStringTag"), a = "Arguments" == i(function() {
            return arguments;
          }());
          e.exports = n ? i : function(e2) {
            var t2, r2, n2;
            return void 0 === e2 ? "Undefined" : null === e2 ? "Null" : "string" == typeof (r2 = function(e3, t3) {
              try {
                return e3[t3];
              } catch (e4) {
              }
            }(t2 = Object(e2), o)) ? r2 : a ? i(t2) : "Object" == (n2 = i(t2)) && "function" == typeof t2.callee ? "Arguments" : n2;
          };
        }, function(e, t, r) {
          "use strict";
          var n = r(18);
          e.exports = function() {
            var e2 = n(this), t2 = "";
            return e2.global && (t2 += "g"), e2.ignoreCase && (t2 += "i"), e2.multiline && (t2 += "m"), e2.dotAll && (t2 += "s"), e2.unicode && (t2 += "u"), e2.sticky && (t2 += "y"), t2;
          };
        }, function(e, t, r) {
          var n = r(47), i = r(35), o = function(e2) {
            return function(t2, r2) {
              var o2, a, s = String(i(t2)), u = n(r2), l = s.length;
              return u < 0 || u >= l ? e2 ? "" : void 0 : (o2 = s.charCodeAt(u)) < 55296 || o2 > 56319 || u + 1 === l || (a = s.charCodeAt(u + 1)) < 56320 || a > 57343 ? e2 ? s.charAt(u) : o2 : e2 ? s.slice(u, u + 2) : a - 56320 + (o2 - 55296 << 10) + 65536;
            };
          };
          e.exports = { codeAt: o(false), charAt: o(true) };
        }, function(e, t, r) {
          var n = r(4), i = r(27), o = r(61);
          n({ target: "Object", stat: true, forced: r(8)(function() {
            o(1);
          }) }, { keys: function(e2) {
            return o(i(e2));
          } });
        }, function(e, t, r) {
          "use strict";
          var n = r(4), i = r(11), o = r(123), a = r(25), s = r(140), u = r(141), l = r(142), c = r(13), h = r(8), p = r(208), f = r(62), d = r(209);
          e.exports = function(e2, t2, r2) {
            var m = -1 !== e2.indexOf("Map"), y = -1 !== e2.indexOf("Weak"), v = m ? "set" : "add", _ = i[e2], g = _ && _.prototype, b = _, x = {}, w = function(e3) {
              var t3 = g[e3];
              a(g, e3, "add" == e3 ? function(e4) {
                return t3.call(this, 0 === e4 ? 0 : e4), this;
              } : "delete" == e3 ? function(e4) {
                return !(y && !c(e4)) && t3.call(this, 0 === e4 ? 0 : e4);
              } : "get" == e3 ? function(e4) {
                return y && !c(e4) ? void 0 : t3.call(this, 0 === e4 ? 0 : e4);
              } : "has" == e3 ? function(e4) {
                return !(y && !c(e4)) && t3.call(this, 0 === e4 ? 0 : e4);
              } : function(e4, r3) {
                return t3.call(this, 0 === e4 ? 0 : e4, r3), this;
              });
            };
            if (o(e2, "function" != typeof _ || !(y || g.forEach && !h(function() {
              new _().entries().next();
            }))))
              b = r2.getConstructor(t2, e2, m, v), s.REQUIRED = true;
            else if (o(e2, true)) {
              var E = new b(), D = E[v](y ? {} : -0, 1) != E, S = h(function() {
                E.has(1);
              }), C = p(function(e3) {
                new _(e3);
              }), A = !y && h(function() {
                for (var e3 = new _(), t3 = 5; t3--; )
                  e3[v](t3, t3);
                return !e3.has(-0);
              });
              C || ((b = t2(function(t3, r3) {
                l(t3, b, e2);
                var n2 = d(new _(), t3, b);
                return null != r3 && u(r3, n2[v], n2, m), n2;
              })).prototype = g, g.constructor = b), (S || A) && (w("delete"), w("has"), m && w("get")), (A || D) && w(v), y && g.clear && delete g.clear;
            }
            return x[e2] = b, n({ global: true, forced: b != _ }, x), f(b, e2), y || r2.setStrong(b, e2, m), b;
          };
        }, function(e, t, r) {
          var n = r(45), i = r(13), o = r(14), a = r(15).f, s = r(58), u = r(204), l = s("meta"), c = 0, h = Object.isExtensible || function() {
            return true;
          }, p = function(e2) {
            a(e2, l, { value: { objectID: "O" + ++c, weakData: {} } });
          }, f = e.exports = { REQUIRED: false, fastKey: function(e2, t2) {
            if (!i(e2))
              return "symbol" == typeof e2 ? e2 : ("string" == typeof e2 ? "S" : "P") + e2;
            if (!o(e2, l)) {
              if (!h(e2))
                return "F";
              if (!t2)
                return "E";
              p(e2);
            }
            return e2[l].objectID;
          }, getWeakData: function(e2, t2) {
            if (!o(e2, l)) {
              if (!h(e2))
                return true;
              if (!t2)
                return false;
              p(e2);
            }
            return e2[l].weakData;
          }, onFreeze: function(e2) {
            return u && f.REQUIRED && h(e2) && !o(e2, l) && p(e2), e2;
          } };
          n[l] = true;
        }, function(e, t, r) {
          var n = r(18), i = r(205), o = r(26), a = r(87), s = r(206), u = r(207), l = function(e2, t2) {
            this.stopped = e2, this.result = t2;
          };
          (e.exports = function(e2, t2, r2, c, h) {
            var p, f, d, m, y, v, _, g = a(t2, r2, c ? 2 : 1);
            if (h)
              p = e2;
            else {
              if ("function" != typeof (f = s(e2)))
                throw TypeError("Target is not iterable");
              if (i(f)) {
                for (d = 0, m = o(e2.length); m > d; d++)
                  if ((y = c ? g(n(_ = e2[d])[0], _[1]) : g(e2[d])) && y instanceof l)
                    return y;
                return new l(false);
              }
              p = f.call(e2);
            }
            for (v = p.next; !(_ = v.call(p)).done; )
              if ("object" == typeof (y = u(p, g, _.value, c)) && y && y instanceof l)
                return y;
            return new l(false);
          }).stop = function(e2) {
            return new l(true, e2);
          };
        }, function(e, t) {
          e.exports = function(e2, t2, r) {
            if (!(e2 instanceof t2))
              throw TypeError("Incorrect " + (r ? r + " " : "") + "invocation");
            return e2;
          };
        }, function(e, t, r) {
          "use strict";
          var n = r(15).f, i = r(60), o = r(210), a = r(87), s = r(142), u = r(141), l = r(88), c = r(211), h = r(16), p = r(140).fastKey, f = r(43), d = f.set, m = f.getterFor;
          e.exports = { getConstructor: function(e2, t2, r2, l2) {
            var c2 = e2(function(e3, n2) {
              s(e3, c2, t2), d(e3, { type: t2, index: i(null), first: void 0, last: void 0, size: 0 }), h || (e3.size = 0), null != n2 && u(n2, e3[l2], e3, r2);
            }), f2 = m(t2), y = function(e3, t3, r3) {
              var n2, i2, o2 = f2(e3), a2 = v(e3, t3);
              return a2 ? a2.value = r3 : (o2.last = a2 = { index: i2 = p(t3, true), key: t3, value: r3, previous: n2 = o2.last, next: void 0, removed: false }, o2.first || (o2.first = a2), n2 && (n2.next = a2), h ? o2.size++ : e3.size++, "F" !== i2 && (o2.index[i2] = a2)), e3;
            }, v = function(e3, t3) {
              var r3, n2 = f2(e3), i2 = p(t3);
              if ("F" !== i2)
                return n2.index[i2];
              for (r3 = n2.first; r3; r3 = r3.next)
                if (r3.key == t3)
                  return r3;
            };
            return o(c2.prototype, { clear: function() {
              for (var e3 = f2(this), t3 = e3.index, r3 = e3.first; r3; )
                r3.removed = true, r3.previous && (r3.previous = r3.previous.next = void 0), delete t3[r3.index], r3 = r3.next;
              e3.first = e3.last = void 0, h ? e3.size = 0 : this.size = 0;
            }, delete: function(e3) {
              var t3 = f2(this), r3 = v(this, e3);
              if (r3) {
                var n2 = r3.next, i2 = r3.previous;
                delete t3.index[r3.index], r3.removed = true, i2 && (i2.next = n2), n2 && (n2.previous = i2), t3.first == r3 && (t3.first = n2), t3.last == r3 && (t3.last = i2), h ? t3.size-- : this.size--;
              }
              return !!r3;
            }, forEach: function(e3) {
              for (var t3, r3 = f2(this), n2 = a(e3, arguments.length > 1 ? arguments[1] : void 0, 3); t3 = t3 ? t3.next : r3.first; )
                for (n2(t3.value, t3.key, this); t3 && t3.removed; )
                  t3 = t3.previous;
            }, has: function(e3) {
              return !!v(this, e3);
            } }), o(c2.prototype, r2 ? { get: function(e3) {
              var t3 = v(this, e3);
              return t3 && t3.value;
            }, set: function(e3, t3) {
              return y(this, 0 === e3 ? 0 : e3, t3);
            } } : { add: function(e3) {
              return y(this, e3 = 0 === e3 ? 0 : e3, e3);
            } }), h && n(c2.prototype, "size", { get: function() {
              return f2(this).size;
            } }), c2;
          }, setStrong: function(e2, t2, r2) {
            var n2 = t2 + " Iterator", i2 = m(t2), o2 = m(n2);
            l(e2, t2, function(e3, t3) {
              d(this, { type: n2, target: e3, state: i2(e3), kind: t3, last: void 0 });
            }, function() {
              for (var e3 = o2(this), t3 = e3.kind, r3 = e3.last; r3 && r3.removed; )
                r3 = r3.previous;
              return e3.target && (e3.last = r3 = r3 ? r3.next : e3.state.first) ? "keys" == t3 ? { value: r3.key, done: false } : "values" == t3 ? { value: r3.value, done: false } : { value: [r3.key, r3.value], done: false } : (e3.target = void 0, { value: void 0, done: true });
            }, r2 ? "entries" : "values", !r2, true), c(t2);
          } };
        }, function(e, t, r) {
          "use strict";
          var n, i = r(4), o = r(55).f, a = r(26), s = r(222), u = r(35), l = r(224), c = r(44), h = "".endsWith, p = Math.min, f = l("endsWith");
          i({ target: "String", proto: true, forced: !!(c || f || (n = o(String.prototype, "endsWith"), !n || n.writable)) && !f }, { endsWith: function(e2) {
            var t2 = String(u(this));
            s(e2);
            var r2 = arguments.length > 1 ? arguments[1] : void 0, n2 = a(t2.length), i2 = void 0 === r2 ? n2 : p(a(r2), n2), o2 = String(e2);
            return h ? h.call(t2, o2, i2) : t2.slice(i2 - o2.length, i2) === o2;
          } });
        }, function(e, t, r) {
          "use strict";
          (function(e2) {
            var n = r(229), i = r(230), o = r(231);
            function a() {
              return u.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
            }
            function s(e3, t2) {
              if (a() < t2)
                throw new RangeError("Invalid typed array length");
              return u.TYPED_ARRAY_SUPPORT ? (e3 = new Uint8Array(t2)).__proto__ = u.prototype : (null === e3 && (e3 = new u(t2)), e3.length = t2), e3;
            }
            function u(e3, t2, r2) {
              if (!(u.TYPED_ARRAY_SUPPORT || this instanceof u))
                return new u(e3, t2, r2);
              if ("number" == typeof e3) {
                if ("string" == typeof t2)
                  throw new Error("If encoding is specified then the first argument must be a string");
                return h(this, e3);
              }
              return l(this, e3, t2, r2);
            }
            function l(e3, t2, r2, n2) {
              if ("number" == typeof t2)
                throw new TypeError('"value" argument must not be a number');
              return "undefined" != typeof ArrayBuffer && t2 instanceof ArrayBuffer ? function(e4, t3, r3, n3) {
                if (t3.byteLength, r3 < 0 || t3.byteLength < r3)
                  throw new RangeError("'offset' is out of bounds");
                if (t3.byteLength < r3 + (n3 || 0))
                  throw new RangeError("'length' is out of bounds");
                t3 = void 0 === r3 && void 0 === n3 ? new Uint8Array(t3) : void 0 === n3 ? new Uint8Array(t3, r3) : new Uint8Array(t3, r3, n3);
                u.TYPED_ARRAY_SUPPORT ? (e4 = t3).__proto__ = u.prototype : e4 = p(e4, t3);
                return e4;
              }(e3, t2, r2, n2) : "string" == typeof t2 ? function(e4, t3, r3) {
                "string" == typeof r3 && "" !== r3 || (r3 = "utf8");
                if (!u.isEncoding(r3))
                  throw new TypeError('"encoding" must be a valid string encoding');
                var n3 = 0 | d(t3, r3), i2 = (e4 = s(e4, n3)).write(t3, r3);
                i2 !== n3 && (e4 = e4.slice(0, i2));
                return e4;
              }(e3, t2, r2) : function(e4, t3) {
                if (u.isBuffer(t3)) {
                  var r3 = 0 | f(t3.length);
                  return 0 === (e4 = s(e4, r3)).length || t3.copy(e4, 0, 0, r3), e4;
                }
                if (t3) {
                  if ("undefined" != typeof ArrayBuffer && t3.buffer instanceof ArrayBuffer || "length" in t3)
                    return "number" != typeof t3.length || (n3 = t3.length) != n3 ? s(e4, 0) : p(e4, t3);
                  if ("Buffer" === t3.type && o(t3.data))
                    return p(e4, t3.data);
                }
                var n3;
                throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
              }(e3, t2);
            }
            function c(e3) {
              if ("number" != typeof e3)
                throw new TypeError('"size" argument must be a number');
              if (e3 < 0)
                throw new RangeError('"size" argument must not be negative');
            }
            function h(e3, t2) {
              if (c(t2), e3 = s(e3, t2 < 0 ? 0 : 0 | f(t2)), !u.TYPED_ARRAY_SUPPORT)
                for (var r2 = 0; r2 < t2; ++r2)
                  e3[r2] = 0;
              return e3;
            }
            function p(e3, t2) {
              var r2 = t2.length < 0 ? 0 : 0 | f(t2.length);
              e3 = s(e3, r2);
              for (var n2 = 0; n2 < r2; n2 += 1)
                e3[n2] = 255 & t2[n2];
              return e3;
            }
            function f(e3) {
              if (e3 >= a())
                throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + a().toString(16) + " bytes");
              return 0 | e3;
            }
            function d(e3, t2) {
              if (u.isBuffer(e3))
                return e3.length;
              if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(e3) || e3 instanceof ArrayBuffer))
                return e3.byteLength;
              "string" != typeof e3 && (e3 = "" + e3);
              var r2 = e3.length;
              if (0 === r2)
                return 0;
              for (var n2 = false; ; )
                switch (t2) {
                  case "ascii":
                  case "latin1":
                  case "binary":
                    return r2;
                  case "utf8":
                  case "utf-8":
                  case void 0:
                    return z2(e3).length;
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return 2 * r2;
                  case "hex":
                    return r2 >>> 1;
                  case "base64":
                    return U(e3).length;
                  default:
                    if (n2)
                      return z2(e3).length;
                    t2 = ("" + t2).toLowerCase(), n2 = true;
                }
            }
            function m(e3, t2, r2) {
              var n2 = false;
              if ((void 0 === t2 || t2 < 0) && (t2 = 0), t2 > this.length)
                return "";
              if ((void 0 === r2 || r2 > this.length) && (r2 = this.length), r2 <= 0)
                return "";
              if ((r2 >>>= 0) <= (t2 >>>= 0))
                return "";
              for (e3 || (e3 = "utf8"); ; )
                switch (e3) {
                  case "hex":
                    return T(this, t2, r2);
                  case "utf8":
                  case "utf-8":
                    return C(this, t2, r2);
                  case "ascii":
                    return A(this, t2, r2);
                  case "latin1":
                  case "binary":
                    return N(this, t2, r2);
                  case "base64":
                    return S(this, t2, r2);
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return O(this, t2, r2);
                  default:
                    if (n2)
                      throw new TypeError("Unknown encoding: " + e3);
                    e3 = (e3 + "").toLowerCase(), n2 = true;
                }
            }
            function y(e3, t2, r2) {
              var n2 = e3[t2];
              e3[t2] = e3[r2], e3[r2] = n2;
            }
            function v(e3, t2, r2, n2, i2) {
              if (0 === e3.length)
                return -1;
              if ("string" == typeof r2 ? (n2 = r2, r2 = 0) : r2 > 2147483647 ? r2 = 2147483647 : r2 < -2147483648 && (r2 = -2147483648), r2 = +r2, isNaN(r2) && (r2 = i2 ? 0 : e3.length - 1), r2 < 0 && (r2 = e3.length + r2), r2 >= e3.length) {
                if (i2)
                  return -1;
                r2 = e3.length - 1;
              } else if (r2 < 0) {
                if (!i2)
                  return -1;
                r2 = 0;
              }
              if ("string" == typeof t2 && (t2 = u.from(t2, n2)), u.isBuffer(t2))
                return 0 === t2.length ? -1 : _(e3, t2, r2, n2, i2);
              if ("number" == typeof t2)
                return t2 &= 255, u.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? i2 ? Uint8Array.prototype.indexOf.call(e3, t2, r2) : Uint8Array.prototype.lastIndexOf.call(e3, t2, r2) : _(e3, [t2], r2, n2, i2);
              throw new TypeError("val must be string, number or Buffer");
            }
            function _(e3, t2, r2, n2, i2) {
              var o2, a2 = 1, s2 = e3.length, u2 = t2.length;
              if (void 0 !== n2 && ("ucs2" === (n2 = String(n2).toLowerCase()) || "ucs-2" === n2 || "utf16le" === n2 || "utf-16le" === n2)) {
                if (e3.length < 2 || t2.length < 2)
                  return -1;
                a2 = 2, s2 /= 2, u2 /= 2, r2 /= 2;
              }
              function l2(e4, t3) {
                return 1 === a2 ? e4[t3] : e4.readUInt16BE(t3 * a2);
              }
              if (i2) {
                var c2 = -1;
                for (o2 = r2; o2 < s2; o2++)
                  if (l2(e3, o2) === l2(t2, -1 === c2 ? 0 : o2 - c2)) {
                    if (-1 === c2 && (c2 = o2), o2 - c2 + 1 === u2)
                      return c2 * a2;
                  } else
                    -1 !== c2 && (o2 -= o2 - c2), c2 = -1;
              } else
                for (r2 + u2 > s2 && (r2 = s2 - u2), o2 = r2; o2 >= 0; o2--) {
                  for (var h2 = true, p2 = 0; p2 < u2; p2++)
                    if (l2(e3, o2 + p2) !== l2(t2, p2)) {
                      h2 = false;
                      break;
                    }
                  if (h2)
                    return o2;
                }
              return -1;
            }
            function g(e3, t2, r2, n2) {
              r2 = Number(r2) || 0;
              var i2 = e3.length - r2;
              n2 ? (n2 = Number(n2)) > i2 && (n2 = i2) : n2 = i2;
              var o2 = t2.length;
              if (o2 % 2 != 0)
                throw new TypeError("Invalid hex string");
              n2 > o2 / 2 && (n2 = o2 / 2);
              for (var a2 = 0; a2 < n2; ++a2) {
                var s2 = parseInt(t2.substr(2 * a2, 2), 16);
                if (isNaN(s2))
                  return a2;
                e3[r2 + a2] = s2;
              }
              return a2;
            }
            function b(e3, t2, r2, n2) {
              return G(z2(t2, e3.length - r2), e3, r2, n2);
            }
            function x(e3, t2, r2, n2) {
              return G(function(e4) {
                for (var t3 = [], r3 = 0; r3 < e4.length; ++r3)
                  t3.push(255 & e4.charCodeAt(r3));
                return t3;
              }(t2), e3, r2, n2);
            }
            function w(e3, t2, r2, n2) {
              return x(e3, t2, r2, n2);
            }
            function E(e3, t2, r2, n2) {
              return G(U(t2), e3, r2, n2);
            }
            function D(e3, t2, r2, n2) {
              return G(function(e4, t3) {
                for (var r3, n3, i2, o2 = [], a2 = 0; a2 < e4.length && !((t3 -= 2) < 0); ++a2)
                  r3 = e4.charCodeAt(a2), n3 = r3 >> 8, i2 = r3 % 256, o2.push(i2), o2.push(n3);
                return o2;
              }(t2, e3.length - r2), e3, r2, n2);
            }
            function S(e3, t2, r2) {
              return 0 === t2 && r2 === e3.length ? n.fromByteArray(e3) : n.fromByteArray(e3.slice(t2, r2));
            }
            function C(e3, t2, r2) {
              r2 = Math.min(e3.length, r2);
              for (var n2 = [], i2 = t2; i2 < r2; ) {
                var o2, a2, s2, u2, l2 = e3[i2], c2 = null, h2 = l2 > 239 ? 4 : l2 > 223 ? 3 : l2 > 191 ? 2 : 1;
                if (i2 + h2 <= r2)
                  switch (h2) {
                    case 1:
                      l2 < 128 && (c2 = l2);
                      break;
                    case 2:
                      128 == (192 & (o2 = e3[i2 + 1])) && (u2 = (31 & l2) << 6 | 63 & o2) > 127 && (c2 = u2);
                      break;
                    case 3:
                      o2 = e3[i2 + 1], a2 = e3[i2 + 2], 128 == (192 & o2) && 128 == (192 & a2) && (u2 = (15 & l2) << 12 | (63 & o2) << 6 | 63 & a2) > 2047 && (u2 < 55296 || u2 > 57343) && (c2 = u2);
                      break;
                    case 4:
                      o2 = e3[i2 + 1], a2 = e3[i2 + 2], s2 = e3[i2 + 3], 128 == (192 & o2) && 128 == (192 & a2) && 128 == (192 & s2) && (u2 = (15 & l2) << 18 | (63 & o2) << 12 | (63 & a2) << 6 | 63 & s2) > 65535 && u2 < 1114112 && (c2 = u2);
                  }
                null === c2 ? (c2 = 65533, h2 = 1) : c2 > 65535 && (c2 -= 65536, n2.push(c2 >>> 10 & 1023 | 55296), c2 = 56320 | 1023 & c2), n2.push(c2), i2 += h2;
              }
              return function(e4) {
                var t3 = e4.length;
                if (t3 <= 4096)
                  return String.fromCharCode.apply(String, e4);
                var r3 = "", n3 = 0;
                for (; n3 < t3; )
                  r3 += String.fromCharCode.apply(String, e4.slice(n3, n3 += 4096));
                return r3;
              }(n2);
            }
            t.Buffer = u, t.SlowBuffer = function(e3) {
              +e3 != e3 && (e3 = 0);
              return u.alloc(+e3);
            }, t.INSPECT_MAX_BYTES = 50, u.TYPED_ARRAY_SUPPORT = void 0 !== e2.TYPED_ARRAY_SUPPORT ? e2.TYPED_ARRAY_SUPPORT : function() {
              try {
                var e3 = new Uint8Array(1);
                return e3.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
                  return 42;
                } }, 42 === e3.foo() && "function" == typeof e3.subarray && 0 === e3.subarray(1, 1).byteLength;
              } catch (e4) {
                return false;
              }
            }(), t.kMaxLength = a(), u.poolSize = 8192, u._augment = function(e3) {
              return e3.__proto__ = u.prototype, e3;
            }, u.from = function(e3, t2, r2) {
              return l(null, e3, t2, r2);
            }, u.TYPED_ARRAY_SUPPORT && (u.prototype.__proto__ = Uint8Array.prototype, u.__proto__ = Uint8Array, "undefined" != typeof Symbol && Symbol.species && u[Symbol.species] === u && Object.defineProperty(u, Symbol.species, { value: null, configurable: true })), u.alloc = function(e3, t2, r2) {
              return function(e4, t3, r3, n2) {
                return c(t3), t3 <= 0 ? s(e4, t3) : void 0 !== r3 ? "string" == typeof n2 ? s(e4, t3).fill(r3, n2) : s(e4, t3).fill(r3) : s(e4, t3);
              }(null, e3, t2, r2);
            }, u.allocUnsafe = function(e3) {
              return h(null, e3);
            }, u.allocUnsafeSlow = function(e3) {
              return h(null, e3);
            }, u.isBuffer = function(e3) {
              return !(null == e3 || !e3._isBuffer);
            }, u.compare = function(e3, t2) {
              if (!u.isBuffer(e3) || !u.isBuffer(t2))
                throw new TypeError("Arguments must be Buffers");
              if (e3 === t2)
                return 0;
              for (var r2 = e3.length, n2 = t2.length, i2 = 0, o2 = Math.min(r2, n2); i2 < o2; ++i2)
                if (e3[i2] !== t2[i2]) {
                  r2 = e3[i2], n2 = t2[i2];
                  break;
                }
              return r2 < n2 ? -1 : n2 < r2 ? 1 : 0;
            }, u.isEncoding = function(e3) {
              switch (String(e3).toLowerCase()) {
                case "hex":
                case "utf8":
                case "utf-8":
                case "ascii":
                case "latin1":
                case "binary":
                case "base64":
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return true;
                default:
                  return false;
              }
            }, u.concat = function(e3, t2) {
              if (!o(e3))
                throw new TypeError('"list" argument must be an Array of Buffers');
              if (0 === e3.length)
                return u.alloc(0);
              var r2;
              if (void 0 === t2)
                for (t2 = 0, r2 = 0; r2 < e3.length; ++r2)
                  t2 += e3[r2].length;
              var n2 = u.allocUnsafe(t2), i2 = 0;
              for (r2 = 0; r2 < e3.length; ++r2) {
                var a2 = e3[r2];
                if (!u.isBuffer(a2))
                  throw new TypeError('"list" argument must be an Array of Buffers');
                a2.copy(n2, i2), i2 += a2.length;
              }
              return n2;
            }, u.byteLength = d, u.prototype._isBuffer = true, u.prototype.swap16 = function() {
              var e3 = this.length;
              if (e3 % 2 != 0)
                throw new RangeError("Buffer size must be a multiple of 16-bits");
              for (var t2 = 0; t2 < e3; t2 += 2)
                y(this, t2, t2 + 1);
              return this;
            }, u.prototype.swap32 = function() {
              var e3 = this.length;
              if (e3 % 4 != 0)
                throw new RangeError("Buffer size must be a multiple of 32-bits");
              for (var t2 = 0; t2 < e3; t2 += 4)
                y(this, t2, t2 + 3), y(this, t2 + 1, t2 + 2);
              return this;
            }, u.prototype.swap64 = function() {
              var e3 = this.length;
              if (e3 % 8 != 0)
                throw new RangeError("Buffer size must be a multiple of 64-bits");
              for (var t2 = 0; t2 < e3; t2 += 8)
                y(this, t2, t2 + 7), y(this, t2 + 1, t2 + 6), y(this, t2 + 2, t2 + 5), y(this, t2 + 3, t2 + 4);
              return this;
            }, u.prototype.toString = function() {
              var e3 = 0 | this.length;
              return 0 === e3 ? "" : 0 === arguments.length ? C(this, 0, e3) : m.apply(this, arguments);
            }, u.prototype.equals = function(e3) {
              if (!u.isBuffer(e3))
                throw new TypeError("Argument must be a Buffer");
              return this === e3 || 0 === u.compare(this, e3);
            }, u.prototype.inspect = function() {
              var e3 = "", r2 = t.INSPECT_MAX_BYTES;
              return this.length > 0 && (e3 = this.toString("hex", 0, r2).match(/.{2}/g).join(" "), this.length > r2 && (e3 += " ... ")), "<Buffer " + e3 + ">";
            }, u.prototype.compare = function(e3, t2, r2, n2, i2) {
              if (!u.isBuffer(e3))
                throw new TypeError("Argument must be a Buffer");
              if (void 0 === t2 && (t2 = 0), void 0 === r2 && (r2 = e3 ? e3.length : 0), void 0 === n2 && (n2 = 0), void 0 === i2 && (i2 = this.length), t2 < 0 || r2 > e3.length || n2 < 0 || i2 > this.length)
                throw new RangeError("out of range index");
              if (n2 >= i2 && t2 >= r2)
                return 0;
              if (n2 >= i2)
                return -1;
              if (t2 >= r2)
                return 1;
              if (this === e3)
                return 0;
              for (var o2 = (i2 >>>= 0) - (n2 >>>= 0), a2 = (r2 >>>= 0) - (t2 >>>= 0), s2 = Math.min(o2, a2), l2 = this.slice(n2, i2), c2 = e3.slice(t2, r2), h2 = 0; h2 < s2; ++h2)
                if (l2[h2] !== c2[h2]) {
                  o2 = l2[h2], a2 = c2[h2];
                  break;
                }
              return o2 < a2 ? -1 : a2 < o2 ? 1 : 0;
            }, u.prototype.includes = function(e3, t2, r2) {
              return -1 !== this.indexOf(e3, t2, r2);
            }, u.prototype.indexOf = function(e3, t2, r2) {
              return v(this, e3, t2, r2, true);
            }, u.prototype.lastIndexOf = function(e3, t2, r2) {
              return v(this, e3, t2, r2, false);
            }, u.prototype.write = function(e3, t2, r2, n2) {
              if (void 0 === t2)
                n2 = "utf8", r2 = this.length, t2 = 0;
              else if (void 0 === r2 && "string" == typeof t2)
                n2 = t2, r2 = this.length, t2 = 0;
              else {
                if (!isFinite(t2))
                  throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                t2 |= 0, isFinite(r2) ? (r2 |= 0, void 0 === n2 && (n2 = "utf8")) : (n2 = r2, r2 = void 0);
              }
              var i2 = this.length - t2;
              if ((void 0 === r2 || r2 > i2) && (r2 = i2), e3.length > 0 && (r2 < 0 || t2 < 0) || t2 > this.length)
                throw new RangeError("Attempt to write outside buffer bounds");
              n2 || (n2 = "utf8");
              for (var o2 = false; ; )
                switch (n2) {
                  case "hex":
                    return g(this, e3, t2, r2);
                  case "utf8":
                  case "utf-8":
                    return b(this, e3, t2, r2);
                  case "ascii":
                    return x(this, e3, t2, r2);
                  case "latin1":
                  case "binary":
                    return w(this, e3, t2, r2);
                  case "base64":
                    return E(this, e3, t2, r2);
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return D(this, e3, t2, r2);
                  default:
                    if (o2)
                      throw new TypeError("Unknown encoding: " + n2);
                    n2 = ("" + n2).toLowerCase(), o2 = true;
                }
            }, u.prototype.toJSON = function() {
              return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
            };
            function A(e3, t2, r2) {
              var n2 = "";
              r2 = Math.min(e3.length, r2);
              for (var i2 = t2; i2 < r2; ++i2)
                n2 += String.fromCharCode(127 & e3[i2]);
              return n2;
            }
            function N(e3, t2, r2) {
              var n2 = "";
              r2 = Math.min(e3.length, r2);
              for (var i2 = t2; i2 < r2; ++i2)
                n2 += String.fromCharCode(e3[i2]);
              return n2;
            }
            function T(e3, t2, r2) {
              var n2 = e3.length;
              (!t2 || t2 < 0) && (t2 = 0), (!r2 || r2 < 0 || r2 > n2) && (r2 = n2);
              for (var i2 = "", o2 = t2; o2 < r2; ++o2)
                i2 += R(e3[o2]);
              return i2;
            }
            function O(e3, t2, r2) {
              for (var n2 = e3.slice(t2, r2), i2 = "", o2 = 0; o2 < n2.length; o2 += 2)
                i2 += String.fromCharCode(n2[o2] + 256 * n2[o2 + 1]);
              return i2;
            }
            function F(e3, t2, r2) {
              if (e3 % 1 != 0 || e3 < 0)
                throw new RangeError("offset is not uint");
              if (e3 + t2 > r2)
                throw new RangeError("Trying to access beyond buffer length");
            }
            function k(e3, t2, r2, n2, i2, o2) {
              if (!u.isBuffer(e3))
                throw new TypeError('"buffer" argument must be a Buffer instance');
              if (t2 > i2 || t2 < o2)
                throw new RangeError('"value" argument is out of bounds');
              if (r2 + n2 > e3.length)
                throw new RangeError("Index out of range");
            }
            function P(e3, t2, r2, n2) {
              t2 < 0 && (t2 = 65535 + t2 + 1);
              for (var i2 = 0, o2 = Math.min(e3.length - r2, 2); i2 < o2; ++i2)
                e3[r2 + i2] = (t2 & 255 << 8 * (n2 ? i2 : 1 - i2)) >>> 8 * (n2 ? i2 : 1 - i2);
            }
            function I(e3, t2, r2, n2) {
              t2 < 0 && (t2 = 4294967295 + t2 + 1);
              for (var i2 = 0, o2 = Math.min(e3.length - r2, 4); i2 < o2; ++i2)
                e3[r2 + i2] = t2 >>> 8 * (n2 ? i2 : 3 - i2) & 255;
            }
            function L(e3, t2, r2, n2, i2, o2) {
              if (r2 + n2 > e3.length)
                throw new RangeError("Index out of range");
              if (r2 < 0)
                throw new RangeError("Index out of range");
            }
            function M(e3, t2, r2, n2, o2) {
              return o2 || L(e3, 0, r2, 4), i.write(e3, t2, r2, n2, 23, 4), r2 + 4;
            }
            function B(e3, t2, r2, n2, o2) {
              return o2 || L(e3, 0, r2, 8), i.write(e3, t2, r2, n2, 52, 8), r2 + 8;
            }
            u.prototype.slice = function(e3, t2) {
              var r2, n2 = this.length;
              if ((e3 = ~~e3) < 0 ? (e3 += n2) < 0 && (e3 = 0) : e3 > n2 && (e3 = n2), (t2 = void 0 === t2 ? n2 : ~~t2) < 0 ? (t2 += n2) < 0 && (t2 = 0) : t2 > n2 && (t2 = n2), t2 < e3 && (t2 = e3), u.TYPED_ARRAY_SUPPORT)
                (r2 = this.subarray(e3, t2)).__proto__ = u.prototype;
              else {
                var i2 = t2 - e3;
                r2 = new u(i2, void 0);
                for (var o2 = 0; o2 < i2; ++o2)
                  r2[o2] = this[o2 + e3];
              }
              return r2;
            }, u.prototype.readUIntLE = function(e3, t2, r2) {
              e3 |= 0, t2 |= 0, r2 || F(e3, t2, this.length);
              for (var n2 = this[e3], i2 = 1, o2 = 0; ++o2 < t2 && (i2 *= 256); )
                n2 += this[e3 + o2] * i2;
              return n2;
            }, u.prototype.readUIntBE = function(e3, t2, r2) {
              e3 |= 0, t2 |= 0, r2 || F(e3, t2, this.length);
              for (var n2 = this[e3 + --t2], i2 = 1; t2 > 0 && (i2 *= 256); )
                n2 += this[e3 + --t2] * i2;
              return n2;
            }, u.prototype.readUInt8 = function(e3, t2) {
              return t2 || F(e3, 1, this.length), this[e3];
            }, u.prototype.readUInt16LE = function(e3, t2) {
              return t2 || F(e3, 2, this.length), this[e3] | this[e3 + 1] << 8;
            }, u.prototype.readUInt16BE = function(e3, t2) {
              return t2 || F(e3, 2, this.length), this[e3] << 8 | this[e3 + 1];
            }, u.prototype.readUInt32LE = function(e3, t2) {
              return t2 || F(e3, 4, this.length), (this[e3] | this[e3 + 1] << 8 | this[e3 + 2] << 16) + 16777216 * this[e3 + 3];
            }, u.prototype.readUInt32BE = function(e3, t2) {
              return t2 || F(e3, 4, this.length), 16777216 * this[e3] + (this[e3 + 1] << 16 | this[e3 + 2] << 8 | this[e3 + 3]);
            }, u.prototype.readIntLE = function(e3, t2, r2) {
              e3 |= 0, t2 |= 0, r2 || F(e3, t2, this.length);
              for (var n2 = this[e3], i2 = 1, o2 = 0; ++o2 < t2 && (i2 *= 256); )
                n2 += this[e3 + o2] * i2;
              return n2 >= (i2 *= 128) && (n2 -= Math.pow(2, 8 * t2)), n2;
            }, u.prototype.readIntBE = function(e3, t2, r2) {
              e3 |= 0, t2 |= 0, r2 || F(e3, t2, this.length);
              for (var n2 = t2, i2 = 1, o2 = this[e3 + --n2]; n2 > 0 && (i2 *= 256); )
                o2 += this[e3 + --n2] * i2;
              return o2 >= (i2 *= 128) && (o2 -= Math.pow(2, 8 * t2)), o2;
            }, u.prototype.readInt8 = function(e3, t2) {
              return t2 || F(e3, 1, this.length), 128 & this[e3] ? -1 * (255 - this[e3] + 1) : this[e3];
            }, u.prototype.readInt16LE = function(e3, t2) {
              t2 || F(e3, 2, this.length);
              var r2 = this[e3] | this[e3 + 1] << 8;
              return 32768 & r2 ? 4294901760 | r2 : r2;
            }, u.prototype.readInt16BE = function(e3, t2) {
              t2 || F(e3, 2, this.length);
              var r2 = this[e3 + 1] | this[e3] << 8;
              return 32768 & r2 ? 4294901760 | r2 : r2;
            }, u.prototype.readInt32LE = function(e3, t2) {
              return t2 || F(e3, 4, this.length), this[e3] | this[e3 + 1] << 8 | this[e3 + 2] << 16 | this[e3 + 3] << 24;
            }, u.prototype.readInt32BE = function(e3, t2) {
              return t2 || F(e3, 4, this.length), this[e3] << 24 | this[e3 + 1] << 16 | this[e3 + 2] << 8 | this[e3 + 3];
            }, u.prototype.readFloatLE = function(e3, t2) {
              return t2 || F(e3, 4, this.length), i.read(this, e3, true, 23, 4);
            }, u.prototype.readFloatBE = function(e3, t2) {
              return t2 || F(e3, 4, this.length), i.read(this, e3, false, 23, 4);
            }, u.prototype.readDoubleLE = function(e3, t2) {
              return t2 || F(e3, 8, this.length), i.read(this, e3, true, 52, 8);
            }, u.prototype.readDoubleBE = function(e3, t2) {
              return t2 || F(e3, 8, this.length), i.read(this, e3, false, 52, 8);
            }, u.prototype.writeUIntLE = function(e3, t2, r2, n2) {
              (e3 = +e3, t2 |= 0, r2 |= 0, n2) || k(this, e3, t2, r2, Math.pow(2, 8 * r2) - 1, 0);
              var i2 = 1, o2 = 0;
              for (this[t2] = 255 & e3; ++o2 < r2 && (i2 *= 256); )
                this[t2 + o2] = e3 / i2 & 255;
              return t2 + r2;
            }, u.prototype.writeUIntBE = function(e3, t2, r2, n2) {
              (e3 = +e3, t2 |= 0, r2 |= 0, n2) || k(this, e3, t2, r2, Math.pow(2, 8 * r2) - 1, 0);
              var i2 = r2 - 1, o2 = 1;
              for (this[t2 + i2] = 255 & e3; --i2 >= 0 && (o2 *= 256); )
                this[t2 + i2] = e3 / o2 & 255;
              return t2 + r2;
            }, u.prototype.writeUInt8 = function(e3, t2, r2) {
              return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 1, 255, 0), u.TYPED_ARRAY_SUPPORT || (e3 = Math.floor(e3)), this[t2] = 255 & e3, t2 + 1;
            }, u.prototype.writeUInt16LE = function(e3, t2, r2) {
              return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[t2] = 255 & e3, this[t2 + 1] = e3 >>> 8) : P(this, e3, t2, true), t2 + 2;
            }, u.prototype.writeUInt16BE = function(e3, t2, r2) {
              return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[t2] = e3 >>> 8, this[t2 + 1] = 255 & e3) : P(this, e3, t2, false), t2 + 2;
            }, u.prototype.writeUInt32LE = function(e3, t2, r2) {
              return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[t2 + 3] = e3 >>> 24, this[t2 + 2] = e3 >>> 16, this[t2 + 1] = e3 >>> 8, this[t2] = 255 & e3) : I(this, e3, t2, true), t2 + 4;
            }, u.prototype.writeUInt32BE = function(e3, t2, r2) {
              return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[t2] = e3 >>> 24, this[t2 + 1] = e3 >>> 16, this[t2 + 2] = e3 >>> 8, this[t2 + 3] = 255 & e3) : I(this, e3, t2, false), t2 + 4;
            }, u.prototype.writeIntLE = function(e3, t2, r2, n2) {
              if (e3 = +e3, t2 |= 0, !n2) {
                var i2 = Math.pow(2, 8 * r2 - 1);
                k(this, e3, t2, r2, i2 - 1, -i2);
              }
              var o2 = 0, a2 = 1, s2 = 0;
              for (this[t2] = 255 & e3; ++o2 < r2 && (a2 *= 256); )
                e3 < 0 && 0 === s2 && 0 !== this[t2 + o2 - 1] && (s2 = 1), this[t2 + o2] = (e3 / a2 >> 0) - s2 & 255;
              return t2 + r2;
            }, u.prototype.writeIntBE = function(e3, t2, r2, n2) {
              if (e3 = +e3, t2 |= 0, !n2) {
                var i2 = Math.pow(2, 8 * r2 - 1);
                k(this, e3, t2, r2, i2 - 1, -i2);
              }
              var o2 = r2 - 1, a2 = 1, s2 = 0;
              for (this[t2 + o2] = 255 & e3; --o2 >= 0 && (a2 *= 256); )
                e3 < 0 && 0 === s2 && 0 !== this[t2 + o2 + 1] && (s2 = 1), this[t2 + o2] = (e3 / a2 >> 0) - s2 & 255;
              return t2 + r2;
            }, u.prototype.writeInt8 = function(e3, t2, r2) {
              return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 1, 127, -128), u.TYPED_ARRAY_SUPPORT || (e3 = Math.floor(e3)), e3 < 0 && (e3 = 255 + e3 + 1), this[t2] = 255 & e3, t2 + 1;
            }, u.prototype.writeInt16LE = function(e3, t2, r2) {
              return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[t2] = 255 & e3, this[t2 + 1] = e3 >>> 8) : P(this, e3, t2, true), t2 + 2;
            }, u.prototype.writeInt16BE = function(e3, t2, r2) {
              return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[t2] = e3 >>> 8, this[t2 + 1] = 255 & e3) : P(this, e3, t2, false), t2 + 2;
            }, u.prototype.writeInt32LE = function(e3, t2, r2) {
              return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 4, 2147483647, -2147483648), u.TYPED_ARRAY_SUPPORT ? (this[t2] = 255 & e3, this[t2 + 1] = e3 >>> 8, this[t2 + 2] = e3 >>> 16, this[t2 + 3] = e3 >>> 24) : I(this, e3, t2, true), t2 + 4;
            }, u.prototype.writeInt32BE = function(e3, t2, r2) {
              return e3 = +e3, t2 |= 0, r2 || k(this, e3, t2, 4, 2147483647, -2147483648), e3 < 0 && (e3 = 4294967295 + e3 + 1), u.TYPED_ARRAY_SUPPORT ? (this[t2] = e3 >>> 24, this[t2 + 1] = e3 >>> 16, this[t2 + 2] = e3 >>> 8, this[t2 + 3] = 255 & e3) : I(this, e3, t2, false), t2 + 4;
            }, u.prototype.writeFloatLE = function(e3, t2, r2) {
              return M(this, e3, t2, true, r2);
            }, u.prototype.writeFloatBE = function(e3, t2, r2) {
              return M(this, e3, t2, false, r2);
            }, u.prototype.writeDoubleLE = function(e3, t2, r2) {
              return B(this, e3, t2, true, r2);
            }, u.prototype.writeDoubleBE = function(e3, t2, r2) {
              return B(this, e3, t2, false, r2);
            }, u.prototype.copy = function(e3, t2, r2, n2) {
              if (r2 || (r2 = 0), n2 || 0 === n2 || (n2 = this.length), t2 >= e3.length && (t2 = e3.length), t2 || (t2 = 0), n2 > 0 && n2 < r2 && (n2 = r2), n2 === r2)
                return 0;
              if (0 === e3.length || 0 === this.length)
                return 0;
              if (t2 < 0)
                throw new RangeError("targetStart out of bounds");
              if (r2 < 0 || r2 >= this.length)
                throw new RangeError("sourceStart out of bounds");
              if (n2 < 0)
                throw new RangeError("sourceEnd out of bounds");
              n2 > this.length && (n2 = this.length), e3.length - t2 < n2 - r2 && (n2 = e3.length - t2 + r2);
              var i2, o2 = n2 - r2;
              if (this === e3 && r2 < t2 && t2 < n2)
                for (i2 = o2 - 1; i2 >= 0; --i2)
                  e3[i2 + t2] = this[i2 + r2];
              else if (o2 < 1e3 || !u.TYPED_ARRAY_SUPPORT)
                for (i2 = 0; i2 < o2; ++i2)
                  e3[i2 + t2] = this[i2 + r2];
              else
                Uint8Array.prototype.set.call(e3, this.subarray(r2, r2 + o2), t2);
              return o2;
            }, u.prototype.fill = function(e3, t2, r2, n2) {
              if ("string" == typeof e3) {
                if ("string" == typeof t2 ? (n2 = t2, t2 = 0, r2 = this.length) : "string" == typeof r2 && (n2 = r2, r2 = this.length), 1 === e3.length) {
                  var i2 = e3.charCodeAt(0);
                  i2 < 256 && (e3 = i2);
                }
                if (void 0 !== n2 && "string" != typeof n2)
                  throw new TypeError("encoding must be a string");
                if ("string" == typeof n2 && !u.isEncoding(n2))
                  throw new TypeError("Unknown encoding: " + n2);
              } else
                "number" == typeof e3 && (e3 &= 255);
              if (t2 < 0 || this.length < t2 || this.length < r2)
                throw new RangeError("Out of range index");
              if (r2 <= t2)
                return this;
              var o2;
              if (t2 >>>= 0, r2 = void 0 === r2 ? this.length : r2 >>> 0, e3 || (e3 = 0), "number" == typeof e3)
                for (o2 = t2; o2 < r2; ++o2)
                  this[o2] = e3;
              else {
                var a2 = u.isBuffer(e3) ? e3 : z2(new u(e3, n2).toString()), s2 = a2.length;
                for (o2 = 0; o2 < r2 - t2; ++o2)
                  this[o2 + t2] = a2[o2 % s2];
              }
              return this;
            };
            var j = /[^+\/0-9A-Za-z-_]/g;
            function R(e3) {
              return e3 < 16 ? "0" + e3.toString(16) : e3.toString(16);
            }
            function z2(e3, t2) {
              var r2;
              t2 = t2 || 1 / 0;
              for (var n2 = e3.length, i2 = null, o2 = [], a2 = 0; a2 < n2; ++a2) {
                if ((r2 = e3.charCodeAt(a2)) > 55295 && r2 < 57344) {
                  if (!i2) {
                    if (r2 > 56319) {
                      (t2 -= 3) > -1 && o2.push(239, 191, 189);
                      continue;
                    }
                    if (a2 + 1 === n2) {
                      (t2 -= 3) > -1 && o2.push(239, 191, 189);
                      continue;
                    }
                    i2 = r2;
                    continue;
                  }
                  if (r2 < 56320) {
                    (t2 -= 3) > -1 && o2.push(239, 191, 189), i2 = r2;
                    continue;
                  }
                  r2 = 65536 + (i2 - 55296 << 10 | r2 - 56320);
                } else
                  i2 && (t2 -= 3) > -1 && o2.push(239, 191, 189);
                if (i2 = null, r2 < 128) {
                  if ((t2 -= 1) < 0)
                    break;
                  o2.push(r2);
                } else if (r2 < 2048) {
                  if ((t2 -= 2) < 0)
                    break;
                  o2.push(r2 >> 6 | 192, 63 & r2 | 128);
                } else if (r2 < 65536) {
                  if ((t2 -= 3) < 0)
                    break;
                  o2.push(r2 >> 12 | 224, r2 >> 6 & 63 | 128, 63 & r2 | 128);
                } else {
                  if (!(r2 < 1114112))
                    throw new Error("Invalid code point");
                  if ((t2 -= 4) < 0)
                    break;
                  o2.push(r2 >> 18 | 240, r2 >> 12 & 63 | 128, r2 >> 6 & 63 | 128, 63 & r2 | 128);
                }
              }
              return o2;
            }
            function U(e3) {
              return n.toByteArray(function(e4) {
                if ((e4 = function(e5) {
                  return e5.trim ? e5.trim() : e5.replace(/^\s+|\s+$/g, "");
                }(e4).replace(j, "")).length < 2)
                  return "";
                for (; e4.length % 4 != 0; )
                  e4 += "=";
                return e4;
              }(e3));
            }
            function G(e3, t2, r2, n2) {
              for (var i2 = 0; i2 < n2 && !(i2 + r2 >= t2.length || i2 >= e3.length); ++i2)
                t2[i2 + r2] = e3[i2];
              return i2;
            }
          }).call(this, r(78));
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true }), t.isASCIIByte = function(e2) {
            return e2 >= 0 && e2 <= 127;
          };
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o = r2.call(e2), a = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o.next()).done; )
                a.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o.return) && r2.call(o);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a;
          }, i = this && this.__spread || function() {
            for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
              e2 = e2.concat(n(arguments[t2]));
            return e2;
          };
          Object.defineProperty(t, "__esModule", { value: true }), t.length = function(e2) {
            return e2.length;
          }, t.byteLowercase = function(e2) {
            for (var t2 = 0; t2 < e2.length; t2++) {
              var r2 = e2[t2];
              r2 >= 65 && r2 <= 90 && (e2[t2] = r2 + 32);
            }
          }, t.byteUppercase = function(e2) {
            for (var t2 = 0; t2 < e2.length; t2++) {
              var r2 = e2[t2];
              r2 >= 97 && r2 <= 122 && (e2[t2] = r2 - 32);
            }
          }, t.byteCaseInsensitiveMatch = function(e2, t2) {
            if (e2.length !== t2.length)
              return false;
            for (var r2 = 0; r2 < e2.length; r2++) {
              var n2 = e2[r2], i2 = t2[r2];
              if (n2 >= 65 && n2 <= 90 && (n2 += 32), i2 >= 65 && i2 <= 90 && (i2 += 32), n2 !== i2)
                return false;
            }
            return true;
          }, t.startsWith = function(e2, t2) {
            for (var r2 = 0; ; ) {
              if (r2 >= e2.length)
                return false;
              if (r2 >= t2.length)
                return true;
              if (e2[r2] !== t2[r2])
                return false;
              r2++;
            }
          }, t.byteLessThan = function(e2, t2) {
            for (var r2 = 0; ; ) {
              if (r2 >= e2.length)
                return false;
              if (r2 >= t2.length)
                return true;
              var n2 = e2[r2], i2 = t2[r2];
              if (n2 < i2)
                return true;
              if (n2 > i2)
                return false;
              r2++;
            }
          }, t.isomorphicDecode = function(e2) {
            return String.fromCodePoint.apply(String, i(e2));
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(6), i = r(7), o = r(0), a = r(12), s = function() {
            function e2(e3) {
              this._associatedDocument = e3 || n.dom.window.document;
            }
            return e2.prototype.createDocumentType = function(e3, t2, r2) {
              return o.namespace_validate(e3), o.create_documentType(this._associatedDocument, e3, t2, r2);
            }, e2.prototype.createDocument = function(e3, t2, r2) {
              void 0 === r2 && (r2 = null);
              var n2 = o.create_xmlDocument(), a2 = null;
              return t2 && (a2 = o.document_internalCreateElementNS(n2, e3, t2)), r2 && n2.appendChild(r2), a2 && n2.appendChild(a2), n2._origin = this._associatedDocument._origin, e3 === i.namespace.HTML ? n2._contentType = "application/xhtml+xml" : e3 === i.namespace.SVG ? n2._contentType = "image/svg+xml" : n2._contentType = "application/xml", n2;
            }, e2.prototype.createHTMLDocument = function(e3) {
              var t2 = o.create_document();
              t2._type = "html", t2._contentType = "text/html", t2.appendChild(o.create_documentType(t2, "html", "", ""));
              var r2 = o.element_createAnElement(t2, "html", i.namespace.HTML);
              t2.appendChild(r2);
              var n2 = o.element_createAnElement(t2, "head", i.namespace.HTML);
              if (r2.appendChild(n2), void 0 !== e3) {
                var a2 = o.element_createAnElement(t2, "title", i.namespace.HTML);
                n2.appendChild(a2);
                var s2 = o.create_text(t2, e3);
                a2.appendChild(s2);
              }
              var u = o.element_createAnElement(t2, "body", i.namespace.HTML);
              return r2.appendChild(u), t2._origin = this._associatedDocument._origin, t2;
            }, e2.prototype.hasFeature = function() {
              return true;
            }, e2._create = function(t2) {
              return new e2(t2);
            }, e2;
          }();
          t.DOMImplementationImpl = s, a.idl_defineConst(s.prototype, "_ID", "@oozcitak/dom");
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(70), a = r(2), s = r(0), u = function(e2) {
            function t2() {
              var t3 = e2.call(this) || this;
              return t3._signalSlots = /* @__PURE__ */ new Set(), t3._mutationObserverMicrotaskQueued = false, t3._mutationObservers = /* @__PURE__ */ new Set(), t3._iteratorList = new a.FixedSizeSet(), t3._associatedDocument = s.create_document(), t3;
            }
            return i(t2, e2), Object.defineProperty(t2.prototype, "document", { get: function() {
              return this._associatedDocument;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "event", { get: function() {
              return this._currentEvent;
            }, enumerable: true, configurable: true }), t2._create = function() {
              return new t2();
            }, t2;
          }(o.EventTargetImpl);
          t.WindowImpl = u;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(1), i = function() {
            function e2() {
            }
            return e2.isNode = function(e3) {
              return !!e3 && void 0 !== e3._nodeType;
            }, e2.isDocumentNode = function(t2) {
              return e2.isNode(t2) && t2._nodeType === n.NodeType.Document;
            }, e2.isDocumentTypeNode = function(t2) {
              return e2.isNode(t2) && t2._nodeType === n.NodeType.DocumentType;
            }, e2.isDocumentFragmentNode = function(t2) {
              return e2.isNode(t2) && t2._nodeType === n.NodeType.DocumentFragment;
            }, e2.isAttrNode = function(t2) {
              return e2.isNode(t2) && t2._nodeType === n.NodeType.Attribute;
            }, e2.isCharacterDataNode = function(t2) {
              if (!e2.isNode(t2))
                return false;
              var r2 = t2._nodeType;
              return r2 === n.NodeType.Text || r2 === n.NodeType.ProcessingInstruction || r2 === n.NodeType.Comment || r2 === n.NodeType.CData;
            }, e2.isTextNode = function(t2) {
              return e2.isNode(t2) && (t2._nodeType === n.NodeType.Text || t2._nodeType === n.NodeType.CData);
            }, e2.isExclusiveTextNode = function(t2) {
              return e2.isNode(t2) && t2._nodeType === n.NodeType.Text;
            }, e2.isCDATASectionNode = function(t2) {
              return e2.isNode(t2) && t2._nodeType === n.NodeType.CData;
            }, e2.isCommentNode = function(t2) {
              return e2.isNode(t2) && t2._nodeType === n.NodeType.Comment;
            }, e2.isProcessingInstructionNode = function(t2) {
              return e2.isNode(t2) && t2._nodeType === n.NodeType.ProcessingInstruction;
            }, e2.isElementNode = function(t2) {
              return e2.isNode(t2) && t2._nodeType === n.NodeType.Element;
            }, e2.isCustomElementNode = function(t2) {
              return e2.isElementNode(t2) && "custom" === t2._customElementState;
            }, e2.isShadowRoot = function(e3) {
              return !!e3 && void 0 !== e3.host;
            }, e2.isMouseEvent = function(e3) {
              return !!e3 && void 0 !== e3.screenX && null != e3.screenY;
            }, e2.isSlotable = function(t2) {
              return !!t2 && void 0 !== t2._name && void 0 !== t2._assignedSlot && (e2.isTextNode(t2) || e2.isElementNode(t2));
            }, e2.isSlot = function(t2) {
              return !!t2 && void 0 !== t2._name && void 0 !== t2._assignedNodes && e2.isElementNode(t2);
            }, e2.isWindow = function(e3) {
              return !!e3 && void 0 !== e3.navigator;
            }, e2.isEventListener = function(e3) {
              return !!e3 && void 0 !== e3.handleEvent;
            }, e2.isRegisteredObserver = function(e3) {
              return !!e3 && void 0 !== e3.observer && void 0 !== e3.options;
            }, e2.isTransientRegisteredObserver = function(t2) {
              return !!t2 && void 0 !== t2.source && e2.isRegisteredObserver(t2);
            }, e2;
          }();
          t.Guard = i;
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = function(e2) {
            function t2() {
              return e2.call(this) || this;
            }
            return i(t2, e2), t2;
          }(r(98).DocumentImpl);
          t.XMLDocumentImpl = o;
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          }, i = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var o, a = r(2), s = r(243), u = r(7), l = r(244), c = { ftp: 21, file: null, http: 80, https: 443, ws: 80, wss: 443 }, h = /[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, p = /[ "<>`]|[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, f = /[ "<>`#?{}]|[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, d = /[ "<>`#?{}/:;=@\[\]\\\^\|]|[\0-\x1F\x7F-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, m = /[0-9A-Za-z!\$&-\/:;=\?@_~\xA0-\uD7FF\uE000-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uD83E\uD840-\uD87E\uD880-\uD8BE\uD8C0-\uD8FE\uD900-\uD93E\uD940-\uD97E\uD980-\uD9BE\uD9C0-\uD9FE\uDA00-\uDA3E\uDA40-\uDA7E\uDA80-\uDABE\uDAC0-\uDAFE\uDB00-\uDB3E\uDB40-\uDB7E\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDC00-\uDFFD]/, y = /[\0\t\f\r #%/:?@\[\\\]]/;
          function v(e2) {
            void 0 !== o && o.call(null, "Validation Error: " + e2);
          }
          function _() {
            return { scheme: "", username: "", password: "", host: null, port: null, path: [], query: null, fragment: null, _cannotBeABaseURLFlag: false, _blobURLEntry: null };
          }
          function g(e2) {
            return e2 in c;
          }
          function b(e2) {
            return g(e2.scheme);
          }
          function x(e2) {
            return c[e2] || null;
          }
          function w(e2) {
            return "" !== e2.username || "" !== e2.password;
          }
          function E(e2, t2) {
            var r2, i2;
            void 0 === t2 && (t2 = false);
            var o2 = e2.scheme + ":";
            if (null !== e2.host ? (o2 += "//", w(e2) && (o2 += e2.username, "" !== e2.password && (o2 += ":" + e2.password), o2 += "@"), o2 += D(e2.host), null !== e2.port && (o2 += ":" + e2.port)) : null === e2.host && "file" === e2.scheme && (o2 += "//"), e2._cannotBeABaseURLFlag)
              o2 += e2.path[0];
            else
              try {
                for (var a2 = n(e2.path), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                  o2 += "/" + s2.value;
                }
              } catch (e3) {
                r2 = { error: e3 };
              } finally {
                try {
                  s2 && !s2.done && (i2 = a2.return) && i2.call(a2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
            return null !== e2.query && (o2 += "?" + e2.query), t2 || null === e2.fragment || (o2 += "#" + e2.fragment), o2;
          }
          function D(e2) {
            return a.isNumber(e2) ? S(e2) : a.isArray(e2) ? "[" + C(e2) + "]" : e2;
          }
          function S(e2) {
            for (var t2 = "", r2 = e2, n2 = 1; n2 <= 4; n2++)
              t2 = (r2 % 256).toString() + t2, 4 !== n2 && (t2 = "." + t2), r2 = Math.floor(r2 / 256);
            return t2;
          }
          function C(e2) {
            for (var t2 = "", r2 = null, n2 = -1, i2 = 0, o2 = 0, a2 = 0; a2 < 8; a2++)
              if (0 === e2[a2]) {
                i2 = 1;
                for (var s2 = a2 + 1; s2 < 8 && 0 === e2[s2]; s2++)
                  i2++;
                i2 > o2 && (o2 = i2, n2 = a2);
              }
            o2 > 1 && (r2 = n2);
            for (var u2 = false, l2 = 0; l2 < 8; l2++)
              u2 && 0 === e2[l2] || (u2 && (u2 = false), r2 !== l2 ? (t2 += e2[l2].toString(16), 7 !== l2 && (t2 += ":")) : (t2 += 0 === l2 ? "::" : ":", u2 = true));
            return t2;
          }
          function A(e2, t2, r2, i2, o2) {
            var l2, c2, y2, _2;
            if (void 0 === i2) {
              i2 = { scheme: "", username: "", password: "", host: null, port: null, path: [], query: null, fragment: null, _cannotBeABaseURLFlag: false, _blobURLEntry: null };
              var E2 = /^[\u0000-\u001F\u0020]+/, D2 = /[\u0000-\u001F\u0020]+$/;
              (E2.test(e2) || D2.test(e2)) && v("Input string contains leading or trailing control characters or space."), e2 = (e2 = e2.replace(E2, "")).replace(D2, "");
            }
            var S2 = /[\u0009\u000A\u000D]/g;
            S2.test(e2) && v("Input string contains tab or newline characters."), e2 = e2.replace(S2, "");
            var C2 = void 0 === o2 ? s.ParserState.SchemeStart : o2;
            void 0 === t2 && (t2 = null);
            for (var A2 = void 0 === r2 || "replacement" === r2 || "UTF-16BE" === r2 || "UTF-16LE" === r2 ? "UTF-8" : r2, L2 = "", M2 = false, B2 = false, j2 = false, R2 = new a.StringWalker(e2); ; ) {
              switch (C2) {
                case s.ParserState.SchemeStart:
                  if (u.codePoint.ASCIIAlpha.test(R2.c()))
                    L2 += R2.c().toLowerCase(), C2 = s.ParserState.Scheme;
                  else {
                    if (void 0 !== o2)
                      return v("Invalid scheme start character."), null;
                    C2 = s.ParserState.NoScheme, R2.pointer--;
                  }
                  break;
                case s.ParserState.Scheme:
                  if (u.codePoint.ASCIIAlphanumeric.test(R2.c()) || "+" === R2.c() || "-" === R2.c() || "." === R2.c())
                    L2 += R2.c().toLowerCase();
                  else {
                    if (":" !== R2.c()) {
                      if (void 0 === o2) {
                        L2 = "", C2 = s.ParserState.NoScheme, R2.pointer = 0;
                        continue;
                      }
                      return v("Invalid input string."), null;
                    }
                    if (void 0 !== o2) {
                      if (g(i2.scheme) && !g(L2))
                        return i2;
                      if (!g(i2.scheme) && g(L2))
                        return i2;
                      if ((w(i2) || null !== i2.port) && "file" === L2)
                        return i2;
                      if ("file" === i2.scheme && ("" === i2.host || null === i2.host))
                        return i2;
                    }
                    if (i2.scheme = L2, void 0 !== o2)
                      return i2.port === x(i2.scheme) && (i2.port = null), i2;
                    L2 = "", "file" === i2.scheme ? (R2.remaining().startsWith("//") || v("Invalid file URL scheme, '//' expected."), C2 = s.ParserState.File) : b(i2) && null !== t2 && t2.scheme === i2.scheme ? C2 = s.ParserState.SpecialRelativeOrAuthority : b(i2) ? C2 = s.ParserState.SpecialAuthoritySlashes : R2.remaining().startsWith("/") ? (C2 = s.ParserState.PathOrAuthority, R2.pointer++) : (i2._cannotBeABaseURLFlag = true, i2.path.push(""), C2 = s.ParserState.CannotBeABaseURLPath);
                  }
                  break;
                case s.ParserState.NoScheme:
                  if (null === t2 || t2._cannotBeABaseURLFlag && "#" !== R2.c())
                    return v("Invalid input string."), null;
                  t2._cannotBeABaseURLFlag && "#" === R2.c() ? (i2.scheme = t2.scheme, i2.path = u.list.clone(t2.path), i2.query = t2.query, i2.fragment = "", i2._cannotBeABaseURLFlag = true, C2 = s.ParserState.Fragment) : "file" !== t2.scheme ? (C2 = s.ParserState.Relative, R2.pointer--) : (C2 = s.ParserState.File, R2.pointer--);
                  break;
                case s.ParserState.SpecialRelativeOrAuthority:
                  "/" === R2.c() && R2.remaining().startsWith("/") ? (C2 = s.ParserState.SpecialAuthorityIgnoreSlashes, R2.pointer++) : (v("Invalid input string."), C2 = s.ParserState.Relative, R2.pointer--);
                  break;
                case s.ParserState.PathOrAuthority:
                  "/" === R2.c() ? C2 = s.ParserState.Authority : (C2 = s.ParserState.Path, R2.pointer--);
                  break;
                case s.ParserState.Relative:
                  if (null === t2)
                    throw new Error("Invalid parser state. Base URL is null.");
                  switch (i2.scheme = t2.scheme, R2.c()) {
                    case "":
                      i2.username = t2.username, i2.password = t2.password, i2.host = t2.host, i2.port = t2.port, i2.path = u.list.clone(t2.path), i2.query = t2.query;
                      break;
                    case "/":
                      C2 = s.ParserState.RelativeSlash;
                      break;
                    case "?":
                      i2.username = t2.username, i2.password = t2.password, i2.host = t2.host, i2.port = t2.port, i2.path = u.list.clone(t2.path), i2.query = "", C2 = s.ParserState.Query;
                      break;
                    case "#":
                      i2.username = t2.username, i2.password = t2.password, i2.host = t2.host, i2.port = t2.port, i2.path = u.list.clone(t2.path), i2.query = t2.query, i2.fragment = "", C2 = s.ParserState.Fragment;
                      break;
                    default:
                      b(i2) && "\\" === R2.c() ? (v("Invalid input string."), C2 = s.ParserState.RelativeSlash) : (i2.username = t2.username, i2.password = t2.password, i2.host = t2.host, i2.port = t2.port, i2.path = u.list.clone(t2.path), 0 !== i2.path.length && i2.path.splice(i2.path.length - 1, 1), C2 = s.ParserState.Path, R2.pointer--);
                  }
                  break;
                case s.ParserState.RelativeSlash:
                  if (!b(i2) || "/" !== R2.c() && "\\" !== R2.c())
                    if ("/" === R2.c())
                      C2 = s.ParserState.Authority;
                    else {
                      if (null === t2)
                        throw new Error("Invalid parser state. Base URL is null.");
                      i2.username = t2.username, i2.password = t2.password, i2.host = t2.host, i2.port = t2.port, C2 = s.ParserState.Path, R2.pointer--;
                    }
                  else
                    "\\" === R2.c() && v("Invalid input string."), C2 = s.ParserState.SpecialAuthorityIgnoreSlashes;
                  break;
                case s.ParserState.SpecialAuthoritySlashes:
                  "/" === R2.c() && R2.remaining().startsWith("/") ? (C2 = s.ParserState.SpecialAuthorityIgnoreSlashes, R2.pointer++) : (v("Expected '//'."), C2 = s.ParserState.SpecialAuthorityIgnoreSlashes, R2.pointer--);
                  break;
                case s.ParserState.SpecialAuthorityIgnoreSlashes:
                  "/" !== R2.c() && "\\" !== R2.c() ? (C2 = s.ParserState.Authority, R2.pointer--) : v("Unexpected '/' or '\\'.");
                  break;
                case s.ParserState.Authority:
                  if ("@" === R2.c()) {
                    v("Unexpected '@'."), M2 && (L2 = "%40" + L2), M2 = true;
                    try {
                      for (var U2 = (l2 = void 0, n(L2)), G2 = U2.next(); !G2.done; G2 = U2.next()) {
                        var q2 = G2.value;
                        if (":" !== q2 || j2) {
                          var W2 = X(q2, d);
                          j2 ? i2.password += W2 : i2.username += W2;
                        } else
                          j2 = true;
                      }
                    } catch (e3) {
                      l2 = { error: e3 };
                    } finally {
                      try {
                        G2 && !G2.done && (c2 = U2.return) && c2.call(U2);
                      } finally {
                        if (l2)
                          throw l2.error;
                      }
                    }
                    L2 = "";
                  } else if ("" === R2.c() || "/" === R2.c() || "?" === R2.c() || "#" === R2.c() || b(i2) && "\\" === R2.c()) {
                    if (M2 && "" === L2)
                      return v("Invalid input string."), null;
                    R2.pointer -= L2.length + 1, L2 = "", C2 = s.ParserState.Host;
                  } else
                    L2 += R2.c();
                  break;
                case s.ParserState.Host:
                case s.ParserState.Hostname:
                  if (void 0 !== o2 && "file" === i2.scheme)
                    R2.pointer--, C2 = s.ParserState.FileHost;
                  else if (":" !== R2.c() || B2)
                    if ("" === R2.c() || "/" === R2.c() || "?" === R2.c() || "#" === R2.c() || b(i2) && "\\" === R2.c()) {
                      if (R2.pointer--, b(i2) && "" === L2)
                        return v("Invalid input string."), null;
                      if (void 0 !== o2 && "" === L2 && (w(i2) || null !== i2.port))
                        return v("Invalid input string."), i2;
                      if (null === (J = I(L2, !b(i2))))
                        return null;
                      if (i2.host = J, L2 = "", C2 = s.ParserState.PathStart, void 0 !== o2)
                        return i2;
                    } else
                      "[" === R2.c() && (B2 = true), "]" === R2.c() && (B2 = false), L2 += R2.c();
                  else {
                    if ("" === L2)
                      return v("Invalid input string."), null;
                    if (null === (J = I(L2, !b(i2))))
                      return null;
                    if (i2.host = J, L2 = "", C2 = s.ParserState.Port, o2 === s.ParserState.Hostname)
                      return i2;
                  }
                  break;
                case s.ParserState.Port:
                  if (u.codePoint.ASCIIDigit.test(R2.c()))
                    L2 += R2.c();
                  else {
                    if (!("" === R2.c() || "/" === R2.c() || "?" === R2.c() || "#" === R2.c() || b(i2) && "\\" === R2.c() || o2))
                      return v("Invalid input string."), null;
                    if ("" !== L2 && "" !== L2) {
                      var H2 = parseInt(L2, 10);
                      if (H2 > Math.pow(2, 16) - 1)
                        return v("Invalid port number."), null;
                      i2.port = H2 === x(i2.scheme) ? null : H2, L2 = "";
                    }
                    if (void 0 !== o2)
                      return i2;
                    C2 = s.ParserState.PathStart, R2.pointer--;
                  }
                  break;
                case s.ParserState.File:
                  if (i2.scheme = "file", "/" === R2.c() || "\\" === R2.c())
                    "\\" === R2.c() && v("Invalid input string."), C2 = s.ParserState.FileSlash;
                  else if (null !== t2 && "file" === t2.scheme)
                    switch (R2.c()) {
                      case "":
                        i2.host = t2.host, i2.path = u.list.clone(t2.path), i2.query = t2.query;
                        break;
                      case "?":
                        i2.host = t2.host, i2.path = u.list.clone(t2.path), i2.query = "", C2 = s.ParserState.Query;
                        break;
                      case "#":
                        i2.host = t2.host, i2.path = u.list.clone(t2.path), i2.query = t2.query, i2.fragment = "", C2 = s.ParserState.Fragment;
                        break;
                      default:
                        P(R2.substring()) ? v("Unexpected windows drive letter in input string.") : (i2.host = t2.host, i2.path = u.list.clone(t2.path), O(i2)), C2 = s.ParserState.Path, R2.pointer--;
                    }
                  else
                    C2 = s.ParserState.Path, R2.pointer--;
                  break;
                case s.ParserState.FileSlash:
                  "/" === R2.c() || "\\" === R2.c() ? ("\\" === R2.c() && v("Invalid input string."), C2 = s.ParserState.FileHost) : (null === t2 || "file" !== t2.scheme || P(R2.substring()) || (F(t2.path[0]) ? i2.path.push(t2.path[0]) : i2.host = t2.host), C2 = s.ParserState.Path, R2.pointer--);
                  break;
                case s.ParserState.FileHost:
                  if ("" === R2.c() || "/" === R2.c() || "\\" === R2.c() || "?" === R2.c() || "#" === R2.c())
                    if (R2.pointer--, void 0 === o2 && k(L2))
                      v("Unexpected windows drive letter in input string."), C2 = s.ParserState.Path;
                    else if ("" === L2) {
                      if (i2.host = "", void 0 !== o2)
                        return i2;
                      C2 = s.ParserState.PathStart;
                    } else {
                      var J;
                      if (null === (J = I(L2, !b(i2))))
                        return null;
                      if ("localhost" === J && (J = ""), i2.host = J, void 0 !== o2)
                        return i2;
                      L2 = "", C2 = s.ParserState.PathStart;
                    }
                  else
                    L2 += R2.c();
                  break;
                case s.ParserState.PathStart:
                  b(i2) ? ("\\" === R2.c() && v("Invalid input string."), C2 = s.ParserState.Path, "/" !== R2.c() && "\\" !== R2.c() && R2.pointer--) : void 0 === o2 && "?" === R2.c() ? (i2.query = "", C2 = s.ParserState.Query) : void 0 === o2 && "#" === R2.c() ? (i2.fragment = "", C2 = s.ParserState.Fragment) : "" !== R2.c() && (C2 = s.ParserState.Path, "/" !== R2.c() && R2.pointer--);
                  break;
                case s.ParserState.Path:
                  if ("" === R2.c() || "/" === R2.c() || b(i2) && "\\" === R2.c() || void 0 === o2 && ("?" === R2.c() || "#" === R2.c())) {
                    if (b(i2) && "\\" === R2.c() && v("Invalid input string."), T(L2))
                      O(i2), "/" === R2.c() || b(i2) && "\\" === R2.c() || i2.path.push("");
                    else if (!N(L2) || "/" === R2.c() || b(i2) && "\\" === R2.c()) {
                      if (!N(L2)) {
                        if ("file" === i2.scheme && 0 === i2.path.length && k(L2)) {
                          null !== i2.host && "" !== i2.host && (v("Invalid input string."), i2.host = "");
                          var Y = Array.from(L2);
                          L2 = Y.slice(0, 1) + ":" + Y.slice(2);
                        }
                        i2.path.push(L2);
                      }
                    } else
                      i2.path.push("");
                    if (L2 = "", "file" === i2.scheme && ("" === R2.c() || "?" === R2.c() || "#" === R2.c()))
                      for (; i2.path.length > 1 && "" === i2.path[0]; )
                        v("Invalid input string."), i2.path.splice(0, 1);
                    "?" === R2.c() && (i2.query = "", C2 = s.ParserState.Query), "#" === R2.c() && (i2.fragment = "", C2 = s.ParserState.Fragment);
                  } else
                    m.test(R2.c()) || "%" === R2.c() || v("Character is not a URL code point or a percent encoded character."), "%" !== R2.c() || /^[0-9a-fA-F][0-9a-fA-F]/.test(R2.remaining()) || v("Percent encoded character must be followed by two hex digits."), L2 += X(R2.c(), f);
                  break;
                case s.ParserState.CannotBeABaseURLPath:
                  "?" === R2.c() ? (i2.query = "", C2 = s.ParserState.Query) : "#" === R2.c() ? (i2.fragment = "", C2 = s.ParserState.Fragment) : ("" === R2.c() || m.test(R2.c()) || "%" === R2.c() || v("Character is not a URL code point or a percent encoded character."), "%" !== R2.c() || /^[0-9a-fA-F][0-9a-fA-F]/.test(R2.remaining()) || v("Percent encoded character must be followed by two hex digits."), "" !== R2.c() && (i2.path[0] += X(R2.c(), h)));
                  break;
                case s.ParserState.Query:
                  if ("UTF-8" === A2 || b(i2) && "ws" !== i2.scheme && "wss" !== i2.scheme || (A2 = "UTF-8"), void 0 === o2 && "#" === R2.c())
                    i2.fragment = "", C2 = s.ParserState.Fragment;
                  else if ("" !== R2.c()) {
                    if (m.test(R2.c()) || "%" === R2.c() || v("Character is not a URL code point or a percent encoded character."), "%" !== R2.c() || /^[0-9a-fA-F][0-9a-fA-F]/.test(R2.remaining()) || v("Percent encoded character must be followed by two hex digits."), "UTF-8" !== A2.toUpperCase())
                      throw new Error("Only UTF-8 encoding is supported.");
                    var V = a.utf8Encode(R2.c());
                    if (V.length >= 3 && 38 === V[0] && 35 === V[1] && 59 === V[V.length - 1])
                      V = V.subarray(2, V.length - 1), i2.query += "%26%23" + u.byteSequence.isomorphicDecode(V) + "%3B";
                    else
                      try {
                        for (var K = (y2 = void 0, n(V)), $ = K.next(); !$.done; $ = K.next()) {
                          var Q = $.value;
                          Q < 33 || Q > 126 || 34 === Q || 35 === Q || 60 === Q || 62 === Q || 39 === Q && b(i2) ? i2.query += z2(Q) : i2.query += String.fromCharCode(Q);
                        }
                      } catch (e3) {
                        y2 = { error: e3 };
                      } finally {
                        try {
                          $ && !$.done && (_2 = K.return) && _2.call(K);
                        } finally {
                          if (y2)
                            throw y2.error;
                        }
                      }
                  }
                  break;
                case s.ParserState.Fragment:
                  "" === R2.c() || ("\0" === R2.c() ? v("NULL character in input string.") : (m.test(R2.c()) || "%" === R2.c() || v("Unexpected character in fragment string."), "%" !== R2.c() || /^[A-Za-z0-9][A-Za-z0-9]/.test(R2.remaining()) || v("Unexpected character in fragment string."), i2.fragment += X(R2.c(), p)));
              }
              if (R2.eof)
                break;
              R2.pointer++;
            }
            return i2;
          }
          function N(e2) {
            return "." === e2 || "%2e" === e2.toLowerCase();
          }
          function T(e2) {
            var t2 = e2.toLowerCase();
            return ".." === t2 || ".%2e" === t2 || "%2e." === t2 || "%2e%2e" === t2;
          }
          function O(e2) {
            var t2 = e2.path;
            0 !== t2.length && ("file" === e2.scheme && 1 === t2.length && F(t2[0]) || e2.path.splice(e2.path.length - 1, 1));
          }
          function F(e2) {
            return e2.length >= 2 && u.codePoint.ASCIIAlpha.test(e2[0]) && ":" === e2[1];
          }
          function k(e2) {
            return e2.length >= 2 && u.codePoint.ASCIIAlpha.test(e2[0]) && (":" === e2[1] || "|" === e2[1]);
          }
          function P(e2) {
            return e2.length >= 2 && k(e2) && (2 === e2.length || "/" === e2[2] || "\\" === e2[2] || "?" === e2[2] || "#" === e2[2]);
          }
          function I(e2, t2) {
            if (void 0 === t2 && (t2 = false), e2.startsWith("["))
              return e2.endsWith("]") ? B(e2.substring(1, e2.length - 1)) : (v("Expected ']' after '['."), null);
            if (t2)
              return j(e2);
            var r2 = H(a.utf8Decode(G(e2)));
            if (null === r2)
              return v("Invalid domain."), null;
            if (y.test(r2))
              return v("Invalid domain."), null;
            var n2 = M(r2);
            return null === n2 || a.isNumber(n2) ? n2 : r2;
          }
          function L(e2, t2) {
            void 0 === t2 && (t2 = { value: false });
            var r2 = 10;
            return e2.startsWith("0x") || e2.startsWith("0X") ? (t2.value = true, e2 = e2.substr(2), r2 = 16) : e2.length >= 2 && "0" === e2[0] && (t2.value = true, e2 = e2.substr(1), r2 = 8), "" === e2 ? 0 : (10 === r2 ? /^[0-9]+$/ : 16 === r2 ? /^[0-9A-Fa-f]+$/ : /^[0-7]+$/).test(e2) ? parseInt(e2, r2) : null;
          }
          function M(e2) {
            var t2, r2, i2, o2, a2 = { value: false }, s2 = e2.split(".");
            if ("" === s2[s2.length - 1] && (a2.value = true, s2.length > 1 && s2.pop()), s2.length > 4)
              return e2;
            var u2 = [];
            try {
              for (var l2 = n(s2), c2 = l2.next(); !c2.done; c2 = l2.next()) {
                var h2 = c2.value;
                if ("" === h2)
                  return e2;
                if (null === (_2 = L(h2, a2)))
                  return e2;
                u2.push(_2);
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                c2 && !c2.done && (r2 = l2.return) && r2.call(l2);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            a2.value && v("Invalid IP v4 address.");
            for (var p2 = 0; p2 < u2.length; p2++) {
              if (u2[p2] > 255 && (v("Invalid IP v4 address."), p2 < u2.length - 1))
                return null;
            }
            if (u2[u2.length - 1] >= Math.pow(256, 5 - u2.length))
              return v("Invalid IP v4 address."), null;
            var f2 = u2[u2.length - 1];
            u2.pop();
            var d2 = 0;
            try {
              for (var m2 = n(u2), y2 = m2.next(); !y2.done; y2 = m2.next()) {
                var _2;
                f2 += (_2 = y2.value) * Math.pow(256, 3 - d2), d2++;
              }
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                y2 && !y2.done && (o2 = m2.return) && o2.call(m2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return f2;
          }
          function B(e2) {
            var t2, r2 = [0, 0, 0, 0, 0, 0, 0, 0], n2 = 0, o2 = null, s2 = new a.StringWalker(e2);
            if (":" === s2.c()) {
              if (!s2.remaining().startsWith(":"))
                return v("Invalid IP v6 address."), null;
              s2.pointer += 2, o2 = n2 += 1;
            }
            for (; "" !== s2.c(); ) {
              if (8 === n2)
                return v("Invalid IP v6 address."), null;
              if (":" !== s2.c()) {
                for (var l2 = 0, c2 = 0; c2 < 4 && u.codePoint.ASCIIHexDigit.test(s2.c()); )
                  l2 = 16 * l2 + parseInt(s2.c(), 16), s2.pointer++, c2++;
                if ("." === s2.c()) {
                  if (0 === c2)
                    return v("Invalid IP v6 address."), null;
                  if (s2.pointer -= c2, n2 > 6)
                    return v("Invalid IP v6 address."), null;
                  for (var h2 = 0; "" !== s2.c(); ) {
                    var p2 = null;
                    if (h2 > 0) {
                      if (!("." === s2.c() && h2 < 4))
                        return v("Invalid IP v6 address."), null;
                      s2.pointer++;
                    }
                    if (!u.codePoint.ASCIIDigit.test(s2.c()))
                      return v("Invalid IP v6 address."), null;
                    for (; u.codePoint.ASCIIDigit.test(s2.c()); ) {
                      var f2 = parseInt(s2.c(), 10);
                      if (null === p2)
                        p2 = f2;
                      else {
                        if (0 === p2)
                          return v("Invalid IP v6 address."), null;
                        p2 = 10 * p2 + f2;
                      }
                      if (p2 > 255)
                        return v("Invalid IP v6 address."), null;
                      s2.pointer++;
                    }
                    if (null === p2)
                      return v("Invalid IP v6 address."), null;
                    r2[n2] = 256 * r2[n2] + p2, 2 !== ++h2 && 4 !== h2 || n2++;
                  }
                  if (4 !== h2)
                    return v("Invalid IP v6 address."), null;
                  break;
                }
                if (":" === s2.c()) {
                  if (s2.pointer++, "" === s2.c())
                    return v("Invalid IP v6 address."), null;
                } else if ("" !== s2.c())
                  return v("Invalid IP v6 address."), null;
                r2[n2] = l2, n2++;
              } else {
                if (null !== o2)
                  return v("Invalid IP v6 address."), null;
                s2.pointer++, o2 = ++n2;
              }
            }
            if (null !== o2) {
              var d2 = n2 - o2;
              for (n2 = 7; 0 !== n2 && d2 > 0; )
                t2 = i([r2[o2 + d2 - 1], r2[n2]], 2), r2[n2] = t2[0], r2[o2 + d2 - 1] = t2[1], n2--, d2--;
            } else if (null === o2 && 8 !== n2)
              return v("Invalid IP v6 address."), null;
            return r2;
          }
          function j(e2) {
            var t2, r2;
            if (/[\x00\t\f\r #/:?@\[\\\]]/.test(e2))
              return v("Invalid host string."), null;
            var i2 = "";
            try {
              for (var o2 = n(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                i2 += X(a2.value, h);
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                a2 && !a2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            return i2;
          }
          function R(e2) {
            return null;
          }
          function z2(e2) {
            return "%" + ("00" + e2.toString(16).toUpperCase()).slice(-2);
          }
          function U(e2) {
            for (var t2 = function(e3) {
              return e3 >= 48 && e3 <= 57 || e3 >= 65 && e3 <= 70 || e3 >= 97 && e3 <= 102;
            }, r2 = new Uint8Array(e2.length), n2 = 0, i2 = 0; i2 < e2.length; i2++) {
              var o2 = e2[i2];
              if (37 !== o2)
                r2[n2] = o2, n2++;
              else if (37 === o2 && i2 >= e2.length - 2)
                r2[n2] = o2, n2++;
              else if (37 !== o2 || t2(e2[i2 + 1]) && t2(e2[i2 + 2])) {
                var s2 = parseInt(a.utf8Decode(Uint8Array.of(e2[i2 + 1], e2[i2 + 2])), 16);
                r2[n2] = s2, n2++, i2 += 2;
              } else
                r2[n2] = o2, n2++;
            }
            return r2.subarray(0, n2);
          }
          function G(e2) {
            return U(a.utf8Encode(e2));
          }
          function X(e2, t2) {
            var r2, i2;
            if (!t2.test(e2))
              return e2;
            var o2 = a.utf8Encode(e2), s2 = "";
            try {
              for (var u2 = n(o2), l2 = u2.next(); !l2.done; l2 = u2.next()) {
                s2 += z2(l2.value);
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                l2 && !l2.done && (i2 = u2.return) && i2.call(u2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return s2;
          }
          function q(e2) {
            var t2, r2, i2, o2, s2 = [], u2 = [];
            try {
              for (var l2 = n(e2), c2 = l2.next(); !c2.done; c2 = l2.next()) {
                var h2 = c2.value;
                38 === h2 ? (s2.push(Uint8Array.from(u2)), u2 = []) : u2.push(h2);
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                c2 && !c2.done && (r2 = l2.return) && r2.call(l2);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            0 !== u2.length && s2.push(Uint8Array.from(u2));
            var p2 = [];
            try {
              for (var f2 = n(s2), d2 = f2.next(); !d2.done; d2 = f2.next()) {
                var m2 = d2.value;
                if (0 !== m2.length) {
                  for (var y2 = m2.indexOf(61), v2 = -1 !== y2 ? m2.slice(0, y2) : m2, _2 = -1 !== y2 ? m2.slice(y2 + 1) : new Uint8Array(), g2 = 0; g2 < v2.length; g2++)
                    43 === v2[g2] && (v2[g2] = 32);
                  for (g2 = 0; g2 < _2.length; g2++)
                    43 === _2[g2] && (_2[g2] = 32);
                  var b2 = a.utf8Decode(v2), x2 = a.utf8Decode(_2);
                  p2.push([b2, x2]);
                }
              }
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                d2 && !d2.done && (o2 = f2.return) && o2.call(f2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return p2;
          }
          function W(e2) {
            var t2, r2, i2 = "";
            try {
              for (var o2 = n(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s2 = a2.value;
                i2 += 32 === s2 ? "+" : 42 === s2 || 45 === s2 || 46 === s2 || s2 >= 48 && s2 <= 57 || s2 >= 65 && s2 <= 90 || 95 === s2 || s2 >= 97 && s2 <= 122 ? String.fromCodePoint(s2) : z2(s2);
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                a2 && !a2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            return i2;
          }
          function H(e2, t2) {
            void 0 === t2 && (t2 = false);
            var r2 = l.domainToASCII(e2);
            return "" === r2 ? (v("Invalid domain name."), null) : r2;
          }
          t.setValidationErrorCallback = function(e2) {
            o = e2;
          }, t.newURL = _, t.isSpecialScheme = g, t.isSpecial = b, t.defaultPort = x, t.includesCredentials = w, t.cannotHaveAUsernamePasswordPort = function(e2) {
            return null === e2.host || "" === e2.host || e2._cannotBeABaseURLFlag || "file" === e2.scheme;
          }, t.urlSerializer = E, t.hostSerializer = D, t.iPv4Serializer = S, t.iPv6Serializer = C, t.urlParser = function(e2, t2, r2) {
            var n2 = A(e2, t2, r2);
            return null === n2 ? null : ("blob" !== n2.scheme || (n2._blobURLEntry = null), n2);
          }, t.basicURLParser = A, t.setTheUsername = function(e2, t2) {
            var r2, i2, o2 = "";
            try {
              for (var a2 = n(t2), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                o2 += X(s2.value, d);
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                s2 && !s2.done && (i2 = a2.return) && i2.call(a2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            e2.username = o2;
          }, t.setThePassword = function(e2, t2) {
            var r2, i2, o2 = "";
            try {
              for (var a2 = n(t2), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                o2 += X(s2.value, d);
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                s2 && !s2.done && (i2 = a2.return) && i2.call(a2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            e2.password = o2;
          }, t.isSingleDotPathSegment = N, t.isDoubleDotPathSegment = T, t.shorten = O, t.isNormalizedWindowsDriveLetter = F, t.isWindowsDriveLetter = k, t.startsWithAWindowsDriveLetter = P, t.hostParser = I, t.iPv4NumberParser = L, t.iPv4Parser = M, t.iPv6Parser = B, t.opaqueHostParser = j, t.resolveABlobURL = R, t.percentEncode = z2, t.percentDecode = U, t.stringPercentDecode = G, t.utf8PercentEncode = X, t.hostEquals = function(e2, t2) {
            return e2 === t2;
          }, t.urlEquals = function(e2, t2, r2) {
            return void 0 === r2 && (r2 = false), E(e2, r2) === E(t2, r2);
          }, t.urlEncodedStringParser = function(e2) {
            return q(a.utf8Encode(e2));
          }, t.urlEncodedParser = q, t.urlEncodedByteSerializer = W, t.urlEncodedSerializer = function(e2, t2) {
            var r2, i2;
            if ("UTF-8" !== (void 0 === t2 || "replacement" === t2 || "UTF-16BE" === t2 || "UTF-16LE" === t2 ? "UTF-8" : t2).toUpperCase())
              throw new Error("Only UTF-8 encoding is supported.");
            var o2 = "";
            try {
              for (var s2 = n(e2), u2 = s2.next(); !u2.done; u2 = s2.next()) {
                var l2 = u2.value, c2 = W(a.utf8Encode(l2[0])), h2 = l2[1];
                h2 = W(a.utf8Encode(h2)), "" !== o2 && (o2 += "&"), o2 += c2 + "=" + h2;
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                u2 && !u2.done && (i2 = s2.return) && i2.call(s2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, t.origin = function e2(t2) {
            switch (t2.scheme) {
              case "blob":
                t2._blobURLEntry;
                var r2 = A(t2.path[0]);
                return null === r2 ? s.OpaqueOrigin : e2(r2);
              case "ftp":
              case "http":
              case "https":
              case "ws":
              case "wss":
                return [t2.scheme, null === t2.host ? "" : t2.host, t2.port, null];
              case "file":
              default:
                return s.OpaqueOrigin;
            }
          }, t.domainToASCII = H, t.domainToUnicode = function(e2, t2) {
            void 0 === t2 && (t2 = false);
            var r2 = l.domainToUnicode(e2);
            return "" === r2 && v("Invalid domain name."), r2;
          }, t.asciiSerializationOfAnOrigin = function(e2) {
            if ("" === e2[0] && "" === e2[1] && null === e2[2] && null === e2[3])
              return "null";
            var t2 = e2[0] + "://" + D(e2[1]);
            return null !== e2[2] && (t2 += ":" + e2[2].toString()), t2;
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(0), i = function() {
            function e2() {
              this._signal = n.create_abortSignal();
            }
            return Object.defineProperty(e2.prototype, "signal", { get: function() {
              return this._signal;
            }, enumerable: true, configurable: true }), e2.prototype.abort = function() {
              n.abort_signalAbort(this._signal);
            }, e2;
          }();
          t.AbortControllerImpl = i;
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(70), a = r(0), s = function(e2) {
            function t2() {
              var t3 = e2.call(this) || this;
              return t3._abortedFlag = false, t3._abortAlgorithms = /* @__PURE__ */ new Set(), t3;
            }
            return i(t2, e2), Object.defineProperty(t2.prototype, "aborted", { get: function() {
              return this._abortedFlag;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "onabort", { get: function() {
              return a.event_getterEventHandlerIDLAttribute(this, "onabort");
            }, set: function(e3) {
              a.event_setterEventHandlerIDLAttribute(this, "onabort", e3);
            }, enumerable: true, configurable: true }), t2._create = function() {
              return new t2();
            }, t2;
          }(o.EventTargetImpl);
          t.AbortSignalImpl = s;
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(1), a = r(34), s = r(12), u = function(e2) {
            function t2(t3, r2, n2) {
              var i2 = e2.call(this) || this;
              return i2._name = "", i2._publicId = "", i2._systemId = "", i2._name = t3, i2._publicId = r2, i2._systemId = n2, i2;
            }
            return i(t2, e2), Object.defineProperty(t2.prototype, "name", { get: function() {
              return this._name;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "publicId", { get: function() {
              return this._publicId;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "systemId", { get: function() {
              return this._systemId;
            }, enumerable: true, configurable: true }), t2.prototype.before = function() {
              for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
                e3[t3] = arguments[t3];
              throw new Error("Mixin: ChildNode not implemented.");
            }, t2.prototype.after = function() {
              for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
                e3[t3] = arguments[t3];
              throw new Error("Mixin: ChildNode not implemented.");
            }, t2.prototype.replaceWith = function() {
              for (var e3 = [], t3 = 0; t3 < arguments.length; t3++)
                e3[t3] = arguments[t3];
              throw new Error("Mixin: ChildNode not implemented.");
            }, t2.prototype.remove = function() {
              throw new Error("Mixin: ChildNode not implemented.");
            }, t2._create = function(e3, r2, n2, i2) {
              void 0 === n2 && (n2 = ""), void 0 === i2 && (i2 = "");
              var o2 = new t2(r2, n2, i2);
              return o2._nodeDocument = e3, o2;
            }, t2;
          }(a.NodeImpl);
          t.DocumentTypeImpl = u, s.idl_defineConst(u.prototype, "_nodeType", o.NodeType.DocumentType);
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(100), a = r(2), s = r(0), u = function(e2) {
            function t2(t3, r2) {
              var n2 = e2.call(this) || this;
              return n2._host = t3, n2._mode = r2, n2;
            }
            return i(t2, e2), Object.defineProperty(t2.prototype, "mode", { get: function() {
              return this._mode;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "host", { get: function() {
              return this._host;
            }, enumerable: true, configurable: true }), t2.prototype._getTheParent = function(e3) {
              return e3._composedFlag || a.isEmpty(e3._path) || s.tree_rootNode(e3._path[0].invocationTarget) !== this ? this._host : null;
            }, t2._create = function(e3, r2) {
              return new t2(r2, "closed");
            }, t2;
          }(o.DocumentFragmentImpl);
          t.ShadowRootImpl = u;
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(1), a = r(34), s = r(0), u = r(12), l = function(e2) {
            function t2(t3) {
              var r2 = e2.call(this) || this;
              return r2._namespace = null, r2._namespacePrefix = null, r2._element = null, r2._value = "", r2._localName = t3, r2;
            }
            return i(t2, e2), Object.defineProperty(t2.prototype, "ownerElement", { get: function() {
              return this._element;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "namespaceURI", { get: function() {
              return this._namespace;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "prefix", { get: function() {
              return this._namespacePrefix;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "localName", { get: function() {
              return this._localName;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "name", { get: function() {
              return this._qualifiedName;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "value", { get: function() {
              return this._value;
            }, set: function(e3) {
              s.attr_setAnExistingAttributeValue(this, e3);
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "_qualifiedName", { get: function() {
              return null !== this._namespacePrefix ? this._namespacePrefix + ":" + this._localName : this._localName;
            }, enumerable: true, configurable: true }), t2._create = function(e3, r2) {
              var n2 = new t2(r2);
              return n2._nodeDocument = e3, n2;
            }, t2;
          }(a.NodeImpl);
          t.AttrImpl = l, u.idl_defineConst(l.prototype, "_nodeType", o.NodeType.Attribute), u.idl_defineConst(l.prototype, "specified", true);
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(101), a = r(1), s = r(12), u = function(e2) {
            function t2(t3) {
              return e2.call(this, t3) || this;
            }
            return i(t2, e2), t2._create = function(e3, r2) {
              void 0 === r2 && (r2 = "");
              var n2 = new t2(r2);
              return n2._nodeDocument = e3, n2;
            }, t2;
          }(o.TextImpl);
          t.CDATASectionImpl = u, s.idl_defineConst(u.prototype, "_nodeType", a.NodeType.CData);
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(1), a = r(71), s = r(12), u = function(e2) {
            function t2(t3) {
              return void 0 === t3 && (t3 = ""), e2.call(this, t3) || this;
            }
            return i(t2, e2), t2._create = function(e3, r2) {
              void 0 === r2 && (r2 = "");
              var n2 = new t2(r2);
              return n2._nodeDocument = e3, n2;
            }, t2;
          }(a.CharacterDataImpl);
          t.CommentImpl = u, s.idl_defineConst(u.prototype, "_nodeType", o.NodeType.Comment);
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(1), a = r(71), s = r(12), u = function(e2) {
            function t2(t3, r2) {
              var n2 = e2.call(this, r2) || this;
              return n2._target = t3, n2;
            }
            return i(t2, e2), Object.defineProperty(t2.prototype, "target", { get: function() {
              return this._target;
            }, enumerable: true, configurable: true }), t2._create = function(e3, r2, n2) {
              var i2 = new t2(r2, n2);
              return i2._nodeDocument = e3, i2;
            }, t2;
          }(a.CharacterDataImpl);
          t.ProcessingInstructionImpl = u, s.idl_defineConst(u.prototype, "_nodeType", o.NodeType.ProcessingInstruction);
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(7), i = r(0), o = r(3), a = r(2), s = function() {
            function e2(e3, t2) {
              return this._live = true, this._root = e3, this._filter = t2, new Proxy(this, this);
            }
            return Object.defineProperty(e2.prototype, "length", { get: function() {
              for (var e3 = this, t2 = 0, r2 = i.tree_getFirstDescendantNode(this._root, false, false, function(t3) {
                return o.Guard.isElementNode(t3) && e3._filter(t3);
              }); null !== r2; )
                t2++, r2 = i.tree_getNextDescendantNode(this._root, r2, false, false, function(t3) {
                  return o.Guard.isElementNode(t3) && e3._filter(t3);
                });
              return t2;
            }, enumerable: true, configurable: true }), e2.prototype.item = function(e3) {
              for (var t2 = this, r2 = 0, n2 = i.tree_getFirstDescendantNode(this._root, false, false, function(e4) {
                return o.Guard.isElementNode(e4) && t2._filter(e4);
              }); null !== n2; ) {
                if (r2 === e3)
                  return n2;
                r2++, n2 = i.tree_getNextDescendantNode(this._root, n2, false, false, function(e4) {
                  return o.Guard.isElementNode(e4) && t2._filter(e4);
                });
              }
              return null;
            }, e2.prototype.namedItem = function(e3) {
              var t2 = this;
              if ("" === e3)
                return null;
              for (var r2 = i.tree_getFirstDescendantNode(this._root, false, false, function(e4) {
                return o.Guard.isElementNode(e4) && t2._filter(e4);
              }); null != r2; ) {
                if (r2._uniqueIdentifier === e3)
                  return r2;
                if (r2._namespace === n.namespace.HTML)
                  for (var a2 = 0; a2 < r2._attributeList.length; a2++) {
                    var s2 = r2._attributeList[a2];
                    if ("name" === s2._localName && null === s2._namespace && null === s2._namespacePrefix && s2._value === e3)
                      return r2;
                  }
                r2 = i.tree_getNextDescendantNode(this._root, r2, false, false, function(e4) {
                  return o.Guard.isElementNode(e4) && t2._filter(e4);
                });
              }
              return null;
            }, e2.prototype[Symbol.iterator] = function() {
              var e3 = this._root, t2 = this._filter, r2 = i.tree_getFirstDescendantNode(e3, false, false, function(e4) {
                return o.Guard.isElementNode(e4) && t2(e4);
              });
              return { next: function() {
                if (null === r2)
                  return { done: true, value: null };
                var n2 = { done: false, value: r2 };
                return r2 = i.tree_getNextDescendantNode(e3, r2, false, false, function(e4) {
                  return o.Guard.isElementNode(e4) && t2(e4);
                }), n2;
              } };
            }, e2.prototype.get = function(t2, r2, n2) {
              if (!a.isString(r2) || -1 !== e2.reservedNames.indexOf(r2))
                return Reflect.get(t2, r2, n2);
              var i2 = Number(r2);
              return isNaN(i2) ? t2.namedItem(r2) || void 0 : t2.item(i2) || void 0;
            }, e2.prototype.set = function(t2, r2, n2, o2) {
              if (!a.isString(r2) || -1 !== e2.reservedNames.indexOf(r2))
                return Reflect.set(t2, r2, n2, o2);
              var s2 = Number(r2), u = isNaN(s2) ? t2.namedItem(r2) || void 0 : t2.item(s2) || void 0;
              return !(!u || !u._parent) && (i.mutation_replace(u, n2, u._parent), true);
            }, e2._create = function(t2, r2) {
              return void 0 === r2 && (r2 = function() {
                return true;
              }), new e2(t2, r2);
            }, e2.reservedNames = ["_root", "_live", "_filter", "length", "item", "namedItem", "get", "set"], e2;
          }();
          t.HTMLCollectionImpl = s;
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(6), o = r(2), a = r(0), s = function() {
            function e2(e3) {
              return this._live = true, this._filter = null, this._length = 0, this._root = e3, new Proxy(this, this);
            }
            return Object.defineProperty(e2.prototype, "length", { get: function() {
              return this._root._children.size;
            }, enumerable: true, configurable: true }), e2.prototype.item = function(e3) {
              if (e3 < 0 || e3 > this.length - 1)
                return null;
              if (e3 < this.length / 2) {
                for (var t2 = 0, r2 = this._root._firstChild; null !== r2 && t2 !== e3; )
                  r2 = r2._nextSibling, t2++;
                return r2;
              }
              for (t2 = this.length - 1, r2 = this._root._lastChild; null !== r2 && t2 !== e3; )
                r2 = r2._previousSibling, t2--;
              return r2;
            }, e2.prototype.keys = function() {
              var e3;
              return (e3 = {})[Symbol.iterator] = function() {
                var e4 = 0;
                return { next: function() {
                  return e4 === this.length ? { done: true, value: null } : { done: false, value: e4++ };
                }.bind(this) };
              }.bind(this), e3;
            }, e2.prototype.values = function() {
              var e3;
              return (e3 = {})[Symbol.iterator] = function() {
                var e4 = this[Symbol.iterator]();
                return { next: function() {
                  return e4.next();
                } };
              }.bind(this), e3;
            }, e2.prototype.entries = function() {
              var e3;
              return (e3 = {})[Symbol.iterator] = function() {
                var e4 = this[Symbol.iterator](), t2 = 0;
                return { next: function() {
                  var r2 = e4.next();
                  return r2.done ? { done: true, value: null } : { done: false, value: [t2++, r2.value] };
                } };
              }.bind(this), e3;
            }, e2.prototype[Symbol.iterator] = function() {
              return this._root._children[Symbol.iterator]();
            }, e2.prototype.forEach = function(e3, t2) {
              var r2, o2;
              void 0 === t2 && (t2 = i.dom.window);
              var a2 = 0;
              try {
                for (var s2 = n(this._root._children), u = s2.next(); !u.done; u = s2.next()) {
                  var l = u.value;
                  e3.call(t2, l, a2++, this);
                }
              } catch (e4) {
                r2 = { error: e4 };
              } finally {
                try {
                  u && !u.done && (o2 = s2.return) && o2.call(s2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
            }, e2.prototype.get = function(e3, t2, r2) {
              if (!o.isString(t2))
                return Reflect.get(e3, t2, r2);
              var n2 = Number(t2);
              return isNaN(n2) ? Reflect.get(e3, t2, r2) : e3.item(n2) || void 0;
            }, e2.prototype.set = function(e3, t2, r2, n2) {
              if (!o.isString(t2))
                return Reflect.set(e3, t2, r2, n2);
              var i2 = Number(t2);
              if (isNaN(i2))
                return Reflect.set(e3, t2, r2, n2);
              var s2 = e3.item(i2) || void 0;
              return !!s2 && (!!s2._parent && (a.mutation_replace(s2, r2, s2._parent), true));
            }, e2._create = function(t2) {
              return new e2(t2);
            }, e2;
          }();
          t.NodeListImpl = s;
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(6), o = r(2), a = function() {
            function e2(e3) {
              return this._live = false, this._items = [], this._length = 0, this._root = e3, this._items = [], this._filter = function(e4) {
                return true;
              }, new Proxy(this, this);
            }
            return Object.defineProperty(e2.prototype, "length", { get: function() {
              return this._items.length;
            }, enumerable: true, configurable: true }), e2.prototype.item = function(e3) {
              return e3 < 0 || e3 > this.length - 1 ? null : this._items[e3];
            }, e2.prototype.keys = function() {
              var e3;
              return (e3 = {})[Symbol.iterator] = function() {
                var e4 = 0;
                return { next: function() {
                  return e4 === this.length ? { done: true, value: null } : { done: false, value: e4++ };
                }.bind(this) };
              }.bind(this), e3;
            }, e2.prototype.values = function() {
              var e3;
              return (e3 = {})[Symbol.iterator] = function() {
                var e4 = this[Symbol.iterator]();
                return { next: function() {
                  return e4.next();
                } };
              }.bind(this), e3;
            }, e2.prototype.entries = function() {
              var e3;
              return (e3 = {})[Symbol.iterator] = function() {
                var e4 = this[Symbol.iterator](), t2 = 0;
                return { next: function() {
                  var r2 = e4.next();
                  return r2.done ? { done: true, value: null } : { done: false, value: [t2++, r2.value] };
                } };
              }.bind(this), e3;
            }, e2.prototype[Symbol.iterator] = function() {
              var e3 = this._items[Symbol.iterator]();
              return { next: function() {
                return e3.next();
              } };
            }, e2.prototype.forEach = function(e3, t2) {
              var r2, o2;
              void 0 === t2 && (t2 = i.dom.window);
              var a2 = 0;
              try {
                for (var s = n(this._items), u = s.next(); !u.done; u = s.next()) {
                  var l = u.value;
                  e3.call(t2, l, a2++, this);
                }
              } catch (e4) {
                r2 = { error: e4 };
              } finally {
                try {
                  u && !u.done && (o2 = s.return) && o2.call(s);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
            }, e2.prototype.get = function(e3, t2, r2) {
              if (!o.isString(t2))
                return Reflect.get(e3, t2, r2);
              var n2 = Number(t2);
              return isNaN(n2) ? Reflect.get(e3, t2, r2) : e3._items[n2] || void 0;
            }, e2.prototype.set = function(e3, t2, r2, n2) {
              if (!o.isString(t2))
                return Reflect.set(e3, t2, r2, n2);
              var i2 = Number(t2);
              return isNaN(i2) ? Reflect.set(e3, t2, r2, n2) : i2 >= 0 && i2 < e3._items.length && (e3._items[i2] = r2, true);
            }, e2._create = function(t2, r2) {
              var n2 = new e2(t2);
              return n2._items = r2, n2;
            }, e2;
          }();
          t.NodeListStaticImpl = a;
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(9), a = r(0), s = function(e2) {
            function t2(r2) {
              var n2 = e2.call(this) || this;
              return n2._element = r2, Object.setPrototypeOf(n2, t2.prototype), n2;
            }
            return i(t2, e2), t2.prototype._asArray = function() {
              return this;
            }, t2.prototype.item = function(e3) {
              return this[e3] || null;
            }, t2.prototype.getNamedItem = function(e3) {
              return a.element_getAnAttributeByName(e3, this._element);
            }, t2.prototype.getNamedItemNS = function(e3, t3) {
              return a.element_getAnAttributeByNamespaceAndLocalName(e3 || "", t3, this._element);
            }, t2.prototype.setNamedItem = function(e3) {
              return a.element_setAnAttribute(e3, this._element);
            }, t2.prototype.setNamedItemNS = function(e3) {
              return a.element_setAnAttribute(e3, this._element);
            }, t2.prototype.removeNamedItem = function(e3) {
              var t3 = a.element_removeAnAttributeByName(e3, this._element);
              if (null === t3)
                throw new o.NotFoundError();
              return t3;
            }, t2.prototype.removeNamedItemNS = function(e3, t3) {
              var r2 = a.element_removeAnAttributeByNamespaceAndLocalName(e3 || "", t3, this._element);
              if (null === r2)
                throw new o.NotFoundError();
              return r2;
            }, t2._create = function(e3) {
              return new t2(e3);
            }, t2;
          }(Array);
          t.NamedNodeMapImpl = s;
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          }), o = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var a = r(6), s = r(1), u = r(102), l = r(9), c = r(0), h = r(12), p = r(3), f = function(e2) {
            function t2() {
              var t3 = e2.call(this) || this, r2 = a.dom.window._associatedDocument;
              return t3._start = [r2, 0], t3._end = [r2, 0], a.dom.rangeList.add(t3), t3;
            }
            return i(t2, e2), Object.defineProperty(t2.prototype, "commonAncestorContainer", { get: function() {
              for (var e3 = this._start[0]; !c.tree_isAncestorOf(this._end[0], e3, true); ) {
                if (null === e3._parent)
                  throw new Error("Parent node  is null.");
                e3 = e3._parent;
              }
              return e3;
            }, enumerable: true, configurable: true }), t2.prototype.setStart = function(e3, t3) {
              c.range_setTheStart(this, e3, t3);
            }, t2.prototype.setEnd = function(e3, t3) {
              c.range_setTheEnd(this, e3, t3);
            }, t2.prototype.setStartBefore = function(e3) {
              var t3 = e3._parent;
              if (null === t3)
                throw new l.InvalidNodeTypeError();
              c.range_setTheStart(this, t3, c.tree_index(e3));
            }, t2.prototype.setStartAfter = function(e3) {
              var t3 = e3._parent;
              if (null === t3)
                throw new l.InvalidNodeTypeError();
              c.range_setTheStart(this, t3, c.tree_index(e3) + 1);
            }, t2.prototype.setEndBefore = function(e3) {
              var t3 = e3._parent;
              if (null === t3)
                throw new l.InvalidNodeTypeError();
              c.range_setTheEnd(this, t3, c.tree_index(e3));
            }, t2.prototype.setEndAfter = function(e3) {
              var t3 = e3._parent;
              if (null === t3)
                throw new l.InvalidNodeTypeError();
              c.range_setTheEnd(this, t3, c.tree_index(e3) + 1);
            }, t2.prototype.collapse = function(e3) {
              e3 ? this._end = this._start : this._start = this._end;
            }, t2.prototype.selectNode = function(e3) {
              c.range_select(e3, this);
            }, t2.prototype.selectNodeContents = function(e3) {
              if (p.Guard.isDocumentTypeNode(e3))
                throw new l.InvalidNodeTypeError();
              var t3 = c.tree_nodeLength(e3);
              this._start = [e3, 0], this._end = [e3, t3];
            }, t2.prototype.compareBoundaryPoints = function(e3, t3) {
              if (e3 !== s.HowToCompare.StartToStart && e3 !== s.HowToCompare.StartToEnd && e3 !== s.HowToCompare.EndToEnd && e3 !== s.HowToCompare.EndToStart)
                throw new l.NotSupportedError();
              if (c.range_root(this) !== c.range_root(t3))
                throw new l.WrongDocumentError();
              var r2, n2;
              switch (e3) {
                case s.HowToCompare.StartToStart:
                  r2 = this._start, n2 = t3._start;
                  break;
                case s.HowToCompare.StartToEnd:
                  r2 = this._end, n2 = t3._start;
                  break;
                case s.HowToCompare.EndToEnd:
                  r2 = this._end, n2 = t3._end;
                  break;
                case s.HowToCompare.EndToStart:
                  r2 = this._start, n2 = t3._end;
                  break;
                default:
                  throw new l.NotSupportedError();
              }
              var i2 = c.boundaryPoint_position(r2, n2);
              return i2 === s.BoundaryPosition.Before ? -1 : i2 === s.BoundaryPosition.After ? 1 : 0;
            }, t2.prototype.deleteContents = function() {
              var e3, t3, r2, n2;
              if (!c.range_collapsed(this)) {
                var i2 = this._startNode, a2 = this._startOffset, s2 = this._endNode, u2 = this._endOffset;
                if (i2 === s2 && p.Guard.isCharacterDataNode(i2))
                  c.characterData_replaceData(i2, a2, u2 - a2, "");
                else {
                  var l2, h2, f2 = [];
                  try {
                    for (var d = o(c.range_getContainedNodes(this)), m = d.next(); !m.done; m = d.next()) {
                      var y = (b = m.value)._parent;
                      null !== y && c.range_isContained(y, this) || f2.push(b);
                    }
                  } catch (t4) {
                    e3 = { error: t4 };
                  } finally {
                    try {
                      m && !m.done && (t3 = d.return) && t3.call(d);
                    } finally {
                      if (e3)
                        throw e3.error;
                    }
                  }
                  if (c.tree_isAncestorOf(s2, i2, true))
                    l2 = i2, h2 = a2;
                  else {
                    for (var v = i2; null !== v._parent && !c.tree_isAncestorOf(s2, v._parent, true); )
                      v = v._parent;
                    if (null === v._parent)
                      throw new Error("Parent node is null.");
                    l2 = v._parent, h2 = c.tree_index(v) + 1;
                  }
                  p.Guard.isCharacterDataNode(i2) && c.characterData_replaceData(i2, a2, c.tree_nodeLength(i2) - a2, "");
                  try {
                    for (var _ = o(f2), g = _.next(); !g.done; g = _.next()) {
                      var b;
                      (b = g.value)._parent && c.mutation_remove(b, b._parent);
                    }
                  } catch (e4) {
                    r2 = { error: e4 };
                  } finally {
                    try {
                      g && !g.done && (n2 = _.return) && n2.call(_);
                    } finally {
                      if (r2)
                        throw r2.error;
                    }
                  }
                  p.Guard.isCharacterDataNode(s2) && c.characterData_replaceData(s2, 0, u2, ""), this._start = [l2, h2], this._end = [l2, h2];
                }
              }
            }, t2.prototype.extractContents = function() {
              return c.range_extract(this);
            }, t2.prototype.cloneContents = function() {
              return c.range_cloneTheContents(this);
            }, t2.prototype.insertNode = function(e3) {
              return c.range_insert(e3, this);
            }, t2.prototype.surroundContents = function(e3) {
              var t3, r2;
              try {
                for (var n2 = o(c.range_getPartiallyContainedNodes(this)), i2 = n2.next(); !i2.done; i2 = n2.next()) {
                  var a2 = i2.value;
                  if (!p.Guard.isTextNode(a2))
                    throw new l.InvalidStateError();
                }
              } catch (e4) {
                t3 = { error: e4 };
              } finally {
                try {
                  i2 && !i2.done && (r2 = n2.return) && r2.call(n2);
                } finally {
                  if (t3)
                    throw t3.error;
                }
              }
              if (p.Guard.isDocumentNode(e3) || p.Guard.isDocumentTypeNode(e3) || p.Guard.isDocumentFragmentNode(e3))
                throw new l.InvalidNodeTypeError();
              var s2 = c.range_extract(this);
              0 !== e3._children.size && c.mutation_replaceAll(null, e3), c.range_insert(e3, this), c.mutation_append(s2, e3), c.range_select(e3, this);
            }, t2.prototype.cloneRange = function() {
              return c.create_range(this._start, this._end);
            }, t2.prototype.detach = function() {
              a.dom.rangeList.delete(this);
            }, t2.prototype.isPointInRange = function(e3, t3) {
              if (c.tree_rootNode(e3) !== c.range_root(this))
                return false;
              if (p.Guard.isDocumentTypeNode(e3))
                throw new l.InvalidNodeTypeError();
              if (t3 > c.tree_nodeLength(e3))
                throw new l.IndexSizeError();
              var r2 = [e3, t3];
              return c.boundaryPoint_position(r2, this._start) !== s.BoundaryPosition.Before && c.boundaryPoint_position(r2, this._end) !== s.BoundaryPosition.After;
            }, t2.prototype.comparePoint = function(e3, t3) {
              if (c.tree_rootNode(e3) !== c.range_root(this))
                throw new l.WrongDocumentError();
              if (p.Guard.isDocumentTypeNode(e3))
                throw new l.InvalidNodeTypeError();
              if (t3 > c.tree_nodeLength(e3))
                throw new l.IndexSizeError();
              var r2 = [e3, t3];
              return c.boundaryPoint_position(r2, this._start) === s.BoundaryPosition.Before ? -1 : c.boundaryPoint_position(r2, this._end) === s.BoundaryPosition.After ? 1 : 0;
            }, t2.prototype.intersectsNode = function(e3) {
              if (c.tree_rootNode(e3) !== c.range_root(this))
                return false;
              var t3 = e3._parent;
              if (null === t3)
                return true;
              var r2 = c.tree_index(e3);
              return c.boundaryPoint_position([t3, r2], this._end) === s.BoundaryPosition.Before && c.boundaryPoint_position([t3, r2 + 1], this._start) === s.BoundaryPosition.After;
            }, t2.prototype.toString = function() {
              var e3, t3, r2 = "";
              if (this._startNode === this._endNode && p.Guard.isTextNode(this._startNode))
                return this._startNode._data.substring(this._startOffset, this._endOffset);
              p.Guard.isTextNode(this._startNode) && (r2 += this._startNode._data.substring(this._startOffset));
              try {
                for (var n2 = o(c.range_getContainedNodes(this)), i2 = n2.next(); !i2.done; i2 = n2.next()) {
                  var a2 = i2.value;
                  p.Guard.isTextNode(a2) && (r2 += a2._data);
                }
              } catch (t4) {
                e3 = { error: t4 };
              } finally {
                try {
                  i2 && !i2.done && (t3 = n2.return) && t3.call(n2);
                } finally {
                  if (e3)
                    throw e3.error;
                }
              }
              return p.Guard.isTextNode(this._endNode) && (r2 += this._endNode._data.substring(0, this._endOffset)), r2;
            }, t2._create = function(e3, r2) {
              var n2 = new t2();
              return e3 && (n2._start = e3), r2 && (n2._end = r2), n2;
            }, t2.START_TO_START = 0, t2.START_TO_END = 1, t2.END_TO_END = 2, t2.END_TO_START = 3, t2;
          }(u.AbstractRangeImpl);
          t.RangeImpl = f, h.idl_defineConst(f.prototype, "START_TO_START", 0), h.idl_defineConst(f.prototype, "START_TO_END", 1), h.idl_defineConst(f.prototype, "END_TO_END", 2), h.idl_defineConst(f.prototype, "END_TO_START", 3);
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(103), a = r(0), s = function(e2) {
            function t2(t3, r2, n2) {
              var i2 = e2.call(this, t3) || this;
              return i2._iteratorCollection = void 0, i2._reference = r2, i2._pointerBeforeReference = n2, a.nodeIterator_iteratorList().add(i2), i2;
            }
            return i(t2, e2), Object.defineProperty(t2.prototype, "referenceNode", { get: function() {
              return this._reference;
            }, enumerable: true, configurable: true }), Object.defineProperty(t2.prototype, "pointerBeforeReferenceNode", { get: function() {
              return this._pointerBeforeReference;
            }, enumerable: true, configurable: true }), t2.prototype.nextNode = function() {
              return a.nodeIterator_traverse(this, true);
            }, t2.prototype.previousNode = function() {
              return a.nodeIterator_traverse(this, false);
            }, t2.prototype.detach = function() {
              a.nodeIterator_iteratorList().delete(this);
            }, t2._create = function(e3, r2, n2) {
              return new t2(e3, r2, n2);
            }, t2;
          }(o.TraverserImpl);
          t.NodeIteratorImpl = s;
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(1), a = r(103), s = r(0), u = function(e2) {
            function t2(t3, r2) {
              var n2 = e2.call(this, t3) || this;
              return n2._current = r2, n2;
            }
            return i(t2, e2), Object.defineProperty(t2.prototype, "currentNode", { get: function() {
              return this._current;
            }, set: function(e3) {
              this._current = e3;
            }, enumerable: true, configurable: true }), t2.prototype.parentNode = function() {
              for (var e3 = this._current; null !== e3 && e3 !== this._root; )
                if (null !== (e3 = e3._parent) && s.traversal_filter(this, e3) === o.FilterResult.Accept)
                  return this._current = e3, e3;
              return null;
            }, t2.prototype.firstChild = function() {
              return s.treeWalker_traverseChildren(this, true);
            }, t2.prototype.lastChild = function() {
              return s.treeWalker_traverseChildren(this, false);
            }, t2.prototype.nextSibling = function() {
              return s.treeWalker_traverseSiblings(this, true);
            }, t2.prototype.previousNode = function() {
              for (var e3 = this._current; e3 !== this._root; ) {
                for (var t3 = e3._previousSibling; t3; ) {
                  e3 = t3;
                  for (var r2 = s.traversal_filter(this, e3); r2 !== o.FilterResult.Reject && e3._lastChild; )
                    e3 = e3._lastChild, r2 = s.traversal_filter(this, e3);
                  if (r2 === o.FilterResult.Accept)
                    return this._current = e3, e3;
                  t3 = e3._previousSibling;
                }
                if (e3 === this._root || null === e3._parent)
                  return null;
                if (e3 = e3._parent, s.traversal_filter(this, e3) === o.FilterResult.Accept)
                  return this._current = e3, e3;
              }
              return null;
            }, t2.prototype.previousSibling = function() {
              return s.treeWalker_traverseSiblings(this, false);
            }, t2.prototype.nextNode = function() {
              for (var e3 = this._current, t3 = o.FilterResult.Accept; ; ) {
                for (; t3 !== o.FilterResult.Reject && e3._firstChild; )
                  if (e3 = e3._firstChild, (t3 = s.traversal_filter(this, e3)) === o.FilterResult.Accept)
                    return this._current = e3, e3;
                for (var r2 = null, n2 = e3; null !== n2; ) {
                  if (n2 === this._root)
                    return null;
                  if (null !== (r2 = n2._nextSibling)) {
                    e3 = r2;
                    break;
                  }
                  n2 = n2._parent;
                }
                if ((t3 = s.traversal_filter(this, e3)) === o.FilterResult.Accept)
                  return this._current = e3, e3;
              }
            }, t2._create = function(e3, r2) {
              return new t2(e3, r2);
            }, t2;
          }(a.TraverserImpl);
          t.TreeWalkerImpl = u;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(1), i = r(12), o = function() {
            function e2() {
            }
            return e2.prototype.acceptNode = function(e3) {
              return n.FilterResult.Accept;
            }, e2._create = function() {
              return new e2();
            }, e2.FILTER_ACCEPT = 1, e2.FILTER_REJECT = 2, e2.FILTER_SKIP = 3, e2.SHOW_ALL = 4294967295, e2.SHOW_ELEMENT = 1, e2.SHOW_ATTRIBUTE = 2, e2.SHOW_TEXT = 4, e2.SHOW_CDATA_SECTION = 8, e2.SHOW_ENTITY_REFERENCE = 16, e2.SHOW_ENTITY = 32, e2.SHOW_PROCESSING_INSTRUCTION = 64, e2.SHOW_COMMENT = 128, e2.SHOW_DOCUMENT = 256, e2.SHOW_DOCUMENT_TYPE = 512, e2.SHOW_DOCUMENT_FRAGMENT = 1024, e2.SHOW_NOTATION = 2048, e2;
          }();
          t.NodeFilterImpl = o, i.idl_defineConst(o.prototype, "FILTER_ACCEPT", 1), i.idl_defineConst(o.prototype, "FILTER_REJECT", 2), i.idl_defineConst(o.prototype, "FILTER_SKIP", 3), i.idl_defineConst(o.prototype, "SHOW_ALL", 4294967295), i.idl_defineConst(o.prototype, "SHOW_ELEMENT", 1), i.idl_defineConst(o.prototype, "SHOW_ATTRIBUTE", 2), i.idl_defineConst(o.prototype, "SHOW_TEXT", 4), i.idl_defineConst(o.prototype, "SHOW_CDATA_SECTION", 8), i.idl_defineConst(o.prototype, "SHOW_ENTITY_REFERENCE", 16), i.idl_defineConst(o.prototype, "SHOW_ENTITY", 32), i.idl_defineConst(o.prototype, "SHOW_PROCESSING_INSTRUCTION", 64), i.idl_defineConst(o.prototype, "SHOW_COMMENT", 128), i.idl_defineConst(o.prototype, "SHOW_DOCUMENT", 256), i.idl_defineConst(o.prototype, "SHOW_DOCUMENT_TYPE", 512), i.idl_defineConst(o.prototype, "SHOW_DOCUMENT_FRAGMENT", 1024), i.idl_defineConst(o.prototype, "SHOW_NOTATION", 2048);
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = function() {
            function e2(e3, t2, r2, n2, i, o, a, s, u) {
              this._type = e3, this._target = t2, this._addedNodes = r2, this._removedNodes = n2, this._previousSibling = i, this._nextSibling = o, this._attributeName = a, this._attributeNamespace = s, this._oldValue = u;
            }
            return Object.defineProperty(e2.prototype, "type", { get: function() {
              return this._type;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "target", { get: function() {
              return this._target;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "addedNodes", { get: function() {
              return this._addedNodes;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "removedNodes", { get: function() {
              return this._removedNodes;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "previousSibling", { get: function() {
              return this._previousSibling;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "nextSibling", { get: function() {
              return this._nextSibling;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "attributeName", { get: function() {
              return this._attributeName;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "attributeNamespace", { get: function() {
              return this._attributeNamespace;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "oldValue", { get: function() {
              return this._oldValue;
            }, enumerable: true, configurable: true }), e2._create = function(t2, r2, n2, i, o, a, s, u, l) {
              return new e2(t2, r2, n2, i, o, a, s, u, l);
            }, e2;
          }();
          t.MutationRecordImpl = n;
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(6), o = r(9), a = r(7), s = r(0), u = function() {
            function e2(e3, t2) {
              this._element = e3, this._attribute = t2, this._tokenSet = /* @__PURE__ */ new Set();
              var r2 = t2._localName, n2 = s.element_getAnAttributeValue(e3, r2), o2 = this;
              this._element._attributeChangeSteps.push(function(e4, t3, r3, n3, i2) {
                t3 === o2._attribute._localName && null === i2 && (n3 ? o2._tokenSet = s.orderedSet_parse(n3) : o2._tokenSet.clear());
              }), i.dom.features.steps && s.dom_runAttributeChangeSteps(e3, r2, n2, n2, null);
            }
            return Object.defineProperty(e2.prototype, "length", { get: function() {
              return this._tokenSet.size;
            }, enumerable: true, configurable: true }), e2.prototype.item = function(e3) {
              var t2, r2, i2 = 0;
              try {
                for (var o2 = n(this._tokenSet), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                  var s2 = a2.value;
                  if (i2 === e3)
                    return s2;
                  i2++;
                }
              } catch (e4) {
                t2 = { error: e4 };
              } finally {
                try {
                  a2 && !a2.done && (r2 = o2.return) && r2.call(o2);
                } finally {
                  if (t2)
                    throw t2.error;
                }
              }
              return null;
            }, e2.prototype.contains = function(e3) {
              return this._tokenSet.has(e3);
            }, e2.prototype.add = function() {
              for (var e3, t2, r2 = [], i2 = 0; i2 < arguments.length; i2++)
                r2[i2] = arguments[i2];
              try {
                for (var u2 = n(r2), l = u2.next(); !l.done; l = u2.next()) {
                  var c = l.value;
                  if ("" === c)
                    throw new o.SyntaxError("Cannot add an empty token.");
                  if (a.codePoint.ASCIIWhiteSpace.test(c))
                    throw new o.InvalidCharacterError("Token cannot contain whitespace.");
                  this._tokenSet.add(c);
                }
              } catch (t3) {
                e3 = { error: t3 };
              } finally {
                try {
                  l && !l.done && (t2 = u2.return) && t2.call(u2);
                } finally {
                  if (e3)
                    throw e3.error;
                }
              }
              s.tokenList_updateSteps(this);
            }, e2.prototype.remove = function() {
              for (var e3, t2, r2 = [], i2 = 0; i2 < arguments.length; i2++)
                r2[i2] = arguments[i2];
              try {
                for (var u2 = n(r2), l = u2.next(); !l.done; l = u2.next()) {
                  var c = l.value;
                  if ("" === c)
                    throw new o.SyntaxError("Cannot remove an empty token.");
                  if (a.codePoint.ASCIIWhiteSpace.test(c))
                    throw new o.InvalidCharacterError("Token cannot contain whitespace.");
                  this._tokenSet.delete(c);
                }
              } catch (t3) {
                e3 = { error: t3 };
              } finally {
                try {
                  l && !l.done && (t2 = u2.return) && t2.call(u2);
                } finally {
                  if (e3)
                    throw e3.error;
                }
              }
              s.tokenList_updateSteps(this);
            }, e2.prototype.toggle = function(e3, t2) {
              if (void 0 === t2 && (t2 = void 0), "" === e3)
                throw new o.SyntaxError("Cannot toggle an empty token.");
              if (a.codePoint.ASCIIWhiteSpace.test(e3))
                throw new o.InvalidCharacterError("Token cannot contain whitespace.");
              return this._tokenSet.has(e3) ? void 0 !== t2 && false !== t2 || (this._tokenSet.delete(e3), s.tokenList_updateSteps(this), false) : (void 0 === t2 || true === t2) && (this._tokenSet.add(e3), s.tokenList_updateSteps(this), true);
            }, e2.prototype.replace = function(e3, t2) {
              if ("" === e3 || "" === t2)
                throw new o.SyntaxError("Cannot replace an empty token.");
              if (a.codePoint.ASCIIWhiteSpace.test(e3) || a.codePoint.ASCIIWhiteSpace.test(t2))
                throw new o.InvalidCharacterError("Token cannot contain whitespace.");
              return !!this._tokenSet.has(e3) && (a.set.replace(this._tokenSet, e3, t2), s.tokenList_updateSteps(this), true);
            }, e2.prototype.supports = function(e3) {
              return s.tokenList_validationSteps(this, e3);
            }, Object.defineProperty(e2.prototype, "value", { get: function() {
              return s.tokenList_serializeSteps(this);
            }, set: function(e3) {
              s.element_setAnAttributeValue(this._element, this._attribute._localName, e3);
            }, enumerable: true, configurable: true }), e2.prototype[Symbol.iterator] = function() {
              var e3 = this._tokenSet[Symbol.iterator]();
              return { next: function() {
                return e3.next();
              } };
            }, e2._create = function(t2, r2) {
              return new e2(t2, r2);
            }, e2;
          }();
          t.DOMTokenListImpl = u;
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(104), a = r(0), s = function(e2) {
            function t2(t3, r2) {
              var n2 = e2.call(this, t3, r2) || this;
              return n2._detail = null, n2._detail = r2 && r2.detail || null, n2;
            }
            return i(t2, e2), Object.defineProperty(t2.prototype, "detail", { get: function() {
              return this._detail;
            }, enumerable: true, configurable: true }), t2.prototype.initCustomEvent = function(e3, t3, r2, n2) {
              void 0 === t3 && (t3 = false), void 0 === r2 && (r2 = false), void 0 === n2 && (n2 = null), this._dispatchFlag || (a.event_initialize(this, e3, t3, r2), this._detail = n2);
            }, t2;
          }(o.EventImpl);
          t.CustomEventImpl = s;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(6), i = r(1), o = r(105), a = r(17);
          t.nodeIterator_traverse = function(e2, t2) {
            for (var r2 = e2._reference, n2 = e2._pointerBeforeReference; ; ) {
              if (t2)
                if (n2)
                  n2 = false;
                else {
                  var s = a.tree_getFollowingNode(e2._root, r2);
                  if (!s)
                    return null;
                  r2 = s;
                }
              else if (n2) {
                var u = a.tree_getPrecedingNode(e2.root, r2);
                if (!u)
                  return null;
                r2 = u;
              } else
                n2 = true;
              if (o.traversal_filter(e2, r2) === i.FilterResult.Accept)
                break;
            }
            return e2._reference = r2, e2._pointerBeforeReference = n2, r2;
          }, t.nodeIterator_iteratorList = function() {
            return n.dom.window._iteratorList;
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(9), i = r(7), o = r(174);
          function a(e2) {
            if (!o.xml_isName(e2))
              throw new n.InvalidCharacterError("Invalid XML name: " + e2);
            if (!o.xml_isQName(e2))
              throw new n.InvalidCharacterError("Invalid XML qualified name: " + e2 + ".");
          }
          t.namespace_validate = a, t.namespace_validateAndExtract = function(e2, t2) {
            e2 || (e2 = null), a(t2);
            var r2 = t2.split(":"), o2 = 2 === r2.length ? r2[0] : null, s = 2 === r2.length ? r2[1] : t2;
            if (o2 && null === e2)
              throw new n.NamespaceError("Qualified name includes a prefix but the namespace is null.");
            if ("xml" === o2 && e2 !== i.namespace.XML)
              throw new n.NamespaceError('Qualified name includes the "xml" prefix but the namespace is not the XML namespace.');
            if (e2 !== i.namespace.XMLNS && ("xmlns" === o2 || "xmlns" === t2))
              throw new n.NamespaceError('Qualified name includes the "xmlns" prefix but the namespace is not the XMLNS namespace.');
            if (e2 === i.namespace.XMLNS && "xmlns" !== o2 && "xmlns" !== t2)
              throw new n.NamespaceError('Qualified name does not include the "xmlns" prefix but the namespace is the XMLNS namespace.');
            return [e2, o2, s];
          }, t.namespace_extractQName = function(e2) {
            a(e2);
            var t2 = e2.split(":");
            return [2 === t2.length ? t2[0] : null, 2 === t2.length ? t2[1] : e2];
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true }), t.xml_isName = function(e2) {
            for (var t2 = 0; t2 < e2.length; t2++) {
              var r2 = e2.charCodeAt(t2);
              if (!(r2 >= 97 && r2 <= 122 || r2 >= 65 && r2 <= 90 || 58 === r2 || 95 === r2 || r2 >= 192 && r2 <= 214 || r2 >= 216 && r2 <= 246 || r2 >= 248 && r2 <= 767 || r2 >= 880 && r2 <= 893 || r2 >= 895 && r2 <= 8191 || r2 >= 8204 && r2 <= 8205 || r2 >= 8304 && r2 <= 8591 || r2 >= 11264 && r2 <= 12271 || r2 >= 12289 && r2 <= 55295 || r2 >= 63744 && r2 <= 64975 || r2 >= 65008 && r2 <= 65533) && (0 === t2 || !(45 === r2 || 46 === r2 || r2 >= 48 && r2 <= 57 || 183 === r2 || r2 >= 768 && r2 <= 879 || r2 >= 8255 && r2 <= 8256))) {
                if (r2 >= 55296 && r2 <= 56319 && t2 < e2.length - 1) {
                  var n = e2.charCodeAt(t2 + 1);
                  if (n >= 56320 && n <= 57343 && (t2++, (r2 = 1024 * (r2 - 55296) + n - 56320 + 65536) >= 65536 && r2 <= 983039))
                    continue;
                }
                return false;
              }
            }
            return true;
          }, t.xml_isQName = function(e2) {
            for (var t2 = false, r2 = 0; r2 < e2.length; r2++) {
              var n = e2.charCodeAt(r2);
              if (!(n >= 97 && n <= 122 || n >= 65 && n <= 90 || 95 === n || n >= 192 && n <= 214 || n >= 216 && n <= 246 || n >= 248 && n <= 767 || n >= 880 && n <= 893 || n >= 895 && n <= 8191 || n >= 8204 && n <= 8205 || n >= 8304 && n <= 8591 || n >= 11264 && n <= 12271 || n >= 12289 && n <= 55295 || n >= 63744 && n <= 64975 || n >= 65008 && n <= 65533) && (0 === r2 || !(45 === n || 46 === n || n >= 48 && n <= 57 || 183 === n || n >= 768 && n <= 879 || n >= 8255 && n <= 8256))) {
                if (0 === r2 || 58 !== n) {
                  if (n >= 55296 && n <= 56319 && r2 < e2.length - 1) {
                    var i = e2.charCodeAt(r2 + 1);
                    if (i >= 56320 && i <= 57343 && (r2++, (n = 1024 * (n - 55296) + i - 56320 + 65536) >= 65536 && n <= 983039))
                      continue;
                  }
                  return false;
                }
                if (t2)
                  return false;
                if (r2 === e2.length - 1)
                  return false;
                t2 = true;
              }
            }
            return true;
          }, t.xml_isLegalChar = function(e2) {
            for (var t2 = 0; t2 < e2.length; t2++) {
              var r2 = e2.charCodeAt(t2);
              if (!(9 === r2 || 10 === r2 || 13 === r2 || r2 >= 32 && r2 <= 55295 || r2 >= 57344 && r2 <= 65533)) {
                if (r2 >= 55296 && r2 <= 56319 && t2 < e2.length - 1) {
                  var n = e2.charCodeAt(t2 + 1);
                  if (n >= 56320 && n <= 57343 && (t2++, (r2 = 1024 * (r2 - 55296) + n - 56320 + 65536) >= 65536 && r2 <= 1114111))
                    continue;
                }
                return false;
              }
            }
            return true;
          }, t.xml_isPubidChar = function(e2) {
            for (var t2 = 0; t2 < e2.length; t2++) {
              var r2 = e2.charCodeAt(t2);
              if (!(r2 >= 97 && r2 <= 122 || r2 >= 65 && r2 <= 90 || r2 >= 39 && r2 <= 59 || 32 === r2 || 13 === r2 || 10 === r2 || r2 >= 35 && r2 <= 37 || 33 === r2 || 61 === r2 || 63 === r2 || 64 === r2 || 95 === r2))
                return false;
            }
            return true;
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(1), i = r(17);
          t.boundaryPoint_position = function e2(t2, r2) {
            var o = t2[0], a = t2[1], s = r2[0], u = r2[1];
            if (console.assert(i.tree_rootNode(o) === i.tree_rootNode(s), "Boundary points must share the same root node."), o === s)
              return a === u ? n.BoundaryPosition.Equal : a < u ? n.BoundaryPosition.Before : n.BoundaryPosition.After;
            if (i.tree_isFollowing(s, o)) {
              var l = e2([s, u], [o, a]);
              if (l === n.BoundaryPosition.Before)
                return n.BoundaryPosition.After;
              if (l === n.BoundaryPosition.After)
                return n.BoundaryPosition.Before;
            }
            if (i.tree_isAncestorOf(s, o)) {
              for (var c = s; !i.tree_isChildOf(o, c); )
                null !== c._parent && (c = c._parent);
              if (i.tree_index(c) < a)
                return n.BoundaryPosition.After;
            }
            return n.BoundaryPosition.Before;
          };
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(6), o = r(3), a = r(7), s = r(29), u = r(108), l = r(30), c = r(37), h = r(52);
          t.node_stringReplaceAll = function(e2, t2) {
            var r2 = null;
            "" !== e2 && (r2 = s.create_text(t2._nodeDocument, e2)), c.mutation_replaceAll(r2, t2);
          }, t.node_clone = function e2(t2, r2, a2) {
            var u2, p, f, d, m;
            if (void 0 === r2 && (r2 = null), void 0 === a2 && (a2 = false), null === r2 && (r2 = t2._nodeDocument), o.Guard.isElementNode(t2)) {
              m = h.element_createAnElement(r2, t2._localName, t2._namespace, t2._namespacePrefix, t2._is, false);
              try {
                for (var y = n(t2._attributeList), v = y.next(); !v.done; v = y.next()) {
                  var _ = e2(v.value, r2);
                  h.element_append(_, m);
                }
              } catch (e3) {
                u2 = { error: e3 };
              } finally {
                try {
                  v && !v.done && (p = y.return) && p.call(y);
                } finally {
                  if (u2)
                    throw u2.error;
                }
              }
            } else if (o.Guard.isDocumentNode(t2)) {
              var g = s.create_document();
              g._encoding = t2._encoding, g._contentType = t2._contentType, g._URL = t2._URL, g._origin = t2._origin, g._type = t2._type, g._mode = t2._mode, m = g;
            } else if (o.Guard.isDocumentTypeNode(t2)) {
              m = s.create_documentType(r2, t2._name, t2._publicId, t2._systemId);
            } else if (o.Guard.isAttrNode(t2)) {
              var b = s.create_attr(r2, t2.localName);
              b._namespace = t2._namespace, b._namespacePrefix = t2._namespacePrefix, b._value = t2._value, m = b;
            } else
              m = o.Guard.isExclusiveTextNode(t2) ? s.create_text(r2, t2._data) : o.Guard.isCDATASectionNode(t2) ? s.create_cdataSection(r2, t2._data) : o.Guard.isCommentNode(t2) ? s.create_comment(r2, t2._data) : o.Guard.isProcessingInstructionNode(t2) ? s.create_processingInstruction(r2, t2._target, t2._data) : o.Guard.isDocumentFragmentNode(t2) ? s.create_documentFragment(r2) : Object.create(t2);
            if (o.Guard.isDocumentNode(m) ? (m._nodeDocument = m, r2 = m) : m._nodeDocument = r2, i.dom.features.steps && l.dom_runCloningSteps(m, t2, r2, a2), a2)
              try {
                for (var x = n(t2._children), w = x.next(); !w.done; w = x.next()) {
                  var E = e2(w.value, r2, true);
                  c.mutation_append(E, m);
                }
              } catch (e3) {
                f = { error: e3 };
              } finally {
                try {
                  w && !w.done && (d = x.return) && d.call(x);
                } finally {
                  if (f)
                    throw f.error;
                }
              }
            return m;
          }, t.node_equals = function e2(t2, r2) {
            var i2, a2, s2, u2;
            if (t2._nodeType !== r2._nodeType)
              return false;
            if (o.Guard.isDocumentTypeNode(t2) && o.Guard.isDocumentTypeNode(r2)) {
              if (t2._name !== r2._name || t2._publicId !== r2._publicId || t2._systemId !== r2._systemId)
                return false;
            } else if (o.Guard.isElementNode(t2) && o.Guard.isElementNode(r2)) {
              if (t2._namespace !== r2._namespace || t2._namespacePrefix !== r2._namespacePrefix || t2._localName !== r2._localName || t2._attributeList.length !== r2._attributeList.length)
                return false;
            } else if (o.Guard.isAttrNode(t2) && o.Guard.isAttrNode(r2)) {
              if (t2._namespace !== r2._namespace || t2._localName !== r2._localName || t2._value !== r2._value)
                return false;
            } else if (o.Guard.isProcessingInstructionNode(t2) && o.Guard.isProcessingInstructionNode(r2)) {
              if (t2._target !== r2._target || t2._data !== r2._data)
                return false;
            } else if (o.Guard.isCharacterDataNode(t2) && o.Guard.isCharacterDataNode(r2) && t2._data !== r2._data)
              return false;
            if (o.Guard.isElementNode(t2) && o.Guard.isElementNode(r2)) {
              var l2 = {};
              try {
                for (var c2 = n(t2._attributeList), h2 = c2.next(); !h2.done; h2 = c2.next()) {
                  l2[(d = h2.value)._localName] = d;
                }
              } catch (e3) {
                i2 = { error: e3 };
              } finally {
                try {
                  h2 && !h2.done && (a2 = c2.return) && a2.call(c2);
                } finally {
                  if (i2)
                    throw i2.error;
                }
              }
              try {
                for (var p = n(r2._attributeList), f = p.next(); !f.done; f = p.next()) {
                  var d, m = f.value;
                  if (!(d = l2[m._localName]))
                    return false;
                  if (!e2(d, m))
                    return false;
                }
              } catch (e3) {
                s2 = { error: e3 };
              } finally {
                try {
                  f && !f.done && (u2 = p.return) && u2.call(p);
                } finally {
                  if (s2)
                    throw s2.error;
                }
              }
            }
            if (t2._children.size !== r2._children.size)
              return false;
            for (var y = t2._children[Symbol.iterator](), v = r2._children[Symbol.iterator](), _ = y.next(), g = v.next(); !_.done && !g.done; ) {
              if (!e2(_.value, g.value))
                return false;
              _ = y.next(), g = v.next();
            }
            return true;
          }, t.node_listOfElementsWithQualifiedName = function(e2, t2) {
            return "*" === e2 ? s.create_htmlCollection(t2) : "html" === t2._nodeDocument._type ? s.create_htmlCollection(t2, function(t3) {
              return t3._namespace === a.namespace.HTML && t3._qualifiedName === e2.toLowerCase() || t3._namespace !== a.namespace.HTML && t3._qualifiedName === e2;
            }) : s.create_htmlCollection(t2, function(t3) {
              return t3._qualifiedName === e2;
            });
          }, t.node_listOfElementsWithNamespace = function(e2, t2, r2) {
            return "" === e2 && (e2 = null), "*" === e2 && "*" === t2 ? s.create_htmlCollection(r2) : "*" === e2 ? s.create_htmlCollection(r2, function(e3) {
              return e3._localName === t2;
            }) : "*" === t2 ? s.create_htmlCollection(r2, function(t3) {
              return t3._namespace === e2;
            }) : s.create_htmlCollection(r2, function(r3) {
              return r3._localName === t2 && r3._namespace === e2;
            });
          }, t.node_listOfElementsWithClassNames = function(e2, t2) {
            var r2 = u.orderedSet_parse(e2);
            if (0 === r2.size)
              return s.create_htmlCollection(t2, function() {
                return false;
              });
            var n2 = "quirks" !== t2._nodeDocument._mode;
            return s.create_htmlCollection(t2, function(e3) {
              var t3 = e3.classList;
              return u.orderedSet_contains(t3._tokenSet, r2, n2);
            });
          }, t.node_locateANamespacePrefix = function e2(t2, r2) {
            if (t2._namespace === r2 && null !== t2._namespacePrefix)
              return t2._namespacePrefix;
            for (var n2 = 0; n2 < t2._attributeList.length; n2++) {
              var i2 = t2._attributeList[n2];
              if ("xmlns" === i2._namespacePrefix && i2._value === r2)
                return i2._localName;
            }
            return t2._parent && o.Guard.isElementNode(t2._parent) ? e2(t2._parent, r2) : null;
          }, t.node_locateANamespace = function e2(t2, r2) {
            if (o.Guard.isElementNode(t2)) {
              if (null !== t2._namespace && t2._namespacePrefix === r2)
                return t2._namespace;
              for (var n2 = 0; n2 < t2._attributeList.length; n2++) {
                var i2 = t2._attributeList[n2];
                if (i2._namespace === a.namespace.XMLNS && "xmlns" === i2._namespacePrefix && i2._localName === r2)
                  return i2._value || null;
                if (null === r2 && i2._namespace === a.namespace.XMLNS && null === i2._namespacePrefix && "xmlns" === i2._localName)
                  return i2._value || null;
              }
              return null === t2.parentElement ? null : e2(t2.parentElement, r2);
            }
            return o.Guard.isDocumentNode(t2) ? null === t2.documentElement ? null : e2(t2.documentElement, r2) : o.Guard.isDocumentTypeNode(t2) || o.Guard.isDocumentFragmentNode(t2) ? null : o.Guard.isAttrNode(t2) ? null === t2._element ? null : e2(t2._element, r2) : t2._parent && o.Guard.isElementNode(t2._parent) ? e2(t2._parent, r2) : null;
          };
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(6), o = r(3), a = r(9), s = r(29), u = r(17), l = r(107), c = r(37);
          t.text_contiguousTextNodes = function(e2, t2) {
            var r2;
            return void 0 === t2 && (t2 = false), (r2 = {})[Symbol.iterator] = function() {
              for (var r3 = e2; r3 && o.Guard.isTextNode(r3._previousSibling); )
                r3 = r3._previousSibling;
              return { next: function() {
                if (r3 && !t2 && r3 === e2 && (r3 = o.Guard.isTextNode(r3._nextSibling) ? r3._nextSibling : null), null === r3)
                  return { done: true, value: null };
                var n2 = { done: false, value: r3 };
                return r3 = o.Guard.isTextNode(r3._nextSibling) ? r3._nextSibling : null, n2;
              } };
            }, r2;
          }, t.text_contiguousExclusiveTextNodes = function(e2, t2) {
            var r2;
            return void 0 === t2 && (t2 = false), (r2 = {})[Symbol.iterator] = function() {
              for (var r3 = e2; r3 && o.Guard.isExclusiveTextNode(r3._previousSibling); )
                r3 = r3._previousSibling;
              return { next: function() {
                if (r3 && !t2 && r3 === e2 && (r3 = o.Guard.isExclusiveTextNode(r3._nextSibling) ? r3._nextSibling : null), null === r3)
                  return { done: true, value: null };
                var n2 = { done: false, value: r3 };
                return r3 = o.Guard.isExclusiveTextNode(r3._nextSibling) ? r3._nextSibling : null, n2;
              } };
            }, r2;
          }, t.text_descendantTextContent = function(e2) {
            for (var t2 = "", r2 = u.tree_getFirstDescendantNode(e2, false, false, function(e3) {
              return o.Guard.isTextNode(e3);
            }); null !== r2; )
              t2 += r2._data, r2 = u.tree_getNextDescendantNode(e2, r2, false, false, function(e3) {
                return o.Guard.isTextNode(e3);
              });
            return t2;
          }, t.text_split = function(e2, t2) {
            var r2, o2, h = e2._data.length;
            if (t2 > h)
              throw new a.IndexSizeError();
            var p = h - t2, f = l.characterData_substringData(e2, t2, p), d = s.create_text(e2._nodeDocument, f), m = e2._parent;
            if (null !== m) {
              c.mutation_insert(d, m, e2._nextSibling);
              try {
                for (var y = n(i.dom.rangeList), v = y.next(); !v.done; v = y.next()) {
                  var _ = v.value;
                  _._start[0] === e2 && _._start[1] > t2 && (_._start[0] = d, _._start[1] -= t2), _._end[0] === e2 && _._end[1] > t2 && (_._end[0] = d, _._end[1] -= t2);
                  var g = u.tree_index(e2);
                  _._start[0] === m && _._start[1] === g + 1 && _._start[1]++, _._end[0] === m && _._end[1] === g + 1 && _._end[1]++;
                }
              } catch (e3) {
                r2 = { error: e3 };
              } finally {
                try {
                  v && !v.done && (o2 = y.return) && o2.call(y);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
            }
            return l.characterData_replaceData(e2, t2, p, ""), d;
          };
        }, function(e, t, r) {
          "use strict";
          var n = r(4), i = r(41), o = r(24), a = r(48), s = [].join, u = i != Object, l = a("join", ",");
          n({ target: "Array", proto: true, forced: u || !l }, { join: function(e2) {
            return s.call(o(this), void 0 === e2 ? "," : e2);
          } });
        }, function(e, t, r) {
          var n = r(4), i = r(83), o = String.fromCharCode, a = String.fromCodePoint;
          n({ target: "String", stat: true, forced: !!a && 1 != a.length }, { fromCodePoint: function(e2) {
            for (var t2, r2 = [], n2 = arguments.length, a2 = 0; n2 > a2; ) {
              if (t2 = +arguments[a2++], i(t2, 1114111) !== t2)
                throw RangeError(t2 + " is not a valid code point");
              r2.push(t2 < 65536 ? o(t2) : o(55296 + ((t2 -= 65536) >> 10), t2 % 1024 + 56320));
            }
            return r2.join("");
          } });
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a;
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(111), o = function() {
            function e2(e3, t2) {
              this._options = { skipWhitespaceOnlyText: false }, this.err = { line: -1, col: -1, index: -1, str: "" }, this._str = e3, this._index = 0, this._length = e3.length, t2 && (this._options.skipWhitespaceOnlyText = t2.skipWhitespaceOnlyText || false);
            }
            return e2.prototype.nextToken = function() {
              if (this.eof())
                return { type: i.TokenType.EOF };
              var t2 = this.skipIfStartsWith("<") ? this.openBracket() : this.text();
              return this._options.skipWhitespaceOnlyText && t2.type === i.TokenType.Text && e2.isWhiteSpaceToken(t2) && (t2 = this.nextToken()), t2;
            }, e2.prototype.openBracket = function() {
              return this.skipIfStartsWith("?") ? this.skipIfStartsWith("xml") ? e2.isSpace(this._str[this._index]) ? this.declaration() : (this.seek(-3), this.pi()) : this.pi() : this.skipIfStartsWith("!") ? this.skipIfStartsWith("--") ? this.comment() : this.skipIfStartsWith("[CDATA[") ? this.cdata() : this.skipIfStartsWith("DOCTYPE") ? this.doctype() : void this.throwError("Invalid '!' in opening tag.") : this.skipIfStartsWith("/") ? this.closeTag() : this.openTag();
            }, e2.prototype.declaration = function() {
              for (var e3 = "", t2 = "", r2 = ""; !this.eof(); ) {
                if (this.skipSpace(), this.skipIfStartsWith("?>"))
                  return { type: i.TokenType.Declaration, version: e3, encoding: t2, standalone: r2 };
                var o2 = n(this.attribute(), 2), a = o2[0], s = o2[1];
                "version" === a ? e3 = s : "encoding" === a ? t2 = s : "standalone" === a ? r2 = s : this.throwError("Invalid attribute name: " + a);
              }
              this.throwError("Missing declaration end symbol `?>`");
            }, e2.prototype.doctype = function() {
              var e3 = "", t2 = "";
              this.skipSpace();
              var r2 = this.takeUntil2("[", ">", true);
              return this.skipSpace(), this.skipIfStartsWith("PUBLIC") ? (e3 = this.quotedString(), t2 = this.quotedString()) : this.skipIfStartsWith("SYSTEM") && (t2 = this.quotedString()), this.skipSpace(), this.skipIfStartsWith("[") && (this.skipUntil("]"), this.skipIfStartsWith("]") || this.throwError("Missing end bracket of DTD internal subset")), this.skipSpace(), this.skipIfStartsWith(">") || this.throwError("Missing doctype end symbol `>`"), { type: i.TokenType.DocType, name: r2, pubId: e3, sysId: t2 };
            }, e2.prototype.pi = function() {
              var e3 = this.takeUntilStartsWith("?>", true);
              if (this.eof() && this.throwError("Missing processing instruction end symbol `?>`"), this.skipSpace(), this.skipIfStartsWith("?>"))
                return { type: i.TokenType.PI, target: e3, data: "" };
              var t2 = this.takeUntilStartsWith("?>");
              return this.eof() && this.throwError("Missing processing instruction end symbol `?>`"), this.seek(2), { type: i.TokenType.PI, target: e3, data: t2 };
            }, e2.prototype.text = function() {
              var e3 = this.takeUntil("<");
              return { type: i.TokenType.Text, data: e3 };
            }, e2.prototype.comment = function() {
              var e3 = this.takeUntilStartsWith("-->");
              return this.eof() && this.throwError("Missing comment end symbol `-->`"), this.seek(3), { type: i.TokenType.Comment, data: e3 };
            }, e2.prototype.cdata = function() {
              var e3 = this.takeUntilStartsWith("]]>");
              return this.eof() && this.throwError("Missing CDATA end symbol `]>`"), this.seek(3), { type: i.TokenType.CDATA, data: e3 };
            }, e2.prototype.openTag = function() {
              this.skipSpace();
              var e3 = this.takeUntil2(">", "/", true);
              if (this.skipSpace(), this.skipIfStartsWith(">"))
                return { type: i.TokenType.Element, name: e3, attributes: [], selfClosing: false };
              if (this.skipIfStartsWith("/>"))
                return { type: i.TokenType.Element, name: e3, attributes: [], selfClosing: true };
              for (var t2 = []; !this.eof(); ) {
                if (this.skipSpace(), this.skipIfStartsWith(">"))
                  return { type: i.TokenType.Element, name: e3, attributes: t2, selfClosing: false };
                if (this.skipIfStartsWith("/>"))
                  return { type: i.TokenType.Element, name: e3, attributes: t2, selfClosing: true };
                var r2 = this.attribute();
                t2.push(r2);
              }
              this.throwError("Missing opening element tag end symbol `>`");
            }, e2.prototype.closeTag = function() {
              this.skipSpace();
              var e3 = this.takeUntil(">", true);
              return this.skipSpace(), this.skipIfStartsWith(">") || this.throwError("Missing closing element tag end symbol `>`"), { type: i.TokenType.ClosingTag, name: e3 };
            }, e2.prototype.attribute = function() {
              this.skipSpace();
              var e3 = this.takeUntil("=", true);
              return this.skipSpace(), this.skipIfStartsWith("=") || this.throwError("Missing equals sign before attribute value"), [e3, this.quotedString()];
            }, e2.prototype.quotedString = function() {
              this.skipSpace();
              var t2 = this.take(1);
              e2.isQuote(t2) || this.throwError("Missing start quote character before quoted value");
              var r2 = this.takeUntil(t2);
              return this.skipIfStartsWith(t2) || this.throwError("Missing end quote character after quoted value"), r2;
            }, e2.prototype.eof = function() {
              return this._index >= this._length;
            }, e2.prototype.skipIfStartsWith = function(e3) {
              var t2 = e3.length;
              if (1 === t2)
                return this._str[this._index] === e3 && (this._index++, true);
              for (var r2 = 0; r2 < t2; r2++)
                if (this._str[this._index + r2] !== e3[r2])
                  return false;
              return this._index += t2, true;
            }, e2.prototype.seek = function(e3) {
              this._index += e3, this._index < 0 && (this._index = 0), this._index > this._length && (this._index = this._length);
            }, e2.prototype.skipSpace = function() {
              for (; !this.eof() && e2.isSpace(this._str[this._index]); )
                this._index++;
            }, e2.prototype.take = function(e3) {
              if (1 === e3)
                return this._str[this._index++];
              var t2 = this._index;
              return this.seek(e3), this._str.slice(t2, this._index);
            }, e2.prototype.takeUntil = function(t2, r2) {
              void 0 === r2 && (r2 = false);
              for (var n2 = this._index; this._index < this._length; ) {
                var i2 = this._str[this._index];
                if (i2 === t2 || r2 && e2.isSpace(i2))
                  break;
                this._index++;
              }
              return this._str.slice(n2, this._index);
            }, e2.prototype.takeUntil2 = function(t2, r2, n2) {
              void 0 === n2 && (n2 = false);
              for (var i2 = this._index; this._index < this._length; ) {
                var o2 = this._str[this._index];
                if (o2 === t2 || o2 === r2 || n2 && e2.isSpace(o2))
                  break;
                this._index++;
              }
              return this._str.slice(i2, this._index);
            }, e2.prototype.takeUntilStartsWith = function(t2, r2) {
              void 0 === r2 && (r2 = false);
              for (var n2 = this._index, i2 = t2.length; this._index < this._length; ) {
                for (var o2 = true, a = 0; a < i2; a++) {
                  var s = this._str[this._index + a], u = t2[a];
                  if (r2 && e2.isSpace(s))
                    return this._str.slice(n2, this._index);
                  if (s !== u) {
                    this._index++, o2 = false;
                    break;
                  }
                }
                if (o2)
                  return this._str.slice(n2, this._index);
              }
              return this._index = this._length, this._str.slice(n2);
            }, e2.prototype.skipUntil = function(e3) {
              for (; this._index < this._length; ) {
                if (this._str[this._index] === e3)
                  break;
                this._index++;
              }
            }, e2.isWhiteSpaceToken = function(e3) {
              for (var t2 = e3.data, r2 = 0; r2 < t2.length; r2++) {
                var n2 = t2[r2];
                if (" " !== n2 && "\n" !== n2 && "\r" !== n2 && "	" !== n2 && "\f" !== n2)
                  return false;
              }
              return true;
            }, e2.isSpace = function(e3) {
              return " " === e3 || "\n" === e3 || "\r" === e3 || "	" === e3;
            }, e2.isQuote = function(e3) {
              return '"' === e3 || "'" === e3;
            }, e2.prototype.throwError = function(e3) {
              for (var t2 = /\r\n|\r|\n/g, r2 = null, n2 = 0, i2 = 0, o2 = this._str.length; null !== (r2 = t2.exec(this._str)) && null !== r2; )
                if (n2++, r2.index < this._index && (i2 = t2.lastIndex), r2.index > this._index) {
                  o2 = r2.index;
                  break;
                }
              throw this.err = { line: n2, col: this._index - i2, index: this._index, str: this._str.substring(i2, o2) }, new Error(e3 + "\nIndex: " + this.err.index + "\nLn: " + this.err.line + ", Col: " + this.err.col + "\nInput: " + this.err.str);
            }, e2.prototype[Symbol.iterator] = function() {
              return this._index = 0, { next: function() {
                var e3 = this.nextToken();
                return e3.type === i.TokenType.EOF ? { done: true, value: null } : { done: false, value: e3 };
              }.bind(this) };
            }, e2;
          }();
          t.XMLStringLexer = o;
        }, function(e, t, r) {
          "use strict";
          var n = r(39);
          e.exports = new n({ include: [r(182)] });
        }, function(e, t, r) {
          "use strict";
          var n = r(39);
          e.exports = new n({ include: [r(113)], implicit: [r(290), r(291), r(292), r(293)] });
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(91), i = r(2), o = r(3), a = r(77), s = r(109);
          function u(e2, t2) {
            var r2 = c(void 0 === e2 || l(e2) ? e2 : n.DefaultBuilderOptions), i2 = l(e2) ? t2 : e2, o2 = s.createDocument();
            h(o2, r2);
            var u2 = new a.XMLBuilderImpl(o2);
            return void 0 !== i2 && u2.ele(i2), u2;
          }
          function l(e2) {
            if (!i.isPlainObject(e2))
              return false;
            for (var t2 in e2)
              if (e2.hasOwnProperty(t2) && !n.XMLBuilderOptionKeys.has(t2))
                return false;
            return true;
          }
          function c(e2) {
            void 0 === e2 && (e2 = {});
            var t2 = i.applyDefaults(e2, n.DefaultBuilderOptions);
            if (0 === t2.convert.att.length || 0 === t2.convert.ins.length || 0 === t2.convert.text.length || 0 === t2.convert.cdata.length || 0 === t2.convert.comment.length)
              throw new Error("JS object converter strings cannot be zero length.");
            return t2;
          }
          function h(e2, t2, r2) {
            var n2 = e2;
            n2._xmlBuilderOptions = t2, n2._isFragment = r2;
          }
          t.builder = function(e2, t2) {
            var r2 = c(l(e2) ? e2 : n.DefaultBuilderOptions), s2 = o.Guard.isNode(e2) || i.isArray(e2) ? e2 : t2;
            if (void 0 === s2)
              throw new Error("Invalid arguments.");
            if (i.isArray(s2)) {
              for (var u2 = [], h2 = 0; h2 < s2.length; h2++) {
                var p = new a.XMLBuilderImpl(s2[h2]);
                p.set(r2), u2.push(p);
              }
              return u2;
            }
            var f = new a.XMLBuilderImpl(s2);
            return f.set(r2), f;
          }, t.create = u, t.fragment = function(e2, t2) {
            var r2 = c(void 0 === e2 || l(e2) ? e2 : n.DefaultBuilderOptions), i2 = l(e2) ? t2 : e2, o2 = s.createDocument();
            h(o2, r2, true);
            var u2 = new a.XMLBuilderImpl(o2.createDocumentFragment());
            return void 0 !== i2 && u2.ele(i2), u2;
          }, t.convert = function(e2, t2, r2) {
            var i2, o2, a2;
            return l(e2) && void 0 !== t2 ? (i2 = e2, o2 = t2, a2 = r2) : (i2 = n.DefaultBuilderOptions, o2 = e2, a2 = t2 || void 0), u(i2, o2).end(a2);
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(77);
          t.builder = n.builder, t.create = n.create, t.fragment = n.fragment, t.convert = n.convert, t.createCB = n.createCB, t.fragmentCB = n.fragmentCB;
        }, function(e, t, r) {
          "use strict";
          r(31), r(32), r(33), r(191), r(192), r(194), r(64), r(19), r(198), r(199), r(89), r(201), r(65), r(20), r(66), r(22), r(23);
          var n = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          }, i = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(91), a = r(2), s = r(217), u = r(1), l = r(3), c = r(0), h = r(109), p = r(7), f = r(277), d = function() {
            function e2(e3) {
              this._domNode = e3;
            }
            return Object.defineProperty(e2.prototype, "node", { get: function() {
              return this._domNode;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "options", { get: function() {
              return this._options;
            }, enumerable: true, configurable: true }), e2.prototype.set = function(e3) {
              return this._options = a.applyDefaults(a.applyDefaults(this._options, e3, true), o.DefaultBuilderOptions), this;
            }, e2.prototype.ele = function(t2, r2, i2) {
              var o2, s2, u2, l2, p2, d2;
              if (a.isObject(t2))
                return new f.ObjectReader(this._options).parse(this, t2);
              if (null !== t2 && /^\s*</.test(t2))
                return new f.XMLReader(this._options).parse(this, t2);
              if (null !== t2 && /^\s*[\{\[]/.test(t2))
                return new f.JSONReader(this._options).parse(this, t2);
              if (null !== t2 && /^(\s*|(#.*)|(%.*))*---/.test(t2))
                return new f.YAMLReader(this._options).parse(this, t2);
              if ((null === t2 || a.isString(t2)) && a.isString(r2))
                l2 = (o2 = n([t2, r2, i2], 3))[0], p2 = o2[1], d2 = o2[2];
              else {
                if (null === t2)
                  throw new Error("Element name cannot be null. " + this._debugInfo());
                l2 = (s2 = n([void 0, t2, a.isObject(r2) ? r2 : void 0], 3))[0], p2 = s2[1], d2 = s2[2];
              }
              if (d2 && (d2 = a.getValue(d2)), l2 = (u2 = n(this._extractNamespace(h.sanitizeInput(l2, this._options.invalidCharReplacement), h.sanitizeInput(p2, this._options.invalidCharReplacement), true), 2))[0], p2 = u2[1], void 0 === l2) {
                var m = n(c.namespace_extractQName(p2), 1)[0];
                l2 = this.node.lookupNamespaceURI(m);
              }
              var y = null != l2 ? this._doc.createElementNS(l2, p2) : this._doc.createElement(p2);
              this.node.appendChild(y);
              var v = new e2(y), _ = this._doc.doctype;
              if (y === this._doc.documentElement && null !== _) {
                var g = this._doc.implementation.createDocumentType(this._doc.documentElement.tagName, _.publicId, _.systemId);
                this._doc.replaceChild(g, _);
              }
              return d2 && !a.isEmpty(d2) && v.att(d2), v;
            }, e2.prototype.remove = function() {
              var e3 = this.up();
              return e3.node.removeChild(this.node), e3;
            }, e2.prototype.att = function(e3, t2, r2) {
              var i2, o2, s2, u2, f2, d2, m = this;
              if (a.isMap(e3) || a.isObject(e3))
                return a.forEachObject(e3, function(e4, t3) {
                  return m.att(e4, t3);
                }, this), this;
              if (null != e3 && (e3 = a.getValue(e3 + "")), null != t2 && (t2 = a.getValue(t2 + "")), null != r2 && (r2 = a.getValue(r2 + "")), null !== e3 && !a.isString(e3) || !a.isString(t2) || null !== r2 && !a.isString(r2)) {
                if (!a.isString(e3) || null != t2 && !a.isString(t2))
                  throw new Error("Attribute name and value not specified. " + this._debugInfo());
                u2 = (o2 = n([void 0, e3, t2], 3))[0], f2 = o2[1], d2 = o2[2];
              } else
                u2 = (i2 = n([e3, t2, r2], 3))[0], f2 = i2[1], d2 = i2[2];
              if (this._options.keepNullAttributes && null == d2)
                d2 = "";
              else if (null == d2)
                return this;
              if (!l.Guard.isElementNode(this.node))
                throw new Error("An attribute can only be assigned to an element node.");
              var y = this.node;
              u2 = (s2 = n(this._extractNamespace(u2, f2, false), 2))[0], f2 = s2[1], f2 = h.sanitizeInput(f2, this._options.invalidCharReplacement), u2 = h.sanitizeInput(u2, this._options.invalidCharReplacement), d2 = h.sanitizeInput(d2, this._options.invalidCharReplacement);
              var v = n(c.namespace_extractQName(f2), 2), _ = v[0], g = v[1], b = n(c.namespace_extractQName(y.prefix ? y.prefix + ":" + y.localName : y.localName), 1)[0], x = null;
              return "xmlns" === _ ? (u2 = p.namespace.XMLNS, null === y.namespaceURI && b === g && (x = d2)) : null === _ && "xmlns" === g && null === b && (u2 = p.namespace.XMLNS, x = d2), null !== x && (this._updateNamespace(x), y = this.node), void 0 !== u2 ? y.setAttributeNS(u2, f2, d2) : y.setAttribute(f2, d2), this;
            }, e2.prototype.removeAtt = function(e3, t2) {
              var r2, n2, i2 = this;
              if (!l.Guard.isElementNode(this.node))
                throw new Error("An attribute can only be removed from an element node.");
              if (e3 = a.getValue(e3), void 0 !== t2 && (t2 = a.getValue(t2)), null !== e3 && void 0 === t2)
                n2 = e3;
              else {
                if (null !== e3 && !a.isString(e3) || void 0 === t2)
                  throw new Error("Attribute namespace must be a string. " + this._debugInfo());
                r2 = e3, n2 = t2;
              }
              return a.isArray(n2) || a.isSet(n2) ? a.forEachArray(n2, function(e4) {
                return void 0 === r2 ? i2.removeAtt(e4) : i2.removeAtt(r2, e4);
              }, this) : void 0 !== r2 ? (n2 = h.sanitizeInput(n2, this._options.invalidCharReplacement), r2 = h.sanitizeInput(r2, this._options.invalidCharReplacement), this.node.removeAttributeNS(r2, n2)) : (n2 = h.sanitizeInput(n2, this._options.invalidCharReplacement), this.node.removeAttribute(n2)), this;
            }, e2.prototype.txt = function(e3) {
              if (null == e3) {
                if (!this._options.keepNullNodes)
                  return this;
                e3 = "";
              }
              var t2 = this._doc.createTextNode(h.sanitizeInput(e3, this._options.invalidCharReplacement));
              return this.node.appendChild(t2), this;
            }, e2.prototype.com = function(e3) {
              if (null == e3) {
                if (!this._options.keepNullNodes)
                  return this;
                e3 = "";
              }
              var t2 = this._doc.createComment(h.sanitizeInput(e3, this._options.invalidCharReplacement));
              return this.node.appendChild(t2), this;
            }, e2.prototype.dat = function(e3) {
              if (null == e3) {
                if (!this._options.keepNullNodes)
                  return this;
                e3 = "";
              }
              var t2 = this._doc.createCDATASection(h.sanitizeInput(e3, this._options.invalidCharReplacement));
              return this.node.appendChild(t2), this;
            }, e2.prototype.ins = function(e3, t2) {
              var r2 = this;
              if (void 0 === t2 && (t2 = ""), null == t2) {
                if (!this._options.keepNullNodes)
                  return this;
                t2 = "";
              }
              if (a.isArray(e3) || a.isSet(e3))
                a.forEachArray(e3, function(e4) {
                  var t3 = (e4 += "").indexOf(" "), n3 = -1 === t3 ? e4 : e4.substr(0, t3), i2 = -1 === t3 ? "" : e4.substr(t3 + 1);
                  r2.ins(n3, i2);
                }, this);
              else if (a.isMap(e3) || a.isObject(e3))
                a.forEachObject(e3, function(e4, t3) {
                  return r2.ins(e4, t3);
                }, this);
              else {
                var n2 = this._doc.createProcessingInstruction(h.sanitizeInput(e3, this._options.invalidCharReplacement), h.sanitizeInput(t2, this._options.invalidCharReplacement));
                this.node.appendChild(n2);
              }
              return this;
            }, e2.prototype.dec = function(e3) {
              return this._options.version = e3.version || "1.0", this._options.encoding = e3.encoding, this._options.standalone = e3.standalone, this;
            }, e2.prototype.dtd = function(e3) {
              var t2 = h.sanitizeInput(e3 && e3.name || (this._doc.documentElement ? this._doc.documentElement.tagName : "ROOT"), this._options.invalidCharReplacement), r2 = h.sanitizeInput(e3 && e3.pubID || "", this._options.invalidCharReplacement), n2 = h.sanitizeInput(e3 && e3.sysID || "", this._options.invalidCharReplacement);
              if (null !== this._doc.documentElement && t2 !== this._doc.documentElement.tagName)
                throw new Error("DocType name does not match document element name.");
              var i2 = this._doc.implementation.createDocumentType(t2, r2, n2);
              return null !== this._doc.doctype ? this._doc.replaceChild(i2, this._doc.doctype) : this._doc.insertBefore(i2, this._doc.documentElement), this;
            }, e2.prototype.import = function(t2) {
              var r2, o2, a2 = this._domNode, s2 = this._doc, u2 = t2.node;
              if (l.Guard.isDocumentNode(u2)) {
                var h2 = u2.documentElement;
                if (null === h2)
                  throw new Error("Imported document has no document element node. " + this._debugInfo());
                var p2 = s2.importNode(h2, true);
                a2.appendChild(p2);
                var f2 = n(c.namespace_extractQName(p2.prefix ? p2.prefix + ":" + p2.localName : p2.localName), 1)[0], d2 = a2.lookupNamespaceURI(f2);
                new e2(p2)._updateNamespace(d2);
              } else if (l.Guard.isDocumentFragmentNode(u2))
                try {
                  for (var m = i(u2.childNodes), y = m.next(); !y.done; y = m.next()) {
                    var v = y.value;
                    p2 = s2.importNode(v, true);
                    if (a2.appendChild(p2), l.Guard.isElementNode(p2)) {
                      f2 = n(c.namespace_extractQName(p2.prefix ? p2.prefix + ":" + p2.localName : p2.localName), 1)[0], d2 = a2.lookupNamespaceURI(f2);
                      new e2(p2)._updateNamespace(d2);
                    }
                  }
                } catch (e3) {
                  r2 = { error: e3 };
                } finally {
                  try {
                    y && !y.done && (o2 = m.return) && o2.call(m);
                  } finally {
                    if (r2)
                      throw r2.error;
                  }
                }
              else {
                p2 = s2.importNode(u2, true);
                if (a2.appendChild(p2), l.Guard.isElementNode(p2)) {
                  f2 = n(c.namespace_extractQName(p2.prefix ? p2.prefix + ":" + p2.localName : p2.localName), 1)[0], d2 = a2.lookupNamespaceURI(f2);
                  new e2(p2)._updateNamespace(d2);
                }
              }
              return this;
            }, e2.prototype.doc = function() {
              if (this._doc._isFragment) {
                for (var t2 = this.node; t2 && t2.nodeType !== u.NodeType.DocumentFragment; )
                  t2 = t2.parentNode;
                if (null === t2)
                  throw new Error("Node has no parent node while searching for document fragment ancestor. " + this._debugInfo());
                return new e2(t2);
              }
              return new e2(this._doc);
            }, e2.prototype.root = function() {
              var t2 = this._doc.documentElement;
              if (!t2)
                throw new Error("Document root element is null. " + this._debugInfo());
              return new e2(t2);
            }, e2.prototype.up = function() {
              var t2 = this._domNode.parentNode;
              if (!t2)
                throw new Error("Parent node is null. " + this._debugInfo());
              return new e2(t2);
            }, e2.prototype.prev = function() {
              var t2 = this._domNode.previousSibling;
              if (!t2)
                throw new Error("Previous sibling node is null. " + this._debugInfo());
              return new e2(t2);
            }, e2.prototype.next = function() {
              var t2 = this._domNode.nextSibling;
              if (!t2)
                throw new Error("Next sibling node is null. " + this._debugInfo());
              return new e2(t2);
            }, e2.prototype.first = function() {
              var t2 = this._domNode.firstChild;
              if (!t2)
                throw new Error("First child node is null. " + this._debugInfo());
              return new e2(t2);
            }, e2.prototype.last = function() {
              var t2 = this._domNode.lastChild;
              if (!t2)
                throw new Error("Last child node is null. " + this._debugInfo());
              return new e2(t2);
            }, e2.prototype.each = function(t2, r2, n2, i2) {
              void 0 === r2 && (r2 = false), void 0 === n2 && (n2 = false);
              for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
                var a2 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
                t2.call(i2, new e2(o2[0]), o2[1], o2[2]), o2 = a2;
              }
              return this;
            }, e2.prototype.map = function(e3, t2, r2, n2) {
              void 0 === t2 && (t2 = false), void 0 === r2 && (r2 = false);
              var i2 = [];
              return this.each(function(t3, r3, o2) {
                return i2.push(e3.call(n2, t3, r3, o2));
              }, t2, r2), i2;
            }, e2.prototype.reduce = function(e3, t2, r2, n2, i2) {
              void 0 === r2 && (r2 = false), void 0 === n2 && (n2 = false);
              var o2 = t2;
              return this.each(function(t3, r3, n3) {
                return o2 = e3.call(i2, o2, t3, r3, n3);
              }, r2, n2), o2;
            }, e2.prototype.find = function(t2, r2, n2, i2) {
              void 0 === r2 && (r2 = false), void 0 === n2 && (n2 = false);
              for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
                var a2 = new e2(o2[0]);
                if (t2.call(i2, a2, o2[1], o2[2]))
                  return a2;
                o2 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
              }
            }, e2.prototype.filter = function(e3, t2, r2, n2) {
              void 0 === t2 && (t2 = false), void 0 === r2 && (r2 = false);
              var i2 = [];
              return this.each(function(t3, r3, o2) {
                e3.call(n2, t3, r3, o2) && i2.push(t3);
              }, t2, r2), i2;
            }, e2.prototype.every = function(t2, r2, n2, i2) {
              void 0 === r2 && (r2 = false), void 0 === n2 && (n2 = false);
              for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
                var a2 = new e2(o2[0]);
                if (!t2.call(i2, a2, o2[1], o2[2]))
                  return false;
                o2 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
              }
              return true;
            }, e2.prototype.some = function(t2, r2, n2, i2) {
              void 0 === r2 && (r2 = false), void 0 === n2 && (n2 = false);
              for (var o2 = this._getFirstDescendantNode(this._domNode, r2, n2); o2[0]; ) {
                var a2 = new e2(o2[0]);
                if (t2.call(i2, a2, o2[1], o2[2]))
                  return true;
                o2 = this._getNextDescendantNode(this._domNode, o2[0], n2, o2[1], o2[2]);
              }
              return false;
            }, e2.prototype.toArray = function(e3, t2) {
              void 0 === e3 && (e3 = false), void 0 === t2 && (t2 = false);
              var r2 = [];
              return this.each(function(e4) {
                return r2.push(e4);
              }, e3, t2), r2;
            }, e2.prototype.toString = function(e3) {
              return void 0 === (e3 = e3 || {}).format && (e3.format = "xml"), this._serialize(e3);
            }, e2.prototype.toObject = function(e3) {
              return void 0 === (e3 = e3 || {}).format && (e3.format = "object"), this._serialize(e3);
            }, e2.prototype.end = function(e3) {
              return void 0 === (e3 = e3 || {}).format && (e3.format = "xml"), this.doc()._serialize(e3);
            }, e2.prototype._getFirstDescendantNode = function(e3, t2, r2) {
              return t2 ? [this._domNode, 0, 0] : r2 ? this._getNextDescendantNode(e3, e3, r2, 0, 0) : [this._domNode.firstChild, 0, 1];
            }, e2.prototype._getNextDescendantNode = function(e3, t2, r2, n2, i2) {
              if (!r2)
                return e3 === t2 ? [t2.firstChild, 0, i2 + 1] : [t2.nextSibling, n2 + 1, i2];
              if (t2.firstChild)
                return [t2.firstChild, 0, i2 + 1];
              if (t2 === e3)
                return [null, -1, -1];
              if (t2.nextSibling)
                return [t2.nextSibling, n2 + 1, i2];
              for (var o2 = t2.parentNode; o2 && o2 !== e3; ) {
                if (o2.nextSibling)
                  return [o2.nextSibling, c.tree_index(o2.nextSibling), i2 - 1];
                o2 = o2.parentNode, i2--;
              }
              return [null, -1, -1];
            }, e2.prototype._serialize = function(e3) {
              if ("xml" === e3.format)
                return new s.XMLWriter(this._options, e3).serialize(this.node);
              if ("map" === e3.format)
                return new s.MapWriter(this._options, e3).serialize(this.node);
              if ("object" === e3.format)
                return new s.ObjectWriter(this._options, e3).serialize(this.node);
              if ("json" === e3.format)
                return new s.JSONWriter(this._options, e3).serialize(this.node);
              if ("yaml" === e3.format)
                return new s.YAMLWriter(this._options, e3).serialize(this.node);
              throw new Error("Invalid writer format: " + e3.format + ". " + this._debugInfo());
            }, e2.prototype._extractNamespace = function(e3, t2, r2) {
              var n2 = t2.indexOf("@");
              if (n2 > 0 && (void 0 === e3 && (e3 = t2.slice(n2 + 1)), t2 = t2.slice(0, n2)), void 0 === e3)
                e3 = r2 ? this._options.defaultNamespace.ele : this._options.defaultNamespace.att;
              else if (null !== e3 && "@" === e3[0]) {
                var i2 = e3.slice(1);
                if (void 0 === (e3 = this._options.namespaceAlias[i2]))
                  throw new Error("Namespace alias `" + i2 + "` is not defined. " + this._debugInfo());
              }
              return [e3, t2];
            }, e2.prototype._updateNamespace = function(t2) {
              var r2, o2, a2, s2, u2 = this._domNode;
              if (l.Guard.isElementNode(u2) && null !== t2 && u2.namespaceURI !== t2) {
                var h2 = n(c.namespace_extractQName(u2.prefix ? u2.prefix + ":" + u2.localName : u2.localName), 2), p2 = h2[0], f2 = h2[1], d2 = c.create_element(this._doc, f2, t2, p2);
                try {
                  for (var m = i(u2.attributes), y = m.next(); !y.done; y = m.next()) {
                    var v = y.value, _ = v.prefix ? v.prefix + ":" + v.localName : v.localName, g = n(c.namespace_extractQName(_), 1)[0], b = v.namespaceURI;
                    null === b && null !== g && (b = u2.lookupNamespaceURI(g)), null === b ? d2.setAttribute(_, v.value) : d2.setAttributeNS(b, _, v.value);
                  }
                } catch (e3) {
                  r2 = { error: e3 };
                } finally {
                  try {
                    y && !y.done && (o2 = m.return) && o2.call(m);
                  } finally {
                    if (r2)
                      throw r2.error;
                  }
                }
                var x = u2.parentNode;
                if (null === x)
                  throw new Error("Parent node is null." + this._debugInfo());
                x.replaceChild(d2, u2), this._domNode = d2;
                try {
                  for (var w = i(u2.childNodes), E = w.next(); !E.done; E = w.next()) {
                    var D = E.value.cloneNode(true);
                    if (d2.appendChild(D), l.Guard.isElementNode(D)) {
                      var S = n(c.namespace_extractQName(D.prefix ? D.prefix + ":" + D.localName : D.localName), 1)[0], C = d2.lookupNamespaceURI(S);
                      new e2(D)._updateNamespace(C);
                    }
                  }
                } catch (e3) {
                  a2 = { error: e3 };
                } finally {
                  try {
                    E && !E.done && (s2 = w.return) && s2.call(w);
                  } finally {
                    if (a2)
                      throw a2.error;
                  }
                }
              }
            }, Object.defineProperty(e2.prototype, "_doc", { get: function() {
              var e3 = this.node;
              if (l.Guard.isDocumentNode(e3))
                return e3;
              var t2 = e3.ownerDocument;
              if (!t2)
                throw new Error("Owner document is null. " + this._debugInfo());
              return t2;
            }, enumerable: true, configurable: true }), e2.prototype._debugInfo = function(e3) {
              var t2 = this.node, r2 = t2.parentNode;
              e3 = e3 || t2.nodeName;
              var n2 = r2 ? r2.nodeName : "";
              return n2 ? "node: <" + e3 + ">, parent: <" + n2 + ">" : "node: <" + e3 + ">";
            }, Object.defineProperty(e2.prototype, "_options", { get: function() {
              var e3 = this._doc;
              if (void 0 === e3._xmlBuilderOptions)
                throw new Error("Builder options is not set.");
              return e3._xmlBuilderOptions;
            }, set: function(e3) {
              this._doc._xmlBuilderOptions = e3;
            }, enumerable: true, configurable: true }), e2;
          }();
          t.XMLBuilderImpl = d;
        }, function(e, t, r) {
          var n = r(11), i = r(117), o = n.WeakMap;
          e.exports = "function" == typeof o && /native code/.test(i(o));
        }, function(e, t, r) {
          var n = r(46), i = r(82), o = r(85), a = r(18);
          e.exports = n("Reflect", "ownKeys") || function(e2) {
            var t2 = i.f(a(e2)), r2 = o.f;
            return r2 ? t2.concat(r2(e2)) : t2;
          };
        }, function(e, t, r) {
          var n = r(16), i = r(15), o = r(18), a = r(61);
          e.exports = n ? Object.defineProperties : function(e2, t2) {
            o(e2);
            for (var r2, n2 = a(t2), s = n2.length, u = 0; s > u; )
              i.f(e2, r2 = n2[u++], t2[r2]);
            return e2;
          };
        }, function(e, t, r) {
          var n = r(46);
          e.exports = n("document", "documentElement");
        }, function(e, t, r) {
          var n = r(24), i = r(82).f, o = {}.toString, a = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
          e.exports.f = function(e2) {
            return a && "[object Window]" == o.call(e2) ? function(e3) {
              try {
                return i(e3);
              } catch (e4) {
                return a.slice();
              }
            }(e2) : i(n(e2));
          };
        }, function(e, t, r) {
          "use strict";
          var n = r(4), i = r(36).every, o = r(48), a = r(28), s = o("every"), u = a("every");
          n({ target: "Array", proto: true, forced: !s || !u }, { every: function(e2) {
            return i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
          } });
        }, function(e, t, r) {
          "use strict";
          var n = r(4), i = r(36).filter, o = r(63), a = r(28), s = o("filter"), u = a("filter");
          n({ target: "Array", proto: true, forced: !s || !u }, { filter: function(e2) {
            return i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
          } });
        }, function(e, t, r) {
          var n = r(46);
          e.exports = n("navigator", "userAgent") || "";
        }, function(e, t, r) {
          "use strict";
          var n = r(4), i = r(36).find, o = r(130), a = r(28), s = true, u = a("find");
          "find" in [] && Array(1).find(function() {
            s = false;
          }), n({ target: "Array", proto: true, forced: s || !u }, { find: function(e2) {
            return i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
          } }), o("find");
        }, function(e, t, r) {
          "use strict";
          var n = r(131).IteratorPrototype, i = r(60), o = r(40), a = r(62), s = r(49), u = function() {
            return this;
          };
          e.exports = function(e2, t2, r2) {
            var l = t2 + " Iterator";
            return e2.prototype = i(n, { next: o(1, r2) }), a(e2, l, false, true), s[l] = u, e2;
          };
        }, function(e, t, r) {
          var n = r(8);
          e.exports = !n(function() {
            function e2() {
            }
            return e2.prototype.constructor = null, Object.getPrototypeOf(new e2()) !== e2.prototype;
          });
        }, function(e, t, r) {
          var n = r(13);
          e.exports = function(e2) {
            if (!n(e2) && null !== e2)
              throw TypeError("Can't set " + String(e2) + " as a prototype");
            return e2;
          };
        }, function(e, t, r) {
          "use strict";
          var n = r(4), i = r(36).map, o = r(63), a = r(28), s = o("map"), u = a("map");
          n({ target: "Array", proto: true, forced: !s || !u }, { map: function(e2) {
            return i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
          } });
        }, function(e, t, r) {
          "use strict";
          var n = r(4), i = r(200).left, o = r(48), a = r(28), s = o("reduce"), u = a("reduce", { 1: 0 });
          n({ target: "Array", proto: true, forced: !s || !u }, { reduce: function(e2) {
            return i(this, e2, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
          } });
        }, function(e, t, r) {
          var n = r(127), i = r(27), o = r(41), a = r(26), s = function(e2) {
            return function(t2, r2, s2, u) {
              n(r2);
              var l = i(t2), c = o(l), h = a(l.length), p = e2 ? h - 1 : 0, f = e2 ? -1 : 1;
              if (s2 < 2)
                for (; ; ) {
                  if (p in c) {
                    u = c[p], p += f;
                    break;
                  }
                  if (p += f, e2 ? p < 0 : h <= p)
                    throw TypeError("Reduce of empty array with no initial value");
                }
              for (; e2 ? p >= 0 : h > p; p += f)
                p in c && (u = r2(u, c[p], p, l));
              return u;
            };
          };
          e.exports = { left: s(false), right: s(true) };
        }, function(e, t, r) {
          "use strict";
          var n = r(4), i = r(36).some, o = r(48), a = r(28), s = o("some"), u = a("some");
          n({ target: "Array", proto: true, forced: !s || !u }, { some: function(e2) {
            return i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
          } });
        }, function(e, t, r) {
          "use strict";
          var n = r(90), i = r(135);
          e.exports = n ? {}.toString : function() {
            return "[object " + i(this) + "]";
          };
        }, function(e, t) {
          e.exports = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 };
        }, function(e, t, r) {
          var n = r(8);
          e.exports = !n(function() {
            return Object.isExtensible(Object.preventExtensions({}));
          });
        }, function(e, t, r) {
          var n = r(5), i = r(49), o = n("iterator"), a = Array.prototype;
          e.exports = function(e2) {
            return void 0 !== e2 && (i.Array === e2 || a[o] === e2);
          };
        }, function(e, t, r) {
          var n = r(135), i = r(49), o = r(5)("iterator");
          e.exports = function(e2) {
            if (null != e2)
              return e2[o] || e2["@@iterator"] || i[n(e2)];
          };
        }, function(e, t, r) {
          var n = r(18);
          e.exports = function(e2, t2, r2, i) {
            try {
              return i ? t2(n(r2)[0], r2[1]) : t2(r2);
            } catch (t3) {
              var o = e2.return;
              throw void 0 !== o && n(o.call(e2)), t3;
            }
          };
        }, function(e, t, r) {
          var n = r(5)("iterator"), i = false;
          try {
            var o = 0, a = { next: function() {
              return { done: !!o++ };
            }, return: function() {
              i = true;
            } };
            a[n] = function() {
              return this;
            }, Array.from(a, function() {
              throw 2;
            });
          } catch (e2) {
          }
          e.exports = function(e2, t2) {
            if (!t2 && !i)
              return false;
            var r2 = false;
            try {
              var o2 = {};
              o2[n] = function() {
                return { next: function() {
                  return { done: r2 = true };
                } };
              }, e2(o2);
            } catch (e3) {
            }
            return r2;
          };
        }, function(e, t, r) {
          var n = r(13), i = r(133);
          e.exports = function(e2, t2, r2) {
            var o, a;
            return i && "function" == typeof (o = t2.constructor) && o !== r2 && n(a = o.prototype) && a !== r2.prototype && i(e2, a), e2;
          };
        }, function(e, t, r) {
          var n = r(25);
          e.exports = function(e2, t2, r2) {
            for (var i in t2)
              n(e2, i, t2[i], r2);
            return e2;
          };
        }, function(e, t, r) {
          "use strict";
          var n = r(46), i = r(15), o = r(5), a = r(16), s = o("species");
          e.exports = function(e2) {
            var t2 = n(e2), r2 = i.f;
            a && t2 && !t2[s] && r2(t2, s, { configurable: true, get: function() {
              return this;
            } });
          };
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__generator || function(e2, t2) {
            var r2, n2, i2, o2, a = { label: 0, sent: function() {
              if (1 & i2[0])
                throw i2[1];
              return i2[1];
            }, trys: [], ops: [] };
            return o2 = { next: s(0), throw: s(1), return: s(2) }, "function" == typeof Symbol && (o2[Symbol.iterator] = function() {
              return this;
            }), o2;
            function s(o3) {
              return function(s2) {
                return function(o4) {
                  if (r2)
                    throw new TypeError("Generator is already executing.");
                  for (; a; )
                    try {
                      if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                        return i2;
                      switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                        case 0:
                        case 1:
                          i2 = o4;
                          break;
                        case 4:
                          return a.label++, { value: o4[1], done: false };
                        case 5:
                          a.label++, n2 = o4[1], o4 = [0];
                          continue;
                        case 7:
                          o4 = a.ops.pop(), a.trys.pop();
                          continue;
                        default:
                          if (!(i2 = a.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || 6 !== o4[0] && 2 !== o4[0])) {
                            a = 0;
                            continue;
                          }
                          if (3 === o4[0] && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                            a.label = o4[1];
                            break;
                          }
                          if (6 === o4[0] && a.label < i2[1]) {
                            a.label = i2[1], i2 = o4;
                            break;
                          }
                          if (i2 && a.label < i2[2]) {
                            a.label = i2[2], a.ops.push(o4);
                            break;
                          }
                          i2[2] && a.ops.pop(), a.trys.pop();
                          continue;
                      }
                      o4 = t2.call(e2, a);
                    } catch (e3) {
                      o4 = [6, e3], n2 = 0;
                    } finally {
                      r2 = i2 = 0;
                    }
                  if (5 & o4[0])
                    throw o4[1];
                  return { value: o4[0] ? o4[1] : void 0, done: true };
                }([o3, s2]);
              };
            }
          }, i = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var o = function() {
            function e2(e3) {
              void 0 === e3 && (e3 = 1e3), this._items = /* @__PURE__ */ new Set(), this._limit = e3;
            }
            return e2.prototype.add = function(e3) {
              if (this._items.add(e3), this._items.size > this._limit) {
                var t2 = this._items.values().next();
                t2.done || this._items.delete(t2.value);
              }
              return this;
            }, e2.prototype.delete = function(e3) {
              return this._items.delete(e3);
            }, e2.prototype.has = function(e3) {
              return this._items.has(e3);
            }, e2.prototype.clear = function() {
              this._items.clear();
            }, Object.defineProperty(e2.prototype, "size", { get: function() {
              return this._items.size;
            }, enumerable: true, configurable: true }), e2.prototype.forEach = function(e3, t2) {
              var r2 = this;
              this._items.forEach(function(n2) {
                return e3.call(t2, n2, n2, r2);
              });
            }, e2.prototype.keys = function() {
              return n(this, function(e3) {
                switch (e3.label) {
                  case 0:
                    return [5, i(this._items.keys())];
                  case 1:
                    return e3.sent(), [2];
                }
              });
            }, e2.prototype.values = function() {
              return n(this, function(e3) {
                switch (e3.label) {
                  case 0:
                    return [5, i(this._items.values())];
                  case 1:
                    return e3.sent(), [2];
                }
              });
            }, e2.prototype.entries = function() {
              return n(this, function(e3) {
                switch (e3.label) {
                  case 0:
                    return [5, i(this._items.entries())];
                  case 1:
                    return e3.sent(), [2];
                }
              });
            }, e2.prototype[Symbol.iterator] = function() {
              return n(this, function(e3) {
                switch (e3.label) {
                  case 0:
                    return [5, i(this._items)];
                  case 1:
                    return e3.sent(), [2];
                }
              });
            }, Object.defineProperty(e2.prototype, Symbol.toStringTag, { get: function() {
              return "FixedSizeSet";
            }, enumerable: true, configurable: true }), e2;
          }();
          t.FixedSizeSet = o;
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__generator || function(e2, t2) {
            var r2, n2, i2, o2, a = { label: 0, sent: function() {
              if (1 & i2[0])
                throw i2[1];
              return i2[1];
            }, trys: [], ops: [] };
            return o2 = { next: s(0), throw: s(1), return: s(2) }, "function" == typeof Symbol && (o2[Symbol.iterator] = function() {
              return this;
            }), o2;
            function s(o3) {
              return function(s2) {
                return function(o4) {
                  if (r2)
                    throw new TypeError("Generator is already executing.");
                  for (; a; )
                    try {
                      if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                        return i2;
                      switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                        case 0:
                        case 1:
                          i2 = o4;
                          break;
                        case 4:
                          return a.label++, { value: o4[1], done: false };
                        case 5:
                          a.label++, n2 = o4[1], o4 = [0];
                          continue;
                        case 7:
                          o4 = a.ops.pop(), a.trys.pop();
                          continue;
                        default:
                          if (!(i2 = a.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || 6 !== o4[0] && 2 !== o4[0])) {
                            a = 0;
                            continue;
                          }
                          if (3 === o4[0] && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                            a.label = o4[1];
                            break;
                          }
                          if (6 === o4[0] && a.label < i2[1]) {
                            a.label = i2[1], i2 = o4;
                            break;
                          }
                          if (i2 && a.label < i2[2]) {
                            a.label = i2[2], a.ops.push(o4);
                            break;
                          }
                          i2[2] && a.ops.pop(), a.trys.pop();
                          continue;
                      }
                      o4 = t2.call(e2, a);
                    } catch (e3) {
                      o4 = [6, e3], n2 = 0;
                    } finally {
                      r2 = i2 = 0;
                    }
                  if (5 & o4[0])
                    throw o4[1];
                  return { value: o4[0] ? o4[1] : void 0, done: true };
                }([o3, s2]);
              };
            }
          }, i = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var o = function() {
            function e2(e3) {
              void 0 === e3 && (e3 = 1e3), this._items = /* @__PURE__ */ new Map(), this._limit = e3;
            }
            return e2.prototype.get = function(e3) {
              return this._items.get(e3);
            }, e2.prototype.set = function(e3, t2) {
              if (this._items.set(e3, t2), this._items.size > this._limit) {
                var r2 = this._items.keys().next();
                r2.done || this._items.delete(r2.value);
              }
            }, e2.prototype.delete = function(e3) {
              return this._items.delete(e3);
            }, e2.prototype.has = function(e3) {
              return this._items.has(e3);
            }, e2.prototype.clear = function() {
              this._items.clear();
            }, Object.defineProperty(e2.prototype, "size", { get: function() {
              return this._items.size;
            }, enumerable: true, configurable: true }), e2.prototype.forEach = function(e3, t2) {
              this._items.forEach(function(r2, n2) {
                return e3.call(t2, n2, r2);
              });
            }, e2.prototype.keys = function() {
              return n(this, function(e3) {
                switch (e3.label) {
                  case 0:
                    return [5, i(this._items.keys())];
                  case 1:
                    return e3.sent(), [2];
                }
              });
            }, e2.prototype.values = function() {
              return n(this, function(e3) {
                switch (e3.label) {
                  case 0:
                    return [5, i(this._items.values())];
                  case 1:
                    return e3.sent(), [2];
                }
              });
            }, e2.prototype.entries = function() {
              return n(this, function(e3) {
                switch (e3.label) {
                  case 0:
                    return [5, i(this._items.entries())];
                  case 1:
                    return e3.sent(), [2];
                }
              });
            }, e2.prototype[Symbol.iterator] = function() {
              return n(this, function(e3) {
                switch (e3.label) {
                  case 0:
                    return [5, i(this._items)];
                  case 1:
                    return e3.sent(), [2];
                }
              });
            }, Object.defineProperty(e2.prototype, Symbol.toStringTag, { get: function() {
              return "ObjectCache";
            }, enumerable: true, configurable: true }), e2;
          }();
          t.ObjectCache = o;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = function() {
            function e2(e3) {
              void 0 === e3 && (e3 = 1e3), this._items = /* @__PURE__ */ new Map(), this._limit = e3;
            }
            return e2.prototype.check = function(e3, t2) {
              if (this._items.get(e3) === t2)
                return true;
              if (this._items.get(t2) === e3)
                return false;
              var r2 = Math.random() < 0.5;
              if (r2 ? this._items.set(e3, t2) : this._items.set(t2, e3), this._items.size > this._limit) {
                var n2 = this._items.keys().next();
                n2.done || this._items.delete(n2.value);
              }
              return r2;
            }, e2;
          }();
          t.CompareCache = n;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = function() {
            function e2(e3) {
              this._initialized = false, this._value = void 0, this._initFunc = e3;
            }
            return Object.defineProperty(e2.prototype, "value", { get: function() {
              return this._initialized || (this._value = this._initFunc(), this._initialized = true), this._value;
            }, enumerable: true, configurable: true }), e2;
          }();
          t.Lazy = n;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = function() {
            function e2(e3) {
              this._pointer = 0, this._chars = Array.from(e3), this._length = this._chars.length;
            }
            return Object.defineProperty(e2.prototype, "eof", { get: function() {
              return this._pointer >= this._length;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "length", { get: function() {
              return this._length;
            }, enumerable: true, configurable: true }), e2.prototype.codePoint = function() {
              if (void 0 === this._codePoint)
                if (this.eof)
                  this._codePoint = -1;
                else {
                  var e3 = this._chars[this._pointer].codePointAt(0);
                  this._codePoint = void 0 !== e3 ? e3 : -1;
                }
              return this._codePoint;
            }, e2.prototype.c = function() {
              return void 0 === this._c && (this._c = this.eof ? "" : this._chars[this._pointer]), this._c;
            }, e2.prototype.remaining = function() {
              return void 0 === this._remaining && (this._remaining = this.eof ? "" : this._chars.slice(this._pointer + 1).join("")), this._remaining;
            }, e2.prototype.substring = function() {
              return void 0 === this._substring && (this._substring = this.eof ? "" : this._chars.slice(this._pointer).join("")), this._substring;
            }, Object.defineProperty(e2.prototype, "pointer", { get: function() {
              return this._pointer;
            }, set: function(e3) {
              e3 !== this._pointer && (this._pointer = e3, this._codePoint = void 0, this._c = void 0, this._remaining = void 0, this._substring = void 0);
            }, enumerable: true, configurable: true }), e2;
          }();
          t.StringWalker = n;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(218);
          t.MapWriter = n.MapWriter;
          var i = r(259);
          t.XMLWriter = i.XMLWriter;
          var o = r(67);
          t.ObjectWriter = o.ObjectWriter;
          var a = r(261);
          t.JSONWriter = a.JSONWriter;
          var s = r(262);
          t.YAMLWriter = s.YAMLWriter;
        }, function(e, t, r) {
          "use strict";
          r(19), r(219), r(20), r(22), r(23);
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(2), a = r(67), s = function(e2) {
            function t2(t3, r2) {
              var n2 = e2.call(this, t3) || this;
              return n2._writerOptions = o.applyDefaults(r2, { format: "map", wellFormed: false, group: false, verbose: false }), n2;
            }
            return i(t2, e2), t2.prototype.serialize = function(e3) {
              var t3 = o.applyDefaults(this._writerOptions, { format: "object", wellFormed: false, verbose: false }), r2 = new a.ObjectWriter(this._builderOptions, t3).serialize(e3);
              return this._convertObject(r2);
            }, t2.prototype._convertObject = function(e3) {
              if (o.isArray(e3)) {
                for (var t3 = 0; t3 < e3.length; t3++)
                  e3[t3] = this._convertObject(e3[t3]);
                return e3;
              }
              if (o.isObject(e3)) {
                var r2 = /* @__PURE__ */ new Map();
                for (var n2 in e3)
                  r2.set(n2, this._convertObject(e3[n2]));
                return r2;
              }
              return e3;
            }, t2;
          }(r(50).BaseWriter);
          t.MapWriter = s;
        }, function(e, t, r) {
          "use strict";
          var n = r(139), i = r(143);
          e.exports = n("Map", function(e2) {
            return function() {
              return e2(this, arguments.length ? arguments[0] : void 0);
            };
          }, i);
        }, function(e, t, r) {
          "use strict";
          var n = r(4), i = r(8), o = r(59), a = r(13), s = r(27), u = r(26), l = r(134), c = r(128), h = r(63), p = r(5), f = r(129), d = p("isConcatSpreadable"), m = f >= 51 || !i(function() {
            var e2 = [];
            return e2[d] = false, e2.concat()[0] !== e2;
          }), y = h("concat"), v = function(e2) {
            if (!a(e2))
              return false;
            var t2 = e2[d];
            return void 0 !== t2 ? !!t2 : o(e2);
          };
          n({ target: "Array", proto: true, forced: !m || !y }, { concat: function(e2) {
            var t2, r2, n2, i2, o2, a2 = s(this), h2 = c(a2, 0), p2 = 0;
            for (t2 = -1, n2 = arguments.length; t2 < n2; t2++)
              if (v(o2 = -1 === t2 ? a2 : arguments[t2])) {
                if (p2 + (i2 = u(o2.length)) > 9007199254740991)
                  throw TypeError("Maximum allowed index exceeded");
                for (r2 = 0; r2 < i2; r2++, p2++)
                  r2 in o2 && l(h2, p2, o2[r2]);
              } else {
                if (p2 >= 9007199254740991)
                  throw TypeError("Maximum allowed index exceeded");
                l(h2, p2++, o2);
              }
            return h2.length = p2, h2;
          } });
        }, function(e, t, r) {
          "use strict";
          var n = r(8);
          function i(e2, t2) {
            return RegExp(e2, t2);
          }
          t.UNSUPPORTED_Y = n(function() {
            var e2 = i("a", "y");
            return e2.lastIndex = 2, null != e2.exec("abcd");
          }), t.BROKEN_CARET = n(function() {
            var e2 = i("^r", "gy");
            return e2.lastIndex = 2, null != e2.exec("str");
          });
        }, function(e, t, r) {
          var n = r(223);
          e.exports = function(e2) {
            if (n(e2))
              throw TypeError("The method doesn't accept regular expressions");
            return e2;
          };
        }, function(e, t, r) {
          var n = r(13), i = r(42), o = r(5)("match");
          e.exports = function(e2) {
            var t2;
            return n(e2) && (void 0 !== (t2 = e2[o]) ? !!t2 : "RegExp" == i(e2));
          };
        }, function(e, t, r) {
          var n = r(5)("match");
          e.exports = function(e2) {
            var t2 = /./;
            try {
              "/./"[e2](t2);
            } catch (r2) {
              try {
                return t2[n] = false, "/./"[e2](t2);
              } catch (e3) {
              }
            }
            return false;
          };
        }, function(e, t, r) {
          "use strict";
          r(68);
          var n = r(25), i = r(8), o = r(5), a = r(93), s = r(21), u = o("species"), l = !i(function() {
            var e2 = /./;
            return e2.exec = function() {
              var e3 = [];
              return e3.groups = { a: "7" }, e3;
            }, "7" !== "".replace(e2, "$<a>");
          }), c = "$0" === "a".replace(/./, "$0"), h = o("replace"), p = !!/./[h] && "" === /./[h]("a", "$0"), f = !i(function() {
            var e2 = /(?:)/, t2 = e2.exec;
            e2.exec = function() {
              return t2.apply(this, arguments);
            };
            var r2 = "ab".split(e2);
            return 2 !== r2.length || "a" !== r2[0] || "b" !== r2[1];
          });
          e.exports = function(e2, t2, r2, h2) {
            var d = o(e2), m = !i(function() {
              var t3 = {};
              return t3[d] = function() {
                return 7;
              }, 7 != ""[e2](t3);
            }), y = m && !i(function() {
              var t3 = false, r3 = /a/;
              return "split" === e2 && ((r3 = {}).constructor = {}, r3.constructor[u] = function() {
                return r3;
              }, r3.flags = "", r3[d] = /./[d]), r3.exec = function() {
                return t3 = true, null;
              }, r3[d](""), !t3;
            });
            if (!m || !y || "replace" === e2 && (!l || !c || p) || "split" === e2 && !f) {
              var v = /./[d], _ = r2(d, ""[e2], function(e3, t3, r3, n2, i2) {
                return t3.exec === a ? m && !i2 ? { done: true, value: v.call(t3, r3, n2) } : { done: true, value: e3.call(r3, t3, n2) } : { done: false };
              }, { REPLACE_KEEPS_$0: c, REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: p }), g = _[0], b = _[1];
              n(String.prototype, e2, g), n(RegExp.prototype, d, 2 == t2 ? function(e3, t3) {
                return b.call(e3, this, t3);
              } : function(e3) {
                return b.call(e3, this);
              });
            }
            h2 && s(RegExp.prototype[d], "sham", true);
          };
        }, function(e, t, r) {
          "use strict";
          var n = r(137).charAt;
          e.exports = function(e2, t2, r2) {
            return t2 + (r2 ? n(e2, t2).length : 1);
          };
        }, function(e, t, r) {
          var n = r(42), i = r(93);
          e.exports = function(e2, t2) {
            var r2 = e2.exec;
            if ("function" == typeof r2) {
              var o = r2.call(e2, t2);
              if ("object" != typeof o)
                throw TypeError("RegExp exec method returned something other than an Object or null");
              return o;
            }
            if ("RegExp" !== n(e2))
              throw TypeError("RegExp#exec called on incompatible receiver");
            return i.call(e2, t2);
          };
        }, function(e, t, r) {
          "use strict";
          (function(e2) {
            Object.defineProperty(t, "__esModule", { value: true });
            var n = r(96);
            t.forgivingBase64Encode = function(t2) {
              return e2.from(t2).toString("base64");
            }, t.forgivingBase64Decode = function(t2) {
              return "" === t2 ? "" : ((t2 = t2.replace(n.ASCIIWhiteSpace, "")).length % 4 == 0 && (t2.endsWith("==") ? t2 = t2.substr(0, t2.length - 2) : t2.endsWith("=") && (t2 = t2.substr(0, t2.length - 1))), t2.length % 4 == 1 ? null : /[0-9A-Za-z+/]/.test(t2) ? e2.from(t2, "base64").toString("utf8") : null);
            };
          }).call(this, r(145).Buffer);
        }, function(e, t, r) {
          "use strict";
          t.byteLength = function(e2) {
            var t2 = l(e2), r2 = t2[0], n2 = t2[1];
            return 3 * (r2 + n2) / 4 - n2;
          }, t.toByteArray = function(e2) {
            var t2, r2, n2 = l(e2), a2 = n2[0], s2 = n2[1], u2 = new o(function(e3, t3, r3) {
              return 3 * (t3 + r3) / 4 - r3;
            }(0, a2, s2)), c2 = 0, h = s2 > 0 ? a2 - 4 : a2;
            for (r2 = 0; r2 < h; r2 += 4)
              t2 = i[e2.charCodeAt(r2)] << 18 | i[e2.charCodeAt(r2 + 1)] << 12 | i[e2.charCodeAt(r2 + 2)] << 6 | i[e2.charCodeAt(r2 + 3)], u2[c2++] = t2 >> 16 & 255, u2[c2++] = t2 >> 8 & 255, u2[c2++] = 255 & t2;
            2 === s2 && (t2 = i[e2.charCodeAt(r2)] << 2 | i[e2.charCodeAt(r2 + 1)] >> 4, u2[c2++] = 255 & t2);
            1 === s2 && (t2 = i[e2.charCodeAt(r2)] << 10 | i[e2.charCodeAt(r2 + 1)] << 4 | i[e2.charCodeAt(r2 + 2)] >> 2, u2[c2++] = t2 >> 8 & 255, u2[c2++] = 255 & t2);
            return u2;
          }, t.fromByteArray = function(e2) {
            for (var t2, r2 = e2.length, i2 = r2 % 3, o2 = [], a2 = 0, s2 = r2 - i2; a2 < s2; a2 += 16383)
              o2.push(c(e2, a2, a2 + 16383 > s2 ? s2 : a2 + 16383));
            1 === i2 ? (t2 = e2[r2 - 1], o2.push(n[t2 >> 2] + n[t2 << 4 & 63] + "==")) : 2 === i2 && (t2 = (e2[r2 - 2] << 8) + e2[r2 - 1], o2.push(n[t2 >> 10] + n[t2 >> 4 & 63] + n[t2 << 2 & 63] + "="));
            return o2.join("");
          };
          for (var n = [], i = [], o = "undefined" != typeof Uint8Array ? Uint8Array : Array, a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", s = 0, u = a.length; s < u; ++s)
            n[s] = a[s], i[a.charCodeAt(s)] = s;
          function l(e2) {
            var t2 = e2.length;
            if (t2 % 4 > 0)
              throw new Error("Invalid string. Length must be a multiple of 4");
            var r2 = e2.indexOf("=");
            return -1 === r2 && (r2 = t2), [r2, r2 === t2 ? 0 : 4 - r2 % 4];
          }
          function c(e2, t2, r2) {
            for (var i2, o2, a2 = [], s2 = t2; s2 < r2; s2 += 3)
              i2 = (e2[s2] << 16 & 16711680) + (e2[s2 + 1] << 8 & 65280) + (255 & e2[s2 + 2]), a2.push(n[(o2 = i2) >> 18 & 63] + n[o2 >> 12 & 63] + n[o2 >> 6 & 63] + n[63 & o2]);
            return a2.join("");
          }
          i["-".charCodeAt(0)] = 62, i["_".charCodeAt(0)] = 63;
        }, function(e, t) {
          t.read = function(e2, t2, r, n, i) {
            var o, a, s = 8 * i - n - 1, u = (1 << s) - 1, l = u >> 1, c = -7, h = r ? i - 1 : 0, p = r ? -1 : 1, f = e2[t2 + h];
            for (h += p, o = f & (1 << -c) - 1, f >>= -c, c += s; c > 0; o = 256 * o + e2[t2 + h], h += p, c -= 8)
              ;
            for (a = o & (1 << -c) - 1, o >>= -c, c += n; c > 0; a = 256 * a + e2[t2 + h], h += p, c -= 8)
              ;
            if (0 === o)
              o = 1 - l;
            else {
              if (o === u)
                return a ? NaN : 1 / 0 * (f ? -1 : 1);
              a += Math.pow(2, n), o -= l;
            }
            return (f ? -1 : 1) * a * Math.pow(2, o - n);
          }, t.write = function(e2, t2, r, n, i, o) {
            var a, s, u, l = 8 * o - i - 1, c = (1 << l) - 1, h = c >> 1, p = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0, f = n ? 0 : o - 1, d = n ? 1 : -1, m = t2 < 0 || 0 === t2 && 1 / t2 < 0 ? 1 : 0;
            for (t2 = Math.abs(t2), isNaN(t2) || t2 === 1 / 0 ? (s = isNaN(t2) ? 1 : 0, a = c) : (a = Math.floor(Math.log(t2) / Math.LN2), t2 * (u = Math.pow(2, -a)) < 1 && (a--, u *= 2), (t2 += a + h >= 1 ? p / u : p * Math.pow(2, 1 - h)) * u >= 2 && (a++, u /= 2), a + h >= c ? (s = 0, a = c) : a + h >= 1 ? (s = (t2 * u - 1) * Math.pow(2, i), a += h) : (s = t2 * Math.pow(2, h - 1) * Math.pow(2, i), a = 0)); i >= 8; e2[r + f] = 255 & s, f += d, s /= 256, i -= 8)
              ;
            for (a = a << i | s, l += i; l > 0; e2[r + f] = 255 & a, f += d, a /= 256, l -= 8)
              ;
            e2[r + f - d] |= 128 * m;
          };
        }, function(e, t) {
          var r = {}.toString;
          e.exports = Array.isArray || function(e2) {
            return "[object Array]" == r.call(e2);
          };
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(2);
          function o(e2) {
            var t2, r2;
            if (null === e2 || i.isString(e2) || i.isNumber(e2))
              return e2;
            if (i.isArray(e2)) {
              var a = new Array();
              try {
                for (var s = n(e2), u = s.next(); !u.done; u = s.next()) {
                  var l = u.value;
                  a.push(o(l));
                }
              } catch (e3) {
                t2 = { error: e3 };
              } finally {
                try {
                  u && !u.done && (r2 = s.return) && r2.call(s);
                } finally {
                  if (t2)
                    throw t2.error;
                }
              }
              return a;
            }
            if (i.isObject(e2)) {
              a = /* @__PURE__ */ new Map();
              for (var c in e2)
                if (e2.hasOwnProperty(c)) {
                  var h = e2[c];
                  a.set(c, o(h));
                }
              return a;
            }
            return e2;
          }
          t.parseJSONFromBytes = function(e2) {
            var t2 = i.utf8Decode(e2);
            return JSON.parse.call(void 0, t2);
          }, t.serializeJSONToBytes = function(e2) {
            var t2 = JSON.stringify.call(void 0, e2);
            return i.utf8Encode(t2);
          }, t.parseJSONIntoInfraValues = function(e2) {
            return o(JSON.parse.call(void 0, e2));
          }, t.convertAJSONDerivedJavaScriptValueToAnInfraValue = o;
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__generator || function(e2, t2) {
            var r2, n2, i2, o2, a2 = { label: 0, sent: function() {
              if (1 & i2[0])
                throw i2[1];
              return i2[1];
            }, trys: [], ops: [] };
            return o2 = { next: s2(0), throw: s2(1), return: s2(2) }, "function" == typeof Symbol && (o2[Symbol.iterator] = function() {
              return this;
            }), o2;
            function s2(o3) {
              return function(s3) {
                return function(o4) {
                  if (r2)
                    throw new TypeError("Generator is already executing.");
                  for (; a2; )
                    try {
                      if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                        return i2;
                      switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                        case 0:
                        case 1:
                          i2 = o4;
                          break;
                        case 4:
                          return a2.label++, { value: o4[1], done: false };
                        case 5:
                          a2.label++, n2 = o4[1], o4 = [0];
                          continue;
                        case 7:
                          o4 = a2.ops.pop(), a2.trys.pop();
                          continue;
                        default:
                          if (!(i2 = a2.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || 6 !== o4[0] && 2 !== o4[0])) {
                            a2 = 0;
                            continue;
                          }
                          if (3 === o4[0] && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                            a2.label = o4[1];
                            break;
                          }
                          if (6 === o4[0] && a2.label < i2[1]) {
                            a2.label = i2[1], i2 = o4;
                            break;
                          }
                          if (i2 && a2.label < i2[2]) {
                            a2.label = i2[2], a2.ops.push(o4);
                            break;
                          }
                          i2[2] && a2.ops.pop(), a2.trys.pop();
                          continue;
                      }
                      o4 = t2.call(e2, a2);
                    } catch (e3) {
                      o4 = [6, e3], n2 = 0;
                    } finally {
                      r2 = i2 = 0;
                    }
                  if (5 & o4[0])
                    throw o4[1];
                  return { value: o4[0] ? o4[1] : void 0, done: true };
                }([o3, s3]);
              };
            }
          }, i = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          }, o = this && this.__spread || function() {
            for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
              e2 = e2.concat(i(arguments[t2]));
            return e2;
          }, a = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var s = r(2);
          t.append = function(e2, t2) {
            e2.push(t2);
          }, t.extend = function(e2, t2) {
            e2.push.apply(e2, o(t2));
          }, t.prepend = function(e2, t2) {
            e2.unshift(t2);
          }, t.replace = function(e2, t2, r2) {
            var n2, i2, o2 = 0;
            try {
              for (var u = a(e2), l = u.next(); !l.done; l = u.next()) {
                var c = l.value;
                if (s.isFunction(t2))
                  t2.call(null, c) && (e2[o2] = r2);
                else if (c === t2)
                  return void (e2[o2] = r2);
                o2++;
              }
            } catch (e3) {
              n2 = { error: e3 };
            } finally {
              try {
                l && !l.done && (i2 = u.return) && i2.call(u);
              } finally {
                if (n2)
                  throw n2.error;
              }
            }
          }, t.insert = function(e2, t2, r2) {
            e2.splice(r2, 0, t2);
          }, t.remove = function(e2, t2) {
            for (var r2 = e2.length; r2--; ) {
              var n2 = e2[r2];
              if (s.isFunction(t2))
                t2.call(null, n2) && e2.splice(r2, 1);
              else if (n2 === t2)
                return void e2.splice(r2, 1);
            }
          }, t.empty = function(e2) {
            e2.length = 0;
          }, t.contains = function(e2, t2) {
            var r2, n2;
            try {
              for (var i2 = a(e2), o2 = i2.next(); !o2.done; o2 = i2.next()) {
                var u = o2.value;
                if (s.isFunction(t2)) {
                  if (t2.call(null, u))
                    return true;
                } else if (u === t2)
                  return true;
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                o2 && !o2.done && (n2 = i2.return) && n2.call(i2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return false;
          }, t.size = function(e2, t2) {
            var r2, n2;
            if (void 0 === t2)
              return e2.length;
            var i2 = 0;
            try {
              for (var o2 = a(e2), s2 = o2.next(); !s2.done; s2 = o2.next()) {
                var u = s2.value;
                t2.call(null, u) && i2++;
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                s2 && !s2.done && (n2 = o2.return) && n2.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return i2;
          }, t.isEmpty = function(e2) {
            return 0 === e2.length;
          }, t.forEach = function(e2, t2) {
            var r2, i2, o2, s2, u, l;
            return n(this, function(n2) {
              switch (n2.label) {
                case 0:
                  return void 0 !== t2 ? [3, 2] : [5, a(e2)];
                case 1:
                  return n2.sent(), [3, 9];
                case 2:
                  n2.trys.push([2, 7, 8, 9]), r2 = a(e2), i2 = r2.next(), n2.label = 3;
                case 3:
                  return i2.done ? [3, 6] : (o2 = i2.value, t2.call(null, o2) ? [4, o2] : [3, 5]);
                case 4:
                  n2.sent(), n2.label = 5;
                case 5:
                  return i2 = r2.next(), [3, 3];
                case 6:
                  return [3, 9];
                case 7:
                  return s2 = n2.sent(), u = { error: s2 }, [3, 9];
                case 8:
                  try {
                    i2 && !i2.done && (l = r2.return) && l.call(r2);
                  } finally {
                    if (u)
                      throw u.error;
                  }
                  return [7];
                case 9:
                  return [2];
              }
            });
          }, t.clone = function(e2) {
            return new (Array.bind.apply(Array, o([void 0], e2)))();
          }, t.sortInAscendingOrder = function(e2, t2) {
            return e2.sort(function(e3, r2) {
              return t2.call(null, e3, r2) ? -1 : 1;
            });
          }, t.sortInDescendingOrder = function(e2, t2) {
            return e2.sort(function(e3, r2) {
              return t2.call(null, e3, r2) ? 1 : -1;
            });
          };
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__generator || function(e2, t2) {
            var r2, n2, i2, o2, a2 = { label: 0, sent: function() {
              if (1 & i2[0])
                throw i2[1];
              return i2[1];
            }, trys: [], ops: [] };
            return o2 = { next: s2(0), throw: s2(1), return: s2(2) }, "function" == typeof Symbol && (o2[Symbol.iterator] = function() {
              return this;
            }), o2;
            function s2(o3) {
              return function(s3) {
                return function(o4) {
                  if (r2)
                    throw new TypeError("Generator is already executing.");
                  for (; a2; )
                    try {
                      if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                        return i2;
                      switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                        case 0:
                        case 1:
                          i2 = o4;
                          break;
                        case 4:
                          return a2.label++, { value: o4[1], done: false };
                        case 5:
                          a2.label++, n2 = o4[1], o4 = [0];
                          continue;
                        case 7:
                          o4 = a2.ops.pop(), a2.trys.pop();
                          continue;
                        default:
                          if (!(i2 = a2.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || 6 !== o4[0] && 2 !== o4[0])) {
                            a2 = 0;
                            continue;
                          }
                          if (3 === o4[0] && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                            a2.label = o4[1];
                            break;
                          }
                          if (6 === o4[0] && a2.label < i2[1]) {
                            a2.label = i2[1], i2 = o4;
                            break;
                          }
                          if (i2 && a2.label < i2[2]) {
                            a2.label = i2[2], a2.ops.push(o4);
                            break;
                          }
                          i2[2] && a2.ops.pop(), a2.trys.pop();
                          continue;
                      }
                      o4 = t2.call(e2, a2);
                    } catch (e3) {
                      o4 = [6, e3], n2 = 0;
                    } finally {
                      r2 = i2 = 0;
                    }
                  if (5 & o4[0])
                    throw o4[1];
                  return { value: o4[0] ? o4[1] : void 0, done: true };
                }([o3, s3]);
              };
            }
          }, i = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          }, o = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          }, a = this && this.__spread || function() {
            for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
              e2 = e2.concat(o(arguments[t2]));
            return e2;
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var s = r(2);
          t.get = function(e2, t2) {
            return e2.get(t2);
          }, t.set = function(e2, t2, r2) {
            e2.set(t2, r2);
          }, t.remove = function(e2, t2) {
            var r2, n2, o2, a2;
            if (s.isFunction(t2)) {
              var u = [];
              try {
                for (var l = i(e2), c = l.next(); !c.done; c = l.next()) {
                  var h = c.value;
                  t2.call(null, h) && u.push(h[0]);
                }
              } catch (e3) {
                r2 = { error: e3 };
              } finally {
                try {
                  c && !c.done && (n2 = l.return) && n2.call(l);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              try {
                for (var p = i(u), f = p.next(); !f.done; f = p.next()) {
                  var d = f.value;
                  e2.delete(d);
                }
              } catch (e3) {
                o2 = { error: e3 };
              } finally {
                try {
                  f && !f.done && (a2 = p.return) && a2.call(p);
                } finally {
                  if (o2)
                    throw o2.error;
                }
              }
            } else
              e2.delete(t2);
          }, t.contains = function(e2, t2) {
            var r2, n2;
            if (s.isFunction(t2)) {
              try {
                for (var o2 = i(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                  var u = a2.value;
                  if (t2.call(null, u))
                    return true;
                }
              } catch (e3) {
                r2 = { error: e3 };
              } finally {
                try {
                  a2 && !a2.done && (n2 = o2.return) && n2.call(o2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              return false;
            }
            return e2.has(t2);
          }, t.keys = function(e2) {
            return new Set(e2.keys());
          }, t.values = function(e2) {
            return a(e2.values());
          }, t.size = function(e2, t2) {
            var r2, n2;
            if (void 0 === t2)
              return e2.size;
            var o2 = 0;
            try {
              for (var a2 = i(e2), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                var u = s2.value;
                t2.call(null, u) && o2++;
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                s2 && !s2.done && (n2 = a2.return) && n2.call(a2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, t.isEmpty = function(e2) {
            return 0 === e2.size;
          }, t.forEach = function(e2, t2) {
            var r2, o2, a2, s2, u, l;
            return n(this, function(n2) {
              switch (n2.label) {
                case 0:
                  return void 0 !== t2 ? [3, 2] : [5, i(e2)];
                case 1:
                  return n2.sent(), [3, 9];
                case 2:
                  n2.trys.push([2, 7, 8, 9]), r2 = i(e2), o2 = r2.next(), n2.label = 3;
                case 3:
                  return o2.done ? [3, 6] : (a2 = o2.value, t2.call(null, a2) ? [4, a2] : [3, 5]);
                case 4:
                  n2.sent(), n2.label = 5;
                case 5:
                  return o2 = r2.next(), [3, 3];
                case 6:
                  return [3, 9];
                case 7:
                  return s2 = n2.sent(), u = { error: s2 }, [3, 9];
                case 8:
                  try {
                    o2 && !o2.done && (l = r2.return) && l.call(r2);
                  } finally {
                    if (u)
                      throw u.error;
                  }
                  return [7];
                case 9:
                  return [2];
              }
            });
          }, t.clone = function(e2) {
            return new Map(e2);
          }, t.sortInAscendingOrder = function(e2, t2) {
            var r2 = new (Array.bind.apply(Array, a([void 0], e2)))();
            return r2.sort(function(e3, r3) {
              return t2.call(null, e3, r3) ? -1 : 1;
            }), new Map(r2);
          }, t.sortInDescendingOrder = function(e2, t2) {
            var r2 = new (Array.bind.apply(Array, a([void 0], e2)))();
            return r2.sort(function(e3, r3) {
              return t2.call(null, e3, r3) ? 1 : -1;
            }), new Map(r2);
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true }), t.HTML = "http://www.w3.org/1999/xhtml", t.XML = "http://www.w3.org/XML/1998/namespace", t.XMLNS = "http://www.w3.org/2000/xmlns/", t.MathML = "http://www.w3.org/1998/Math/MathML", t.SVG = "http://www.w3.org/2000/svg", t.XLink = "http://www.w3.org/1999/xlink";
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true }), t.enqueue = function(e2, t2) {
            e2.push(t2);
          }, t.dequeue = function(e2) {
            return e2.shift() || null;
          };
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__generator || function(e2, t2) {
            var r2, n2, i2, o2, a2 = { label: 0, sent: function() {
              if (1 & i2[0])
                throw i2[1];
              return i2[1];
            }, trys: [], ops: [] };
            return o2 = { next: s2(0), throw: s2(1), return: s2(2) }, "function" == typeof Symbol && (o2[Symbol.iterator] = function() {
              return this;
            }), o2;
            function s2(o3) {
              return function(s3) {
                return function(o4) {
                  if (r2)
                    throw new TypeError("Generator is already executing.");
                  for (; a2; )
                    try {
                      if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                        return i2;
                      switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                        case 0:
                        case 1:
                          i2 = o4;
                          break;
                        case 4:
                          return a2.label++, { value: o4[1], done: false };
                        case 5:
                          a2.label++, n2 = o4[1], o4 = [0];
                          continue;
                        case 7:
                          o4 = a2.ops.pop(), a2.trys.pop();
                          continue;
                        default:
                          if (!(i2 = a2.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || 6 !== o4[0] && 2 !== o4[0])) {
                            a2 = 0;
                            continue;
                          }
                          if (3 === o4[0] && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                            a2.label = o4[1];
                            break;
                          }
                          if (6 === o4[0] && a2.label < i2[1]) {
                            a2.label = i2[1], i2 = o4;
                            break;
                          }
                          if (i2 && a2.label < i2[2]) {
                            a2.label = i2[2], a2.ops.push(o4);
                            break;
                          }
                          i2[2] && a2.ops.pop(), a2.trys.pop();
                          continue;
                      }
                      o4 = t2.call(e2, a2);
                    } catch (e3) {
                      o4 = [6, e3], n2 = 0;
                    } finally {
                      r2 = i2 = 0;
                    }
                  if (5 & o4[0])
                    throw o4[1];
                  return { value: o4[0] ? o4[1] : void 0, done: true };
                }([o3, s3]);
              };
            }
          }, i = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          }, o = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          }, a = this && this.__spread || function() {
            for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
              e2 = e2.concat(o(arguments[t2]));
            return e2;
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var s = r(2);
          function u(e2, t2) {
            var r2, n2;
            try {
              for (var o2 = i(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s2 = a2.value;
                if (!t2.has(s2))
                  return false;
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                a2 && !a2.done && (n2 = o2.return) && n2.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return true;
          }
          t.append = function(e2, t2) {
            e2.add(t2);
          }, t.extend = function(e2, t2) {
            t2.forEach(e2.add, e2);
          }, t.prepend = function(e2, t2) {
            var r2 = new Set(e2);
            e2.clear(), e2.add(t2), r2.forEach(e2.add, e2);
          }, t.replace = function(e2, t2, r2) {
            var n2, o2, a2 = /* @__PURE__ */ new Set();
            try {
              for (var u2 = i(e2), l = u2.next(); !l.done; l = u2.next()) {
                var c = l.value;
                s.isFunction(t2) ? t2.call(null, c) ? a2.add(r2) : a2.add(c) : c === t2 ? a2.add(r2) : a2.add(c);
              }
            } catch (e3) {
              n2 = { error: e3 };
            } finally {
              try {
                l && !l.done && (o2 = u2.return) && o2.call(u2);
              } finally {
                if (n2)
                  throw n2.error;
              }
            }
            e2.clear(), a2.forEach(e2.add, e2);
          }, t.insert = function(e2, t2, r2) {
            var n2, o2, a2 = /* @__PURE__ */ new Set(), s2 = 0;
            try {
              for (var u2 = i(e2), l = u2.next(); !l.done; l = u2.next()) {
                var c = l.value;
                s2 === r2 && a2.add(t2), a2.add(c), s2++;
              }
            } catch (e3) {
              n2 = { error: e3 };
            } finally {
              try {
                l && !l.done && (o2 = u2.return) && o2.call(u2);
              } finally {
                if (n2)
                  throw n2.error;
              }
            }
            e2.clear(), a2.forEach(e2.add, e2);
          }, t.remove = function(e2, t2) {
            var r2, n2, o2, a2;
            if (s.isFunction(t2)) {
              var u2 = [];
              try {
                for (var l = i(e2), c = l.next(); !c.done; c = l.next()) {
                  var h = c.value;
                  t2.call(null, h) && u2.push(h);
                }
              } catch (e3) {
                r2 = { error: e3 };
              } finally {
                try {
                  c && !c.done && (n2 = l.return) && n2.call(l);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              try {
                for (var p = i(u2), f = p.next(); !f.done; f = p.next()) {
                  var d = f.value;
                  e2.delete(d);
                }
              } catch (e3) {
                o2 = { error: e3 };
              } finally {
                try {
                  f && !f.done && (a2 = p.return) && a2.call(p);
                } finally {
                  if (o2)
                    throw o2.error;
                }
              }
            } else
              e2.delete(t2);
          }, t.empty = function(e2) {
            e2.clear();
          }, t.contains = function(e2, t2) {
            var r2, n2;
            if (!s.isFunction(t2))
              return e2.has(t2);
            try {
              for (var o2 = i(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var u2 = a2.value;
                if (t2.call(null, u2))
                  return true;
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                a2 && !a2.done && (n2 = o2.return) && n2.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return false;
          }, t.size = function(e2, t2) {
            var r2, n2;
            if (void 0 === t2)
              return e2.size;
            var o2 = 0;
            try {
              for (var a2 = i(e2), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                var u2 = s2.value;
                t2.call(null, u2) && o2++;
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                s2 && !s2.done && (n2 = a2.return) && n2.call(a2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, t.isEmpty = function(e2) {
            return 0 === e2.size;
          }, t.forEach = function(e2, t2) {
            var r2, o2, a2, s2, u2, l;
            return n(this, function(n2) {
              switch (n2.label) {
                case 0:
                  return void 0 !== t2 ? [3, 2] : [5, i(e2)];
                case 1:
                  return n2.sent(), [3, 9];
                case 2:
                  n2.trys.push([2, 7, 8, 9]), r2 = i(e2), o2 = r2.next(), n2.label = 3;
                case 3:
                  return o2.done ? [3, 6] : (a2 = o2.value, t2.call(null, a2) ? [4, a2] : [3, 5]);
                case 4:
                  n2.sent(), n2.label = 5;
                case 5:
                  return o2 = r2.next(), [3, 3];
                case 6:
                  return [3, 9];
                case 7:
                  return s2 = n2.sent(), u2 = { error: s2 }, [3, 9];
                case 8:
                  try {
                    o2 && !o2.done && (l = r2.return) && l.call(r2);
                  } finally {
                    if (u2)
                      throw u2.error;
                  }
                  return [7];
                case 9:
                  return [2];
              }
            });
          }, t.clone = function(e2) {
            return new Set(e2);
          }, t.sortInAscendingOrder = function(e2, t2) {
            var r2 = new (Array.bind.apply(Array, a([void 0], e2)))();
            return r2.sort(function(e3, r3) {
              return t2.call(null, e3, r3) ? -1 : 1;
            }), new Set(r2);
          }, t.sortInDescendingOrder = function(e2, t2) {
            var r2 = new (Array.bind.apply(Array, a([void 0], e2)))();
            return r2.sort(function(e3, r3) {
              return t2.call(null, e3, r3) ? 1 : -1;
            }), new Set(r2);
          }, t.isSubsetOf = u, t.isSupersetOf = function(e2, t2) {
            return u(t2, e2);
          }, t.intersection = function(e2, t2) {
            var r2, n2, o2 = /* @__PURE__ */ new Set();
            try {
              for (var a2 = i(e2), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                var u2 = s2.value;
                t2.has(u2) && o2.add(u2);
              }
            } catch (e3) {
              r2 = { error: e3 };
            } finally {
              try {
                s2 && !s2.done && (n2 = a2.return) && n2.call(a2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, t.union = function(e2, t2) {
            var r2 = new Set(e2);
            return t2.forEach(r2.add, r2), r2;
          }, t.range = function(e2, t2) {
            for (var r2 = /* @__PURE__ */ new Set(), n2 = e2; n2 <= t2; n2++)
              r2.add(n2);
            return r2;
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true }), t.push = function(e2, t2) {
            e2.push(t2);
          }, t.pop = function(e2) {
            return e2.pop() || null;
          };
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(96), o = r(147), a = r(146), s = r(2);
          function u(e2, t2) {
            for (var r2 = 0; ; ) {
              var n2 = r2 < e2.length ? e2.charCodeAt(r2) : null, i2 = r2 < t2.length ? t2.charCodeAt(r2) : null;
              if (null === n2)
                return true;
              if (n2 !== i2)
                return false;
              r2++;
            }
          }
          function l(e2) {
            var t2, r2, i2 = Array.from(e2), o2 = new Uint8Array(i2.length), a2 = 0;
            try {
              for (var s2 = n(e2), u2 = s2.next(); !u2.done; u2 = s2.next()) {
                var l2 = u2.value.codePointAt(0);
                console.assert(void 0 !== l2 && l2 <= 255, "isomorphicEncode requires string bytes to be less than or equal to 0x00FF."), void 0 !== l2 && l2 <= 255 && (o2[a2++] = l2);
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                u2 && !u2.done && (r2 = s2.return) && r2.call(s2);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            return o2;
          }
          function c(e2) {
            return /^[\u0000-\u007F]*$/.test(e2);
          }
          function h(e2) {
            var t2, r2, i2 = "";
            try {
              for (var o2 = n(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s2 = a2.value, u2 = s2.codePointAt(0);
                i2 += void 0 !== u2 && u2 >= 65 && u2 <= 90 ? String.fromCodePoint(u2 + 32) : s2;
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                a2 && !a2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            return i2;
          }
          function p(e2) {
            return e2.replace(/^[\t\n\f\r ]+/, "").replace(/[\t\n\f\r ]+$/, "");
          }
          function f(e2, t2, r2) {
            if (!s.isArray(t2))
              return f(e2, Array.from(t2), r2);
            for (var n2 = ""; r2.position < t2.length && e2.call(null, t2[r2.position]); )
              n2 += t2[r2.position], r2.position++;
            return n2;
          }
          function d(e2, t2) {
            f(function(e3) {
              return i.ASCIIWhiteSpace.test(e3);
            }, e2, t2);
          }
          t.isCodeUnitPrefix = u, t.isCodeUnitLessThan = function(e2, t2) {
            if (u(t2, e2))
              return false;
            if (u(e2, t2))
              return true;
            for (var r2 = 0; r2 < Math.min(e2.length, t2.length); r2++) {
              var n2 = e2.charCodeAt(r2), i2 = t2.charCodeAt(r2);
              if (n2 !== i2)
                return n2 < i2;
            }
            return false;
          }, t.isomorphicEncode = l, t.isASCIIString = c, t.asciiLowercase = h, t.asciiUppercase = function(e2) {
            var t2, r2, i2 = "";
            try {
              for (var o2 = n(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s2 = a2.value, u2 = s2.codePointAt(0);
                i2 += void 0 !== u2 && u2 >= 97 && u2 <= 122 ? String.fromCodePoint(u2 - 32) : s2;
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                a2 && !a2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            return i2;
          }, t.asciiCaseInsensitiveMatch = function(e2, t2) {
            return h(e2) === h(t2);
          }, t.asciiEncode = function(e2) {
            return console.assert(c(e2), "asciiEncode requires an ASCII string."), l(e2);
          }, t.asciiDecode = function(e2) {
            var t2, r2;
            try {
              for (var i2 = n(e2), s2 = i2.next(); !s2.done; s2 = i2.next()) {
                var u2 = s2.value;
                console.assert(a.isASCIIByte(u2), "asciiDecode requires an ASCII byte sequence.");
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                s2 && !s2.done && (r2 = i2.return) && r2.call(i2);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            return o.isomorphicDecode(e2);
          }, t.stripNewlines = function(e2) {
            return e2.replace(/[\n\r]/g, "");
          }, t.normalizeNewlines = function(e2) {
            return e2.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
          }, t.stripLeadingAndTrailingASCIIWhitespace = p, t.stripAndCollapseASCIIWhitespace = function(e2) {
            return p(e2.replace(/[\t\n\f\r ]{2,}/g, " "));
          }, t.collectASequenceOfCodePoints = f, t.skipASCIIWhitespace = d, t.strictlySplit = function e2(t2, r2) {
            if (!s.isArray(t2))
              return e2(Array.from(t2), r2);
            var n2 = { position: 0 }, i2 = [], o2 = f(function(e3) {
              return r2 !== e3;
            }, t2, n2);
            for (i2.push(o2); n2.position < t2.length; )
              console.assert(t2[n2.position] === r2, "strictlySplit found no delimiter in input string."), n2.position++, o2 = f(function(e3) {
                return r2 !== e3;
              }, t2, n2), i2.push(o2);
            return i2;
          }, t.splitAStringOnASCIIWhitespace = function e2(t2) {
            if (!s.isArray(t2))
              return e2(Array.from(t2));
            var r2 = { position: 0 }, n2 = [];
            for (d(t2, r2); r2.position < t2.length; ) {
              var o2 = f(function(e3) {
                return !i.ASCIIWhiteSpace.test(e3);
              }, t2, r2);
              n2.push(o2), d(t2, r2);
            }
            return n2;
          }, t.splitAStringOnCommas = function e2(t2) {
            if (!s.isArray(t2))
              return e2(Array.from(t2));
            for (var r2 = { position: 0 }, n2 = []; r2.position < t2.length; ) {
              var i2 = f(function(e3) {
                return "," !== e3;
              }, t2, r2);
              n2.push(p(i2)), r2.position < t2.length && (console.assert("," === t2[r2.position], "splitAStringOnCommas found no delimiter in input string."), r2.position++);
            }
            return n2;
          }, t.concatenate = function(e2, t2) {
            return void 0 === t2 && (t2 = ""), 0 === e2.length ? "" : e2.join(t2);
          };
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(97);
          t.abort_add = function(e2, t2) {
            t2._abortedFlag || t2._abortAlgorithms.add(e2);
          }, t.abort_remove = function(e2, t2) {
            t2._abortAlgorithms.delete(e2);
          }, t.abort_signalAbort = function(e2) {
            var t2, r2;
            if (!e2._abortedFlag) {
              e2._abortedFlag = true;
              try {
                for (var o = n(e2._abortAlgorithms), a = o.next(); !a.done; a = o.next()) {
                  a.value.call(e2);
                }
              } catch (e3) {
                t2 = { error: e3 };
              } finally {
                try {
                  a && !a.done && (r2 = o.return) && r2.call(o);
                } finally {
                  if (t2)
                    throw t2.error;
                }
              }
              e2._abortAlgorithms.clear(), i.event_fireAnEvent("abort", e2);
            }
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(150), i = function() {
            function e2() {
            }
            return e2.asNode = function(e3) {
              if (n.Guard.isNode(e3))
                return e3;
              throw new Error("Invalid object. Node expected.");
            }, e2;
          }();
          t.Cast = i;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = function() {
            function e2() {
            }
            return Object.defineProperty(e2.prototype, "size", { get: function() {
              return 0;
            }, enumerable: true, configurable: true }), e2.prototype.add = function(e3) {
              throw new Error("Cannot add to an empty set.");
            }, e2.prototype.clear = function() {
            }, e2.prototype.delete = function(e3) {
              return false;
            }, e2.prototype.forEach = function(e3, t2) {
            }, e2.prototype.has = function(e3) {
              return false;
            }, e2.prototype[Symbol.iterator] = function() {
              return new i();
            }, e2.prototype.entries = function() {
              return new i();
            }, e2.prototype.keys = function() {
              return new i();
            }, e2.prototype.values = function() {
              return new i();
            }, Object.defineProperty(e2.prototype, Symbol.toStringTag, { get: function() {
              return "EmptySet";
            }, enumerable: true, configurable: true }), e2;
          }();
          t.EmptySet = n;
          var i = function() {
            function e2() {
            }
            return e2.prototype[Symbol.iterator] = function() {
              return this;
            }, e2.prototype.next = function() {
              return { done: true, value: null };
            }, e2;
          }();
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true }), function(e2) {
            e2[e2.SchemeStart = 0] = "SchemeStart", e2[e2.Scheme = 1] = "Scheme", e2[e2.NoScheme = 2] = "NoScheme", e2[e2.SpecialRelativeOrAuthority = 3] = "SpecialRelativeOrAuthority", e2[e2.PathOrAuthority = 4] = "PathOrAuthority", e2[e2.Relative = 5] = "Relative", e2[e2.RelativeSlash = 6] = "RelativeSlash", e2[e2.SpecialAuthoritySlashes = 7] = "SpecialAuthoritySlashes", e2[e2.SpecialAuthorityIgnoreSlashes = 8] = "SpecialAuthorityIgnoreSlashes", e2[e2.Authority = 9] = "Authority", e2[e2.Host = 10] = "Host", e2[e2.Hostname = 11] = "Hostname", e2[e2.Port = 12] = "Port", e2[e2.File = 13] = "File", e2[e2.FileSlash = 14] = "FileSlash", e2[e2.FileHost = 15] = "FileHost", e2[e2.PathStart = 16] = "PathStart", e2[e2.Path = 17] = "Path", e2[e2.CannotBeABaseURLPath = 18] = "CannotBeABaseURLPath", e2[e2.Query = 19] = "Query", e2[e2.Fragment = 20] = "Fragment";
          }(t.ParserState || (t.ParserState = {})), t.OpaqueOrigin = ["", "", null, null];
        }, function(e, t, r) {
          "use strict";
          var n = r(245), i = r(247);
          function o() {
            this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
          }
          t.parse = g, t.resolve = function(e2, t2) {
            return g(e2, false, true).resolve(t2);
          }, t.resolveObject = function(e2, t2) {
            return e2 ? g(e2, false, true).resolveObject(t2) : t2;
          }, t.format = function(e2) {
            i.isString(e2) && (e2 = g(e2));
            return e2 instanceof o ? e2.format() : o.prototype.format.call(e2);
          }, t.Url = o;
          var a = /^([a-z0-9.+-]+:)/i, s = /:[0-9]*$/, u = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, l = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", '"', "`", " ", "\r", "\n", "	"]), c = ["'"].concat(l), h = ["%", "/", "?", ";", "#"].concat(c), p = ["/", "?", "#"], f = /^[+a-z0-9A-Z_-]{0,63}$/, d = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, m = { javascript: true, "javascript:": true }, y = { javascript: true, "javascript:": true }, v = { http: true, https: true, ftp: true, gopher: true, file: true, "http:": true, "https:": true, "ftp:": true, "gopher:": true, "file:": true }, _ = r(248);
          function g(e2, t2, r2) {
            if (e2 && i.isObject(e2) && e2 instanceof o)
              return e2;
            var n2 = new o();
            return n2.parse(e2, t2, r2), n2;
          }
          o.prototype.parse = function(e2, t2, r2) {
            if (!i.isString(e2))
              throw new TypeError("Parameter 'url' must be a string, not " + typeof e2);
            var o2 = e2.indexOf("?"), s2 = -1 !== o2 && o2 < e2.indexOf("#") ? "?" : "#", l2 = e2.split(s2);
            l2[0] = l2[0].replace(/\\/g, "/");
            var g2 = e2 = l2.join(s2);
            if (g2 = g2.trim(), !r2 && 1 === e2.split("#").length) {
              var b = u.exec(g2);
              if (b)
                return this.path = g2, this.href = g2, this.pathname = b[1], b[2] ? (this.search = b[2], this.query = t2 ? _.parse(this.search.substr(1)) : this.search.substr(1)) : t2 && (this.search = "", this.query = {}), this;
            }
            var x = a.exec(g2);
            if (x) {
              var w = (x = x[0]).toLowerCase();
              this.protocol = w, g2 = g2.substr(x.length);
            }
            if (r2 || x || g2.match(/^\/\/[^@\/]+@[^@\/]+/)) {
              var E = "//" === g2.substr(0, 2);
              !E || x && y[x] || (g2 = g2.substr(2), this.slashes = true);
            }
            if (!y[x] && (E || x && !v[x])) {
              for (var D, S, C = -1, A = 0; A < p.length; A++) {
                -1 !== (N = g2.indexOf(p[A])) && (-1 === C || N < C) && (C = N);
              }
              -1 !== (S = -1 === C ? g2.lastIndexOf("@") : g2.lastIndexOf("@", C)) && (D = g2.slice(0, S), g2 = g2.slice(S + 1), this.auth = decodeURIComponent(D)), C = -1;
              for (A = 0; A < h.length; A++) {
                var N;
                -1 !== (N = g2.indexOf(h[A])) && (-1 === C || N < C) && (C = N);
              }
              -1 === C && (C = g2.length), this.host = g2.slice(0, C), g2 = g2.slice(C), this.parseHost(), this.hostname = this.hostname || "";
              var T = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
              if (!T)
                for (var O = this.hostname.split(/\./), F = (A = 0, O.length); A < F; A++) {
                  var k = O[A];
                  if (k && !k.match(f)) {
                    for (var P = "", I = 0, L = k.length; I < L; I++)
                      k.charCodeAt(I) > 127 ? P += "x" : P += k[I];
                    if (!P.match(f)) {
                      var M = O.slice(0, A), B = O.slice(A + 1), j = k.match(d);
                      j && (M.push(j[1]), B.unshift(j[2])), B.length && (g2 = "/" + B.join(".") + g2), this.hostname = M.join(".");
                      break;
                    }
                  }
                }
              this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), T || (this.hostname = n.toASCII(this.hostname));
              var R = this.port ? ":" + this.port : "", z2 = this.hostname || "";
              this.host = z2 + R, this.href += this.host, T && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== g2[0] && (g2 = "/" + g2));
            }
            if (!m[w])
              for (A = 0, F = c.length; A < F; A++) {
                var U = c[A];
                if (-1 !== g2.indexOf(U)) {
                  var G = encodeURIComponent(U);
                  G === U && (G = escape(U)), g2 = g2.split(U).join(G);
                }
              }
            var X = g2.indexOf("#");
            -1 !== X && (this.hash = g2.substr(X), g2 = g2.slice(0, X));
            var q = g2.indexOf("?");
            if (-1 !== q ? (this.search = g2.substr(q), this.query = g2.substr(q + 1), t2 && (this.query = _.parse(this.query)), g2 = g2.slice(0, q)) : t2 && (this.search = "", this.query = {}), g2 && (this.pathname = g2), v[w] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
              R = this.pathname || "";
              var W = this.search || "";
              this.path = R + W;
            }
            return this.href = this.format(), this;
          }, o.prototype.format = function() {
            var e2 = this.auth || "";
            e2 && (e2 = (e2 = encodeURIComponent(e2)).replace(/%3A/i, ":"), e2 += "@");
            var t2 = this.protocol || "", r2 = this.pathname || "", n2 = this.hash || "", o2 = false, a2 = "";
            this.host ? o2 = e2 + this.host : this.hostname && (o2 = e2 + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]"), this.port && (o2 += ":" + this.port)), this.query && i.isObject(this.query) && Object.keys(this.query).length && (a2 = _.stringify(this.query));
            var s2 = this.search || a2 && "?" + a2 || "";
            return t2 && ":" !== t2.substr(-1) && (t2 += ":"), this.slashes || (!t2 || v[t2]) && false !== o2 ? (o2 = "//" + (o2 || ""), r2 && "/" !== r2.charAt(0) && (r2 = "/" + r2)) : o2 || (o2 = ""), n2 && "#" !== n2.charAt(0) && (n2 = "#" + n2), s2 && "?" !== s2.charAt(0) && (s2 = "?" + s2), t2 + o2 + (r2 = r2.replace(/[?#]/g, function(e3) {
              return encodeURIComponent(e3);
            })) + (s2 = s2.replace("#", "%23")) + n2;
          }, o.prototype.resolve = function(e2) {
            return this.resolveObject(g(e2, false, true)).format();
          }, o.prototype.resolveObject = function(e2) {
            if (i.isString(e2)) {
              var t2 = new o();
              t2.parse(e2, false, true), e2 = t2;
            }
            for (var r2 = new o(), n2 = Object.keys(this), a2 = 0; a2 < n2.length; a2++) {
              var s2 = n2[a2];
              r2[s2] = this[s2];
            }
            if (r2.hash = e2.hash, "" === e2.href)
              return r2.href = r2.format(), r2;
            if (e2.slashes && !e2.protocol) {
              for (var u2 = Object.keys(e2), l2 = 0; l2 < u2.length; l2++) {
                var c2 = u2[l2];
                "protocol" !== c2 && (r2[c2] = e2[c2]);
              }
              return v[r2.protocol] && r2.hostname && !r2.pathname && (r2.path = r2.pathname = "/"), r2.href = r2.format(), r2;
            }
            if (e2.protocol && e2.protocol !== r2.protocol) {
              if (!v[e2.protocol]) {
                for (var h2 = Object.keys(e2), p2 = 0; p2 < h2.length; p2++) {
                  var f2 = h2[p2];
                  r2[f2] = e2[f2];
                }
                return r2.href = r2.format(), r2;
              }
              if (r2.protocol = e2.protocol, e2.host || y[e2.protocol])
                r2.pathname = e2.pathname;
              else {
                for (var d2 = (e2.pathname || "").split("/"); d2.length && !(e2.host = d2.shift()); )
                  ;
                e2.host || (e2.host = ""), e2.hostname || (e2.hostname = ""), "" !== d2[0] && d2.unshift(""), d2.length < 2 && d2.unshift(""), r2.pathname = d2.join("/");
              }
              if (r2.search = e2.search, r2.query = e2.query, r2.host = e2.host || "", r2.auth = e2.auth, r2.hostname = e2.hostname || e2.host, r2.port = e2.port, r2.pathname || r2.search) {
                var m2 = r2.pathname || "", _2 = r2.search || "";
                r2.path = m2 + _2;
              }
              return r2.slashes = r2.slashes || e2.slashes, r2.href = r2.format(), r2;
            }
            var g2 = r2.pathname && "/" === r2.pathname.charAt(0), b = e2.host || e2.pathname && "/" === e2.pathname.charAt(0), x = b || g2 || r2.host && e2.pathname, w = x, E = r2.pathname && r2.pathname.split("/") || [], D = (d2 = e2.pathname && e2.pathname.split("/") || [], r2.protocol && !v[r2.protocol]);
            if (D && (r2.hostname = "", r2.port = null, r2.host && ("" === E[0] ? E[0] = r2.host : E.unshift(r2.host)), r2.host = "", e2.protocol && (e2.hostname = null, e2.port = null, e2.host && ("" === d2[0] ? d2[0] = e2.host : d2.unshift(e2.host)), e2.host = null), x = x && ("" === d2[0] || "" === E[0])), b)
              r2.host = e2.host || "" === e2.host ? e2.host : r2.host, r2.hostname = e2.hostname || "" === e2.hostname ? e2.hostname : r2.hostname, r2.search = e2.search, r2.query = e2.query, E = d2;
            else if (d2.length)
              E || (E = []), E.pop(), E = E.concat(d2), r2.search = e2.search, r2.query = e2.query;
            else if (!i.isNullOrUndefined(e2.search)) {
              if (D)
                r2.hostname = r2.host = E.shift(), (T = !!(r2.host && r2.host.indexOf("@") > 0) && r2.host.split("@")) && (r2.auth = T.shift(), r2.host = r2.hostname = T.shift());
              return r2.search = e2.search, r2.query = e2.query, i.isNull(r2.pathname) && i.isNull(r2.search) || (r2.path = (r2.pathname ? r2.pathname : "") + (r2.search ? r2.search : "")), r2.href = r2.format(), r2;
            }
            if (!E.length)
              return r2.pathname = null, r2.search ? r2.path = "/" + r2.search : r2.path = null, r2.href = r2.format(), r2;
            for (var S = E.slice(-1)[0], C = (r2.host || e2.host || E.length > 1) && ("." === S || ".." === S) || "" === S, A = 0, N = E.length; N >= 0; N--)
              "." === (S = E[N]) ? E.splice(N, 1) : ".." === S ? (E.splice(N, 1), A++) : A && (E.splice(N, 1), A--);
            if (!x && !w)
              for (; A--; A)
                E.unshift("..");
            !x || "" === E[0] || E[0] && "/" === E[0].charAt(0) || E.unshift(""), C && "/" !== E.join("/").substr(-1) && E.push("");
            var T, O = "" === E[0] || E[0] && "/" === E[0].charAt(0);
            D && (r2.hostname = r2.host = O ? "" : E.length ? E.shift() : "", (T = !!(r2.host && r2.host.indexOf("@") > 0) && r2.host.split("@")) && (r2.auth = T.shift(), r2.host = r2.hostname = T.shift()));
            return (x = x || r2.host && E.length) && !O && E.unshift(""), E.length ? r2.pathname = E.join("/") : (r2.pathname = null, r2.path = null), i.isNull(r2.pathname) && i.isNull(r2.search) || (r2.path = (r2.pathname ? r2.pathname : "") + (r2.search ? r2.search : "")), r2.auth = e2.auth || r2.auth, r2.slashes = r2.slashes || e2.slashes, r2.href = r2.format(), r2;
          }, o.prototype.parseHost = function() {
            var e2 = this.host, t2 = s.exec(e2);
            t2 && (":" !== (t2 = t2[0]) && (this.port = t2.substr(1)), e2 = e2.substr(0, e2.length - t2.length)), e2 && (this.hostname = e2);
          };
        }, function(e, t, r) {
          (function(e2, n) {
            var i;
            !function(o) {
              t && t.nodeType, e2 && e2.nodeType;
              var a = "object" == typeof n && n;
              a.global !== a && a.window !== a && a.self;
              var s, u = 2147483647, l = /^xn--/, c = /[^\x20-\x7E]/, h = /[\x2E\u3002\uFF0E\uFF61]/g, p = { overflow: "Overflow: input needs wider integers to process", "not-basic": "Illegal input >= 0x80 (not a basic code point)", "invalid-input": "Invalid input" }, f = Math.floor, d = String.fromCharCode;
              function m(e3) {
                throw new RangeError(p[e3]);
              }
              function y(e3, t2) {
                for (var r2 = e3.length, n2 = []; r2--; )
                  n2[r2] = t2(e3[r2]);
                return n2;
              }
              function v(e3, t2) {
                var r2 = e3.split("@"), n2 = "";
                return r2.length > 1 && (n2 = r2[0] + "@", e3 = r2[1]), n2 + y((e3 = e3.replace(h, ".")).split("."), t2).join(".");
              }
              function _(e3) {
                for (var t2, r2, n2 = [], i2 = 0, o2 = e3.length; i2 < o2; )
                  (t2 = e3.charCodeAt(i2++)) >= 55296 && t2 <= 56319 && i2 < o2 ? 56320 == (64512 & (r2 = e3.charCodeAt(i2++))) ? n2.push(((1023 & t2) << 10) + (1023 & r2) + 65536) : (n2.push(t2), i2--) : n2.push(t2);
                return n2;
              }
              function g(e3) {
                return y(e3, function(e4) {
                  var t2 = "";
                  return e4 > 65535 && (t2 += d((e4 -= 65536) >>> 10 & 1023 | 55296), e4 = 56320 | 1023 & e4), t2 += d(e4);
                }).join("");
              }
              function b(e3, t2) {
                return e3 + 22 + 75 * (e3 < 26) - ((0 != t2) << 5);
              }
              function x(e3, t2, r2) {
                var n2 = 0;
                for (e3 = r2 ? f(e3 / 700) : e3 >> 1, e3 += f(e3 / t2); e3 > 455; n2 += 36)
                  e3 = f(e3 / 35);
                return f(n2 + 36 * e3 / (e3 + 38));
              }
              function w(e3) {
                var t2, r2, n2, i2, o2, a2, s2, l2, c2, h2, p2, d2 = [], y2 = e3.length, v2 = 0, _2 = 128, b2 = 72;
                for ((r2 = e3.lastIndexOf("-")) < 0 && (r2 = 0), n2 = 0; n2 < r2; ++n2)
                  e3.charCodeAt(n2) >= 128 && m("not-basic"), d2.push(e3.charCodeAt(n2));
                for (i2 = r2 > 0 ? r2 + 1 : 0; i2 < y2; ) {
                  for (o2 = v2, a2 = 1, s2 = 36; i2 >= y2 && m("invalid-input"), ((l2 = (p2 = e3.charCodeAt(i2++)) - 48 < 10 ? p2 - 22 : p2 - 65 < 26 ? p2 - 65 : p2 - 97 < 26 ? p2 - 97 : 36) >= 36 || l2 > f((u - v2) / a2)) && m("overflow"), v2 += l2 * a2, !(l2 < (c2 = s2 <= b2 ? 1 : s2 >= b2 + 26 ? 26 : s2 - b2)); s2 += 36)
                    a2 > f(u / (h2 = 36 - c2)) && m("overflow"), a2 *= h2;
                  b2 = x(v2 - o2, t2 = d2.length + 1, 0 == o2), f(v2 / t2) > u - _2 && m("overflow"), _2 += f(v2 / t2), v2 %= t2, d2.splice(v2++, 0, _2);
                }
                return g(d2);
              }
              function E(e3) {
                var t2, r2, n2, i2, o2, a2, s2, l2, c2, h2, p2, y2, v2, g2, w2, E2 = [];
                for (y2 = (e3 = _(e3)).length, t2 = 128, r2 = 0, o2 = 72, a2 = 0; a2 < y2; ++a2)
                  (p2 = e3[a2]) < 128 && E2.push(d(p2));
                for (n2 = i2 = E2.length, i2 && E2.push("-"); n2 < y2; ) {
                  for (s2 = u, a2 = 0; a2 < y2; ++a2)
                    (p2 = e3[a2]) >= t2 && p2 < s2 && (s2 = p2);
                  for (s2 - t2 > f((u - r2) / (v2 = n2 + 1)) && m("overflow"), r2 += (s2 - t2) * v2, t2 = s2, a2 = 0; a2 < y2; ++a2)
                    if ((p2 = e3[a2]) < t2 && ++r2 > u && m("overflow"), p2 == t2) {
                      for (l2 = r2, c2 = 36; !(l2 < (h2 = c2 <= o2 ? 1 : c2 >= o2 + 26 ? 26 : c2 - o2)); c2 += 36)
                        w2 = l2 - h2, g2 = 36 - h2, E2.push(d(b(h2 + w2 % g2, 0))), l2 = f(w2 / g2);
                      E2.push(d(b(l2, 0))), o2 = x(r2, v2, n2 == i2), r2 = 0, ++n2;
                    }
                  ++r2, ++t2;
                }
                return E2.join("");
              }
              s = { version: "1.4.1", ucs2: { decode: _, encode: g }, decode: w, encode: E, toASCII: function(e3) {
                return v(e3, function(e4) {
                  return c.test(e4) ? "xn--" + E(e4) : e4;
                });
              }, toUnicode: function(e3) {
                return v(e3, function(e4) {
                  return l.test(e4) ? w(e4.slice(4).toLowerCase()) : e4;
                });
              } }, void 0 === (i = function() {
                return s;
              }.call(t, r, t, e2)) || (e2.exports = i);
            }();
          }).call(this, r(246)(e), r(78));
        }, function(e, t) {
          e.exports = function(e2) {
            return e2.webpackPolyfill || (e2.deprecate = function() {
            }, e2.paths = [], e2.children || (e2.children = []), Object.defineProperty(e2, "loaded", { enumerable: true, get: function() {
              return e2.l;
            } }), Object.defineProperty(e2, "id", { enumerable: true, get: function() {
              return e2.i;
            } }), e2.webpackPolyfill = 1), e2;
          };
        }, function(e, t, r) {
          "use strict";
          e.exports = { isString: function(e2) {
            return "string" == typeof e2;
          }, isObject: function(e2) {
            return "object" == typeof e2 && null !== e2;
          }, isNull: function(e2) {
            return null === e2;
          }, isNullOrUndefined: function(e2) {
            return null == e2;
          } };
        }, function(e, t, r) {
          "use strict";
          t.decode = t.parse = r(249), t.encode = t.stringify = r(250);
        }, function(e, t, r) {
          "use strict";
          function n(e2, t2) {
            return Object.prototype.hasOwnProperty.call(e2, t2);
          }
          e.exports = function(e2, t2, r2, o) {
            t2 = t2 || "&", r2 = r2 || "=";
            var a = {};
            if ("string" != typeof e2 || 0 === e2.length)
              return a;
            var s = /\+/g;
            e2 = e2.split(t2);
            var u = 1e3;
            o && "number" == typeof o.maxKeys && (u = o.maxKeys);
            var l = e2.length;
            u > 0 && l > u && (l = u);
            for (var c = 0; c < l; ++c) {
              var h, p, f, d, m = e2[c].replace(s, "%20"), y = m.indexOf(r2);
              y >= 0 ? (h = m.substr(0, y), p = m.substr(y + 1)) : (h = m, p = ""), f = decodeURIComponent(h), d = decodeURIComponent(p), n(a, f) ? i(a[f]) ? a[f].push(d) : a[f] = [a[f], d] : a[f] = d;
            }
            return a;
          };
          var i = Array.isArray || function(e2) {
            return "[object Array]" === Object.prototype.toString.call(e2);
          };
        }, function(e, t, r) {
          "use strict";
          var n = function(e2) {
            switch (typeof e2) {
              case "string":
                return e2;
              case "boolean":
                return e2 ? "true" : "false";
              case "number":
                return isFinite(e2) ? e2 : "";
              default:
                return "";
            }
          };
          e.exports = function(e2, t2, r2, s) {
            return t2 = t2 || "&", r2 = r2 || "=", null === e2 && (e2 = void 0), "object" == typeof e2 ? o(a(e2), function(a2) {
              var s2 = encodeURIComponent(n(a2)) + r2;
              return i(e2[a2]) ? o(e2[a2], function(e3) {
                return s2 + encodeURIComponent(n(e3));
              }).join(t2) : s2 + encodeURIComponent(n(e2[a2]));
            }).join(t2) : s ? encodeURIComponent(n(s)) + r2 + encodeURIComponent(n(e2)) : "";
          };
          var i = Array.isArray || function(e2) {
            return "[object Array]" === Object.prototype.toString.call(e2);
          };
          function o(e2, t2) {
            if (e2.map)
              return e2.map(t2);
            for (var r2 = [], n2 = 0; n2 < e2.length; n2++)
              r2.push(t2(e2[n2], n2));
            return r2;
          }
          var a = Object.keys || function(e2) {
            var t2 = [];
            for (var r2 in e2)
              Object.prototype.hasOwnProperty.call(e2, r2) && t2.push(r2);
            return t2;
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(52);
          t.attr_setAnExistingAttributeValue = function(e2, t2) {
            null === e2._element ? e2._value = t2 : n.element_change(e2, e2._element, t2);
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(108), i = r(30), o = r(52);
          t.tokenList_validationSteps = function(e2, t2) {
            if (!i.dom_hasSupportedTokens(e2._attribute._localName))
              throw new TypeError("There are no supported tokens defined for attribute name: '" + e2._attribute._localName + "'.");
            return i.dom_getSupportedTokens(e2._attribute._localName).has(t2.toLowerCase());
          }, t.tokenList_updateSteps = function(e2) {
            (e2._element.hasAttribute(e2._attribute._localName) || 0 !== e2._tokenSet.size) && o.element_setAnAttributeValue(e2._element, e2._attribute._localName, n.orderedSet_serialize(e2._tokenSet));
          }, t.tokenList_serializeSteps = function(e2) {
            return o.element_getAnAttributeValue(e2._element, e2._attribute._localName);
          };
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(2);
          function o(e2) {
            return i.isBoolean(e2) ? e2 : e2.capture || false;
          }
          t.eventTarget_flatten = o, t.eventTarget_flattenMore = function(e2) {
            var t2 = o(e2), r2 = false, n2 = false;
            return i.isBoolean(e2) || (r2 = e2.once || false, n2 = e2.passive || false), [t2, n2, r2];
          }, t.eventTarget_addEventListener = function(e2, t2) {
            if (null !== t2.callback) {
              for (var r2 = 0; r2 < e2._eventListenerList.length; r2++) {
                var n2 = e2._eventListenerList[r2];
                if (n2.type === t2.type && n2.callback.handleEvent === t2.callback.handleEvent && n2.capture === t2.capture)
                  return;
              }
              e2._eventListenerList.push(t2);
            }
          }, t.eventTarget_removeEventListener = function(e2, t2, r2) {
            t2.removed = true, e2._eventListenerList.splice(r2, 1);
          }, t.eventTarget_removeAllEventListeners = function(e2) {
            var t2, r2;
            try {
              for (var i2 = n(e2._eventListenerList), o2 = i2.next(); !o2.done; o2 = i2.next()) {
                o2.value.removed = true;
              }
            } catch (e3) {
              t2 = { error: e3 };
            } finally {
              try {
                o2 && !o2.done && (r2 = i2.return) && r2.call(i2);
              } finally {
                if (t2)
                  throw t2.error;
              }
            }
            e2._eventListenerList.length = 0;
          };
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(2), o = r(29);
          t.parentNode_convertNodesIntoANode = function(e2, t2) {
            for (var r2, a, s = null, u = 0; u < e2.length; u++) {
              var l = e2[u];
              if (i.isString(l)) {
                var c = o.create_text(t2, l);
                e2[u] = c;
              }
            }
            if (1 === e2.length)
              s = e2[0];
            else {
              var h = s = o.create_documentFragment(t2);
              try {
                for (var p = n(e2), f = p.next(); !f.done; f = p.next()) {
                  l = f.value;
                  h.appendChild(l);
                }
              } catch (e3) {
                r2 = { error: e3 };
              } finally {
                try {
                  f && !f.done && (a = p.return) && a.call(p);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
            }
            return s;
          };
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          }, i = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          }, o = this && this.__spread || function() {
            for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
              e2 = e2.concat(i(arguments[t2]));
            return e2;
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var a = r(1), s = r(9), u = r(3), l = r(29), c = r(17), h = r(175), p = r(107), f = r(176), d = r(37), m = r(177);
          function y(e2) {
            return e2._startNode === e2._endNode && e2._startOffset === e2._endOffset;
          }
          function v(e2) {
            return c.tree_rootNode(e2._startNode);
          }
          function _(e2, t2) {
            return c.tree_rootNode(e2) === v(t2) && h.boundaryPoint_position([e2, 0], t2._start) === a.BoundaryPosition.After && h.boundaryPoint_position([e2, c.tree_nodeLength(e2)], t2._end) === a.BoundaryPosition.Before;
          }
          function g(e2, t2) {
            var r2 = c.tree_isAncestorOf(t2._startNode, e2, true), n2 = c.tree_isAncestorOf(t2._endNode, e2, true);
            return r2 && !n2 || !r2 && n2;
          }
          function b(e2) {
            var t2, r2, i2, a2, h2, m2, v2 = l.create_documentFragment(e2._startNode._nodeDocument);
            if (y(e2))
              return v2;
            var x = e2._startNode, w = e2._startOffset, E = e2._endNode, D = e2._endOffset;
            if (x === E && u.Guard.isCharacterDataNode(x))
              return (R = f.node_clone(x))._data = p.characterData_substringData(x, w, D - w), d.mutation_append(R, v2), p.characterData_replaceData(x, w, D - w, ""), v2;
            for (var S = x; !c.tree_isAncestorOf(E, S, true); ) {
              if (null === S._parent)
                throw new Error("Parent node  is null.");
              S = S._parent;
            }
            var C = null;
            if (!c.tree_isAncestorOf(E, x, true))
              try {
                for (var A = n(S._children), N = A.next(); !N.done; N = A.next()) {
                  if (g(k = N.value, e2)) {
                    C = k;
                    break;
                  }
                }
              } catch (e3) {
                t2 = { error: e3 };
              } finally {
                try {
                  N && !N.done && (r2 = A.return) && r2.call(A);
                } finally {
                  if (t2)
                    throw t2.error;
                }
              }
            var T = null;
            if (!c.tree_isAncestorOf(x, E, true))
              for (var O = o(S._children), F = O.length - 1; F > 0; F--) {
                var k;
                if (g(k = O[F], e2)) {
                  T = k;
                  break;
                }
              }
            var P, I, L = [];
            try {
              for (var M = n(S._children), B = M.next(); !B.done; B = M.next()) {
                if (_(X = B.value, e2)) {
                  if (u.Guard.isDocumentTypeNode(X))
                    throw new s.HierarchyRequestError();
                  L.push(X);
                }
              }
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                B && !B.done && (a2 = M.return) && a2.call(M);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            if (c.tree_isAncestorOf(E, x, true))
              P = x, I = w;
            else {
              for (var j = x; null !== j._parent && !c.tree_isAncestorOf(E, j._parent); )
                j = j._parent;
              if (null === j._parent)
                throw new Error("Parent node is null.");
              P = j._parent, I = 1 + c.tree_index(j);
            }
            if (u.Guard.isCharacterDataNode(C))
              (R = f.node_clone(x))._data = p.characterData_substringData(x, w, c.tree_nodeLength(x) - w), d.mutation_append(R, v2), p.characterData_replaceData(x, w, c.tree_nodeLength(x) - w, "");
            else if (null !== C) {
              var R = f.node_clone(C);
              d.mutation_append(R, v2);
              var z2 = b(l.create_range([x, w], [C, c.tree_nodeLength(C)]));
              d.mutation_append(z2, R);
            }
            try {
              for (var U = n(L), G = U.next(); !G.done; G = U.next()) {
                var X = G.value;
                d.mutation_append(X, v2);
              }
            } catch (e3) {
              h2 = { error: e3 };
            } finally {
              try {
                G && !G.done && (m2 = U.return) && m2.call(U);
              } finally {
                if (h2)
                  throw h2.error;
              }
            }
            if (u.Guard.isCharacterDataNode(T))
              (R = f.node_clone(E))._data = p.characterData_substringData(E, 0, D), d.mutation_append(R, v2), p.characterData_replaceData(E, 0, D, "");
            else if (null !== T) {
              R = f.node_clone(T);
              d.mutation_append(R, v2);
              z2 = b(l.create_range([T, 0], [E, D]));
              d.mutation_append(z2, R);
            }
            return e2._start = [P, I], e2._end = [P, I], v2;
          }
          t.range_collapsed = y, t.range_root = v, t.range_isContained = _, t.range_isPartiallyContained = g, t.range_setTheStart = function(e2, t2, r2) {
            if (u.Guard.isDocumentTypeNode(t2))
              throw new s.InvalidNodeTypeError();
            if (r2 > c.tree_nodeLength(t2))
              throw new s.IndexSizeError();
            var n2 = [t2, r2];
            v(e2) === c.tree_rootNode(t2) && h.boundaryPoint_position(n2, e2._end) !== a.BoundaryPosition.After || (e2._end = n2), e2._start = n2;
          }, t.range_setTheEnd = function(e2, t2, r2) {
            if (u.Guard.isDocumentTypeNode(t2))
              throw new s.InvalidNodeTypeError();
            if (r2 > c.tree_nodeLength(t2))
              throw new s.IndexSizeError();
            var n2 = [t2, r2];
            v(e2) === c.tree_rootNode(t2) && h.boundaryPoint_position(n2, e2._start) !== a.BoundaryPosition.Before || (e2._start = n2), e2._end = n2;
          }, t.range_select = function(e2, t2) {
            var r2 = e2._parent;
            if (null === r2)
              throw new s.InvalidNodeTypeError();
            var n2 = c.tree_index(e2);
            t2._start = [r2, n2], t2._end = [r2, n2 + 1];
          }, t.range_extract = b, t.range_cloneTheContents = function e2(t2) {
            var r2, i2, a2, h2, m2, v2, x = l.create_documentFragment(t2._startNode._nodeDocument);
            if (y(t2))
              return x;
            var w = t2._startNode, E = t2._startOffset, D = t2._endNode, S = t2._endOffset;
            w === D && u.Guard.isCharacterDataNode(w) && ((B = f.node_clone(w))._data = p.characterData_substringData(w, E, S - E), d.mutation_append(B, x));
            for (var C = w; !c.tree_isAncestorOf(D, C, true); ) {
              if (null === C._parent)
                throw new Error("Parent node  is null.");
              C = C._parent;
            }
            var A = null;
            if (!c.tree_isAncestorOf(D, w, true))
              try {
                for (var N = n(C._children), T = N.next(); !T.done; T = N.next()) {
                  if (g(P = T.value, t2)) {
                    A = P;
                    break;
                  }
                }
              } catch (e3) {
                r2 = { error: e3 };
              } finally {
                try {
                  T && !T.done && (i2 = N.return) && i2.call(N);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
            var O = null;
            if (!c.tree_isAncestorOf(w, D, true))
              for (var F = o(C._children), k = F.length - 1; k > 0; k--) {
                var P;
                if (g(P = F[k], t2)) {
                  O = P;
                  break;
                }
              }
            var I = [];
            try {
              for (var L = n(C._children), M = L.next(); !M.done; M = L.next()) {
                if (_(U = M.value, t2)) {
                  if (u.Guard.isDocumentTypeNode(U))
                    throw new s.HierarchyRequestError();
                  I.push(U);
                }
              }
            } catch (e3) {
              a2 = { error: e3 };
            } finally {
              try {
                M && !M.done && (h2 = L.return) && h2.call(L);
              } finally {
                if (a2)
                  throw a2.error;
              }
            }
            if (u.Guard.isCharacterDataNode(A))
              (B = f.node_clone(w))._data = p.characterData_substringData(w, E, c.tree_nodeLength(w) - E), d.mutation_append(B, x);
            else if (null !== A) {
              var B = f.node_clone(A);
              d.mutation_append(B, x);
              var j = e2(l.create_range([w, E], [A, c.tree_nodeLength(A)]));
              d.mutation_append(j, B);
            }
            try {
              for (var R = n(I), z2 = R.next(); !z2.done; z2 = R.next()) {
                var U = z2.value, B = f.node_clone(U);
                d.mutation_append(B, x);
              }
            } catch (e3) {
              m2 = { error: e3 };
            } finally {
              try {
                z2 && !z2.done && (v2 = R.return) && v2.call(R);
              } finally {
                if (m2)
                  throw m2.error;
              }
            }
            if (u.Guard.isCharacterDataNode(O))
              (B = f.node_clone(D))._data = p.characterData_substringData(D, 0, S), d.mutation_append(B, x);
            else if (null !== O) {
              B = f.node_clone(O);
              x.append(B);
              j = b(l.create_range([O, 0], [D, S]));
              d.mutation_append(j, B);
            }
            return x;
          }, t.range_insert = function(e2, t2) {
            var r2, i2;
            if (u.Guard.isProcessingInstructionNode(t2._startNode) || u.Guard.isCommentNode(t2._startNode) || u.Guard.isTextNode(t2._startNode) && null === t2._startNode._parent || t2._startNode === e2)
              throw new s.HierarchyRequestError();
            var o2, a2 = null;
            if (u.Guard.isTextNode(t2._startNode))
              a2 = t2._startNode;
            else {
              var l2 = 0;
              try {
                for (var h2 = n(t2._startNode._children), p2 = h2.next(); !p2.done; p2 = h2.next()) {
                  var f2 = p2.value;
                  if (l2 === t2._startOffset) {
                    a2 = f2;
                    break;
                  }
                  l2++;
                }
              } catch (e3) {
                r2 = { error: e3 };
              } finally {
                try {
                  p2 && !p2.done && (i2 = h2.return) && i2.call(h2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
            }
            if (null === a2)
              o2 = t2._startNode;
            else {
              if (null === a2._parent)
                throw new Error("Parent node is null.");
              o2 = a2._parent;
            }
            d.mutation_ensurePreInsertionValidity(e2, o2, a2), u.Guard.isTextNode(t2._startNode) && (a2 = m.text_split(t2._startNode, t2._startOffset)), e2 === a2 && (a2 = e2._nextSibling), null !== e2._parent && d.mutation_remove(e2, e2._parent);
            var v2 = null === a2 ? c.tree_nodeLength(o2) : c.tree_index(a2);
            u.Guard.isDocumentFragmentNode(e2) ? v2 += c.tree_nodeLength(e2) : v2++, d.mutation_preInsert(e2, o2, a2), y(t2) && (t2._end = [o2, v2]);
          }, t.range_getContainedNodes = function(e2) {
            var t2;
            return (t2 = {})[Symbol.iterator] = function() {
              var t3 = e2.commonAncestorContainer, r2 = c.tree_getFirstDescendantNode(t3);
              return { next: function() {
                for (; r2 && !_(r2, e2); )
                  r2 = c.tree_getNextDescendantNode(t3, r2);
                if (null === r2)
                  return { done: true, value: null };
                var n2 = { done: false, value: r2 };
                return r2 = c.tree_getNextDescendantNode(t3, r2), n2;
              } };
            }, t2;
          }, t.range_getPartiallyContainedNodes = function(e2) {
            var t2;
            return (t2 = {})[Symbol.iterator] = function() {
              var t3 = e2.commonAncestorContainer, r2 = c.tree_getFirstDescendantNode(t3);
              return { next: function() {
                for (; r2 && !g(r2, e2); )
                  r2 = c.tree_getNextDescendantNode(t3, r2);
                if (null === r2)
                  return { done: true, value: null };
                var n2 = { done: false, value: r2 };
                return r2 = c.tree_getNextDescendantNode(t3, r2), n2;
              } };
            }, t2;
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(9);
          t.selectors_scopeMatchASelectorsString = function(e2, t2) {
            throw new n.NotSupportedError();
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(1), i = r(105);
          t.treeWalker_traverseChildren = function(e2, t2) {
            for (var r2 = t2 ? e2._current._firstChild : e2._current._lastChild; null !== r2; ) {
              var o = i.traversal_filter(e2, r2);
              if (o === n.FilterResult.Accept)
                return e2._current = r2, r2;
              if (o === n.FilterResult.Skip) {
                var a = t2 ? r2._firstChild : r2._lastChild;
                if (null !== a) {
                  r2 = a;
                  continue;
                }
              }
              for (; null !== r2; ) {
                var s = t2 ? r2._nextSibling : r2._previousSibling;
                if (null !== s) {
                  r2 = s;
                  break;
                }
                var u = r2._parent;
                if (null === u || u === e2._root || u === e2._current)
                  return null;
                r2 = u;
              }
            }
            return null;
          }, t.treeWalker_traverseSiblings = function(e2, t2) {
            var r2 = e2._current;
            if (r2 === e2._root)
              return null;
            for (; ; ) {
              for (var o = t2 ? r2._nextSibling : r2._previousSibling; null !== o; ) {
                r2 = o;
                var a = i.traversal_filter(e2, r2);
                if (a === n.FilterResult.Accept)
                  return e2._current = r2, r2;
                o = t2 ? r2._firstChild : r2._lastChild, a !== n.FilterResult.Reject && null !== o || (o = t2 ? r2._nextSibling : r2._previousSibling);
              }
              if (null === (r2 = r2._parent) || r2 === e2._root)
                return null;
              if (i.traversal_filter(e2, r2) === n.FilterResult.Accept)
                return null;
            }
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true }), t.nonEntityAmpersandRegex = /&(?![A-Za-z]+;|#\d+;)/g;
        }, function(e, t, r) {
          "use strict";
          r(89), r(74);
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(2), a = r(1), s = r(50), u = r(3), l = function(e2) {
            function t2(t3, r2) {
              var n2 = e2.call(this, t3) || this;
              return n2._indentation = {}, n2._lengthToLastNewline = 0, n2._writerOptions = o.applyDefaults(r2, { wellFormed: false, headless: false, prettyPrint: false, indent: "  ", newline: "\n", offset: 0, width: 0, allowEmptyTags: false, indentTextOnlyNodes: false, spaceBeforeSlash: false }), n2;
            }
            return i(t2, e2), t2.prototype.serialize = function(e3) {
              return this._refs = { suppressPretty: false, emptyNode: false, markup: "" }, e3.nodeType !== a.NodeType.Document || this._writerOptions.headless || this.declaration(this._builderOptions.version, this._builderOptions.encoding, this._builderOptions.standalone), this.serializeNode(e3, this._writerOptions.wellFormed), this._writerOptions.prettyPrint && this._refs.markup.slice(-this._writerOptions.newline.length) === this._writerOptions.newline && (this._refs.markup = this._refs.markup.slice(0, -this._writerOptions.newline.length)), this._refs.markup;
            }, t2.prototype.declaration = function(e3, t3, r2) {
              this._beginLine(), this._refs.markup += '<?xml version="' + e3 + '"', void 0 !== t3 && (this._refs.markup += ' encoding="' + t3 + '"'), void 0 !== r2 && (this._refs.markup += ' standalone="' + (r2 ? "yes" : "no") + '"'), this._refs.markup += "?>", this._endLine();
            }, t2.prototype.docType = function(e3, t3, r2) {
              this._beginLine(), this._refs.markup += t3 && r2 ? "<!DOCTYPE " + e3 + ' PUBLIC "' + t3 + '" "' + r2 + '">' : t3 ? "<!DOCTYPE " + e3 + ' PUBLIC "' + t3 + '">' : r2 ? "<!DOCTYPE " + e3 + ' SYSTEM "' + r2 + '">' : "<!DOCTYPE " + e3 + ">", this._endLine();
            }, t2.prototype.openTagBegin = function(e3) {
              this._beginLine(), this._refs.markup += "<" + e3;
            }, t2.prototype.openTagEnd = function(e3, t3, r2) {
              if (this._refs.suppressPretty = false, this._refs.emptyNode = false, this._writerOptions.prettyPrint && !t3 && !r2) {
                for (var n2 = true, i2 = true, o2 = this.currentNode.firstChild, a2 = 0, s2 = 0; o2; ) {
                  if (u.Guard.isExclusiveTextNode(o2))
                    s2++;
                  else {
                    if (!u.Guard.isCDATASectionNode(o2)) {
                      n2 = false, i2 = false;
                      break;
                    }
                    a2++;
                  }
                  "" !== o2.data && (i2 = false), o2 = o2.nextSibling;
                }
                this._refs.suppressPretty = !this._writerOptions.indentTextOnlyNodes && n2 && (a2 <= 1 && 0 === s2 || 0 === a2), this._refs.emptyNode = i2;
              }
              (r2 || t3 || this._refs.emptyNode) && this._writerOptions.allowEmptyTags ? this._refs.markup += "></" + e3 + ">" : this._refs.markup += r2 ? " />" : t3 || this._refs.emptyNode ? this._writerOptions.spaceBeforeSlash ? " />" : "/>" : ">", this._endLine();
            }, t2.prototype.closeTag = function(e3) {
              this._refs.emptyNode || (this._beginLine(), this._refs.markup += "</" + e3 + ">"), this._refs.suppressPretty = false, this._refs.emptyNode = false, this._endLine();
            }, t2.prototype.attribute = function(e3, t3) {
              var r2 = e3 + '="' + t3 + '"';
              this._writerOptions.prettyPrint && this._writerOptions.width > 0 && this._refs.markup.length - this._lengthToLastNewline + 1 + r2.length > this._writerOptions.width ? (this._endLine(), this._beginLine(), this._refs.markup += this._indent(1) + r2) : this._refs.markup += " " + r2;
            }, t2.prototype.text = function(e3) {
              "" !== e3 && (this._beginLine(), this._refs.markup += e3, this._endLine());
            }, t2.prototype.cdata = function(e3) {
              "" !== e3 && (this._beginLine(), this._refs.markup += "<![CDATA[" + e3 + "]]>", this._endLine());
            }, t2.prototype.comment = function(e3) {
              this._beginLine(), this._refs.markup += "<!--" + e3 + "-->", this._endLine();
            }, t2.prototype.instruction = function(e3, t3) {
              this._beginLine(), this._refs.markup += "<?" + ("" === t3 ? e3 : e3 + " " + t3) + "?>", this._endLine();
            }, t2.prototype._beginLine = function() {
              this._writerOptions.prettyPrint && !this._refs.suppressPretty && (this._refs.markup += this._indent(this._writerOptions.offset + this.level));
            }, t2.prototype._endLine = function() {
              this._writerOptions.prettyPrint && !this._refs.suppressPretty && (this._refs.markup += this._writerOptions.newline, this._lengthToLastNewline = this._refs.markup.length);
            }, t2.prototype._indent = function(e3) {
              if (e3 <= 0)
                return "";
              if (void 0 !== this._indentation[e3])
                return this._indentation[e3];
              var t3 = this._writerOptions.indent.repeat(e3);
              return this._indentation[e3] = t3, t3;
            }, t2;
          }(s.BaseWriter);
          t.XMLWriter = l;
        }, function(e, t, r) {
          "use strict";
          var n = r(47), i = r(35);
          e.exports = "".repeat || function(e2) {
            var t2 = String(i(this)), r2 = "", o = n(e2);
            if (o < 0 || o == 1 / 0)
              throw RangeError("Wrong number of repetitions");
            for (; o > 0; (o >>>= 1) && (t2 += t2))
              1 & o && (r2 += t2);
            return r2;
          };
        }, function(e, t, r) {
          "use strict";
          r(31), r(32), r(33), r(19), r(178), r(20), r(22), r(23);
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          }), o = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var a = r(67), s = r(2), u = function(e2) {
            function t2(t3, r2) {
              var n2 = e2.call(this, t3) || this;
              return n2._writerOptions = s.applyDefaults(r2, { wellFormed: false, prettyPrint: false, indent: "  ", newline: "\n", offset: 0, group: false, verbose: false }), n2;
            }
            return i(t2, e2), t2.prototype.serialize = function(e3) {
              var t3 = s.applyDefaults(this._writerOptions, { format: "object", wellFormed: false }), r2 = new a.ObjectWriter(this._builderOptions, t3).serialize(e3);
              return this._beginLine(this._writerOptions, 0) + this._convertObject(r2, this._writerOptions);
            }, t2.prototype._convertObject = function(e3, t3, r2) {
              var n2, i2, a2 = this;
              void 0 === r2 && (r2 = 0);
              var u2 = "", l = this._isLeafNode(e3);
              if (s.isArray(e3)) {
                u2 += "[";
                var c = e3.length, h = 0;
                try {
                  for (var p = o(e3), f = p.next(); !f.done; f = p.next()) {
                    var d = f.value;
                    u2 += this._endLine(t3, r2 + 1) + this._beginLine(t3, r2 + 1) + this._convertObject(d, t3, r2 + 1), h < c - 1 && (u2 += ","), h++;
                  }
                } catch (e4) {
                  n2 = { error: e4 };
                } finally {
                  try {
                    f && !f.done && (i2 = p.return) && i2.call(p);
                  } finally {
                    if (n2)
                      throw n2.error;
                  }
                }
                u2 += this._endLine(t3, r2) + this._beginLine(t3, r2), u2 += "]";
              } else if (s.isObject(e3)) {
                u2 += "{";
                var m = s.objectLength(e3), y = 0;
                s.forEachObject(e3, function(e4, n3) {
                  l && t3.prettyPrint ? u2 += " " : u2 += a2._endLine(t3, r2 + 1) + a2._beginLine(t3, r2 + 1), u2 += a2._key(e4), t3.prettyPrint && (u2 += " "), u2 += a2._convertObject(n3, t3, r2 + 1), y < m - 1 && (u2 += ","), y++;
                }, this), l && t3.prettyPrint ? u2 += " " : u2 += this._endLine(t3, r2) + this._beginLine(t3, r2), u2 += "}";
              } else
                u2 += this._val(e3);
              return u2;
            }, t2.prototype._beginLine = function(e3, t3) {
              if (!e3.prettyPrint)
                return "";
              var r2 = e3.offset + t3 + 1;
              return r2 > 0 ? new Array(r2).join(e3.indent) : "";
            }, t2.prototype._endLine = function(e3, t3) {
              return e3.prettyPrint ? e3.newline : "";
            }, t2.prototype._key = function(e3) {
              return '"' + e3 + '":';
            }, t2.prototype._val = function(e3) {
              return JSON.stringify(e3);
            }, t2.prototype._isLeafNode = function(e3) {
              return this._descendantCount(e3) <= 1;
            }, t2.prototype._descendantCount = function(e3, t3) {
              var r2 = this;
              return void 0 === t3 && (t3 = 0), s.isArray(e3) ? s.forEachArray(e3, function(e4) {
                return t3 += r2._descendantCount(e4, t3);
              }, this) : s.isObject(e3) ? s.forEachObject(e3, function(e4, n2) {
                return t3 += r2._descendantCount(n2, t3);
              }, this) : t3++, t3;
            }, t2;
          }(r(50).BaseWriter);
          t.JSONWriter = u;
        }, function(e, t, r) {
          "use strict";
          r(31), r(32), r(33), r(19), r(178), r(89), r(20), r(22), r(23);
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          }), o = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var a = r(67), s = r(2), u = function(e2) {
            function t2(t3, r2) {
              var n2 = e2.call(this, t3) || this;
              if (n2._writerOptions = s.applyDefaults(r2, { wellFormed: false, indent: "  ", newline: "\n", offset: 0, group: false, verbose: false }), n2._writerOptions.indent.length < 2)
                throw new Error("YAML indententation string must be at least two characters long.");
              if (n2._writerOptions.offset < 0)
                throw new Error("YAML offset should be zero or a positive number.");
              return n2;
            }
            return i(t2, e2), t2.prototype.serialize = function(e3) {
              var t3 = s.applyDefaults(this._writerOptions, { format: "object", wellFormed: false }), r2 = new a.ObjectWriter(this._builderOptions, t3).serialize(e3), n2 = this._beginLine(this._writerOptions, 0) + "---" + this._endLine(this._writerOptions) + this._convertObject(r2, this._writerOptions, 0);
              return n2.slice(-this._writerOptions.newline.length) === this._writerOptions.newline && (n2 = n2.slice(0, -this._writerOptions.newline.length)), n2;
            }, t2.prototype._convertObject = function(e3, t3, r2, n2) {
              var i2, a2, u2 = this;
              void 0 === n2 && (n2 = false);
              var l = "";
              if (s.isArray(e3))
                try {
                  for (var c = o(e3), h = c.next(); !h.done; h = c.next()) {
                    var p = h.value;
                    l += this._beginLine(t3, r2, true), s.isObject(p) ? s.isEmpty(p) ? l += '""' + this._endLine(t3) : l += this._convertObject(p, t3, r2, true) : l += this._val(p) + this._endLine(t3);
                  }
                } catch (e4) {
                  i2 = { error: e4 };
                } finally {
                  try {
                    h && !h.done && (a2 = c.return) && a2.call(c);
                  } finally {
                    if (i2)
                      throw i2.error;
                  }
                }
              else
                s.forEachObject(e3, function(e4, i3) {
                  n2 ? (l += u2._key(e4), n2 = false) : l += u2._beginLine(t3, r2) + u2._key(e4), s.isObject(i3) ? s.isEmpty(i3) ? l += ' ""' + u2._endLine(t3) : l += u2._endLine(t3) + u2._convertObject(i3, t3, r2 + 1) : l += " " + u2._val(i3) + u2._endLine(t3);
                }, this);
              return l;
            }, t2.prototype._beginLine = function(e3, t3, r2) {
              void 0 === r2 && (r2 = false);
              var n2 = e3.offset + t3 + 1, i2 = new Array(n2).join(e3.indent);
              return r2 ? i2.substr(0, i2.length - 2) + "-" + i2.substr(-1, 1) : i2;
            }, t2.prototype._endLine = function(e3) {
              return e3.newline;
            }, t2.prototype._key = function(e3) {
              return '"' + e3 + '":';
            }, t2.prototype._val = function(e3) {
              return JSON.stringify(e3);
            }, t2;
          }(r(50).BaseWriter);
          t.YAMLWriter = u;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true }), r(110).dom.setFeatures(true);
          var n = r(110);
          t.DOMImplementation = n.DOMImplementation;
          var i = r(272);
          t.DOMParser = i.DOMParser;
          var o = r(275);
          t.XMLSerializer = o.XMLSerializer;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(3), i = r(0), o = function() {
            function e2() {
            }
            return e2.prototype.before = function() {
              for (var e3 = [], t2 = 0; t2 < arguments.length; t2++)
                e3[t2] = arguments[t2];
              var r2 = n.Cast.asNode(this), o2 = r2._parent;
              if (null !== o2) {
                for (var a = r2._previousSibling, s = true; s && a; ) {
                  s = false;
                  for (var u = 0; u < e3.length; u++) {
                    var l = e3[u];
                    if (l === a) {
                      a = a._previousSibling, s = true;
                      break;
                    }
                  }
                }
                var c = i.parentNode_convertNodesIntoANode(e3, r2._nodeDocument);
                a = null === a ? o2._firstChild : a._nextSibling, i.mutation_preInsert(c, o2, a);
              }
            }, e2.prototype.after = function() {
              for (var e3 = [], t2 = 0; t2 < arguments.length; t2++)
                e3[t2] = arguments[t2];
              var r2 = n.Cast.asNode(this), o2 = r2._parent;
              if (o2) {
                for (var a = r2._nextSibling, s = true; s && a; ) {
                  s = false;
                  for (var u = 0; u < e3.length; u++) {
                    var l = e3[u];
                    if (l === a) {
                      a = a._nextSibling, s = true;
                      break;
                    }
                  }
                }
                var c = i.parentNode_convertNodesIntoANode(e3, r2._nodeDocument);
                i.mutation_preInsert(c, o2, a);
              }
            }, e2.prototype.replaceWith = function() {
              for (var e3 = [], t2 = 0; t2 < arguments.length; t2++)
                e3[t2] = arguments[t2];
              var r2 = n.Cast.asNode(this), o2 = r2._parent;
              if (o2) {
                for (var a = r2._nextSibling, s = true; s && a; ) {
                  s = false;
                  for (var u = 0; u < e3.length; u++) {
                    var l = e3[u];
                    if (l === a) {
                      a = a._nextSibling, s = true;
                      break;
                    }
                  }
                }
                var c = i.parentNode_convertNodesIntoANode(e3, r2._nodeDocument);
                r2._parent === o2 ? i.mutation_replace(r2, c, o2) : i.mutation_preInsert(c, o2, a);
              }
            }, e2.prototype.remove = function() {
              var e3 = n.Cast.asNode(this), t2 = e3._parent;
              t2 && i.mutation_remove(e3, t2);
            }, e2;
          }();
          t.ChildNodeImpl = o;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = function() {
          };
          t.DocumentOrShadowRootImpl = n;
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(6), o = r(3), a = r(7), s = function() {
            function e2(e3) {
              this._nodeList = [], this._recordQueue = [], this._callback = e3;
              var t2 = i.dom.window;
              a.set.append(t2._mutationObservers, this);
            }
            return e2.prototype.observe = function(e3, t2) {
              var r2, i2;
              if (void 0 === (t2 = t2 || { childList: false, subtree: false }).attributeOldValue && void 0 === t2.attributeFilter || void 0 !== t2.attributes || (t2.attributes = true), void 0 !== t2.characterDataOldValue && void 0 === t2.characterData && (t2.characterData = true), !t2.childList && !t2.attributes && !t2.characterData)
                throw new TypeError();
              if (t2.attributeOldValue && !t2.attributes)
                throw new TypeError();
              if (void 0 !== t2.attributeFilter && !t2.attributes)
                throw new TypeError();
              if (t2.characterDataOldValue && !t2.characterData)
                throw new TypeError();
              var s2 = false, u = t2, l = function(e4) {
                var t3, r3;
                if (e4.observer === c) {
                  s2 = true;
                  try {
                    for (var i3 = (t3 = void 0, n(c._nodeList)), l2 = i3.next(); !l2.done; l2 = i3.next()) {
                      var h2 = l2.value;
                      a.list.remove(h2._registeredObserverList, function(t4) {
                        return o.Guard.isTransientRegisteredObserver(t4) && t4.source === e4;
                      });
                    }
                  } catch (e5) {
                    t3 = { error: e5 };
                  } finally {
                    try {
                      l2 && !l2.done && (r3 = i3.return) && r3.call(i3);
                    } finally {
                      if (t3)
                        throw t3.error;
                    }
                  }
                  e4.options = u;
                }
              }, c = this;
              try {
                for (var h = n(e3._registeredObserverList), p = h.next(); !p.done; p = h.next()) {
                  l(p.value);
                }
              } catch (e4) {
                r2 = { error: e4 };
              } finally {
                try {
                  p && !p.done && (i2 = h.return) && i2.call(h);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              s2 || (e3._registeredObserverList.push({ observer: this, options: t2 }), this._nodeList.push(e3));
            }, e2.prototype.disconnect = function() {
              var e3, t2, r2 = this;
              try {
                for (var i2 = n(this._nodeList), o2 = i2.next(); !o2.done; o2 = i2.next()) {
                  var s2 = o2.value;
                  a.list.remove(s2._registeredObserverList, function(e4) {
                    return e4.observer === r2;
                  });
                }
              } catch (t3) {
                e3 = { error: t3 };
              } finally {
                try {
                  o2 && !o2.done && (t2 = i2.return) && t2.call(i2);
                } finally {
                  if (e3)
                    throw e3.error;
                }
              }
              this._recordQueue = [];
            }, e2.prototype.takeRecords = function() {
              var e3 = this._recordQueue;
              return this._recordQueue = [], e3;
            }, e2;
          }();
          t.MutationObserverImpl = s;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(3), i = function() {
            function e2() {
            }
            return Object.defineProperty(e2.prototype, "previousElementSibling", { get: function() {
              for (var e3 = n.Cast.asNode(this)._previousSibling; e3; ) {
                if (n.Guard.isElementNode(e3))
                  return e3;
                e3 = e3._previousSibling;
              }
              return null;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "nextElementSibling", { get: function() {
              for (var e3 = n.Cast.asNode(this)._nextSibling; e3; ) {
                if (n.Guard.isElementNode(e3))
                  return e3;
                e3 = e3._nextSibling;
              }
              return null;
            }, enumerable: true, configurable: true }), e2;
          }();
          t.NonDocumentTypeChildNodeImpl = i;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(3), i = r(0), o = function() {
            function e2() {
            }
            return e2.prototype.getElementById = function(e3) {
              for (var t2 = i.tree_getFirstDescendantNode(n.Cast.asNode(this), false, false, function(e4) {
                return n.Guard.isElementNode(e4);
              }); null !== t2; ) {
                if (t2._uniqueIdentifier === e3)
                  return t2;
                t2 = i.tree_getNextDescendantNode(n.Cast.asNode(this), t2, false, false, function(e4) {
                  return n.Guard.isElementNode(e4);
                });
              }
              return null;
            }, e2;
          }();
          t.NonElementParentNodeImpl = o;
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(3), o = r(0), a = function() {
            function e2() {
            }
            return Object.defineProperty(e2.prototype, "children", { get: function() {
              return o.create_htmlCollection(i.Cast.asNode(this));
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "firstElementChild", { get: function() {
              for (var e3 = i.Cast.asNode(this)._firstChild; e3; ) {
                if (i.Guard.isElementNode(e3))
                  return e3;
                e3 = e3._nextSibling;
              }
              return null;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "lastElementChild", { get: function() {
              for (var e3 = i.Cast.asNode(this)._lastChild; e3; ) {
                if (i.Guard.isElementNode(e3))
                  return e3;
                e3 = e3._previousSibling;
              }
              return null;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "childElementCount", { get: function() {
              var e3, t2, r2 = 0;
              try {
                for (var o2 = n(i.Cast.asNode(this)._children), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                  var s = a2.value;
                  i.Guard.isElementNode(s) && r2++;
                }
              } catch (t3) {
                e3 = { error: t3 };
              } finally {
                try {
                  a2 && !a2.done && (t2 = o2.return) && t2.call(o2);
                } finally {
                  if (e3)
                    throw e3.error;
                }
              }
              return r2;
            }, enumerable: true, configurable: true }), e2.prototype.prepend = function() {
              for (var e3 = [], t2 = 0; t2 < arguments.length; t2++)
                e3[t2] = arguments[t2];
              var r2 = i.Cast.asNode(this), n2 = o.parentNode_convertNodesIntoANode(e3, r2._nodeDocument);
              o.mutation_preInsert(n2, r2, r2._firstChild);
            }, e2.prototype.append = function() {
              for (var e3 = [], t2 = 0; t2 < arguments.length; t2++)
                e3[t2] = arguments[t2];
              var r2 = i.Cast.asNode(this), n2 = o.parentNode_convertNodesIntoANode(e3, r2._nodeDocument);
              o.mutation_append(n2, r2);
            }, e2.prototype.querySelector = function(e3) {
              var t2 = i.Cast.asNode(this), r2 = o.selectors_scopeMatchASelectorsString(e3, t2);
              return 0 === r2.length ? null : r2[0];
            }, e2.prototype.querySelectorAll = function(e3) {
              var t2 = i.Cast.asNode(this), r2 = o.selectors_scopeMatchASelectorsString(e3, t2);
              return o.create_nodeListStatic(t2, r2);
            }, e2;
          }();
          t.ParentNodeImpl = a;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(0), i = function() {
            function e2() {
            }
            return Object.defineProperty(e2.prototype, "_name", { get: function() {
              return this.__name || "";
            }, set: function(e3) {
              this.__name = e3;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "_assignedSlot", { get: function() {
              return this.__assignedSlot || null;
            }, set: function(e3) {
              this.__assignedSlot = e3;
            }, enumerable: true, configurable: true }), Object.defineProperty(e2.prototype, "assignedSlot", { get: function() {
              return n.shadowTree_findASlot(this, true);
            }, enumerable: true, configurable: true }), e2;
          }();
          t.SlotableImpl = i;
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(102), a = r(9), s = r(3), u = function(e2) {
            function t2(t3) {
              var r2 = e2.call(this) || this;
              if (s.Guard.isDocumentTypeNode(t3.startContainer) || s.Guard.isAttrNode(t3.startContainer) || s.Guard.isDocumentTypeNode(t3.endContainer) || s.Guard.isAttrNode(t3.endContainer))
                throw new a.InvalidNodeTypeError();
              return r2._start = [t3.startContainer, t3.startOffset], r2._end = [t3.endContainer, t3.endOffset], r2;
            }
            return i(t2, e2), t2;
          }(o.AbstractRangeImpl);
          t.StaticRangeImpl = u;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(273);
          t.DOMParser = n.DOMParserImpl;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(0), i = r(274), o = function() {
            function e2() {
            }
            return e2.prototype.parseFromString = function(e3, t2) {
              if ("text/html" === t2)
                throw new Error("HTML parser not implemented.");
              try {
                return (r2 = new i.XMLParserImpl().parse(e3))._contentType = t2, r2;
              } catch (e4) {
                var r2, o2 = "http://www.mozilla.org/newlayout/xml/parsererror.xml", a = (r2 = n.create_xmlDocument()).createElementNS(o2, "parsererror"), s = r2.createElementNS(o2, "error");
                return s.setAttribute("message", e4.message), a.appendChild(s), r2.appendChild(a), r2;
              }
            }, e2;
          }();
          t.DOMParserImpl = o;
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          }, i = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(180), a = r(111), s = r(7), u = r(0), l = r(69), c = function() {
            function e2() {
            }
            return e2.prototype.parse = function(e3) {
              for (var t2, r2, c2, h, p = new o.XMLStringLexer(e3, { skipWhitespaceOnlyText: true }), f = u.create_document(), d = f, m = p.nextToken(); m.type !== a.TokenType.EOF; ) {
                switch (m.type) {
                  case a.TokenType.Declaration:
                    var y = m;
                    if ("1.0" !== y.version)
                      throw new Error("Invalid xml version: " + y.version);
                    break;
                  case a.TokenType.DocType:
                    var v = m;
                    if (!u.xml_isPubidChar(v.pubId))
                      throw new Error("DocType public identifier does not match PubidChar construct.");
                    if (!u.xml_isLegalChar(v.sysId) || -1 !== v.sysId.indexOf('"') && -1 !== v.sysId.indexOf("'"))
                      throw new Error("DocType system identifier contains invalid characters.");
                    d.appendChild(f.implementation.createDocumentType(v.name, v.pubId, v.sysId));
                    break;
                  case a.TokenType.CDATA:
                    var _ = m;
                    if (!u.xml_isLegalChar(_.data) || -1 !== _.data.indexOf("]]>"))
                      throw new Error("CDATA contains invalid characters.");
                    d.appendChild(f.createCDATASection(_.data));
                    break;
                  case a.TokenType.Comment:
                    var g = m;
                    if (!u.xml_isLegalChar(g.data) || -1 !== g.data.indexOf("--") || g.data.endsWith("-"))
                      throw new Error("Comment data contains invalid characters.");
                    d.appendChild(f.createComment(g.data));
                    break;
                  case a.TokenType.PI:
                    var b = m;
                    if (-1 !== b.target.indexOf(":") || /^xml$/i.test(b.target))
                      throw new Error("Processing instruction target contains invalid characters.");
                    if (!u.xml_isLegalChar(b.data) || -1 !== b.data.indexOf("?>"))
                      throw new Error("Processing instruction data contains invalid characters.");
                    d.appendChild(f.createProcessingInstruction(b.target, b.data));
                    break;
                  case a.TokenType.Text:
                    var x = m;
                    if (!u.xml_isLegalChar(x.data))
                      throw new Error("Text data contains invalid characters.");
                    d.appendChild(f.createTextNode(this._decodeText(x.data)));
                    break;
                  case a.TokenType.Element:
                    var w = m, E = n(u.namespace_extractQName(w.name), 2), D = E[0], S = E[1];
                    if (-1 !== S.indexOf(":") || !u.xml_isName(S))
                      throw new Error("Node local name contains invalid characters.");
                    if ("xmlns" === D)
                      throw new Error("An element cannot have the 'xmlns' prefix.");
                    var C = d.lookupNamespaceURI(D), A = {};
                    try {
                      for (var N = (t2 = void 0, i(w.attributes)), T = N.next(); !T.done; T = N.next()) {
                        var O = n(T.value, 2), F = O[0], k = O[1];
                        if ("xmlns" === F)
                          C = k;
                        else {
                          var P = n(u.namespace_extractQName(F), 2), I = P[0], L = P[1];
                          "xmlns" === I && (L === D && (C = k), A[L] = k);
                        }
                      }
                    } catch (e4) {
                      t2 = { error: e4 };
                    } finally {
                      try {
                        T && !T.done && (r2 = N.return) && r2.call(N);
                      } finally {
                        if (t2)
                          throw t2.error;
                      }
                    }
                    var M = null !== C ? f.createElementNS(C, w.name) : f.createElement(w.name);
                    d.appendChild(M);
                    var B = new l.LocalNameSet();
                    try {
                      for (var j = (c2 = void 0, i(w.attributes)), R = j.next(); !R.done; R = j.next()) {
                        var z2 = n(R.value, 2), U = (F = z2[0], k = z2[1], n(u.namespace_extractQName(F), 2)), G = (I = U[0], L = U[1], null);
                        if ("xmlns" === I || null === I && "xmlns" === L ? G = s.namespace.XMLNS : null !== (G = M.lookupNamespaceURI(I)) && M.isDefaultNamespace(G) ? G = null : null === G && null !== I && (G = A[I] || null), B.has(G, L))
                          throw new Error("Element contains duplicate attributes.");
                        if (B.set(G, L), G === s.namespace.XMLNS && k === s.namespace.XMLNS)
                          throw new Error("XMLNS namespace is reserved.");
                        if (-1 !== L.indexOf(":") || !u.xml_isName(L))
                          throw new Error("Attribute local name contains invalid characters.");
                        if ("xmlns" === I && "" === k)
                          throw new Error("Empty XML namespace is not allowed.");
                        null !== G ? M.setAttributeNS(G, F, this._decodeAttributeValue(k)) : M.setAttribute(F, this._decodeAttributeValue(k));
                      }
                    } catch (e4) {
                      c2 = { error: e4 };
                    } finally {
                      try {
                        R && !R.done && (h = j.return) && h.call(j);
                      } finally {
                        if (c2)
                          throw c2.error;
                      }
                    }
                    w.selfClosing || (d = M);
                    break;
                  case a.TokenType.ClosingTag:
                    if (m.name !== d.nodeName)
                      throw new Error("Closing tag name does not match opening tag name.");
                    d._parent && (d = d._parent);
                }
                m = p.nextToken();
              }
              return f;
            }, e2.prototype._decodeText = function(e3) {
              return null == e3 ? e3 : e3.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&");
            }, e2.prototype._decodeAttributeValue = function(e3) {
              return null == e3 ? e3 : e3.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&");
            }, e2;
          }();
          t.XMLParserImpl = c;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(276);
          t.XMLSerializer = n.XMLSerializerImpl;
        }, function(e, t, r) {
          "use strict";
          var n = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var i = r(1), o = r(69), a = r(95), s = r(9), u = r(7), l = r(0), c = function() {
            function e2() {
            }
            return e2.prototype.serializeToString = function(e3) {
              return this._xmlSerialization(e3, false);
            }, e2.prototype._xmlSerialization = function(e3, t2) {
              if (void 0 === e3._nodeDocument || e3._nodeDocument._hasNamespaces) {
                var r2 = new a.NamespacePrefixMap();
                r2.set("xml", u.namespace.XML);
                try {
                  return this._serializeNodeNS(e3, null, r2, { value: 1 }, t2);
                } catch (e4) {
                  throw new s.InvalidStateError();
                }
              } else
                try {
                  return this._serializeNode(e3, t2);
                } catch (e4) {
                  throw new s.InvalidStateError();
                }
            }, e2.prototype._serializeNodeNS = function(e3, t2, r2, n2, o2) {
              switch (e3.nodeType) {
                case i.NodeType.Element:
                  return this._serializeElementNS(e3, t2, r2, n2, o2);
                case i.NodeType.Document:
                  return this._serializeDocumentNS(e3, t2, r2, n2, o2);
                case i.NodeType.Comment:
                  return this._serializeComment(e3, o2);
                case i.NodeType.Text:
                  return this._serializeText(e3, o2);
                case i.NodeType.DocumentFragment:
                  return this._serializeDocumentFragmentNS(e3, t2, r2, n2, o2);
                case i.NodeType.DocumentType:
                  return this._serializeDocumentType(e3, o2);
                case i.NodeType.ProcessingInstruction:
                  return this._serializeProcessingInstruction(e3, o2);
                case i.NodeType.CData:
                  return this._serializeCData(e3, o2);
                default:
                  throw new Error("Unknown node type: " + e3.nodeType);
              }
            }, e2.prototype._serializeNode = function(e3, t2) {
              switch (e3.nodeType) {
                case i.NodeType.Element:
                  return this._serializeElement(e3, t2);
                case i.NodeType.Document:
                  return this._serializeDocument(e3, t2);
                case i.NodeType.Comment:
                  return this._serializeComment(e3, t2);
                case i.NodeType.Text:
                  return this._serializeText(e3, t2);
                case i.NodeType.DocumentFragment:
                  return this._serializeDocumentFragment(e3, t2);
                case i.NodeType.DocumentType:
                  return this._serializeDocumentType(e3, t2);
                case i.NodeType.ProcessingInstruction:
                  return this._serializeProcessingInstruction(e3, t2);
                case i.NodeType.CData:
                  return this._serializeCData(e3, t2);
                default:
                  throw new Error("Unknown node type: " + e3.nodeType);
              }
            }, e2.prototype._serializeElementNS = function(t2, r2, i2, o2, a2) {
              var s2, c2;
              if (a2 && (-1 !== t2.localName.indexOf(":") || !l.xml_isName(t2.localName)))
                throw new Error("Node local name contains invalid characters (well-formed required).");
              var h = "<", p = "", f = false, d = false, m = i2.copy(), y = {}, v = this._recordNamespaceInformation(t2, m, y), _ = r2, g = t2.namespaceURI;
              if (_ === g)
                null !== v && (d = true), h += p = g === u.namespace.XML ? "xml:" + t2.localName : t2.localName;
              else {
                var b = t2.prefix, x = null;
                if (null === b && g === v || (x = m.get(b, g)), "xmlns" === b) {
                  if (a2)
                    throw new Error("An element cannot have the 'xmlns' prefix (well-formed required).");
                  x = b;
                }
                null !== x ? (p = x + ":" + t2.localName, null !== v && v !== u.namespace.XML && (_ = v || null), h += p) : null !== b ? (b in y && (b = this._generatePrefix(g, m, o2)), m.set(b, g), h += p += b + ":" + t2.localName, h += " xmlns:" + b + '="' + this._serializeAttributeValue(g, a2) + '"', null !== v && (_ = v || null)) : null === v || null !== v && v !== g ? (d = true, _ = g, h += p += t2.localName, h += ' xmlns="' + this._serializeAttributeValue(g, a2) + '"') : (_ = g, h += p += t2.localName);
              }
              h += this._serializeAttributesNS(t2, m, o2, y, d, a2);
              var w = g === u.namespace.HTML;
              if (w && 0 === t2.childNodes.length && e2._VoidElementNames.has(t2.localName) ? (h += " /", f = true) : w || 0 !== t2.childNodes.length || (h += "/", f = true), h += ">", f)
                return h;
              if (w && "template" === t2.localName)
                ;
              else
                try {
                  for (var E = n(t2._children || t2.childNodes), D = E.next(); !D.done; D = E.next()) {
                    var S = D.value;
                    h += this._serializeNodeNS(S, _, m, o2, a2);
                  }
                } catch (e3) {
                  s2 = { error: e3 };
                } finally {
                  try {
                    D && !D.done && (c2 = E.return) && c2.call(E);
                  } finally {
                    if (s2)
                      throw s2.error;
                  }
                }
              return h += "</" + p + ">";
            }, e2.prototype._serializeDocumentNS = function(e3, t2, r2, i2, o2) {
              var a2, s2;
              if (o2 && null === e3.documentElement)
                throw new Error("Missing document element (well-formed required).");
              var u2 = "";
              try {
                for (var l2 = n(e3._children || e3.childNodes), c2 = l2.next(); !c2.done; c2 = l2.next()) {
                  var h = c2.value;
                  u2 += this._serializeNodeNS(h, t2, r2, i2, o2);
                }
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  c2 && !c2.done && (s2 = l2.return) && s2.call(l2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              return u2;
            }, e2.prototype._serializeComment = function(e3, t2) {
              if (t2 && (!l.xml_isLegalChar(e3.data) || -1 !== e3.data.indexOf("--") || e3.data.endsWith("-")))
                throw new Error("Comment data contains invalid characters (well-formed required).");
              return "<!--" + e3.data + "-->";
            }, e2.prototype._serializeText = function(e3, t2) {
              if (t2 && !l.xml_isLegalChar(e3.data))
                throw new Error("Text data contains invalid characters (well-formed required).");
              for (var r2 = "", n2 = 0; n2 < e3.data.length; n2++) {
                var i2 = e3.data[n2];
                r2 += "&" === i2 ? "&amp;" : "<" === i2 ? "&lt;" : ">" === i2 ? "&gt;" : i2;
              }
              return r2;
            }, e2.prototype._serializeDocumentFragmentNS = function(e3, t2, r2, i2, o2) {
              var a2, s2, u2 = "";
              try {
                for (var l2 = n(e3._children || e3.childNodes), c2 = l2.next(); !c2.done; c2 = l2.next()) {
                  var h = c2.value;
                  u2 += this._serializeNodeNS(h, t2, r2, i2, o2);
                }
              } catch (e4) {
                a2 = { error: e4 };
              } finally {
                try {
                  c2 && !c2.done && (s2 = l2.return) && s2.call(l2);
                } finally {
                  if (a2)
                    throw a2.error;
                }
              }
              return u2;
            }, e2.prototype._serializeDocumentType = function(e3, t2) {
              if (t2 && !l.xml_isPubidChar(e3.publicId))
                throw new Error("DocType public identifier does not match PubidChar construct (well-formed required).");
              if (t2 && (!l.xml_isLegalChar(e3.systemId) || -1 !== e3.systemId.indexOf('"') && -1 !== e3.systemId.indexOf("'")))
                throw new Error("DocType system identifier contains invalid characters (well-formed required).");
              return e3.publicId && e3.systemId ? "<!DOCTYPE " + e3.name + ' PUBLIC "' + e3.publicId + '" "' + e3.systemId + '">' : e3.publicId ? "<!DOCTYPE " + e3.name + ' PUBLIC "' + e3.publicId + '">' : e3.systemId ? "<!DOCTYPE " + e3.name + ' SYSTEM "' + e3.systemId + '">' : "<!DOCTYPE " + e3.name + ">";
            }, e2.prototype._serializeProcessingInstruction = function(e3, t2) {
              if (t2 && (-1 !== e3.target.indexOf(":") || /^xml$/i.test(e3.target)))
                throw new Error("Processing instruction target contains invalid characters (well-formed required).");
              if (t2 && (!l.xml_isLegalChar(e3.data) || -1 !== e3.data.indexOf("?>")))
                throw new Error("Processing instruction data contains invalid characters (well-formed required).");
              return "<?" + ("" === e3.data ? e3.target : e3.target + " " + e3.data) + "?>";
            }, e2.prototype._serializeCData = function(e3, t2) {
              if (t2 && -1 !== e3.data.indexOf("]]>"))
                throw new Error("CDATA contains invalid characters (well-formed required).");
              return "<![CDATA[" + e3.data + "]]>";
            }, e2.prototype._serializeAttributesNS = function(e3, t2, r2, i2, a2, s2) {
              var c2, h, p = "", f = s2 ? new o.LocalNameSet() : void 0;
              try {
                for (var d = n(e3.attributes), m = d.next(); !m.done; m = d.next()) {
                  var y = m.value;
                  if (a2 || s2 || null !== y.namespaceURI) {
                    if (s2 && f && f.has(y.namespaceURI, y.localName))
                      throw new Error("Element contains duplicate attributes (well-formed required).");
                    s2 && f && f.set(y.namespaceURI, y.localName);
                    var v = y.namespaceURI, _ = null;
                    if (null !== v)
                      if (_ = t2.get(y.prefix, v), v === u.namespace.XMLNS) {
                        if (y.value === u.namespace.XML || null === y.prefix && a2 || null !== y.prefix && (!(y.localName in i2) || i2[y.localName] !== y.value) && t2.has(y.localName, y.value))
                          continue;
                        if (s2 && y.value === u.namespace.XMLNS)
                          throw new Error("XMLNS namespace is reserved (well-formed required).");
                        if (s2 && "" === y.value)
                          throw new Error("Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required).");
                        "xmlns" === y.prefix && (_ = "xmlns");
                      } else
                        null === _ && (p += " xmlns:" + (_ = null === y.prefix || t2.hasPrefix(y.prefix) && !t2.has(y.prefix, v) ? this._generatePrefix(v, t2, r2) : y.prefix) + '="' + this._serializeAttributeValue(v, s2) + '"');
                    if (p += " ", null !== _ && (p += _ + ":"), s2 && (-1 !== y.localName.indexOf(":") || !l.xml_isName(y.localName) || "xmlns" === y.localName && null === v))
                      throw new Error("Attribute local name contains invalid characters (well-formed required).");
                    p += y.localName + '="' + this._serializeAttributeValue(y.value, s2) + '"';
                  } else
                    p += " " + y.localName + '="' + this._serializeAttributeValue(y.value, s2) + '"';
                }
              } catch (e4) {
                c2 = { error: e4 };
              } finally {
                try {
                  m && !m.done && (h = d.return) && h.call(d);
                } finally {
                  if (c2)
                    throw c2.error;
                }
              }
              return p;
            }, e2.prototype._recordNamespaceInformation = function(e3, t2, r2) {
              var i2, o2, a2 = null;
              try {
                for (var s2 = n(e3.attributes), l2 = s2.next(); !l2.done; l2 = s2.next()) {
                  var c2 = l2.value, h = c2.namespaceURI, p = c2.prefix;
                  if (h === u.namespace.XMLNS) {
                    if (null === p) {
                      a2 = c2.value;
                      continue;
                    }
                    var f = c2.localName, d = c2.value;
                    if (d === u.namespace.XML)
                      continue;
                    if ("" === d && (d = null), t2.has(f, d))
                      continue;
                    t2.set(f, d), r2[f] = d || "";
                  }
                }
              } catch (e4) {
                i2 = { error: e4 };
              } finally {
                try {
                  l2 && !l2.done && (o2 = s2.return) && o2.call(s2);
                } finally {
                  if (i2)
                    throw i2.error;
                }
              }
              return a2;
            }, e2.prototype._generatePrefix = function(e3, t2, r2) {
              var n2 = "ns" + r2.value;
              return r2.value++, t2.set(n2, e3), n2;
            }, e2.prototype._serializeAttributeValue = function(e3, t2) {
              if (t2 && null !== e3 && !l.xml_isLegalChar(e3))
                throw new Error("Invalid characters in attribute value.");
              if (null === e3)
                return "";
              for (var r2 = "", n2 = 0; n2 < e3.length; n2++) {
                var i2 = e3[n2];
                r2 += '"' === i2 ? "&quot;" : "&" === i2 ? "&amp;" : "<" === i2 ? "&lt;" : ">" === i2 ? "&gt;" : i2;
              }
              return r2;
            }, e2.prototype._serializeElement = function(e3, t2) {
              var r2, i2;
              if (t2 && (-1 !== e3.localName.indexOf(":") || !l.xml_isName(e3.localName)))
                throw new Error("Node local name contains invalid characters (well-formed required).");
              var o2 = false, a2 = e3.localName, s2 = "<" + a2;
              if (s2 += this._serializeAttributes(e3, t2), 0 === e3._children.size && (s2 += "/", o2 = true), s2 += ">", o2)
                return s2;
              try {
                for (var u2 = n(e3._children), c2 = u2.next(); !c2.done; c2 = u2.next()) {
                  var h = c2.value;
                  s2 += this._serializeNode(h, t2);
                }
              } catch (e4) {
                r2 = { error: e4 };
              } finally {
                try {
                  c2 && !c2.done && (i2 = u2.return) && i2.call(u2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              return s2 += "</" + a2 + ">";
            }, e2.prototype._serializeDocument = function(e3, t2) {
              var r2, i2;
              if (t2 && null === e3.documentElement)
                throw new Error("Missing document element (well-formed required).");
              var o2 = "";
              try {
                for (var a2 = n(e3._children), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                  var u2 = s2.value;
                  o2 += this._serializeNode(u2, t2);
                }
              } catch (e4) {
                r2 = { error: e4 };
              } finally {
                try {
                  s2 && !s2.done && (i2 = a2.return) && i2.call(a2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              return o2;
            }, e2.prototype._serializeDocumentFragment = function(e3, t2) {
              var r2, i2, o2 = "";
              try {
                for (var a2 = n(e3._children), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                  var u2 = s2.value;
                  o2 += this._serializeNode(u2, t2);
                }
              } catch (e4) {
                r2 = { error: e4 };
              } finally {
                try {
                  s2 && !s2.done && (i2 = a2.return) && i2.call(a2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              return o2;
            }, e2.prototype._serializeAttributes = function(e3, t2) {
              var r2, i2, o2 = "", a2 = t2 ? {} : void 0;
              try {
                for (var s2 = n(e3.attributes), u2 = s2.next(); !u2.done; u2 = s2.next()) {
                  var c2 = u2.value;
                  if (t2 && a2 && c2.localName in a2)
                    throw new Error("Element contains duplicate attributes (well-formed required).");
                  if (t2 && a2 && (a2[c2.localName] = true), t2 && (-1 !== c2.localName.indexOf(":") || !l.xml_isName(c2.localName)))
                    throw new Error("Attribute local name contains invalid characters (well-formed required).");
                  o2 += " " + c2.localName + '="' + this._serializeAttributeValue(c2.value, t2) + '"';
                }
              } catch (e4) {
                r2 = { error: e4 };
              } finally {
                try {
                  u2 && !u2.done && (i2 = s2.return) && i2.call(s2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              return o2;
            }, e2._VoidElementNames = /* @__PURE__ */ new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), e2;
          }();
          t.XMLSerializerImpl = c;
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(278);
          t.XMLReader = n.XMLReader;
          var i = r(112);
          t.ObjectReader = i.ObjectReader;
          var o = r(281);
          t.JSONReader = o.JSONReader;
          var a = r(282);
          t.YAMLReader = a.YAMLReader;
        }, function(e, t, r) {
          "use strict";
          r(31), r(32), r(33), r(19), r(65), r(20), r(22), r(23);
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          }), o = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          }, a = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var s = r(180), u = r(111), l = r(1), c = r(7), h = r(0), p = function(e2) {
            function t2() {
              return null !== e2 && e2.apply(this, arguments) || this;
            }
            return i(t2, e2), t2.prototype._parse = function(e3, t3) {
              for (var r2, n2, i2, p2, f = new s.XMLStringLexer(t3, { skipWhitespaceOnlyText: this._builderOptions.skipWhitespaceOnlyText }), d = e3, m = e3, y = f.nextToken(); y.type !== u.TokenType.EOF; ) {
                switch (y.type) {
                  case u.TokenType.Declaration:
                    var v = y, _ = this.sanitize(v.version);
                    if ("1.0" !== _)
                      throw new Error("Invalid xml version: " + _);
                    var g = { version: _ };
                    v.encoding && (g.encoding = this.sanitize(v.encoding)), v.standalone && (g.standalone = "yes" === this.sanitize(v.standalone)), m.set(g);
                    break;
                  case u.TokenType.DocType:
                    var b = y;
                    m = this.docType(m, this.sanitize(b.name), this.sanitize(b.pubId), this.sanitize(b.sysId)) || m;
                    break;
                  case u.TokenType.CDATA:
                    var x = y;
                    m = this.cdata(m, this.sanitize(x.data)) || m;
                    break;
                  case u.TokenType.Comment:
                    var w = y;
                    m = this.comment(m, this.sanitize(w.data)) || m;
                    break;
                  case u.TokenType.PI:
                    var E = y;
                    m = this.instruction(m, this.sanitize(E.target), this.sanitize(E.data)) || m;
                    break;
                  case u.TokenType.Text:
                    if (m.node.nodeType === l.NodeType.Document)
                      break;
                    var D = y;
                    m = this.text(m, this._decodeText(this.sanitize(D.data))) || m;
                    break;
                  case u.TokenType.Element:
                    var S = y, C = this.sanitize(S.name), A = o(h.namespace_extractQName(C), 1)[0], N = m.node.lookupNamespaceURI(A), T = {};
                    try {
                      for (var O = (r2 = void 0, a(S.attributes)), F = O.next(); !F.done; F = O.next()) {
                        var k = o(F.value, 2), P = k[0], I = k[1];
                        if (P = this.sanitize(P), I = this.sanitize(I), "xmlns" === P)
                          N = I;
                        else {
                          var L = o(h.namespace_extractQName(P), 2), M = L[0], B = L[1];
                          "xmlns" === M && (B === A && (N = I), T[B] = I);
                        }
                      }
                    } catch (e4) {
                      r2 = { error: e4 };
                    } finally {
                      try {
                        F && !F.done && (n2 = O.return) && n2.call(O);
                      } finally {
                        if (r2)
                          throw r2.error;
                      }
                    }
                    var j = null !== N ? this.element(m, N, C) : this.element(m, void 0, C);
                    if (void 0 === j)
                      break;
                    m.node === e3.node && (d = j);
                    try {
                      for (var R = (i2 = void 0, a(S.attributes)), z2 = R.next(); !z2.done; z2 = R.next()) {
                        var U = o(z2.value, 2);
                        P = U[0], I = U[1];
                        P = this.sanitize(P), I = this.sanitize(I);
                        var G = o(h.namespace_extractQName(P), 2), X = (M = G[0], B = G[1], null);
                        "xmlns" === M || null === M && "xmlns" === B ? X = c.namespace.XMLNS : null !== (X = j.node.lookupNamespaceURI(M)) && j.node.isDefaultNamespace(X) ? X = null : null === X && null !== M && (X = T[M] || null), null !== X ? this.attribute(j, X, P, this._decodeAttributeValue(I)) : this.attribute(j, void 0, P, this._decodeAttributeValue(I));
                      }
                    } catch (e4) {
                      i2 = { error: e4 };
                    } finally {
                      try {
                        z2 && !z2.done && (p2 = R.return) && p2.call(R);
                      } finally {
                        if (i2)
                          throw i2.error;
                      }
                    }
                    S.selfClosing || (m = j);
                    break;
                  case u.TokenType.ClosingTag:
                    m.node.parentNode && (m = m.up());
                }
                y = f.nextToken();
              }
              return d;
            }, t2;
          }(r(75).BaseReader);
          t.XMLReader = p;
        }, function(e, t, r) {
          var n = r(4), i = r(280);
          n({ target: "Object", stat: true, forced: Object.assign !== i }, { assign: i });
        }, function(e, t, r) {
          "use strict";
          var n = r(16), i = r(8), o = r(61), a = r(85), s = r(79), u = r(27), l = r(41), c = Object.assign, h = Object.defineProperty;
          e.exports = !c || i(function() {
            if (n && 1 !== c({ b: 1 }, c(h({}, "a", { enumerable: true, get: function() {
              h(this, "b", { value: 3, enumerable: false });
            } }), { b: 2 })).b)
              return true;
            var e2 = {}, t2 = {}, r2 = Symbol();
            return e2[r2] = 7, "abcdefghijklmnopqrst".split("").forEach(function(e3) {
              t2[e3] = e3;
            }), 7 != c({}, e2)[r2] || "abcdefghijklmnopqrst" != o(c({}, t2)).join("");
          }) ? function(e2, t2) {
            for (var r2 = u(e2), i2 = arguments.length, c2 = 1, h2 = a.f, p = s.f; i2 > c2; )
              for (var f, d = l(arguments[c2++]), m = h2 ? o(d).concat(h2(d)) : o(d), y = m.length, v = 0; y > v; )
                f = m[v++], n && !p.call(d, f) || (r2[f] = d[f]);
            return r2;
          } : c;
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(112), a = function(e2) {
            function t2() {
              return null !== e2 && e2.apply(this, arguments) || this;
            }
            return i(t2, e2), t2.prototype._parse = function(e3, t3) {
              return new o.ObjectReader(this._builderOptions).parse(e3, JSON.parse(t3));
            }, t2;
          }(r(75).BaseReader);
          t.JSONReader = a;
        }, function(e, t, r) {
          "use strict";
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = r(112), a = r(75), s = r(283), u = function(e2) {
            function t2() {
              return null !== e2 && e2.apply(this, arguments) || this;
            }
            return i(t2, e2), t2.prototype._parse = function(e3, t3) {
              var r2 = s.safeLoad(t3);
              if (void 0 === r2)
                throw new Error("Unable to parse YAML document.");
              return new o.ObjectReader(this._builderOptions).parse(e3, r2);
            }, t2;
          }(a.BaseReader);
          t.YAMLReader = u;
        }, function(e, t, r) {
          "use strict";
          var n = r(284);
          e.exports = n;
        }, function(e, t, r) {
          "use strict";
          var n = r(285), i = r(304);
          function o(e2) {
            return function() {
              throw new Error("Function " + e2 + " is deprecated and cannot be used.");
            };
          }
          e.exports.Type = r(10), e.exports.Schema = r(39), e.exports.FAILSAFE_SCHEMA = r(113), e.exports.JSON_SCHEMA = r(182), e.exports.CORE_SCHEMA = r(181), e.exports.DEFAULT_SAFE_SCHEMA = r(54), e.exports.DEFAULT_FULL_SCHEMA = r(76), e.exports.load = n.load, e.exports.loadAll = n.loadAll, e.exports.safeLoad = n.safeLoad, e.exports.safeLoadAll = n.safeLoadAll, e.exports.dump = i.dump, e.exports.safeDump = i.safeDump, e.exports.YAMLException = r(53), e.exports.MINIMAL_SCHEMA = r(113), e.exports.SAFE_SCHEMA = r(54), e.exports.DEFAULT_SCHEMA = r(76), e.exports.scan = o("scan"), e.exports.parse = o("parse"), e.exports.compose = o("compose"), e.exports.addConstructor = o("addConstructor");
        }, function(e, t, r) {
          "use strict";
          var n = r(38), i = r(53), o = r(286), a = r(54), s = r(76), u = Object.prototype.hasOwnProperty, l = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/, c = /[\x85\u2028\u2029]/, h = /[,\[\]\{\}]/, p = /^(?:!|!!|![a-z\-]+!)$/i, f = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
          function d(e2) {
            return Object.prototype.toString.call(e2);
          }
          function m(e2) {
            return 10 === e2 || 13 === e2;
          }
          function y(e2) {
            return 9 === e2 || 32 === e2;
          }
          function v(e2) {
            return 9 === e2 || 32 === e2 || 10 === e2 || 13 === e2;
          }
          function _(e2) {
            return 44 === e2 || 91 === e2 || 93 === e2 || 123 === e2 || 125 === e2;
          }
          function g(e2) {
            var t2;
            return 48 <= e2 && e2 <= 57 ? e2 - 48 : 97 <= (t2 = 32 | e2) && t2 <= 102 ? t2 - 97 + 10 : -1;
          }
          function b(e2) {
            return 48 === e2 ? "\0" : 97 === e2 ? "\x07" : 98 === e2 ? "\b" : 116 === e2 || 9 === e2 ? "	" : 110 === e2 ? "\n" : 118 === e2 ? "\v" : 102 === e2 ? "\f" : 114 === e2 ? "\r" : 101 === e2 ? "\x1B" : 32 === e2 ? " " : 34 === e2 ? '"' : 47 === e2 ? "/" : 92 === e2 ? "\\" : 78 === e2 ? "\x85" : 95 === e2 ? "\xA0" : 76 === e2 ? "\u2028" : 80 === e2 ? "\u2029" : "";
          }
          function x(e2) {
            return e2 <= 65535 ? String.fromCharCode(e2) : String.fromCharCode(55296 + (e2 - 65536 >> 10), 56320 + (e2 - 65536 & 1023));
          }
          for (var w = new Array(256), E = new Array(256), D = 0; D < 256; D++)
            w[D] = b(D) ? 1 : 0, E[D] = b(D);
          function S(e2, t2) {
            this.input = e2, this.filename = t2.filename || null, this.schema = t2.schema || s, this.onWarning = t2.onWarning || null, this.legacy = t2.legacy || false, this.json = t2.json || false, this.listener = t2.listener || null, this.implicitTypes = this.schema.compiledImplicit, this.typeMap = this.schema.compiledTypeMap, this.length = e2.length, this.position = 0, this.line = 0, this.lineStart = 0, this.lineIndent = 0, this.documents = [];
          }
          function C(e2, t2) {
            return new i(t2, new o(e2.filename, e2.input, e2.position, e2.line, e2.position - e2.lineStart));
          }
          function A(e2, t2) {
            throw C(e2, t2);
          }
          function N(e2, t2) {
            e2.onWarning && e2.onWarning.call(null, C(e2, t2));
          }
          var T = { YAML: function(e2, t2, r2) {
            var n2, i2, o2;
            null !== e2.version && A(e2, "duplication of %YAML directive"), 1 !== r2.length && A(e2, "YAML directive accepts exactly one argument"), null === (n2 = /^([0-9]+)\.([0-9]+)$/.exec(r2[0])) && A(e2, "ill-formed argument of the YAML directive"), i2 = parseInt(n2[1], 10), o2 = parseInt(n2[2], 10), 1 !== i2 && A(e2, "unacceptable YAML version of the document"), e2.version = r2[0], e2.checkLineBreaks = o2 < 2, 1 !== o2 && 2 !== o2 && N(e2, "unsupported YAML version of the document");
          }, TAG: function(e2, t2, r2) {
            var n2, i2;
            2 !== r2.length && A(e2, "TAG directive accepts exactly two arguments"), n2 = r2[0], i2 = r2[1], p.test(n2) || A(e2, "ill-formed tag handle (first argument) of the TAG directive"), u.call(e2.tagMap, n2) && A(e2, 'there is a previously declared suffix for "' + n2 + '" tag handle'), f.test(i2) || A(e2, "ill-formed tag prefix (second argument) of the TAG directive"), e2.tagMap[n2] = i2;
          } };
          function O(e2, t2, r2, n2) {
            var i2, o2, a2, s2;
            if (t2 < r2) {
              if (s2 = e2.input.slice(t2, r2), n2)
                for (i2 = 0, o2 = s2.length; i2 < o2; i2 += 1)
                  9 === (a2 = s2.charCodeAt(i2)) || 32 <= a2 && a2 <= 1114111 || A(e2, "expected valid JSON character");
              else
                l.test(s2) && A(e2, "the stream contains non-printable characters");
              e2.result += s2;
            }
          }
          function F(e2, t2, r2, i2) {
            var o2, a2, s2, l2;
            for (n.isObject(r2) || A(e2, "cannot merge mappings; the provided source object is unacceptable"), s2 = 0, l2 = (o2 = Object.keys(r2)).length; s2 < l2; s2 += 1)
              a2 = o2[s2], u.call(t2, a2) || (t2[a2] = r2[a2], i2[a2] = true);
          }
          function k(e2, t2, r2, n2, i2, o2, a2, s2) {
            var l2, c2;
            if (Array.isArray(i2))
              for (l2 = 0, c2 = (i2 = Array.prototype.slice.call(i2)).length; l2 < c2; l2 += 1)
                Array.isArray(i2[l2]) && A(e2, "nested arrays are not supported inside keys"), "object" == typeof i2 && "[object Object]" === d(i2[l2]) && (i2[l2] = "[object Object]");
            if ("object" == typeof i2 && "[object Object]" === d(i2) && (i2 = "[object Object]"), i2 = String(i2), null === t2 && (t2 = {}), "tag:yaml.org,2002:merge" === n2)
              if (Array.isArray(o2))
                for (l2 = 0, c2 = o2.length; l2 < c2; l2 += 1)
                  F(e2, t2, o2[l2], r2);
              else
                F(e2, t2, o2, r2);
            else
              e2.json || u.call(r2, i2) || !u.call(t2, i2) || (e2.line = a2 || e2.line, e2.position = s2 || e2.position, A(e2, "duplicated mapping key")), t2[i2] = o2, delete r2[i2];
            return t2;
          }
          function P(e2) {
            var t2;
            10 === (t2 = e2.input.charCodeAt(e2.position)) ? e2.position++ : 13 === t2 ? (e2.position++, 10 === e2.input.charCodeAt(e2.position) && e2.position++) : A(e2, "a line break is expected"), e2.line += 1, e2.lineStart = e2.position;
          }
          function I(e2, t2, r2) {
            for (var n2 = 0, i2 = e2.input.charCodeAt(e2.position); 0 !== i2; ) {
              for (; y(i2); )
                i2 = e2.input.charCodeAt(++e2.position);
              if (t2 && 35 === i2)
                do {
                  i2 = e2.input.charCodeAt(++e2.position);
                } while (10 !== i2 && 13 !== i2 && 0 !== i2);
              if (!m(i2))
                break;
              for (P(e2), i2 = e2.input.charCodeAt(e2.position), n2++, e2.lineIndent = 0; 32 === i2; )
                e2.lineIndent++, i2 = e2.input.charCodeAt(++e2.position);
            }
            return -1 !== r2 && 0 !== n2 && e2.lineIndent < r2 && N(e2, "deficient indentation"), n2;
          }
          function L(e2) {
            var t2, r2 = e2.position;
            return !(45 !== (t2 = e2.input.charCodeAt(r2)) && 46 !== t2 || t2 !== e2.input.charCodeAt(r2 + 1) || t2 !== e2.input.charCodeAt(r2 + 2) || (r2 += 3, 0 !== (t2 = e2.input.charCodeAt(r2)) && !v(t2)));
          }
          function M(e2, t2) {
            1 === t2 ? e2.result += " " : t2 > 1 && (e2.result += n.repeat("\n", t2 - 1));
          }
          function B(e2, t2) {
            var r2, n2, i2 = e2.tag, o2 = e2.anchor, a2 = [], s2 = false;
            for (null !== e2.anchor && (e2.anchorMap[e2.anchor] = a2), n2 = e2.input.charCodeAt(e2.position); 0 !== n2 && 45 === n2 && v(e2.input.charCodeAt(e2.position + 1)); )
              if (s2 = true, e2.position++, I(e2, true, -1) && e2.lineIndent <= t2)
                a2.push(null), n2 = e2.input.charCodeAt(e2.position);
              else if (r2 = e2.line, z2(e2, t2, 3, false, true), a2.push(e2.result), I(e2, true, -1), n2 = e2.input.charCodeAt(e2.position), (e2.line === r2 || e2.lineIndent > t2) && 0 !== n2)
                A(e2, "bad indentation of a sequence entry");
              else if (e2.lineIndent < t2)
                break;
            return !!s2 && (e2.tag = i2, e2.anchor = o2, e2.kind = "sequence", e2.result = a2, true);
          }
          function j(e2) {
            var t2, r2, n2, i2, o2 = false, a2 = false;
            if (33 !== (i2 = e2.input.charCodeAt(e2.position)))
              return false;
            if (null !== e2.tag && A(e2, "duplication of a tag property"), 60 === (i2 = e2.input.charCodeAt(++e2.position)) ? (o2 = true, i2 = e2.input.charCodeAt(++e2.position)) : 33 === i2 ? (a2 = true, r2 = "!!", i2 = e2.input.charCodeAt(++e2.position)) : r2 = "!", t2 = e2.position, o2) {
              do {
                i2 = e2.input.charCodeAt(++e2.position);
              } while (0 !== i2 && 62 !== i2);
              e2.position < e2.length ? (n2 = e2.input.slice(t2, e2.position), i2 = e2.input.charCodeAt(++e2.position)) : A(e2, "unexpected end of the stream within a verbatim tag");
            } else {
              for (; 0 !== i2 && !v(i2); )
                33 === i2 && (a2 ? A(e2, "tag suffix cannot contain exclamation marks") : (r2 = e2.input.slice(t2 - 1, e2.position + 1), p.test(r2) || A(e2, "named tag handle cannot contain such characters"), a2 = true, t2 = e2.position + 1)), i2 = e2.input.charCodeAt(++e2.position);
              n2 = e2.input.slice(t2, e2.position), h.test(n2) && A(e2, "tag suffix cannot contain flow indicator characters");
            }
            return n2 && !f.test(n2) && A(e2, "tag name cannot contain such characters: " + n2), o2 ? e2.tag = n2 : u.call(e2.tagMap, r2) ? e2.tag = e2.tagMap[r2] + n2 : "!" === r2 ? e2.tag = "!" + n2 : "!!" === r2 ? e2.tag = "tag:yaml.org,2002:" + n2 : A(e2, 'undeclared tag handle "' + r2 + '"'), true;
          }
          function R(e2) {
            var t2, r2;
            if (38 !== (r2 = e2.input.charCodeAt(e2.position)))
              return false;
            for (null !== e2.anchor && A(e2, "duplication of an anchor property"), r2 = e2.input.charCodeAt(++e2.position), t2 = e2.position; 0 !== r2 && !v(r2) && !_(r2); )
              r2 = e2.input.charCodeAt(++e2.position);
            return e2.position === t2 && A(e2, "name of an anchor node must contain at least one character"), e2.anchor = e2.input.slice(t2, e2.position), true;
          }
          function z2(e2, t2, r2, i2, o2) {
            var a2, s2, l2, c2, h2, p2, f2, d2, b2 = 1, D2 = false, S2 = false;
            if (null !== e2.listener && e2.listener("open", e2), e2.tag = null, e2.anchor = null, e2.kind = null, e2.result = null, a2 = s2 = l2 = 4 === r2 || 3 === r2, i2 && I(e2, true, -1) && (D2 = true, e2.lineIndent > t2 ? b2 = 1 : e2.lineIndent === t2 ? b2 = 0 : e2.lineIndent < t2 && (b2 = -1)), 1 === b2)
              for (; j(e2) || R(e2); )
                I(e2, true, -1) ? (D2 = true, l2 = a2, e2.lineIndent > t2 ? b2 = 1 : e2.lineIndent === t2 ? b2 = 0 : e2.lineIndent < t2 && (b2 = -1)) : l2 = false;
            if (l2 && (l2 = D2 || o2), 1 !== b2 && 4 !== r2 || (f2 = 1 === r2 || 2 === r2 ? t2 : t2 + 1, d2 = e2.position - e2.lineStart, 1 === b2 ? l2 && (B(e2, d2) || function(e3, t3, r3) {
              var n2, i3, o3, a3, s3, u2 = e3.tag, l3 = e3.anchor, c3 = {}, h3 = {}, p3 = null, f3 = null, d3 = null, m2 = false, _2 = false;
              for (null !== e3.anchor && (e3.anchorMap[e3.anchor] = c3), s3 = e3.input.charCodeAt(e3.position); 0 !== s3; ) {
                if (n2 = e3.input.charCodeAt(e3.position + 1), o3 = e3.line, a3 = e3.position, 63 !== s3 && 58 !== s3 || !v(n2)) {
                  if (!z2(e3, r3, 2, false, true))
                    break;
                  if (e3.line === o3) {
                    for (s3 = e3.input.charCodeAt(e3.position); y(s3); )
                      s3 = e3.input.charCodeAt(++e3.position);
                    if (58 === s3)
                      v(s3 = e3.input.charCodeAt(++e3.position)) || A(e3, "a whitespace character is expected after the key-value separator within a block mapping"), m2 && (k(e3, c3, h3, p3, f3, null), p3 = f3 = d3 = null), _2 = true, m2 = false, i3 = false, p3 = e3.tag, f3 = e3.result;
                    else {
                      if (!_2)
                        return e3.tag = u2, e3.anchor = l3, true;
                      A(e3, "can not read an implicit mapping pair; a colon is missed");
                    }
                  } else {
                    if (!_2)
                      return e3.tag = u2, e3.anchor = l3, true;
                    A(e3, "can not read a block mapping entry; a multiline key may not be an implicit key");
                  }
                } else
                  63 === s3 ? (m2 && (k(e3, c3, h3, p3, f3, null), p3 = f3 = d3 = null), _2 = true, m2 = true, i3 = true) : m2 ? (m2 = false, i3 = true) : A(e3, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"), e3.position += 1, s3 = n2;
                if ((e3.line === o3 || e3.lineIndent > t3) && (z2(e3, t3, 4, true, i3) && (m2 ? f3 = e3.result : d3 = e3.result), m2 || (k(e3, c3, h3, p3, f3, d3, o3, a3), p3 = f3 = d3 = null), I(e3, true, -1), s3 = e3.input.charCodeAt(e3.position)), e3.lineIndent > t3 && 0 !== s3)
                  A(e3, "bad indentation of a mapping entry");
                else if (e3.lineIndent < t3)
                  break;
              }
              return m2 && k(e3, c3, h3, p3, f3, null), _2 && (e3.tag = u2, e3.anchor = l3, e3.kind = "mapping", e3.result = c3), _2;
            }(e2, d2, f2)) || function(e3, t3) {
              var r3, n2, i3, o3, a3, s3, u2, l3, c3, h3, p3 = true, f3 = e3.tag, d3 = e3.anchor, m2 = {};
              if (91 === (h3 = e3.input.charCodeAt(e3.position)))
                i3 = 93, s3 = false, n2 = [];
              else {
                if (123 !== h3)
                  return false;
                i3 = 125, s3 = true, n2 = {};
              }
              for (null !== e3.anchor && (e3.anchorMap[e3.anchor] = n2), h3 = e3.input.charCodeAt(++e3.position); 0 !== h3; ) {
                if (I(e3, true, t3), (h3 = e3.input.charCodeAt(e3.position)) === i3)
                  return e3.position++, e3.tag = f3, e3.anchor = d3, e3.kind = s3 ? "mapping" : "sequence", e3.result = n2, true;
                p3 || A(e3, "missed comma between flow collection entries"), c3 = null, o3 = a3 = false, 63 === h3 && v(e3.input.charCodeAt(e3.position + 1)) && (o3 = a3 = true, e3.position++, I(e3, true, t3)), r3 = e3.line, z2(e3, t3, 1, false, true), l3 = e3.tag, u2 = e3.result, I(e3, true, t3), h3 = e3.input.charCodeAt(e3.position), !a3 && e3.line !== r3 || 58 !== h3 || (o3 = true, h3 = e3.input.charCodeAt(++e3.position), I(e3, true, t3), z2(e3, t3, 1, false, true), c3 = e3.result), s3 ? k(e3, n2, m2, l3, u2, c3) : o3 ? n2.push(k(e3, null, m2, l3, u2, c3)) : n2.push(u2), I(e3, true, t3), 44 === (h3 = e3.input.charCodeAt(e3.position)) ? (p3 = true, h3 = e3.input.charCodeAt(++e3.position)) : p3 = false;
              }
              A(e3, "unexpected end of the stream within a flow collection");
            }(e2, f2) ? S2 = true : (s2 && function(e3, t3) {
              var r3, i3, o3, a3, s3, u2 = 1, l3 = false, c3 = false, h3 = t3, p3 = 0, f3 = false;
              if (124 === (a3 = e3.input.charCodeAt(e3.position)))
                i3 = false;
              else {
                if (62 !== a3)
                  return false;
                i3 = true;
              }
              for (e3.kind = "scalar", e3.result = ""; 0 !== a3; )
                if (43 === (a3 = e3.input.charCodeAt(++e3.position)) || 45 === a3)
                  1 === u2 ? u2 = 43 === a3 ? 3 : 2 : A(e3, "repeat of a chomping mode identifier");
                else {
                  if (!((o3 = 48 <= (s3 = a3) && s3 <= 57 ? s3 - 48 : -1) >= 0))
                    break;
                  0 === o3 ? A(e3, "bad explicit indentation width of a block scalar; it cannot be less than one") : c3 ? A(e3, "repeat of an indentation width identifier") : (h3 = t3 + o3 - 1, c3 = true);
                }
              if (y(a3)) {
                do {
                  a3 = e3.input.charCodeAt(++e3.position);
                } while (y(a3));
                if (35 === a3)
                  do {
                    a3 = e3.input.charCodeAt(++e3.position);
                  } while (!m(a3) && 0 !== a3);
              }
              for (; 0 !== a3; ) {
                for (P(e3), e3.lineIndent = 0, a3 = e3.input.charCodeAt(e3.position); (!c3 || e3.lineIndent < h3) && 32 === a3; )
                  e3.lineIndent++, a3 = e3.input.charCodeAt(++e3.position);
                if (!c3 && e3.lineIndent > h3 && (h3 = e3.lineIndent), m(a3))
                  p3++;
                else {
                  if (e3.lineIndent < h3) {
                    3 === u2 ? e3.result += n.repeat("\n", l3 ? 1 + p3 : p3) : 1 === u2 && l3 && (e3.result += "\n");
                    break;
                  }
                  for (i3 ? y(a3) ? (f3 = true, e3.result += n.repeat("\n", l3 ? 1 + p3 : p3)) : f3 ? (f3 = false, e3.result += n.repeat("\n", p3 + 1)) : 0 === p3 ? l3 && (e3.result += " ") : e3.result += n.repeat("\n", p3) : e3.result += n.repeat("\n", l3 ? 1 + p3 : p3), l3 = true, c3 = true, p3 = 0, r3 = e3.position; !m(a3) && 0 !== a3; )
                    a3 = e3.input.charCodeAt(++e3.position);
                  O(e3, r3, e3.position, false);
                }
              }
              return true;
            }(e2, f2) || function(e3, t3) {
              var r3, n2, i3;
              if (39 !== (r3 = e3.input.charCodeAt(e3.position)))
                return false;
              for (e3.kind = "scalar", e3.result = "", e3.position++, n2 = i3 = e3.position; 0 !== (r3 = e3.input.charCodeAt(e3.position)); )
                if (39 === r3) {
                  if (O(e3, n2, e3.position, true), 39 !== (r3 = e3.input.charCodeAt(++e3.position)))
                    return true;
                  n2 = e3.position, e3.position++, i3 = e3.position;
                } else
                  m(r3) ? (O(e3, n2, i3, true), M(e3, I(e3, false, t3)), n2 = i3 = e3.position) : e3.position === e3.lineStart && L(e3) ? A(e3, "unexpected end of the document within a single quoted scalar") : (e3.position++, i3 = e3.position);
              A(e3, "unexpected end of the stream within a single quoted scalar");
            }(e2, f2) || function(e3, t3) {
              var r3, n2, i3, o3, a3, s3, u2;
              if (34 !== (s3 = e3.input.charCodeAt(e3.position)))
                return false;
              for (e3.kind = "scalar", e3.result = "", e3.position++, r3 = n2 = e3.position; 0 !== (s3 = e3.input.charCodeAt(e3.position)); ) {
                if (34 === s3)
                  return O(e3, r3, e3.position, true), e3.position++, true;
                if (92 === s3) {
                  if (O(e3, r3, e3.position, true), m(s3 = e3.input.charCodeAt(++e3.position)))
                    I(e3, false, t3);
                  else if (s3 < 256 && w[s3])
                    e3.result += E[s3], e3.position++;
                  else if ((a3 = 120 === (u2 = s3) ? 2 : 117 === u2 ? 4 : 85 === u2 ? 8 : 0) > 0) {
                    for (i3 = a3, o3 = 0; i3 > 0; i3--)
                      (a3 = g(s3 = e3.input.charCodeAt(++e3.position))) >= 0 ? o3 = (o3 << 4) + a3 : A(e3, "expected hexadecimal character");
                    e3.result += x(o3), e3.position++;
                  } else
                    A(e3, "unknown escape sequence");
                  r3 = n2 = e3.position;
                } else
                  m(s3) ? (O(e3, r3, n2, true), M(e3, I(e3, false, t3)), r3 = n2 = e3.position) : e3.position === e3.lineStart && L(e3) ? A(e3, "unexpected end of the document within a double quoted scalar") : (e3.position++, n2 = e3.position);
              }
              A(e3, "unexpected end of the stream within a double quoted scalar");
            }(e2, f2) ? S2 = true : !function(e3) {
              var t3, r3, n2;
              if (42 !== (n2 = e3.input.charCodeAt(e3.position)))
                return false;
              for (n2 = e3.input.charCodeAt(++e3.position), t3 = e3.position; 0 !== n2 && !v(n2) && !_(n2); )
                n2 = e3.input.charCodeAt(++e3.position);
              return e3.position === t3 && A(e3, "name of an alias node must contain at least one character"), r3 = e3.input.slice(t3, e3.position), u.call(e3.anchorMap, r3) || A(e3, 'unidentified alias "' + r3 + '"'), e3.result = e3.anchorMap[r3], I(e3, true, -1), true;
            }(e2) ? function(e3, t3, r3) {
              var n2, i3, o3, a3, s3, u2, l3, c3, h3 = e3.kind, p3 = e3.result;
              if (v(c3 = e3.input.charCodeAt(e3.position)) || _(c3) || 35 === c3 || 38 === c3 || 42 === c3 || 33 === c3 || 124 === c3 || 62 === c3 || 39 === c3 || 34 === c3 || 37 === c3 || 64 === c3 || 96 === c3)
                return false;
              if ((63 === c3 || 45 === c3) && (v(n2 = e3.input.charCodeAt(e3.position + 1)) || r3 && _(n2)))
                return false;
              for (e3.kind = "scalar", e3.result = "", i3 = o3 = e3.position, a3 = false; 0 !== c3; ) {
                if (58 === c3) {
                  if (v(n2 = e3.input.charCodeAt(e3.position + 1)) || r3 && _(n2))
                    break;
                } else if (35 === c3) {
                  if (v(e3.input.charCodeAt(e3.position - 1)))
                    break;
                } else {
                  if (e3.position === e3.lineStart && L(e3) || r3 && _(c3))
                    break;
                  if (m(c3)) {
                    if (s3 = e3.line, u2 = e3.lineStart, l3 = e3.lineIndent, I(e3, false, -1), e3.lineIndent >= t3) {
                      a3 = true, c3 = e3.input.charCodeAt(e3.position);
                      continue;
                    }
                    e3.position = o3, e3.line = s3, e3.lineStart = u2, e3.lineIndent = l3;
                    break;
                  }
                }
                a3 && (O(e3, i3, o3, false), M(e3, e3.line - s3), i3 = o3 = e3.position, a3 = false), y(c3) || (o3 = e3.position + 1), c3 = e3.input.charCodeAt(++e3.position);
              }
              return O(e3, i3, o3, false), !!e3.result || (e3.kind = h3, e3.result = p3, false);
            }(e2, f2, 1 === r2) && (S2 = true, null === e2.tag && (e2.tag = "?")) : (S2 = true, null === e2.tag && null === e2.anchor || A(e2, "alias node should not have any properties")), null !== e2.anchor && (e2.anchorMap[e2.anchor] = e2.result)) : 0 === b2 && (S2 = l2 && B(e2, d2))), null !== e2.tag && "!" !== e2.tag)
              if ("?" === e2.tag) {
                for (null !== e2.result && "scalar" !== e2.kind && A(e2, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + e2.kind + '"'), c2 = 0, h2 = e2.implicitTypes.length; c2 < h2; c2 += 1)
                  if ((p2 = e2.implicitTypes[c2]).resolve(e2.result)) {
                    e2.result = p2.construct(e2.result), e2.tag = p2.tag, null !== e2.anchor && (e2.anchorMap[e2.anchor] = e2.result);
                    break;
                  }
              } else
                u.call(e2.typeMap[e2.kind || "fallback"], e2.tag) ? (p2 = e2.typeMap[e2.kind || "fallback"][e2.tag], null !== e2.result && p2.kind !== e2.kind && A(e2, "unacceptable node kind for !<" + e2.tag + '> tag; it should be "' + p2.kind + '", not "' + e2.kind + '"'), p2.resolve(e2.result) ? (e2.result = p2.construct(e2.result), null !== e2.anchor && (e2.anchorMap[e2.anchor] = e2.result)) : A(e2, "cannot resolve a node with !<" + e2.tag + "> explicit tag")) : A(e2, "unknown tag !<" + e2.tag + ">");
            return null !== e2.listener && e2.listener("close", e2), null !== e2.tag || null !== e2.anchor || S2;
          }
          function U(e2) {
            var t2, r2, n2, i2, o2 = e2.position, a2 = false;
            for (e2.version = null, e2.checkLineBreaks = e2.legacy, e2.tagMap = {}, e2.anchorMap = {}; 0 !== (i2 = e2.input.charCodeAt(e2.position)) && (I(e2, true, -1), i2 = e2.input.charCodeAt(e2.position), !(e2.lineIndent > 0 || 37 !== i2)); ) {
              for (a2 = true, i2 = e2.input.charCodeAt(++e2.position), t2 = e2.position; 0 !== i2 && !v(i2); )
                i2 = e2.input.charCodeAt(++e2.position);
              for (n2 = [], (r2 = e2.input.slice(t2, e2.position)).length < 1 && A(e2, "directive name must not be less than one character in length"); 0 !== i2; ) {
                for (; y(i2); )
                  i2 = e2.input.charCodeAt(++e2.position);
                if (35 === i2) {
                  do {
                    i2 = e2.input.charCodeAt(++e2.position);
                  } while (0 !== i2 && !m(i2));
                  break;
                }
                if (m(i2))
                  break;
                for (t2 = e2.position; 0 !== i2 && !v(i2); )
                  i2 = e2.input.charCodeAt(++e2.position);
                n2.push(e2.input.slice(t2, e2.position));
              }
              0 !== i2 && P(e2), u.call(T, r2) ? T[r2](e2, r2, n2) : N(e2, 'unknown document directive "' + r2 + '"');
            }
            I(e2, true, -1), 0 === e2.lineIndent && 45 === e2.input.charCodeAt(e2.position) && 45 === e2.input.charCodeAt(e2.position + 1) && 45 === e2.input.charCodeAt(e2.position + 2) ? (e2.position += 3, I(e2, true, -1)) : a2 && A(e2, "directives end mark is expected"), z2(e2, e2.lineIndent - 1, 4, false, true), I(e2, true, -1), e2.checkLineBreaks && c.test(e2.input.slice(o2, e2.position)) && N(e2, "non-ASCII line breaks are interpreted as content"), e2.documents.push(e2.result), e2.position === e2.lineStart && L(e2) ? 46 === e2.input.charCodeAt(e2.position) && (e2.position += 3, I(e2, true, -1)) : e2.position < e2.length - 1 && A(e2, "end of the stream or a document separator is expected");
          }
          function G(e2, t2) {
            t2 = t2 || {}, 0 !== (e2 = String(e2)).length && (10 !== e2.charCodeAt(e2.length - 1) && 13 !== e2.charCodeAt(e2.length - 1) && (e2 += "\n"), 65279 === e2.charCodeAt(0) && (e2 = e2.slice(1)));
            var r2 = new S(e2, t2), n2 = e2.indexOf("\0");
            for (-1 !== n2 && (r2.position = n2, A(r2, "null byte is not allowed in input")), r2.input += "\0"; 32 === r2.input.charCodeAt(r2.position); )
              r2.lineIndent += 1, r2.position += 1;
            for (; r2.position < r2.length - 1; )
              U(r2);
            return r2.documents;
          }
          function X(e2, t2, r2) {
            null !== t2 && "object" == typeof t2 && void 0 === r2 && (r2 = t2, t2 = null);
            var n2 = G(e2, r2);
            if ("function" != typeof t2)
              return n2;
            for (var i2 = 0, o2 = n2.length; i2 < o2; i2 += 1)
              t2(n2[i2]);
          }
          function q(e2, t2) {
            var r2 = G(e2, t2);
            if (0 !== r2.length) {
              if (1 === r2.length)
                return r2[0];
              throw new i("expected a single document in the stream, but found more");
            }
          }
          e.exports.loadAll = X, e.exports.load = q, e.exports.safeLoadAll = function(e2, t2, r2) {
            return "object" == typeof t2 && null !== t2 && void 0 === r2 && (r2 = t2, t2 = null), X(e2, t2, n.extend({ schema: a }, r2));
          }, e.exports.safeLoad = function(e2, t2) {
            return q(e2, n.extend({ schema: a }, t2));
          };
        }, function(e, t, r) {
          "use strict";
          var n = r(38);
          function i(e2, t2, r2, n2, i2) {
            this.name = e2, this.buffer = t2, this.position = r2, this.line = n2, this.column = i2;
          }
          i.prototype.getSnippet = function(e2, t2) {
            var r2, i2, o, a, s;
            if (!this.buffer)
              return null;
            for (e2 = e2 || 4, t2 = t2 || 75, r2 = "", i2 = this.position; i2 > 0 && -1 === "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(i2 - 1)); )
              if (i2 -= 1, this.position - i2 > t2 / 2 - 1) {
                r2 = " ... ", i2 += 5;
                break;
              }
            for (o = "", a = this.position; a < this.buffer.length && -1 === "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(a)); )
              if ((a += 1) - this.position > t2 / 2 - 1) {
                o = " ... ", a -= 5;
                break;
              }
            return s = this.buffer.slice(i2, a), n.repeat(" ", e2) + r2 + s + o + "\n" + n.repeat(" ", e2 + this.position - i2 + r2.length) + "^";
          }, i.prototype.toString = function(e2) {
            var t2, r2 = "";
            return this.name && (r2 += 'in "' + this.name + '" '), r2 += "at line " + (this.line + 1) + ", column " + (this.column + 1), e2 || (t2 = this.getSnippet()) && (r2 += ":\n" + t2), r2;
          }, e.exports = i;
        }, function(e, t, r) {
          "use strict";
          var n = r(10);
          e.exports = new n("tag:yaml.org,2002:str", { kind: "scalar", construct: function(e2) {
            return null !== e2 ? e2 : "";
          } });
        }, function(e, t, r) {
          "use strict";
          var n = r(10);
          e.exports = new n("tag:yaml.org,2002:seq", { kind: "sequence", construct: function(e2) {
            return null !== e2 ? e2 : [];
          } });
        }, function(e, t, r) {
          "use strict";
          var n = r(10);
          e.exports = new n("tag:yaml.org,2002:map", { kind: "mapping", construct: function(e2) {
            return null !== e2 ? e2 : {};
          } });
        }, function(e, t, r) {
          "use strict";
          var n = r(10);
          e.exports = new n("tag:yaml.org,2002:null", { kind: "scalar", resolve: function(e2) {
            if (null === e2)
              return true;
            var t2 = e2.length;
            return 1 === t2 && "~" === e2 || 4 === t2 && ("null" === e2 || "Null" === e2 || "NULL" === e2);
          }, construct: function() {
            return null;
          }, predicate: function(e2) {
            return null === e2;
          }, represent: { canonical: function() {
            return "~";
          }, lowercase: function() {
            return "null";
          }, uppercase: function() {
            return "NULL";
          }, camelcase: function() {
            return "Null";
          } }, defaultStyle: "lowercase" });
        }, function(e, t, r) {
          "use strict";
          var n = r(10);
          e.exports = new n("tag:yaml.org,2002:bool", { kind: "scalar", resolve: function(e2) {
            if (null === e2)
              return false;
            var t2 = e2.length;
            return 4 === t2 && ("true" === e2 || "True" === e2 || "TRUE" === e2) || 5 === t2 && ("false" === e2 || "False" === e2 || "FALSE" === e2);
          }, construct: function(e2) {
            return "true" === e2 || "True" === e2 || "TRUE" === e2;
          }, predicate: function(e2) {
            return "[object Boolean]" === Object.prototype.toString.call(e2);
          }, represent: { lowercase: function(e2) {
            return e2 ? "true" : "false";
          }, uppercase: function(e2) {
            return e2 ? "TRUE" : "FALSE";
          }, camelcase: function(e2) {
            return e2 ? "True" : "False";
          } }, defaultStyle: "lowercase" });
        }, function(e, t, r) {
          "use strict";
          var n = r(38), i = r(10);
          function o(e2) {
            return 48 <= e2 && e2 <= 55;
          }
          function a(e2) {
            return 48 <= e2 && e2 <= 57;
          }
          e.exports = new i("tag:yaml.org,2002:int", { kind: "scalar", resolve: function(e2) {
            if (null === e2)
              return false;
            var t2, r2, n2 = e2.length, i2 = 0, s = false;
            if (!n2)
              return false;
            if ("-" !== (t2 = e2[i2]) && "+" !== t2 || (t2 = e2[++i2]), "0" === t2) {
              if (i2 + 1 === n2)
                return true;
              if ("b" === (t2 = e2[++i2])) {
                for (i2++; i2 < n2; i2++)
                  if ("_" !== (t2 = e2[i2])) {
                    if ("0" !== t2 && "1" !== t2)
                      return false;
                    s = true;
                  }
                return s && "_" !== t2;
              }
              if ("x" === t2) {
                for (i2++; i2 < n2; i2++)
                  if ("_" !== (t2 = e2[i2])) {
                    if (!(48 <= (r2 = e2.charCodeAt(i2)) && r2 <= 57 || 65 <= r2 && r2 <= 70 || 97 <= r2 && r2 <= 102))
                      return false;
                    s = true;
                  }
                return s && "_" !== t2;
              }
              for (; i2 < n2; i2++)
                if ("_" !== (t2 = e2[i2])) {
                  if (!o(e2.charCodeAt(i2)))
                    return false;
                  s = true;
                }
              return s && "_" !== t2;
            }
            if ("_" === t2)
              return false;
            for (; i2 < n2; i2++)
              if ("_" !== (t2 = e2[i2])) {
                if (":" === t2)
                  break;
                if (!a(e2.charCodeAt(i2)))
                  return false;
                s = true;
              }
            return !(!s || "_" === t2) && (":" !== t2 || /^(:[0-5]?[0-9])+$/.test(e2.slice(i2)));
          }, construct: function(e2) {
            var t2, r2, n2 = e2, i2 = 1, o2 = [];
            return -1 !== n2.indexOf("_") && (n2 = n2.replace(/_/g, "")), "-" !== (t2 = n2[0]) && "+" !== t2 || ("-" === t2 && (i2 = -1), t2 = (n2 = n2.slice(1))[0]), "0" === n2 ? 0 : "0" === t2 ? "b" === n2[1] ? i2 * parseInt(n2.slice(2), 2) : "x" === n2[1] ? i2 * parseInt(n2, 16) : i2 * parseInt(n2, 8) : -1 !== n2.indexOf(":") ? (n2.split(":").forEach(function(e3) {
              o2.unshift(parseInt(e3, 10));
            }), n2 = 0, r2 = 1, o2.forEach(function(e3) {
              n2 += e3 * r2, r2 *= 60;
            }), i2 * n2) : i2 * parseInt(n2, 10);
          }, predicate: function(e2) {
            return "[object Number]" === Object.prototype.toString.call(e2) && e2 % 1 == 0 && !n.isNegativeZero(e2);
          }, represent: { binary: function(e2) {
            return e2 >= 0 ? "0b" + e2.toString(2) : "-0b" + e2.toString(2).slice(1);
          }, octal: function(e2) {
            return e2 >= 0 ? "0" + e2.toString(8) : "-0" + e2.toString(8).slice(1);
          }, decimal: function(e2) {
            return e2.toString(10);
          }, hexadecimal: function(e2) {
            return e2 >= 0 ? "0x" + e2.toString(16).toUpperCase() : "-0x" + e2.toString(16).toUpperCase().slice(1);
          } }, defaultStyle: "decimal", styleAliases: { binary: [2, "bin"], octal: [8, "oct"], decimal: [10, "dec"], hexadecimal: [16, "hex"] } });
        }, function(e, t, r) {
          "use strict";
          var n = r(38), i = r(10), o = new RegExp("^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");
          var a = /^[-+]?[0-9]+e/;
          e.exports = new i("tag:yaml.org,2002:float", { kind: "scalar", resolve: function(e2) {
            return null !== e2 && !(!o.test(e2) || "_" === e2[e2.length - 1]);
          }, construct: function(e2) {
            var t2, r2, n2, i2;
            return r2 = "-" === (t2 = e2.replace(/_/g, "").toLowerCase())[0] ? -1 : 1, i2 = [], "+-".indexOf(t2[0]) >= 0 && (t2 = t2.slice(1)), ".inf" === t2 ? 1 === r2 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY : ".nan" === t2 ? NaN : t2.indexOf(":") >= 0 ? (t2.split(":").forEach(function(e3) {
              i2.unshift(parseFloat(e3, 10));
            }), t2 = 0, n2 = 1, i2.forEach(function(e3) {
              t2 += e3 * n2, n2 *= 60;
            }), r2 * t2) : r2 * parseFloat(t2, 10);
          }, predicate: function(e2) {
            return "[object Number]" === Object.prototype.toString.call(e2) && (e2 % 1 != 0 || n.isNegativeZero(e2));
          }, represent: function(e2, t2) {
            var r2;
            if (isNaN(e2))
              switch (t2) {
                case "lowercase":
                  return ".nan";
                case "uppercase":
                  return ".NAN";
                case "camelcase":
                  return ".NaN";
              }
            else if (Number.POSITIVE_INFINITY === e2)
              switch (t2) {
                case "lowercase":
                  return ".inf";
                case "uppercase":
                  return ".INF";
                case "camelcase":
                  return ".Inf";
              }
            else if (Number.NEGATIVE_INFINITY === e2)
              switch (t2) {
                case "lowercase":
                  return "-.inf";
                case "uppercase":
                  return "-.INF";
                case "camelcase":
                  return "-.Inf";
              }
            else if (n.isNegativeZero(e2))
              return "-0.0";
            return r2 = e2.toString(10), a.test(r2) ? r2.replace("e", ".e") : r2;
          }, defaultStyle: "lowercase" });
        }, function(e, t, r) {
          "use strict";
          var n = r(10), i = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"), o = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");
          e.exports = new n("tag:yaml.org,2002:timestamp", { kind: "scalar", resolve: function(e2) {
            return null !== e2 && (null !== i.exec(e2) || null !== o.exec(e2));
          }, construct: function(e2) {
            var t2, r2, n2, a, s, u, l, c, h = 0, p = null;
            if (null === (t2 = i.exec(e2)) && (t2 = o.exec(e2)), null === t2)
              throw new Error("Date resolve error");
            if (r2 = +t2[1], n2 = +t2[2] - 1, a = +t2[3], !t2[4])
              return new Date(Date.UTC(r2, n2, a));
            if (s = +t2[4], u = +t2[5], l = +t2[6], t2[7]) {
              for (h = t2[7].slice(0, 3); h.length < 3; )
                h += "0";
              h = +h;
            }
            return t2[9] && (p = 6e4 * (60 * +t2[10] + +(t2[11] || 0)), "-" === t2[9] && (p = -p)), c = new Date(Date.UTC(r2, n2, a, s, u, l, h)), p && c.setTime(c.getTime() - p), c;
          }, instanceOf: Date, represent: function(e2) {
            return e2.toISOString();
          } });
        }, function(e, t, r) {
          "use strict";
          var n = r(10);
          e.exports = new n("tag:yaml.org,2002:merge", { kind: "scalar", resolve: function(e2) {
            return "<<" === e2 || null === e2;
          } });
        }, function(e, t, r) {
          "use strict";
          var n;
          try {
            n = r(145).Buffer;
          } catch (e2) {
          }
          var i = r(10), o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
          e.exports = new i("tag:yaml.org,2002:binary", { kind: "scalar", resolve: function(e2) {
            if (null === e2)
              return false;
            var t2, r2, n2 = 0, i2 = e2.length, a = o;
            for (r2 = 0; r2 < i2; r2++)
              if (!((t2 = a.indexOf(e2.charAt(r2))) > 64)) {
                if (t2 < 0)
                  return false;
                n2 += 6;
              }
            return n2 % 8 == 0;
          }, construct: function(e2) {
            var t2, r2, i2 = e2.replace(/[\r\n=]/g, ""), a = i2.length, s = o, u = 0, l = [];
            for (t2 = 0; t2 < a; t2++)
              t2 % 4 == 0 && t2 && (l.push(u >> 16 & 255), l.push(u >> 8 & 255), l.push(255 & u)), u = u << 6 | s.indexOf(i2.charAt(t2));
            return 0 === (r2 = a % 4 * 6) ? (l.push(u >> 16 & 255), l.push(u >> 8 & 255), l.push(255 & u)) : 18 === r2 ? (l.push(u >> 10 & 255), l.push(u >> 2 & 255)) : 12 === r2 && l.push(u >> 4 & 255), n ? n.from ? n.from(l) : new n(l) : l;
          }, predicate: function(e2) {
            return n && n.isBuffer(e2);
          }, represent: function(e2) {
            var t2, r2, n2 = "", i2 = 0, a = e2.length, s = o;
            for (t2 = 0; t2 < a; t2++)
              t2 % 3 == 0 && t2 && (n2 += s[i2 >> 18 & 63], n2 += s[i2 >> 12 & 63], n2 += s[i2 >> 6 & 63], n2 += s[63 & i2]), i2 = (i2 << 8) + e2[t2];
            return 0 === (r2 = a % 3) ? (n2 += s[i2 >> 18 & 63], n2 += s[i2 >> 12 & 63], n2 += s[i2 >> 6 & 63], n2 += s[63 & i2]) : 2 === r2 ? (n2 += s[i2 >> 10 & 63], n2 += s[i2 >> 4 & 63], n2 += s[i2 << 2 & 63], n2 += s[64]) : 1 === r2 && (n2 += s[i2 >> 2 & 63], n2 += s[i2 << 4 & 63], n2 += s[64], n2 += s[64]), n2;
          } });
        }, function(e, t, r) {
          "use strict";
          var n = r(10), i = Object.prototype.hasOwnProperty, o = Object.prototype.toString;
          e.exports = new n("tag:yaml.org,2002:omap", { kind: "sequence", resolve: function(e2) {
            if (null === e2)
              return true;
            var t2, r2, n2, a, s, u = [], l = e2;
            for (t2 = 0, r2 = l.length; t2 < r2; t2 += 1) {
              if (n2 = l[t2], s = false, "[object Object]" !== o.call(n2))
                return false;
              for (a in n2)
                if (i.call(n2, a)) {
                  if (s)
                    return false;
                  s = true;
                }
              if (!s)
                return false;
              if (-1 !== u.indexOf(a))
                return false;
              u.push(a);
            }
            return true;
          }, construct: function(e2) {
            return null !== e2 ? e2 : [];
          } });
        }, function(e, t, r) {
          "use strict";
          var n = r(10), i = Object.prototype.toString;
          e.exports = new n("tag:yaml.org,2002:pairs", { kind: "sequence", resolve: function(e2) {
            if (null === e2)
              return true;
            var t2, r2, n2, o, a, s = e2;
            for (a = new Array(s.length), t2 = 0, r2 = s.length; t2 < r2; t2 += 1) {
              if (n2 = s[t2], "[object Object]" !== i.call(n2))
                return false;
              if (1 !== (o = Object.keys(n2)).length)
                return false;
              a[t2] = [o[0], n2[o[0]]];
            }
            return true;
          }, construct: function(e2) {
            if (null === e2)
              return [];
            var t2, r2, n2, i2, o, a = e2;
            for (o = new Array(a.length), t2 = 0, r2 = a.length; t2 < r2; t2 += 1)
              n2 = a[t2], i2 = Object.keys(n2), o[t2] = [i2[0], n2[i2[0]]];
            return o;
          } });
        }, function(e, t, r) {
          "use strict";
          var n = r(10), i = Object.prototype.hasOwnProperty;
          e.exports = new n("tag:yaml.org,2002:set", { kind: "mapping", resolve: function(e2) {
            if (null === e2)
              return true;
            var t2, r2 = e2;
            for (t2 in r2)
              if (i.call(r2, t2) && null !== r2[t2])
                return false;
            return true;
          }, construct: function(e2) {
            return null !== e2 ? e2 : {};
          } });
        }, function(e, t, r) {
          "use strict";
          var n = r(10);
          e.exports = new n("tag:yaml.org,2002:js/undefined", { kind: "scalar", resolve: function() {
            return true;
          }, construct: function() {
          }, predicate: function(e2) {
            return void 0 === e2;
          }, represent: function() {
            return "";
          } });
        }, function(e, t, r) {
          "use strict";
          var n = r(10);
          e.exports = new n("tag:yaml.org,2002:js/regexp", { kind: "scalar", resolve: function(e2) {
            if (null === e2)
              return false;
            if (0 === e2.length)
              return false;
            var t2 = e2, r2 = /\/([gim]*)$/.exec(e2), n2 = "";
            if ("/" === t2[0]) {
              if (r2 && (n2 = r2[1]), n2.length > 3)
                return false;
              if ("/" !== t2[t2.length - n2.length - 1])
                return false;
            }
            return true;
          }, construct: function(e2) {
            var t2 = e2, r2 = /\/([gim]*)$/.exec(e2), n2 = "";
            return "/" === t2[0] && (r2 && (n2 = r2[1]), t2 = t2.slice(1, t2.length - n2.length - 1)), new RegExp(t2, n2);
          }, predicate: function(e2) {
            return "[object RegExp]" === Object.prototype.toString.call(e2);
          }, represent: function(e2) {
            var t2 = "/" + e2.source + "/";
            return e2.global && (t2 += "g"), e2.multiline && (t2 += "m"), e2.ignoreCase && (t2 += "i"), t2;
          } });
        }, function(e, t, r) {
          "use strict";
          var n;
          try {
            n = r(303);
          } catch (e2) {
            "undefined" != typeof window && (n = window.esprima);
          }
          var i = r(10);
          e.exports = new i("tag:yaml.org,2002:js/function", { kind: "scalar", resolve: function(e2) {
            if (null === e2)
              return false;
            try {
              var t2 = "(" + e2 + ")", r2 = n.parse(t2, { range: true });
              return "Program" === r2.type && 1 === r2.body.length && "ExpressionStatement" === r2.body[0].type && ("ArrowFunctionExpression" === r2.body[0].expression.type || "FunctionExpression" === r2.body[0].expression.type);
            } catch (e3) {
              return false;
            }
          }, construct: function(e2) {
            var t2, r2 = "(" + e2 + ")", i2 = n.parse(r2, { range: true }), o = [];
            if ("Program" !== i2.type || 1 !== i2.body.length || "ExpressionStatement" !== i2.body[0].type || "ArrowFunctionExpression" !== i2.body[0].expression.type && "FunctionExpression" !== i2.body[0].expression.type)
              throw new Error("Failed to resolve function");
            return i2.body[0].expression.params.forEach(function(e3) {
              o.push(e3.name);
            }), t2 = i2.body[0].expression.body.range, "BlockStatement" === i2.body[0].expression.body.type ? new Function(o, r2.slice(t2[0] + 1, t2[1] - 1)) : new Function(o, "return " + r2.slice(t2[0], t2[1]));
          }, predicate: function(e2) {
            return "[object Function]" === Object.prototype.toString.call(e2);
          }, represent: function(e2) {
            return e2.toString();
          } });
        }, function(e, t, r) {
          var n;
          n = function() {
            return function(e2) {
              var t2 = {};
              function r2(n2) {
                if (t2[n2])
                  return t2[n2].exports;
                var i = t2[n2] = { exports: {}, id: n2, loaded: false };
                return e2[n2].call(i.exports, i, i.exports, r2), i.loaded = true, i.exports;
              }
              return r2.m = e2, r2.c = t2, r2.p = "", r2(0);
            }([function(e2, t2, r2) {
              "use strict";
              Object.defineProperty(t2, "__esModule", { value: true });
              var n2 = r2(1), i = r2(3), o = r2(8), a = r2(15);
              function s(e3, t3, r3) {
                var a2 = null, s2 = function(e4, t4) {
                  r3 && r3(e4, t4), a2 && a2.visit(e4, t4);
                }, u2 = "function" == typeof r3 ? s2 : null, l = false;
                if (t3) {
                  l = "boolean" == typeof t3.comment && t3.comment;
                  var c = "boolean" == typeof t3.attachComment && t3.attachComment;
                  (l || c) && ((a2 = new n2.CommentHandler()).attach = c, t3.comment = true, u2 = s2);
                }
                var h, p = false;
                t3 && "string" == typeof t3.sourceType && (p = "module" === t3.sourceType), h = t3 && "boolean" == typeof t3.jsx && t3.jsx ? new i.JSXParser(e3, t3, u2) : new o.Parser(e3, t3, u2);
                var f = p ? h.parseModule() : h.parseScript();
                return l && a2 && (f.comments = a2.comments), h.config.tokens && (f.tokens = h.tokens), h.config.tolerant && (f.errors = h.errorHandler.errors), f;
              }
              t2.parse = s, t2.parseModule = function(e3, t3, r3) {
                var n3 = t3 || {};
                return n3.sourceType = "module", s(e3, n3, r3);
              }, t2.parseScript = function(e3, t3, r3) {
                var n3 = t3 || {};
                return n3.sourceType = "script", s(e3, n3, r3);
              }, t2.tokenize = function(e3, t3, r3) {
                var n3, i2 = new a.Tokenizer(e3, t3);
                n3 = [];
                try {
                  for (; ; ) {
                    var o2 = i2.getNextToken();
                    if (!o2)
                      break;
                    r3 && (o2 = r3(o2)), n3.push(o2);
                  }
                } catch (e4) {
                  i2.errorHandler.tolerate(e4);
                }
                return i2.errorHandler.tolerant && (n3.errors = i2.errors()), n3;
              };
              var u = r2(2);
              t2.Syntax = u.Syntax, t2.version = "4.0.1";
            }, function(e2, t2, r2) {
              "use strict";
              Object.defineProperty(t2, "__esModule", { value: true });
              var n2 = r2(2), i = function() {
                function e3() {
                  this.attach = false, this.comments = [], this.stack = [], this.leading = [], this.trailing = [];
                }
                return e3.prototype.insertInnerComments = function(e4, t3) {
                  if (e4.type === n2.Syntax.BlockStatement && 0 === e4.body.length) {
                    for (var r3 = [], i2 = this.leading.length - 1; i2 >= 0; --i2) {
                      var o = this.leading[i2];
                      t3.end.offset >= o.start && (r3.unshift(o.comment), this.leading.splice(i2, 1), this.trailing.splice(i2, 1));
                    }
                    r3.length && (e4.innerComments = r3);
                  }
                }, e3.prototype.findTrailingComments = function(e4) {
                  var t3 = [];
                  if (this.trailing.length > 0) {
                    for (var r3 = this.trailing.length - 1; r3 >= 0; --r3) {
                      var n3 = this.trailing[r3];
                      n3.start >= e4.end.offset && t3.unshift(n3.comment);
                    }
                    return this.trailing.length = 0, t3;
                  }
                  var i2 = this.stack[this.stack.length - 1];
                  if (i2 && i2.node.trailingComments) {
                    var o = i2.node.trailingComments[0];
                    o && o.range[0] >= e4.end.offset && (t3 = i2.node.trailingComments, delete i2.node.trailingComments);
                  }
                  return t3;
                }, e3.prototype.findLeadingComments = function(e4) {
                  for (var t3, r3 = []; this.stack.length > 0 && ((o = this.stack[this.stack.length - 1]) && o.start >= e4.start.offset); )
                    t3 = o.node, this.stack.pop();
                  if (t3) {
                    for (var n3 = (t3.leadingComments ? t3.leadingComments.length : 0) - 1; n3 >= 0; --n3) {
                      var i2 = t3.leadingComments[n3];
                      i2.range[1] <= e4.start.offset && (r3.unshift(i2), t3.leadingComments.splice(n3, 1));
                    }
                    return t3.leadingComments && 0 === t3.leadingComments.length && delete t3.leadingComments, r3;
                  }
                  for (n3 = this.leading.length - 1; n3 >= 0; --n3) {
                    var o;
                    (o = this.leading[n3]).start <= e4.start.offset && (r3.unshift(o.comment), this.leading.splice(n3, 1));
                  }
                  return r3;
                }, e3.prototype.visitNode = function(e4, t3) {
                  if (!(e4.type === n2.Syntax.Program && e4.body.length > 0)) {
                    this.insertInnerComments(e4, t3);
                    var r3 = this.findTrailingComments(t3), i2 = this.findLeadingComments(t3);
                    i2.length > 0 && (e4.leadingComments = i2), r3.length > 0 && (e4.trailingComments = r3), this.stack.push({ node: e4, start: t3.start.offset });
                  }
                }, e3.prototype.visitComment = function(e4, t3) {
                  var r3 = "L" === e4.type[0] ? "Line" : "Block", n3 = { type: r3, value: e4.value };
                  if (e4.range && (n3.range = e4.range), e4.loc && (n3.loc = e4.loc), this.comments.push(n3), this.attach) {
                    var i2 = { comment: { type: r3, value: e4.value, range: [t3.start.offset, t3.end.offset] }, start: t3.start.offset };
                    e4.loc && (i2.comment.loc = e4.loc), e4.type = r3, this.leading.push(i2), this.trailing.push(i2);
                  }
                }, e3.prototype.visit = function(e4, t3) {
                  "LineComment" === e4.type || "BlockComment" === e4.type ? this.visitComment(e4, t3) : this.attach && this.visitNode(e4, t3);
                }, e3;
              }();
              t2.CommentHandler = i;
            }, function(e2, t2) {
              "use strict";
              Object.defineProperty(t2, "__esModule", { value: true }), t2.Syntax = { AssignmentExpression: "AssignmentExpression", AssignmentPattern: "AssignmentPattern", ArrayExpression: "ArrayExpression", ArrayPattern: "ArrayPattern", ArrowFunctionExpression: "ArrowFunctionExpression", AwaitExpression: "AwaitExpression", BlockStatement: "BlockStatement", BinaryExpression: "BinaryExpression", BreakStatement: "BreakStatement", CallExpression: "CallExpression", CatchClause: "CatchClause", ClassBody: "ClassBody", ClassDeclaration: "ClassDeclaration", ClassExpression: "ClassExpression", ConditionalExpression: "ConditionalExpression", ContinueStatement: "ContinueStatement", DoWhileStatement: "DoWhileStatement", DebuggerStatement: "DebuggerStatement", EmptyStatement: "EmptyStatement", ExportAllDeclaration: "ExportAllDeclaration", ExportDefaultDeclaration: "ExportDefaultDeclaration", ExportNamedDeclaration: "ExportNamedDeclaration", ExportSpecifier: "ExportSpecifier", ExpressionStatement: "ExpressionStatement", ForStatement: "ForStatement", ForOfStatement: "ForOfStatement", ForInStatement: "ForInStatement", FunctionDeclaration: "FunctionDeclaration", FunctionExpression: "FunctionExpression", Identifier: "Identifier", IfStatement: "IfStatement", ImportDeclaration: "ImportDeclaration", ImportDefaultSpecifier: "ImportDefaultSpecifier", ImportNamespaceSpecifier: "ImportNamespaceSpecifier", ImportSpecifier: "ImportSpecifier", Literal: "Literal", LabeledStatement: "LabeledStatement", LogicalExpression: "LogicalExpression", MemberExpression: "MemberExpression", MetaProperty: "MetaProperty", MethodDefinition: "MethodDefinition", NewExpression: "NewExpression", ObjectExpression: "ObjectExpression", ObjectPattern: "ObjectPattern", Program: "Program", Property: "Property", RestElement: "RestElement", ReturnStatement: "ReturnStatement", SequenceExpression: "SequenceExpression", SpreadElement: "SpreadElement", Super: "Super", SwitchCase: "SwitchCase", SwitchStatement: "SwitchStatement", TaggedTemplateExpression: "TaggedTemplateExpression", TemplateElement: "TemplateElement", TemplateLiteral: "TemplateLiteral", ThisExpression: "ThisExpression", ThrowStatement: "ThrowStatement", TryStatement: "TryStatement", UnaryExpression: "UnaryExpression", UpdateExpression: "UpdateExpression", VariableDeclaration: "VariableDeclaration", VariableDeclarator: "VariableDeclarator", WhileStatement: "WhileStatement", WithStatement: "WithStatement", YieldExpression: "YieldExpression" };
            }, function(e2, t2, r2) {
              "use strict";
              var n2, i = this && this.__extends || (n2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
                e3.__proto__ = t3;
              } || function(e3, t3) {
                for (var r3 in t3)
                  t3.hasOwnProperty(r3) && (e3[r3] = t3[r3]);
              }, function(e3, t3) {
                function r3() {
                  this.constructor = e3;
                }
                n2(e3, t3), e3.prototype = null === t3 ? Object.create(t3) : (r3.prototype = t3.prototype, new r3());
              });
              Object.defineProperty(t2, "__esModule", { value: true });
              var o = r2(4), a = r2(5), s = r2(6), u = r2(7), l = r2(8), c = r2(13), h = r2(14);
              function p(e3) {
                var t3;
                switch (e3.type) {
                  case s.JSXSyntax.JSXIdentifier:
                    t3 = e3.name;
                    break;
                  case s.JSXSyntax.JSXNamespacedName:
                    var r3 = e3;
                    t3 = p(r3.namespace) + ":" + p(r3.name);
                    break;
                  case s.JSXSyntax.JSXMemberExpression:
                    var n3 = e3;
                    t3 = p(n3.object) + "." + p(n3.property);
                }
                return t3;
              }
              c.TokenName[100] = "JSXIdentifier", c.TokenName[101] = "JSXText";
              var f = function(e3) {
                function t3(t4, r3, n3) {
                  return e3.call(this, t4, r3, n3) || this;
                }
                return i(t3, e3), t3.prototype.parsePrimaryExpression = function() {
                  return this.match("<") ? this.parseJSXRoot() : e3.prototype.parsePrimaryExpression.call(this);
                }, t3.prototype.startJSX = function() {
                  this.scanner.index = this.startMarker.index, this.scanner.lineNumber = this.startMarker.line, this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
                }, t3.prototype.finishJSX = function() {
                  this.nextToken();
                }, t3.prototype.reenterJSX = function() {
                  this.startJSX(), this.expectJSX("}"), this.config.tokens && this.tokens.pop();
                }, t3.prototype.createJSXNode = function() {
                  return this.collectComments(), { index: this.scanner.index, line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart };
                }, t3.prototype.createJSXChildNode = function() {
                  return { index: this.scanner.index, line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart };
                }, t3.prototype.scanXHTMLEntity = function(e4) {
                  for (var t4 = "&", r3 = true, n3 = false, i2 = false, a2 = false; !this.scanner.eof() && r3 && !n3; ) {
                    var s2 = this.scanner.source[this.scanner.index];
                    if (s2 === e4)
                      break;
                    if (n3 = ";" === s2, t4 += s2, ++this.scanner.index, !n3)
                      switch (t4.length) {
                        case 2:
                          i2 = "#" === s2;
                          break;
                        case 3:
                          i2 && (r3 = (a2 = "x" === s2) || o.Character.isDecimalDigit(s2.charCodeAt(0)), i2 = i2 && !a2);
                          break;
                        default:
                          r3 = (r3 = r3 && !(i2 && !o.Character.isDecimalDigit(s2.charCodeAt(0)))) && !(a2 && !o.Character.isHexDigit(s2.charCodeAt(0)));
                      }
                  }
                  if (r3 && n3 && t4.length > 2) {
                    var u2 = t4.substr(1, t4.length - 2);
                    i2 && u2.length > 1 ? t4 = String.fromCharCode(parseInt(u2.substr(1), 10)) : a2 && u2.length > 2 ? t4 = String.fromCharCode(parseInt("0" + u2.substr(1), 16)) : i2 || a2 || !h.XHTMLEntities[u2] || (t4 = h.XHTMLEntities[u2]);
                  }
                  return t4;
                }, t3.prototype.lexJSX = function() {
                  var e4 = this.scanner.source.charCodeAt(this.scanner.index);
                  if (60 === e4 || 62 === e4 || 47 === e4 || 58 === e4 || 61 === e4 || 123 === e4 || 125 === e4)
                    return { type: 7, value: s2 = this.scanner.source[this.scanner.index++], lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: this.scanner.index - 1, end: this.scanner.index };
                  if (34 === e4 || 39 === e4) {
                    for (var t4 = this.scanner.index, r3 = this.scanner.source[this.scanner.index++], n3 = ""; !this.scanner.eof() && (u2 = this.scanner.source[this.scanner.index++]) !== r3; )
                      n3 += "&" === u2 ? this.scanXHTMLEntity(r3) : u2;
                    return { type: 8, value: n3, lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: t4, end: this.scanner.index };
                  }
                  if (46 === e4) {
                    var i2 = this.scanner.source.charCodeAt(this.scanner.index + 1), a2 = this.scanner.source.charCodeAt(this.scanner.index + 2), s2 = 46 === i2 && 46 === a2 ? "..." : ".";
                    return t4 = this.scanner.index, this.scanner.index += s2.length, { type: 7, value: s2, lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: t4, end: this.scanner.index };
                  }
                  if (96 === e4)
                    return { type: 10, value: "", lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: this.scanner.index, end: this.scanner.index };
                  if (o.Character.isIdentifierStart(e4) && 92 !== e4) {
                    for (t4 = this.scanner.index, ++this.scanner.index; !this.scanner.eof(); ) {
                      var u2 = this.scanner.source.charCodeAt(this.scanner.index);
                      if (o.Character.isIdentifierPart(u2) && 92 !== u2)
                        ++this.scanner.index;
                      else {
                        if (45 !== u2)
                          break;
                        ++this.scanner.index;
                      }
                    }
                    return { type: 100, value: this.scanner.source.slice(t4, this.scanner.index), lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: t4, end: this.scanner.index };
                  }
                  return this.scanner.lex();
                }, t3.prototype.nextJSXToken = function() {
                  this.collectComments(), this.startMarker.index = this.scanner.index, this.startMarker.line = this.scanner.lineNumber, this.startMarker.column = this.scanner.index - this.scanner.lineStart;
                  var e4 = this.lexJSX();
                  return this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart, this.config.tokens && this.tokens.push(this.convertToken(e4)), e4;
                }, t3.prototype.nextJSXText = function() {
                  this.startMarker.index = this.scanner.index, this.startMarker.line = this.scanner.lineNumber, this.startMarker.column = this.scanner.index - this.scanner.lineStart;
                  for (var e4 = this.scanner.index, t4 = ""; !this.scanner.eof(); ) {
                    var r3 = this.scanner.source[this.scanner.index];
                    if ("{" === r3 || "<" === r3)
                      break;
                    ++this.scanner.index, t4 += r3, o.Character.isLineTerminator(r3.charCodeAt(0)) && (++this.scanner.lineNumber, "\r" === r3 && "\n" === this.scanner.source[this.scanner.index] && ++this.scanner.index, this.scanner.lineStart = this.scanner.index);
                  }
                  this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
                  var n3 = { type: 101, value: t4, lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: e4, end: this.scanner.index };
                  return t4.length > 0 && this.config.tokens && this.tokens.push(this.convertToken(n3)), n3;
                }, t3.prototype.peekJSXToken = function() {
                  var e4 = this.scanner.saveState();
                  this.scanner.scanComments();
                  var t4 = this.lexJSX();
                  return this.scanner.restoreState(e4), t4;
                }, t3.prototype.expectJSX = function(e4) {
                  var t4 = this.nextJSXToken();
                  7 === t4.type && t4.value === e4 || this.throwUnexpectedToken(t4);
                }, t3.prototype.matchJSX = function(e4) {
                  var t4 = this.peekJSXToken();
                  return 7 === t4.type && t4.value === e4;
                }, t3.prototype.parseJSXIdentifier = function() {
                  var e4 = this.createJSXNode(), t4 = this.nextJSXToken();
                  return 100 !== t4.type && this.throwUnexpectedToken(t4), this.finalize(e4, new a.JSXIdentifier(t4.value));
                }, t3.prototype.parseJSXElementName = function() {
                  var e4 = this.createJSXNode(), t4 = this.parseJSXIdentifier();
                  if (this.matchJSX(":")) {
                    var r3 = t4;
                    this.expectJSX(":");
                    var n3 = this.parseJSXIdentifier();
                    t4 = this.finalize(e4, new a.JSXNamespacedName(r3, n3));
                  } else if (this.matchJSX("."))
                    for (; this.matchJSX("."); ) {
                      var i2 = t4;
                      this.expectJSX(".");
                      var o2 = this.parseJSXIdentifier();
                      t4 = this.finalize(e4, new a.JSXMemberExpression(i2, o2));
                    }
                  return t4;
                }, t3.prototype.parseJSXAttributeName = function() {
                  var e4, t4 = this.createJSXNode(), r3 = this.parseJSXIdentifier();
                  if (this.matchJSX(":")) {
                    var n3 = r3;
                    this.expectJSX(":");
                    var i2 = this.parseJSXIdentifier();
                    e4 = this.finalize(t4, new a.JSXNamespacedName(n3, i2));
                  } else
                    e4 = r3;
                  return e4;
                }, t3.prototype.parseJSXStringLiteralAttribute = function() {
                  var e4 = this.createJSXNode(), t4 = this.nextJSXToken();
                  8 !== t4.type && this.throwUnexpectedToken(t4);
                  var r3 = this.getTokenRaw(t4);
                  return this.finalize(e4, new u.Literal(t4.value, r3));
                }, t3.prototype.parseJSXExpressionAttribute = function() {
                  var e4 = this.createJSXNode();
                  this.expectJSX("{"), this.finishJSX(), this.match("}") && this.tolerateError("JSX attributes must only be assigned a non-empty expression");
                  var t4 = this.parseAssignmentExpression();
                  return this.reenterJSX(), this.finalize(e4, new a.JSXExpressionContainer(t4));
                }, t3.prototype.parseJSXAttributeValue = function() {
                  return this.matchJSX("{") ? this.parseJSXExpressionAttribute() : this.matchJSX("<") ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
                }, t3.prototype.parseJSXNameValueAttribute = function() {
                  var e4 = this.createJSXNode(), t4 = this.parseJSXAttributeName(), r3 = null;
                  return this.matchJSX("=") && (this.expectJSX("="), r3 = this.parseJSXAttributeValue()), this.finalize(e4, new a.JSXAttribute(t4, r3));
                }, t3.prototype.parseJSXSpreadAttribute = function() {
                  var e4 = this.createJSXNode();
                  this.expectJSX("{"), this.expectJSX("..."), this.finishJSX();
                  var t4 = this.parseAssignmentExpression();
                  return this.reenterJSX(), this.finalize(e4, new a.JSXSpreadAttribute(t4));
                }, t3.prototype.parseJSXAttributes = function() {
                  for (var e4 = []; !this.matchJSX("/") && !this.matchJSX(">"); ) {
                    var t4 = this.matchJSX("{") ? this.parseJSXSpreadAttribute() : this.parseJSXNameValueAttribute();
                    e4.push(t4);
                  }
                  return e4;
                }, t3.prototype.parseJSXOpeningElement = function() {
                  var e4 = this.createJSXNode();
                  this.expectJSX("<");
                  var t4 = this.parseJSXElementName(), r3 = this.parseJSXAttributes(), n3 = this.matchJSX("/");
                  return n3 && this.expectJSX("/"), this.expectJSX(">"), this.finalize(e4, new a.JSXOpeningElement(t4, n3, r3));
                }, t3.prototype.parseJSXBoundaryElement = function() {
                  var e4 = this.createJSXNode();
                  if (this.expectJSX("<"), this.matchJSX("/")) {
                    this.expectJSX("/");
                    var t4 = this.parseJSXElementName();
                    return this.expectJSX(">"), this.finalize(e4, new a.JSXClosingElement(t4));
                  }
                  var r3 = this.parseJSXElementName(), n3 = this.parseJSXAttributes(), i2 = this.matchJSX("/");
                  return i2 && this.expectJSX("/"), this.expectJSX(">"), this.finalize(e4, new a.JSXOpeningElement(r3, i2, n3));
                }, t3.prototype.parseJSXEmptyExpression = function() {
                  var e4 = this.createJSXChildNode();
                  return this.collectComments(), this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart, this.finalize(e4, new a.JSXEmptyExpression());
                }, t3.prototype.parseJSXExpressionContainer = function() {
                  var e4, t4 = this.createJSXNode();
                  return this.expectJSX("{"), this.matchJSX("}") ? (e4 = this.parseJSXEmptyExpression(), this.expectJSX("}")) : (this.finishJSX(), e4 = this.parseAssignmentExpression(), this.reenterJSX()), this.finalize(t4, new a.JSXExpressionContainer(e4));
                }, t3.prototype.parseJSXChildren = function() {
                  for (var e4 = []; !this.scanner.eof(); ) {
                    var t4 = this.createJSXChildNode(), r3 = this.nextJSXText();
                    if (r3.start < r3.end) {
                      var n3 = this.getTokenRaw(r3), i2 = this.finalize(t4, new a.JSXText(r3.value, n3));
                      e4.push(i2);
                    }
                    if ("{" !== this.scanner.source[this.scanner.index])
                      break;
                    var o2 = this.parseJSXExpressionContainer();
                    e4.push(o2);
                  }
                  return e4;
                }, t3.prototype.parseComplexJSXElement = function(e4) {
                  for (var t4 = []; !this.scanner.eof(); ) {
                    e4.children = e4.children.concat(this.parseJSXChildren());
                    var r3 = this.createJSXChildNode(), n3 = this.parseJSXBoundaryElement();
                    if (n3.type === s.JSXSyntax.JSXOpeningElement) {
                      var i2 = n3;
                      if (i2.selfClosing) {
                        var o2 = this.finalize(r3, new a.JSXElement(i2, [], null));
                        e4.children.push(o2);
                      } else
                        t4.push(e4), e4 = { node: r3, opening: i2, closing: null, children: [] };
                    }
                    if (n3.type === s.JSXSyntax.JSXClosingElement) {
                      e4.closing = n3;
                      var u2 = p(e4.opening.name);
                      if (u2 !== p(e4.closing.name) && this.tolerateError("Expected corresponding JSX closing tag for %0", u2), !(t4.length > 0))
                        break;
                      o2 = this.finalize(e4.node, new a.JSXElement(e4.opening, e4.children, e4.closing)), (e4 = t4[t4.length - 1]).children.push(o2), t4.pop();
                    }
                  }
                  return e4;
                }, t3.prototype.parseJSXElement = function() {
                  var e4 = this.createJSXNode(), t4 = this.parseJSXOpeningElement(), r3 = [], n3 = null;
                  if (!t4.selfClosing) {
                    var i2 = this.parseComplexJSXElement({ node: e4, opening: t4, closing: n3, children: r3 });
                    r3 = i2.children, n3 = i2.closing;
                  }
                  return this.finalize(e4, new a.JSXElement(t4, r3, n3));
                }, t3.prototype.parseJSXRoot = function() {
                  this.config.tokens && this.tokens.pop(), this.startJSX();
                  var e4 = this.parseJSXElement();
                  return this.finishJSX(), e4;
                }, t3.prototype.isStartOfExpression = function() {
                  return e3.prototype.isStartOfExpression.call(this) || this.match("<");
                }, t3;
              }(l.Parser);
              t2.JSXParser = f;
            }, function(e2, t2) {
              "use strict";
              Object.defineProperty(t2, "__esModule", { value: true });
              var r2 = { NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/, NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/ };
              t2.Character = { fromCodePoint: function(e3) {
                return e3 < 65536 ? String.fromCharCode(e3) : String.fromCharCode(55296 + (e3 - 65536 >> 10)) + String.fromCharCode(56320 + (e3 - 65536 & 1023));
              }, isWhiteSpace: function(e3) {
                return 32 === e3 || 9 === e3 || 11 === e3 || 12 === e3 || 160 === e3 || e3 >= 5760 && [5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279].indexOf(e3) >= 0;
              }, isLineTerminator: function(e3) {
                return 10 === e3 || 13 === e3 || 8232 === e3 || 8233 === e3;
              }, isIdentifierStart: function(e3) {
                return 36 === e3 || 95 === e3 || e3 >= 65 && e3 <= 90 || e3 >= 97 && e3 <= 122 || 92 === e3 || e3 >= 128 && r2.NonAsciiIdentifierStart.test(t2.Character.fromCodePoint(e3));
              }, isIdentifierPart: function(e3) {
                return 36 === e3 || 95 === e3 || e3 >= 65 && e3 <= 90 || e3 >= 97 && e3 <= 122 || e3 >= 48 && e3 <= 57 || 92 === e3 || e3 >= 128 && r2.NonAsciiIdentifierPart.test(t2.Character.fromCodePoint(e3));
              }, isDecimalDigit: function(e3) {
                return e3 >= 48 && e3 <= 57;
              }, isHexDigit: function(e3) {
                return e3 >= 48 && e3 <= 57 || e3 >= 65 && e3 <= 70 || e3 >= 97 && e3 <= 102;
              }, isOctalDigit: function(e3) {
                return e3 >= 48 && e3 <= 55;
              } };
            }, function(e2, t2, r2) {
              "use strict";
              Object.defineProperty(t2, "__esModule", { value: true });
              var n2 = r2(6), i = function(e3) {
                this.type = n2.JSXSyntax.JSXClosingElement, this.name = e3;
              };
              t2.JSXClosingElement = i;
              var o = function(e3, t3, r3) {
                this.type = n2.JSXSyntax.JSXElement, this.openingElement = e3, this.children = t3, this.closingElement = r3;
              };
              t2.JSXElement = o;
              var a = function() {
                this.type = n2.JSXSyntax.JSXEmptyExpression;
              };
              t2.JSXEmptyExpression = a;
              var s = function(e3) {
                this.type = n2.JSXSyntax.JSXExpressionContainer, this.expression = e3;
              };
              t2.JSXExpressionContainer = s;
              var u = function(e3) {
                this.type = n2.JSXSyntax.JSXIdentifier, this.name = e3;
              };
              t2.JSXIdentifier = u;
              var l = function(e3, t3) {
                this.type = n2.JSXSyntax.JSXMemberExpression, this.object = e3, this.property = t3;
              };
              t2.JSXMemberExpression = l;
              var c = function(e3, t3) {
                this.type = n2.JSXSyntax.JSXAttribute, this.name = e3, this.value = t3;
              };
              t2.JSXAttribute = c;
              var h = function(e3, t3) {
                this.type = n2.JSXSyntax.JSXNamespacedName, this.namespace = e3, this.name = t3;
              };
              t2.JSXNamespacedName = h;
              var p = function(e3, t3, r3) {
                this.type = n2.JSXSyntax.JSXOpeningElement, this.name = e3, this.selfClosing = t3, this.attributes = r3;
              };
              t2.JSXOpeningElement = p;
              var f = function(e3) {
                this.type = n2.JSXSyntax.JSXSpreadAttribute, this.argument = e3;
              };
              t2.JSXSpreadAttribute = f;
              var d = function(e3, t3) {
                this.type = n2.JSXSyntax.JSXText, this.value = e3, this.raw = t3;
              };
              t2.JSXText = d;
            }, function(e2, t2) {
              "use strict";
              Object.defineProperty(t2, "__esModule", { value: true }), t2.JSXSyntax = { JSXAttribute: "JSXAttribute", JSXClosingElement: "JSXClosingElement", JSXElement: "JSXElement", JSXEmptyExpression: "JSXEmptyExpression", JSXExpressionContainer: "JSXExpressionContainer", JSXIdentifier: "JSXIdentifier", JSXMemberExpression: "JSXMemberExpression", JSXNamespacedName: "JSXNamespacedName", JSXOpeningElement: "JSXOpeningElement", JSXSpreadAttribute: "JSXSpreadAttribute", JSXText: "JSXText" };
            }, function(e2, t2, r2) {
              "use strict";
              Object.defineProperty(t2, "__esModule", { value: true });
              var n2 = r2(2), i = function(e3) {
                this.type = n2.Syntax.ArrayExpression, this.elements = e3;
              };
              t2.ArrayExpression = i;
              var o = function(e3) {
                this.type = n2.Syntax.ArrayPattern, this.elements = e3;
              };
              t2.ArrayPattern = o;
              var a = function(e3, t3, r3) {
                this.type = n2.Syntax.ArrowFunctionExpression, this.id = null, this.params = e3, this.body = t3, this.generator = false, this.expression = r3, this.async = false;
              };
              t2.ArrowFunctionExpression = a;
              var s = function(e3, t3, r3) {
                this.type = n2.Syntax.AssignmentExpression, this.operator = e3, this.left = t3, this.right = r3;
              };
              t2.AssignmentExpression = s;
              var u = function(e3, t3) {
                this.type = n2.Syntax.AssignmentPattern, this.left = e3, this.right = t3;
              };
              t2.AssignmentPattern = u;
              var l = function(e3, t3, r3) {
                this.type = n2.Syntax.ArrowFunctionExpression, this.id = null, this.params = e3, this.body = t3, this.generator = false, this.expression = r3, this.async = true;
              };
              t2.AsyncArrowFunctionExpression = l;
              var c = function(e3, t3, r3) {
                this.type = n2.Syntax.FunctionDeclaration, this.id = e3, this.params = t3, this.body = r3, this.generator = false, this.expression = false, this.async = true;
              };
              t2.AsyncFunctionDeclaration = c;
              var h = function(e3, t3, r3) {
                this.type = n2.Syntax.FunctionExpression, this.id = e3, this.params = t3, this.body = r3, this.generator = false, this.expression = false, this.async = true;
              };
              t2.AsyncFunctionExpression = h;
              var p = function(e3) {
                this.type = n2.Syntax.AwaitExpression, this.argument = e3;
              };
              t2.AwaitExpression = p;
              var f = function(e3, t3, r3) {
                var i2 = "||" === e3 || "&&" === e3;
                this.type = i2 ? n2.Syntax.LogicalExpression : n2.Syntax.BinaryExpression, this.operator = e3, this.left = t3, this.right = r3;
              };
              t2.BinaryExpression = f;
              var d = function(e3) {
                this.type = n2.Syntax.BlockStatement, this.body = e3;
              };
              t2.BlockStatement = d;
              var m = function(e3) {
                this.type = n2.Syntax.BreakStatement, this.label = e3;
              };
              t2.BreakStatement = m;
              var y = function(e3, t3) {
                this.type = n2.Syntax.CallExpression, this.callee = e3, this.arguments = t3;
              };
              t2.CallExpression = y;
              var v = function(e3, t3) {
                this.type = n2.Syntax.CatchClause, this.param = e3, this.body = t3;
              };
              t2.CatchClause = v;
              var _ = function(e3) {
                this.type = n2.Syntax.ClassBody, this.body = e3;
              };
              t2.ClassBody = _;
              var g = function(e3, t3, r3) {
                this.type = n2.Syntax.ClassDeclaration, this.id = e3, this.superClass = t3, this.body = r3;
              };
              t2.ClassDeclaration = g;
              var b = function(e3, t3, r3) {
                this.type = n2.Syntax.ClassExpression, this.id = e3, this.superClass = t3, this.body = r3;
              };
              t2.ClassExpression = b;
              var x = function(e3, t3) {
                this.type = n2.Syntax.MemberExpression, this.computed = true, this.object = e3, this.property = t3;
              };
              t2.ComputedMemberExpression = x;
              var w = function(e3, t3, r3) {
                this.type = n2.Syntax.ConditionalExpression, this.test = e3, this.consequent = t3, this.alternate = r3;
              };
              t2.ConditionalExpression = w;
              var E = function(e3) {
                this.type = n2.Syntax.ContinueStatement, this.label = e3;
              };
              t2.ContinueStatement = E;
              var D = function() {
                this.type = n2.Syntax.DebuggerStatement;
              };
              t2.DebuggerStatement = D;
              var S = function(e3, t3) {
                this.type = n2.Syntax.ExpressionStatement, this.expression = e3, this.directive = t3;
              };
              t2.Directive = S;
              var C = function(e3, t3) {
                this.type = n2.Syntax.DoWhileStatement, this.body = e3, this.test = t3;
              };
              t2.DoWhileStatement = C;
              var A = function() {
                this.type = n2.Syntax.EmptyStatement;
              };
              t2.EmptyStatement = A;
              var N = function(e3) {
                this.type = n2.Syntax.ExportAllDeclaration, this.source = e3;
              };
              t2.ExportAllDeclaration = N;
              var T = function(e3) {
                this.type = n2.Syntax.ExportDefaultDeclaration, this.declaration = e3;
              };
              t2.ExportDefaultDeclaration = T;
              var O = function(e3, t3, r3) {
                this.type = n2.Syntax.ExportNamedDeclaration, this.declaration = e3, this.specifiers = t3, this.source = r3;
              };
              t2.ExportNamedDeclaration = O;
              var F = function(e3, t3) {
                this.type = n2.Syntax.ExportSpecifier, this.exported = t3, this.local = e3;
              };
              t2.ExportSpecifier = F;
              var k = function(e3) {
                this.type = n2.Syntax.ExpressionStatement, this.expression = e3;
              };
              t2.ExpressionStatement = k;
              var P = function(e3, t3, r3) {
                this.type = n2.Syntax.ForInStatement, this.left = e3, this.right = t3, this.body = r3, this.each = false;
              };
              t2.ForInStatement = P;
              var I = function(e3, t3, r3) {
                this.type = n2.Syntax.ForOfStatement, this.left = e3, this.right = t3, this.body = r3;
              };
              t2.ForOfStatement = I;
              var L = function(e3, t3, r3, i2) {
                this.type = n2.Syntax.ForStatement, this.init = e3, this.test = t3, this.update = r3, this.body = i2;
              };
              t2.ForStatement = L;
              var M = function(e3, t3, r3, i2) {
                this.type = n2.Syntax.FunctionDeclaration, this.id = e3, this.params = t3, this.body = r3, this.generator = i2, this.expression = false, this.async = false;
              };
              t2.FunctionDeclaration = M;
              var B = function(e3, t3, r3, i2) {
                this.type = n2.Syntax.FunctionExpression, this.id = e3, this.params = t3, this.body = r3, this.generator = i2, this.expression = false, this.async = false;
              };
              t2.FunctionExpression = B;
              var j = function(e3) {
                this.type = n2.Syntax.Identifier, this.name = e3;
              };
              t2.Identifier = j;
              var R = function(e3, t3, r3) {
                this.type = n2.Syntax.IfStatement, this.test = e3, this.consequent = t3, this.alternate = r3;
              };
              t2.IfStatement = R;
              var z2 = function(e3, t3) {
                this.type = n2.Syntax.ImportDeclaration, this.specifiers = e3, this.source = t3;
              };
              t2.ImportDeclaration = z2;
              var U = function(e3) {
                this.type = n2.Syntax.ImportDefaultSpecifier, this.local = e3;
              };
              t2.ImportDefaultSpecifier = U;
              var G = function(e3) {
                this.type = n2.Syntax.ImportNamespaceSpecifier, this.local = e3;
              };
              t2.ImportNamespaceSpecifier = G;
              var X = function(e3, t3) {
                this.type = n2.Syntax.ImportSpecifier, this.local = e3, this.imported = t3;
              };
              t2.ImportSpecifier = X;
              var q = function(e3, t3) {
                this.type = n2.Syntax.LabeledStatement, this.label = e3, this.body = t3;
              };
              t2.LabeledStatement = q;
              var W = function(e3, t3) {
                this.type = n2.Syntax.Literal, this.value = e3, this.raw = t3;
              };
              t2.Literal = W;
              var H = function(e3, t3) {
                this.type = n2.Syntax.MetaProperty, this.meta = e3, this.property = t3;
              };
              t2.MetaProperty = H;
              var J = function(e3, t3, r3, i2, o2) {
                this.type = n2.Syntax.MethodDefinition, this.key = e3, this.computed = t3, this.value = r3, this.kind = i2, this.static = o2;
              };
              t2.MethodDefinition = J;
              var Y = function(e3) {
                this.type = n2.Syntax.Program, this.body = e3, this.sourceType = "module";
              };
              t2.Module = Y;
              var V = function(e3, t3) {
                this.type = n2.Syntax.NewExpression, this.callee = e3, this.arguments = t3;
              };
              t2.NewExpression = V;
              var K = function(e3) {
                this.type = n2.Syntax.ObjectExpression, this.properties = e3;
              };
              t2.ObjectExpression = K;
              var $ = function(e3) {
                this.type = n2.Syntax.ObjectPattern, this.properties = e3;
              };
              t2.ObjectPattern = $;
              var Q = function(e3, t3, r3, i2, o2, a2) {
                this.type = n2.Syntax.Property, this.key = t3, this.computed = r3, this.value = i2, this.kind = e3, this.method = o2, this.shorthand = a2;
              };
              t2.Property = Q;
              var Z = function(e3, t3, r3, i2) {
                this.type = n2.Syntax.Literal, this.value = e3, this.raw = t3, this.regex = { pattern: r3, flags: i2 };
              };
              t2.RegexLiteral = Z;
              var ee = function(e3) {
                this.type = n2.Syntax.RestElement, this.argument = e3;
              };
              t2.RestElement = ee;
              var te = function(e3) {
                this.type = n2.Syntax.ReturnStatement, this.argument = e3;
              };
              t2.ReturnStatement = te;
              var re = function(e3) {
                this.type = n2.Syntax.Program, this.body = e3, this.sourceType = "script";
              };
              t2.Script = re;
              var ne = function(e3) {
                this.type = n2.Syntax.SequenceExpression, this.expressions = e3;
              };
              t2.SequenceExpression = ne;
              var ie = function(e3) {
                this.type = n2.Syntax.SpreadElement, this.argument = e3;
              };
              t2.SpreadElement = ie;
              var oe = function(e3, t3) {
                this.type = n2.Syntax.MemberExpression, this.computed = false, this.object = e3, this.property = t3;
              };
              t2.StaticMemberExpression = oe;
              var ae = function() {
                this.type = n2.Syntax.Super;
              };
              t2.Super = ae;
              var se = function(e3, t3) {
                this.type = n2.Syntax.SwitchCase, this.test = e3, this.consequent = t3;
              };
              t2.SwitchCase = se;
              var ue = function(e3, t3) {
                this.type = n2.Syntax.SwitchStatement, this.discriminant = e3, this.cases = t3;
              };
              t2.SwitchStatement = ue;
              var le = function(e3, t3) {
                this.type = n2.Syntax.TaggedTemplateExpression, this.tag = e3, this.quasi = t3;
              };
              t2.TaggedTemplateExpression = le;
              var ce = function(e3, t3) {
                this.type = n2.Syntax.TemplateElement, this.value = e3, this.tail = t3;
              };
              t2.TemplateElement = ce;
              var he = function(e3, t3) {
                this.type = n2.Syntax.TemplateLiteral, this.quasis = e3, this.expressions = t3;
              };
              t2.TemplateLiteral = he;
              var pe = function() {
                this.type = n2.Syntax.ThisExpression;
              };
              t2.ThisExpression = pe;
              var fe = function(e3) {
                this.type = n2.Syntax.ThrowStatement, this.argument = e3;
              };
              t2.ThrowStatement = fe;
              var de = function(e3, t3, r3) {
                this.type = n2.Syntax.TryStatement, this.block = e3, this.handler = t3, this.finalizer = r3;
              };
              t2.TryStatement = de;
              var me = function(e3, t3) {
                this.type = n2.Syntax.UnaryExpression, this.operator = e3, this.argument = t3, this.prefix = true;
              };
              t2.UnaryExpression = me;
              var ye = function(e3, t3, r3) {
                this.type = n2.Syntax.UpdateExpression, this.operator = e3, this.argument = t3, this.prefix = r3;
              };
              t2.UpdateExpression = ye;
              var ve = function(e3, t3) {
                this.type = n2.Syntax.VariableDeclaration, this.declarations = e3, this.kind = t3;
              };
              t2.VariableDeclaration = ve;
              var _e = function(e3, t3) {
                this.type = n2.Syntax.VariableDeclarator, this.id = e3, this.init = t3;
              };
              t2.VariableDeclarator = _e;
              var ge = function(e3, t3) {
                this.type = n2.Syntax.WhileStatement, this.test = e3, this.body = t3;
              };
              t2.WhileStatement = ge;
              var be = function(e3, t3) {
                this.type = n2.Syntax.WithStatement, this.object = e3, this.body = t3;
              };
              t2.WithStatement = be;
              var xe = function(e3, t3) {
                this.type = n2.Syntax.YieldExpression, this.argument = e3, this.delegate = t3;
              };
              t2.YieldExpression = xe;
            }, function(e2, t2, r2) {
              "use strict";
              Object.defineProperty(t2, "__esModule", { value: true });
              var n2 = r2(9), i = r2(10), o = r2(11), a = r2(7), s = r2(12), u = r2(2), l = r2(13), c = function() {
                function e3(e4, t3, r3) {
                  void 0 === t3 && (t3 = {}), this.config = { range: "boolean" == typeof t3.range && t3.range, loc: "boolean" == typeof t3.loc && t3.loc, source: null, tokens: "boolean" == typeof t3.tokens && t3.tokens, comment: "boolean" == typeof t3.comment && t3.comment, tolerant: "boolean" == typeof t3.tolerant && t3.tolerant }, this.config.loc && t3.source && null !== t3.source && (this.config.source = String(t3.source)), this.delegate = r3, this.errorHandler = new i.ErrorHandler(), this.errorHandler.tolerant = this.config.tolerant, this.scanner = new s.Scanner(e4, this.errorHandler), this.scanner.trackComment = this.config.comment, this.operatorPrecedence = { ")": 0, ";": 0, ",": 0, "=": 0, "]": 0, "||": 1, "&&": 2, "|": 3, "^": 4, "&": 5, "==": 6, "!=": 6, "===": 6, "!==": 6, "<": 7, ">": 7, "<=": 7, ">=": 7, "<<": 8, ">>": 8, ">>>": 8, "+": 9, "-": 9, "*": 11, "/": 11, "%": 11 }, this.lookahead = { type: 2, value: "", lineNumber: this.scanner.lineNumber, lineStart: 0, start: 0, end: 0 }, this.hasLineTerminator = false, this.context = { isModule: false, await: false, allowIn: true, allowStrictDirective: true, allowYield: true, firstCoverInitializedNameError: null, isAssignmentTarget: false, isBindingElement: false, inFunctionBody: false, inIteration: false, inSwitch: false, labelSet: {}, strict: false }, this.tokens = [], this.startMarker = { index: 0, line: this.scanner.lineNumber, column: 0 }, this.lastMarker = { index: 0, line: this.scanner.lineNumber, column: 0 }, this.nextToken(), this.lastMarker = { index: this.scanner.index, line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart };
                }
                return e3.prototype.throwError = function(e4) {
                  for (var t3 = [], r3 = 1; r3 < arguments.length; r3++)
                    t3[r3 - 1] = arguments[r3];
                  var i2 = Array.prototype.slice.call(arguments, 1), o2 = e4.replace(/%(\d)/g, function(e5, t4) {
                    return n2.assert(t4 < i2.length, "Message reference must be in range"), i2[t4];
                  }), a2 = this.lastMarker.index, s2 = this.lastMarker.line, u2 = this.lastMarker.column + 1;
                  throw this.errorHandler.createError(a2, s2, u2, o2);
                }, e3.prototype.tolerateError = function(e4) {
                  for (var t3 = [], r3 = 1; r3 < arguments.length; r3++)
                    t3[r3 - 1] = arguments[r3];
                  var i2 = Array.prototype.slice.call(arguments, 1), o2 = e4.replace(/%(\d)/g, function(e5, t4) {
                    return n2.assert(t4 < i2.length, "Message reference must be in range"), i2[t4];
                  }), a2 = this.lastMarker.index, s2 = this.scanner.lineNumber, u2 = this.lastMarker.column + 1;
                  this.errorHandler.tolerateError(a2, s2, u2, o2);
                }, e3.prototype.unexpectedTokenError = function(e4, t3) {
                  var r3, n3 = t3 || o.Messages.UnexpectedToken;
                  if (e4 ? (t3 || (n3 = 2 === e4.type ? o.Messages.UnexpectedEOS : 3 === e4.type ? o.Messages.UnexpectedIdentifier : 6 === e4.type ? o.Messages.UnexpectedNumber : 8 === e4.type ? o.Messages.UnexpectedString : 10 === e4.type ? o.Messages.UnexpectedTemplate : o.Messages.UnexpectedToken, 4 === e4.type && (this.scanner.isFutureReservedWord(e4.value) ? n3 = o.Messages.UnexpectedReserved : this.context.strict && this.scanner.isStrictModeReservedWord(e4.value) && (n3 = o.Messages.StrictReservedWord))), r3 = e4.value) : r3 = "ILLEGAL", n3 = n3.replace("%0", r3), e4 && "number" == typeof e4.lineNumber) {
                    var i2 = e4.start, a2 = e4.lineNumber, s2 = this.lastMarker.index - this.lastMarker.column, u2 = e4.start - s2 + 1;
                    return this.errorHandler.createError(i2, a2, u2, n3);
                  }
                  return i2 = this.lastMarker.index, a2 = this.lastMarker.line, u2 = this.lastMarker.column + 1, this.errorHandler.createError(i2, a2, u2, n3);
                }, e3.prototype.throwUnexpectedToken = function(e4, t3) {
                  throw this.unexpectedTokenError(e4, t3);
                }, e3.prototype.tolerateUnexpectedToken = function(e4, t3) {
                  this.errorHandler.tolerate(this.unexpectedTokenError(e4, t3));
                }, e3.prototype.collectComments = function() {
                  if (this.config.comment) {
                    var e4 = this.scanner.scanComments();
                    if (e4.length > 0 && this.delegate)
                      for (var t3 = 0; t3 < e4.length; ++t3) {
                        var r3 = e4[t3], n3 = void 0;
                        n3 = { type: r3.multiLine ? "BlockComment" : "LineComment", value: this.scanner.source.slice(r3.slice[0], r3.slice[1]) }, this.config.range && (n3.range = r3.range), this.config.loc && (n3.loc = r3.loc);
                        var i2 = { start: { line: r3.loc.start.line, column: r3.loc.start.column, offset: r3.range[0] }, end: { line: r3.loc.end.line, column: r3.loc.end.column, offset: r3.range[1] } };
                        this.delegate(n3, i2);
                      }
                  } else
                    this.scanner.scanComments();
                }, e3.prototype.getTokenRaw = function(e4) {
                  return this.scanner.source.slice(e4.start, e4.end);
                }, e3.prototype.convertToken = function(e4) {
                  var t3 = { type: l.TokenName[e4.type], value: this.getTokenRaw(e4) };
                  if (this.config.range && (t3.range = [e4.start, e4.end]), this.config.loc && (t3.loc = { start: { line: this.startMarker.line, column: this.startMarker.column }, end: { line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart } }), 9 === e4.type) {
                    var r3 = e4.pattern, n3 = e4.flags;
                    t3.regex = { pattern: r3, flags: n3 };
                  }
                  return t3;
                }, e3.prototype.nextToken = function() {
                  var e4 = this.lookahead;
                  this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart, this.collectComments(), this.scanner.index !== this.startMarker.index && (this.startMarker.index = this.scanner.index, this.startMarker.line = this.scanner.lineNumber, this.startMarker.column = this.scanner.index - this.scanner.lineStart);
                  var t3 = this.scanner.lex();
                  return this.hasLineTerminator = e4.lineNumber !== t3.lineNumber, t3 && this.context.strict && 3 === t3.type && this.scanner.isStrictModeReservedWord(t3.value) && (t3.type = 4), this.lookahead = t3, this.config.tokens && 2 !== t3.type && this.tokens.push(this.convertToken(t3)), e4;
                }, e3.prototype.nextRegexToken = function() {
                  this.collectComments();
                  var e4 = this.scanner.scanRegExp();
                  return this.config.tokens && (this.tokens.pop(), this.tokens.push(this.convertToken(e4))), this.lookahead = e4, this.nextToken(), e4;
                }, e3.prototype.createNode = function() {
                  return { index: this.startMarker.index, line: this.startMarker.line, column: this.startMarker.column };
                }, e3.prototype.startNode = function(e4, t3) {
                  void 0 === t3 && (t3 = 0);
                  var r3 = e4.start - e4.lineStart, n3 = e4.lineNumber;
                  return r3 < 0 && (r3 += t3, n3--), { index: e4.start, line: n3, column: r3 };
                }, e3.prototype.finalize = function(e4, t3) {
                  if (this.config.range && (t3.range = [e4.index, this.lastMarker.index]), this.config.loc && (t3.loc = { start: { line: e4.line, column: e4.column }, end: { line: this.lastMarker.line, column: this.lastMarker.column } }, this.config.source && (t3.loc.source = this.config.source)), this.delegate) {
                    var r3 = { start: { line: e4.line, column: e4.column, offset: e4.index }, end: { line: this.lastMarker.line, column: this.lastMarker.column, offset: this.lastMarker.index } };
                    this.delegate(t3, r3);
                  }
                  return t3;
                }, e3.prototype.expect = function(e4) {
                  var t3 = this.nextToken();
                  7 === t3.type && t3.value === e4 || this.throwUnexpectedToken(t3);
                }, e3.prototype.expectCommaSeparator = function() {
                  if (this.config.tolerant) {
                    var e4 = this.lookahead;
                    7 === e4.type && "," === e4.value ? this.nextToken() : 7 === e4.type && ";" === e4.value ? (this.nextToken(), this.tolerateUnexpectedToken(e4)) : this.tolerateUnexpectedToken(e4, o.Messages.UnexpectedToken);
                  } else
                    this.expect(",");
                }, e3.prototype.expectKeyword = function(e4) {
                  var t3 = this.nextToken();
                  4 === t3.type && t3.value === e4 || this.throwUnexpectedToken(t3);
                }, e3.prototype.match = function(e4) {
                  return 7 === this.lookahead.type && this.lookahead.value === e4;
                }, e3.prototype.matchKeyword = function(e4) {
                  return 4 === this.lookahead.type && this.lookahead.value === e4;
                }, e3.prototype.matchContextualKeyword = function(e4) {
                  return 3 === this.lookahead.type && this.lookahead.value === e4;
                }, e3.prototype.matchAssign = function() {
                  if (7 !== this.lookahead.type)
                    return false;
                  var e4 = this.lookahead.value;
                  return "=" === e4 || "*=" === e4 || "**=" === e4 || "/=" === e4 || "%=" === e4 || "+=" === e4 || "-=" === e4 || "<<=" === e4 || ">>=" === e4 || ">>>=" === e4 || "&=" === e4 || "^=" === e4 || "|=" === e4;
                }, e3.prototype.isolateCoverGrammar = function(e4) {
                  var t3 = this.context.isBindingElement, r3 = this.context.isAssignmentTarget, n3 = this.context.firstCoverInitializedNameError;
                  this.context.isBindingElement = true, this.context.isAssignmentTarget = true, this.context.firstCoverInitializedNameError = null;
                  var i2 = e4.call(this);
                  return null !== this.context.firstCoverInitializedNameError && this.throwUnexpectedToken(this.context.firstCoverInitializedNameError), this.context.isBindingElement = t3, this.context.isAssignmentTarget = r3, this.context.firstCoverInitializedNameError = n3, i2;
                }, e3.prototype.inheritCoverGrammar = function(e4) {
                  var t3 = this.context.isBindingElement, r3 = this.context.isAssignmentTarget, n3 = this.context.firstCoverInitializedNameError;
                  this.context.isBindingElement = true, this.context.isAssignmentTarget = true, this.context.firstCoverInitializedNameError = null;
                  var i2 = e4.call(this);
                  return this.context.isBindingElement = this.context.isBindingElement && t3, this.context.isAssignmentTarget = this.context.isAssignmentTarget && r3, this.context.firstCoverInitializedNameError = n3 || this.context.firstCoverInitializedNameError, i2;
                }, e3.prototype.consumeSemicolon = function() {
                  this.match(";") ? this.nextToken() : this.hasLineTerminator || (2 === this.lookahead.type || this.match("}") || this.throwUnexpectedToken(this.lookahead), this.lastMarker.index = this.startMarker.index, this.lastMarker.line = this.startMarker.line, this.lastMarker.column = this.startMarker.column);
                }, e3.prototype.parsePrimaryExpression = function() {
                  var e4, t3, r3, n3 = this.createNode();
                  switch (this.lookahead.type) {
                    case 3:
                      (this.context.isModule || this.context.await) && "await" === this.lookahead.value && this.tolerateUnexpectedToken(this.lookahead), e4 = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(n3, new a.Identifier(this.nextToken().value));
                      break;
                    case 6:
                    case 8:
                      this.context.strict && this.lookahead.octal && this.tolerateUnexpectedToken(this.lookahead, o.Messages.StrictOctalLiteral), this.context.isAssignmentTarget = false, this.context.isBindingElement = false, t3 = this.nextToken(), r3 = this.getTokenRaw(t3), e4 = this.finalize(n3, new a.Literal(t3.value, r3));
                      break;
                    case 1:
                      this.context.isAssignmentTarget = false, this.context.isBindingElement = false, t3 = this.nextToken(), r3 = this.getTokenRaw(t3), e4 = this.finalize(n3, new a.Literal("true" === t3.value, r3));
                      break;
                    case 5:
                      this.context.isAssignmentTarget = false, this.context.isBindingElement = false, t3 = this.nextToken(), r3 = this.getTokenRaw(t3), e4 = this.finalize(n3, new a.Literal(null, r3));
                      break;
                    case 10:
                      e4 = this.parseTemplateLiteral();
                      break;
                    case 7:
                      switch (this.lookahead.value) {
                        case "(":
                          this.context.isBindingElement = false, e4 = this.inheritCoverGrammar(this.parseGroupExpression);
                          break;
                        case "[":
                          e4 = this.inheritCoverGrammar(this.parseArrayInitializer);
                          break;
                        case "{":
                          e4 = this.inheritCoverGrammar(this.parseObjectInitializer);
                          break;
                        case "/":
                        case "/=":
                          this.context.isAssignmentTarget = false, this.context.isBindingElement = false, this.scanner.index = this.startMarker.index, t3 = this.nextRegexToken(), r3 = this.getTokenRaw(t3), e4 = this.finalize(n3, new a.RegexLiteral(t3.regex, r3, t3.pattern, t3.flags));
                          break;
                        default:
                          e4 = this.throwUnexpectedToken(this.nextToken());
                      }
                      break;
                    case 4:
                      !this.context.strict && this.context.allowYield && this.matchKeyword("yield") ? e4 = this.parseIdentifierName() : !this.context.strict && this.matchKeyword("let") ? e4 = this.finalize(n3, new a.Identifier(this.nextToken().value)) : (this.context.isAssignmentTarget = false, this.context.isBindingElement = false, this.matchKeyword("function") ? e4 = this.parseFunctionExpression() : this.matchKeyword("this") ? (this.nextToken(), e4 = this.finalize(n3, new a.ThisExpression())) : e4 = this.matchKeyword("class") ? this.parseClassExpression() : this.throwUnexpectedToken(this.nextToken()));
                      break;
                    default:
                      e4 = this.throwUnexpectedToken(this.nextToken());
                  }
                  return e4;
                }, e3.prototype.parseSpreadElement = function() {
                  var e4 = this.createNode();
                  this.expect("...");
                  var t3 = this.inheritCoverGrammar(this.parseAssignmentExpression);
                  return this.finalize(e4, new a.SpreadElement(t3));
                }, e3.prototype.parseArrayInitializer = function() {
                  var e4 = this.createNode(), t3 = [];
                  for (this.expect("["); !this.match("]"); )
                    if (this.match(","))
                      this.nextToken(), t3.push(null);
                    else if (this.match("...")) {
                      var r3 = this.parseSpreadElement();
                      this.match("]") || (this.context.isAssignmentTarget = false, this.context.isBindingElement = false, this.expect(",")), t3.push(r3);
                    } else
                      t3.push(this.inheritCoverGrammar(this.parseAssignmentExpression)), this.match("]") || this.expect(",");
                  return this.expect("]"), this.finalize(e4, new a.ArrayExpression(t3));
                }, e3.prototype.parsePropertyMethod = function(e4) {
                  this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                  var t3 = this.context.strict, r3 = this.context.allowStrictDirective;
                  this.context.allowStrictDirective = e4.simple;
                  var n3 = this.isolateCoverGrammar(this.parseFunctionSourceElements);
                  return this.context.strict && e4.firstRestricted && this.tolerateUnexpectedToken(e4.firstRestricted, e4.message), this.context.strict && e4.stricted && this.tolerateUnexpectedToken(e4.stricted, e4.message), this.context.strict = t3, this.context.allowStrictDirective = r3, n3;
                }, e3.prototype.parsePropertyMethodFunction = function() {
                  var e4 = this.createNode(), t3 = this.context.allowYield;
                  this.context.allowYield = true;
                  var r3 = this.parseFormalParameters(), n3 = this.parsePropertyMethod(r3);
                  return this.context.allowYield = t3, this.finalize(e4, new a.FunctionExpression(null, r3.params, n3, false));
                }, e3.prototype.parsePropertyMethodAsyncFunction = function() {
                  var e4 = this.createNode(), t3 = this.context.allowYield, r3 = this.context.await;
                  this.context.allowYield = false, this.context.await = true;
                  var n3 = this.parseFormalParameters(), i2 = this.parsePropertyMethod(n3);
                  return this.context.allowYield = t3, this.context.await = r3, this.finalize(e4, new a.AsyncFunctionExpression(null, n3.params, i2));
                }, e3.prototype.parseObjectPropertyKey = function() {
                  var e4, t3 = this.createNode(), r3 = this.nextToken();
                  switch (r3.type) {
                    case 8:
                    case 6:
                      this.context.strict && r3.octal && this.tolerateUnexpectedToken(r3, o.Messages.StrictOctalLiteral);
                      var n3 = this.getTokenRaw(r3);
                      e4 = this.finalize(t3, new a.Literal(r3.value, n3));
                      break;
                    case 3:
                    case 1:
                    case 5:
                    case 4:
                      e4 = this.finalize(t3, new a.Identifier(r3.value));
                      break;
                    case 7:
                      "[" === r3.value ? (e4 = this.isolateCoverGrammar(this.parseAssignmentExpression), this.expect("]")) : e4 = this.throwUnexpectedToken(r3);
                      break;
                    default:
                      e4 = this.throwUnexpectedToken(r3);
                  }
                  return e4;
                }, e3.prototype.isPropertyKey = function(e4, t3) {
                  return e4.type === u.Syntax.Identifier && e4.name === t3 || e4.type === u.Syntax.Literal && e4.value === t3;
                }, e3.prototype.parseObjectProperty = function(e4) {
                  var t3, r3 = this.createNode(), n3 = this.lookahead, i2 = null, s2 = null, u2 = false, l2 = false, c2 = false, h = false;
                  if (3 === n3.type) {
                    var p = n3.value;
                    this.nextToken(), u2 = this.match("["), i2 = (h = !(this.hasLineTerminator || "async" !== p || this.match(":") || this.match("(") || this.match("*") || this.match(","))) ? this.parseObjectPropertyKey() : this.finalize(r3, new a.Identifier(p));
                  } else
                    this.match("*") ? this.nextToken() : (u2 = this.match("["), i2 = this.parseObjectPropertyKey());
                  var f = this.qualifiedPropertyName(this.lookahead);
                  if (3 === n3.type && !h && "get" === n3.value && f)
                    t3 = "get", u2 = this.match("["), i2 = this.parseObjectPropertyKey(), this.context.allowYield = false, s2 = this.parseGetterMethod();
                  else if (3 === n3.type && !h && "set" === n3.value && f)
                    t3 = "set", u2 = this.match("["), i2 = this.parseObjectPropertyKey(), s2 = this.parseSetterMethod();
                  else if (7 === n3.type && "*" === n3.value && f)
                    t3 = "init", u2 = this.match("["), i2 = this.parseObjectPropertyKey(), s2 = this.parseGeneratorMethod(), l2 = true;
                  else if (i2 || this.throwUnexpectedToken(this.lookahead), t3 = "init", this.match(":") && !h)
                    !u2 && this.isPropertyKey(i2, "__proto__") && (e4.value && this.tolerateError(o.Messages.DuplicateProtoProperty), e4.value = true), this.nextToken(), s2 = this.inheritCoverGrammar(this.parseAssignmentExpression);
                  else if (this.match("("))
                    s2 = h ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction(), l2 = true;
                  else if (3 === n3.type)
                    if (p = this.finalize(r3, new a.Identifier(n3.value)), this.match("=")) {
                      this.context.firstCoverInitializedNameError = this.lookahead, this.nextToken(), c2 = true;
                      var d = this.isolateCoverGrammar(this.parseAssignmentExpression);
                      s2 = this.finalize(r3, new a.AssignmentPattern(p, d));
                    } else
                      c2 = true, s2 = p;
                  else
                    this.throwUnexpectedToken(this.nextToken());
                  return this.finalize(r3, new a.Property(t3, i2, u2, s2, l2, c2));
                }, e3.prototype.parseObjectInitializer = function() {
                  var e4 = this.createNode();
                  this.expect("{");
                  for (var t3 = [], r3 = { value: false }; !this.match("}"); )
                    t3.push(this.parseObjectProperty(r3)), this.match("}") || this.expectCommaSeparator();
                  return this.expect("}"), this.finalize(e4, new a.ObjectExpression(t3));
                }, e3.prototype.parseTemplateHead = function() {
                  n2.assert(this.lookahead.head, "Template literal must start with a template head");
                  var e4 = this.createNode(), t3 = this.nextToken(), r3 = t3.value, i2 = t3.cooked;
                  return this.finalize(e4, new a.TemplateElement({ raw: r3, cooked: i2 }, t3.tail));
                }, e3.prototype.parseTemplateElement = function() {
                  10 !== this.lookahead.type && this.throwUnexpectedToken();
                  var e4 = this.createNode(), t3 = this.nextToken(), r3 = t3.value, n3 = t3.cooked;
                  return this.finalize(e4, new a.TemplateElement({ raw: r3, cooked: n3 }, t3.tail));
                }, e3.prototype.parseTemplateLiteral = function() {
                  var e4 = this.createNode(), t3 = [], r3 = [], n3 = this.parseTemplateHead();
                  for (r3.push(n3); !n3.tail; )
                    t3.push(this.parseExpression()), n3 = this.parseTemplateElement(), r3.push(n3);
                  return this.finalize(e4, new a.TemplateLiteral(r3, t3));
                }, e3.prototype.reinterpretExpressionAsPattern = function(e4) {
                  switch (e4.type) {
                    case u.Syntax.Identifier:
                    case u.Syntax.MemberExpression:
                    case u.Syntax.RestElement:
                    case u.Syntax.AssignmentPattern:
                      break;
                    case u.Syntax.SpreadElement:
                      e4.type = u.Syntax.RestElement, this.reinterpretExpressionAsPattern(e4.argument);
                      break;
                    case u.Syntax.ArrayExpression:
                      e4.type = u.Syntax.ArrayPattern;
                      for (var t3 = 0; t3 < e4.elements.length; t3++)
                        null !== e4.elements[t3] && this.reinterpretExpressionAsPattern(e4.elements[t3]);
                      break;
                    case u.Syntax.ObjectExpression:
                      for (e4.type = u.Syntax.ObjectPattern, t3 = 0; t3 < e4.properties.length; t3++)
                        this.reinterpretExpressionAsPattern(e4.properties[t3].value);
                      break;
                    case u.Syntax.AssignmentExpression:
                      e4.type = u.Syntax.AssignmentPattern, delete e4.operator, this.reinterpretExpressionAsPattern(e4.left);
                  }
                }, e3.prototype.parseGroupExpression = function() {
                  var e4;
                  if (this.expect("("), this.match(")"))
                    this.nextToken(), this.match("=>") || this.expect("=>"), e4 = { type: "ArrowParameterPlaceHolder", params: [], async: false };
                  else {
                    var t3 = this.lookahead, r3 = [];
                    if (this.match("..."))
                      e4 = this.parseRestElement(r3), this.expect(")"), this.match("=>") || this.expect("=>"), e4 = { type: "ArrowParameterPlaceHolder", params: [e4], async: false };
                    else {
                      var n3 = false;
                      if (this.context.isBindingElement = true, e4 = this.inheritCoverGrammar(this.parseAssignmentExpression), this.match(",")) {
                        var i2 = [];
                        for (this.context.isAssignmentTarget = false, i2.push(e4); 2 !== this.lookahead.type && this.match(","); ) {
                          if (this.nextToken(), this.match(")")) {
                            this.nextToken();
                            for (var o2 = 0; o2 < i2.length; o2++)
                              this.reinterpretExpressionAsPattern(i2[o2]);
                            n3 = true, e4 = { type: "ArrowParameterPlaceHolder", params: i2, async: false };
                          } else if (this.match("...")) {
                            for (this.context.isBindingElement || this.throwUnexpectedToken(this.lookahead), i2.push(this.parseRestElement(r3)), this.expect(")"), this.match("=>") || this.expect("=>"), this.context.isBindingElement = false, o2 = 0; o2 < i2.length; o2++)
                              this.reinterpretExpressionAsPattern(i2[o2]);
                            n3 = true, e4 = { type: "ArrowParameterPlaceHolder", params: i2, async: false };
                          } else
                            i2.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
                          if (n3)
                            break;
                        }
                        n3 || (e4 = this.finalize(this.startNode(t3), new a.SequenceExpression(i2)));
                      }
                      if (!n3) {
                        if (this.expect(")"), this.match("=>") && (e4.type === u.Syntax.Identifier && "yield" === e4.name && (n3 = true, e4 = { type: "ArrowParameterPlaceHolder", params: [e4], async: false }), !n3)) {
                          if (this.context.isBindingElement || this.throwUnexpectedToken(this.lookahead), e4.type === u.Syntax.SequenceExpression)
                            for (o2 = 0; o2 < e4.expressions.length; o2++)
                              this.reinterpretExpressionAsPattern(e4.expressions[o2]);
                          else
                            this.reinterpretExpressionAsPattern(e4);
                          e4 = { type: "ArrowParameterPlaceHolder", params: e4.type === u.Syntax.SequenceExpression ? e4.expressions : [e4], async: false };
                        }
                        this.context.isBindingElement = false;
                      }
                    }
                  }
                  return e4;
                }, e3.prototype.parseArguments = function() {
                  this.expect("(");
                  var e4 = [];
                  if (!this.match(")"))
                    for (; ; ) {
                      var t3 = this.match("...") ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAssignmentExpression);
                      if (e4.push(t3), this.match(")"))
                        break;
                      if (this.expectCommaSeparator(), this.match(")"))
                        break;
                    }
                  return this.expect(")"), e4;
                }, e3.prototype.isIdentifierName = function(e4) {
                  return 3 === e4.type || 4 === e4.type || 1 === e4.type || 5 === e4.type;
                }, e3.prototype.parseIdentifierName = function() {
                  var e4 = this.createNode(), t3 = this.nextToken();
                  return this.isIdentifierName(t3) || this.throwUnexpectedToken(t3), this.finalize(e4, new a.Identifier(t3.value));
                }, e3.prototype.parseNewExpression = function() {
                  var e4, t3 = this.createNode(), r3 = this.parseIdentifierName();
                  if (n2.assert("new" === r3.name, "New expression must start with `new`"), this.match("."))
                    if (this.nextToken(), 3 === this.lookahead.type && this.context.inFunctionBody && "target" === this.lookahead.value) {
                      var i2 = this.parseIdentifierName();
                      e4 = new a.MetaProperty(r3, i2);
                    } else
                      this.throwUnexpectedToken(this.lookahead);
                  else {
                    var o2 = this.isolateCoverGrammar(this.parseLeftHandSideExpression), s2 = this.match("(") ? this.parseArguments() : [];
                    e4 = new a.NewExpression(o2, s2), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                  }
                  return this.finalize(t3, e4);
                }, e3.prototype.parseAsyncArgument = function() {
                  var e4 = this.parseAssignmentExpression();
                  return this.context.firstCoverInitializedNameError = null, e4;
                }, e3.prototype.parseAsyncArguments = function() {
                  this.expect("(");
                  var e4 = [];
                  if (!this.match(")"))
                    for (; ; ) {
                      var t3 = this.match("...") ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAsyncArgument);
                      if (e4.push(t3), this.match(")"))
                        break;
                      if (this.expectCommaSeparator(), this.match(")"))
                        break;
                    }
                  return this.expect(")"), e4;
                }, e3.prototype.parseLeftHandSideExpressionAllowCall = function() {
                  var e4, t3 = this.lookahead, r3 = this.matchContextualKeyword("async"), n3 = this.context.allowIn;
                  for (this.context.allowIn = true, this.matchKeyword("super") && this.context.inFunctionBody ? (e4 = this.createNode(), this.nextToken(), e4 = this.finalize(e4, new a.Super()), this.match("(") || this.match(".") || this.match("[") || this.throwUnexpectedToken(this.lookahead)) : e4 = this.inheritCoverGrammar(this.matchKeyword("new") ? this.parseNewExpression : this.parsePrimaryExpression); ; )
                    if (this.match(".")) {
                      this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect(".");
                      var i2 = this.parseIdentifierName();
                      e4 = this.finalize(this.startNode(t3), new a.StaticMemberExpression(e4, i2));
                    } else if (this.match("(")) {
                      var o2 = r3 && t3.lineNumber === this.lookahead.lineNumber;
                      this.context.isBindingElement = false, this.context.isAssignmentTarget = false;
                      var s2 = o2 ? this.parseAsyncArguments() : this.parseArguments();
                      if (e4 = this.finalize(this.startNode(t3), new a.CallExpression(e4, s2)), o2 && this.match("=>")) {
                        for (var u2 = 0; u2 < s2.length; ++u2)
                          this.reinterpretExpressionAsPattern(s2[u2]);
                        e4 = { type: "ArrowParameterPlaceHolder", params: s2, async: true };
                      }
                    } else if (this.match("["))
                      this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect("["), i2 = this.isolateCoverGrammar(this.parseExpression), this.expect("]"), e4 = this.finalize(this.startNode(t3), new a.ComputedMemberExpression(e4, i2));
                    else {
                      if (10 !== this.lookahead.type || !this.lookahead.head)
                        break;
                      var l2 = this.parseTemplateLiteral();
                      e4 = this.finalize(this.startNode(t3), new a.TaggedTemplateExpression(e4, l2));
                    }
                  return this.context.allowIn = n3, e4;
                }, e3.prototype.parseSuper = function() {
                  var e4 = this.createNode();
                  return this.expectKeyword("super"), this.match("[") || this.match(".") || this.throwUnexpectedToken(this.lookahead), this.finalize(e4, new a.Super());
                }, e3.prototype.parseLeftHandSideExpression = function() {
                  n2.assert(this.context.allowIn, "callee of new expression always allow in keyword.");
                  for (var e4 = this.startNode(this.lookahead), t3 = this.matchKeyword("super") && this.context.inFunctionBody ? this.parseSuper() : this.inheritCoverGrammar(this.matchKeyword("new") ? this.parseNewExpression : this.parsePrimaryExpression); ; )
                    if (this.match("[")) {
                      this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect("[");
                      var r3 = this.isolateCoverGrammar(this.parseExpression);
                      this.expect("]"), t3 = this.finalize(e4, new a.ComputedMemberExpression(t3, r3));
                    } else if (this.match("."))
                      this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect("."), r3 = this.parseIdentifierName(), t3 = this.finalize(e4, new a.StaticMemberExpression(t3, r3));
                    else {
                      if (10 !== this.lookahead.type || !this.lookahead.head)
                        break;
                      var i2 = this.parseTemplateLiteral();
                      t3 = this.finalize(e4, new a.TaggedTemplateExpression(t3, i2));
                    }
                  return t3;
                }, e3.prototype.parseUpdateExpression = function() {
                  var e4, t3 = this.lookahead;
                  if (this.match("++") || this.match("--")) {
                    var r3 = this.startNode(t3), n3 = this.nextToken();
                    e4 = this.inheritCoverGrammar(this.parseUnaryExpression), this.context.strict && e4.type === u.Syntax.Identifier && this.scanner.isRestrictedWord(e4.name) && this.tolerateError(o.Messages.StrictLHSPrefix), this.context.isAssignmentTarget || this.tolerateError(o.Messages.InvalidLHSInAssignment);
                    var i2 = true;
                    e4 = this.finalize(r3, new a.UpdateExpression(n3.value, e4, i2)), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                  } else if (e4 = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall), !this.hasLineTerminator && 7 === this.lookahead.type && (this.match("++") || this.match("--"))) {
                    this.context.strict && e4.type === u.Syntax.Identifier && this.scanner.isRestrictedWord(e4.name) && this.tolerateError(o.Messages.StrictLHSPostfix), this.context.isAssignmentTarget || this.tolerateError(o.Messages.InvalidLHSInAssignment), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                    var s2 = this.nextToken().value;
                    i2 = false, e4 = this.finalize(this.startNode(t3), new a.UpdateExpression(s2, e4, i2));
                  }
                  return e4;
                }, e3.prototype.parseAwaitExpression = function() {
                  var e4 = this.createNode();
                  this.nextToken();
                  var t3 = this.parseUnaryExpression();
                  return this.finalize(e4, new a.AwaitExpression(t3));
                }, e3.prototype.parseUnaryExpression = function() {
                  var e4;
                  if (this.match("+") || this.match("-") || this.match("~") || this.match("!") || this.matchKeyword("delete") || this.matchKeyword("void") || this.matchKeyword("typeof")) {
                    var t3 = this.startNode(this.lookahead), r3 = this.nextToken();
                    e4 = this.inheritCoverGrammar(this.parseUnaryExpression), e4 = this.finalize(t3, new a.UnaryExpression(r3.value, e4)), this.context.strict && "delete" === e4.operator && e4.argument.type === u.Syntax.Identifier && this.tolerateError(o.Messages.StrictDelete), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                  } else
                    e4 = this.context.await && this.matchContextualKeyword("await") ? this.parseAwaitExpression() : this.parseUpdateExpression();
                  return e4;
                }, e3.prototype.parseExponentiationExpression = function() {
                  var e4 = this.lookahead, t3 = this.inheritCoverGrammar(this.parseUnaryExpression);
                  if (t3.type !== u.Syntax.UnaryExpression && this.match("**")) {
                    this.nextToken(), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                    var r3 = t3, n3 = this.isolateCoverGrammar(this.parseExponentiationExpression);
                    t3 = this.finalize(this.startNode(e4), new a.BinaryExpression("**", r3, n3));
                  }
                  return t3;
                }, e3.prototype.binaryPrecedence = function(e4) {
                  var t3 = e4.value;
                  return 7 === e4.type ? this.operatorPrecedence[t3] || 0 : 4 === e4.type && ("instanceof" === t3 || this.context.allowIn && "in" === t3) ? 7 : 0;
                }, e3.prototype.parseBinaryExpression = function() {
                  var e4 = this.lookahead, t3 = this.inheritCoverGrammar(this.parseExponentiationExpression), r3 = this.lookahead, n3 = this.binaryPrecedence(r3);
                  if (n3 > 0) {
                    this.nextToken(), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                    for (var i2 = [e4, this.lookahead], o2 = t3, s2 = this.isolateCoverGrammar(this.parseExponentiationExpression), u2 = [o2, r3.value, s2], l2 = [n3]; !((n3 = this.binaryPrecedence(this.lookahead)) <= 0); ) {
                      for (; u2.length > 2 && n3 <= l2[l2.length - 1]; ) {
                        s2 = u2.pop();
                        var c2 = u2.pop();
                        l2.pop(), o2 = u2.pop(), i2.pop();
                        var h = this.startNode(i2[i2.length - 1]);
                        u2.push(this.finalize(h, new a.BinaryExpression(c2, o2, s2)));
                      }
                      u2.push(this.nextToken().value), l2.push(n3), i2.push(this.lookahead), u2.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
                    }
                    var p = u2.length - 1;
                    t3 = u2[p];
                    for (var f = i2.pop(); p > 1; ) {
                      var d = i2.pop(), m = f && f.lineStart;
                      h = this.startNode(d, m), c2 = u2[p - 1], t3 = this.finalize(h, new a.BinaryExpression(c2, u2[p - 2], t3)), p -= 2, f = d;
                    }
                  }
                  return t3;
                }, e3.prototype.parseConditionalExpression = function() {
                  var e4 = this.lookahead, t3 = this.inheritCoverGrammar(this.parseBinaryExpression);
                  if (this.match("?")) {
                    this.nextToken();
                    var r3 = this.context.allowIn;
                    this.context.allowIn = true;
                    var n3 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                    this.context.allowIn = r3, this.expect(":");
                    var i2 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                    t3 = this.finalize(this.startNode(e4), new a.ConditionalExpression(t3, n3, i2)), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                  }
                  return t3;
                }, e3.prototype.checkPatternParam = function(e4, t3) {
                  switch (t3.type) {
                    case u.Syntax.Identifier:
                      this.validateParam(e4, t3, t3.name);
                      break;
                    case u.Syntax.RestElement:
                      this.checkPatternParam(e4, t3.argument);
                      break;
                    case u.Syntax.AssignmentPattern:
                      this.checkPatternParam(e4, t3.left);
                      break;
                    case u.Syntax.ArrayPattern:
                      for (var r3 = 0; r3 < t3.elements.length; r3++)
                        null !== t3.elements[r3] && this.checkPatternParam(e4, t3.elements[r3]);
                      break;
                    case u.Syntax.ObjectPattern:
                      for (r3 = 0; r3 < t3.properties.length; r3++)
                        this.checkPatternParam(e4, t3.properties[r3].value);
                  }
                  e4.simple = e4.simple && t3 instanceof a.Identifier;
                }, e3.prototype.reinterpretAsCoverFormalsList = function(e4) {
                  var t3, r3 = [e4], n3 = false;
                  switch (e4.type) {
                    case u.Syntax.Identifier:
                      break;
                    case "ArrowParameterPlaceHolder":
                      r3 = e4.params, n3 = e4.async;
                      break;
                    default:
                      return null;
                  }
                  t3 = { simple: true, paramSet: {} };
                  for (var i2 = 0; i2 < r3.length; ++i2)
                    (a2 = r3[i2]).type === u.Syntax.AssignmentPattern ? a2.right.type === u.Syntax.YieldExpression && (a2.right.argument && this.throwUnexpectedToken(this.lookahead), a2.right.type = u.Syntax.Identifier, a2.right.name = "yield", delete a2.right.argument, delete a2.right.delegate) : n3 && a2.type === u.Syntax.Identifier && "await" === a2.name && this.throwUnexpectedToken(this.lookahead), this.checkPatternParam(t3, a2), r3[i2] = a2;
                  if (this.context.strict || !this.context.allowYield)
                    for (i2 = 0; i2 < r3.length; ++i2) {
                      var a2;
                      (a2 = r3[i2]).type === u.Syntax.YieldExpression && this.throwUnexpectedToken(this.lookahead);
                    }
                  if (t3.message === o.Messages.StrictParamDupe) {
                    var s2 = this.context.strict ? t3.stricted : t3.firstRestricted;
                    this.throwUnexpectedToken(s2, t3.message);
                  }
                  return { simple: t3.simple, params: r3, stricted: t3.stricted, firstRestricted: t3.firstRestricted, message: t3.message };
                }, e3.prototype.parseAssignmentExpression = function() {
                  var e4;
                  if (!this.context.allowYield && this.matchKeyword("yield"))
                    e4 = this.parseYieldExpression();
                  else {
                    var t3 = this.lookahead, r3 = t3;
                    if (e4 = this.parseConditionalExpression(), 3 === r3.type && r3.lineNumber === this.lookahead.lineNumber && "async" === r3.value && (3 === this.lookahead.type || this.matchKeyword("yield"))) {
                      var n3 = this.parsePrimaryExpression();
                      this.reinterpretExpressionAsPattern(n3), e4 = { type: "ArrowParameterPlaceHolder", params: [n3], async: true };
                    }
                    if ("ArrowParameterPlaceHolder" === e4.type || this.match("=>")) {
                      this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                      var i2 = e4.async, s2 = this.reinterpretAsCoverFormalsList(e4);
                      if (s2) {
                        this.hasLineTerminator && this.tolerateUnexpectedToken(this.lookahead), this.context.firstCoverInitializedNameError = null;
                        var l2 = this.context.strict, c2 = this.context.allowStrictDirective;
                        this.context.allowStrictDirective = s2.simple;
                        var h = this.context.allowYield, p = this.context.await;
                        this.context.allowYield = true, this.context.await = i2;
                        var f = this.startNode(t3);
                        this.expect("=>");
                        var d = void 0;
                        if (this.match("{")) {
                          var m = this.context.allowIn;
                          this.context.allowIn = true, d = this.parseFunctionSourceElements(), this.context.allowIn = m;
                        } else
                          d = this.isolateCoverGrammar(this.parseAssignmentExpression);
                        var y = d.type !== u.Syntax.BlockStatement;
                        this.context.strict && s2.firstRestricted && this.throwUnexpectedToken(s2.firstRestricted, s2.message), this.context.strict && s2.stricted && this.tolerateUnexpectedToken(s2.stricted, s2.message), e4 = i2 ? this.finalize(f, new a.AsyncArrowFunctionExpression(s2.params, d, y)) : this.finalize(f, new a.ArrowFunctionExpression(s2.params, d, y)), this.context.strict = l2, this.context.allowStrictDirective = c2, this.context.allowYield = h, this.context.await = p;
                      }
                    } else if (this.matchAssign()) {
                      if (this.context.isAssignmentTarget || this.tolerateError(o.Messages.InvalidLHSInAssignment), this.context.strict && e4.type === u.Syntax.Identifier) {
                        var v = e4;
                        this.scanner.isRestrictedWord(v.name) && this.tolerateUnexpectedToken(r3, o.Messages.StrictLHSAssignment), this.scanner.isStrictModeReservedWord(v.name) && this.tolerateUnexpectedToken(r3, o.Messages.StrictReservedWord);
                      }
                      this.match("=") ? this.reinterpretExpressionAsPattern(e4) : (this.context.isAssignmentTarget = false, this.context.isBindingElement = false);
                      var _ = (r3 = this.nextToken()).value, g = this.isolateCoverGrammar(this.parseAssignmentExpression);
                      e4 = this.finalize(this.startNode(t3), new a.AssignmentExpression(_, e4, g)), this.context.firstCoverInitializedNameError = null;
                    }
                  }
                  return e4;
                }, e3.prototype.parseExpression = function() {
                  var e4 = this.lookahead, t3 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  if (this.match(",")) {
                    var r3 = [];
                    for (r3.push(t3); 2 !== this.lookahead.type && this.match(","); )
                      this.nextToken(), r3.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                    t3 = this.finalize(this.startNode(e4), new a.SequenceExpression(r3));
                  }
                  return t3;
                }, e3.prototype.parseStatementListItem = function() {
                  var e4;
                  if (this.context.isAssignmentTarget = true, this.context.isBindingElement = true, 4 === this.lookahead.type)
                    switch (this.lookahead.value) {
                      case "export":
                        this.context.isModule || this.tolerateUnexpectedToken(this.lookahead, o.Messages.IllegalExportDeclaration), e4 = this.parseExportDeclaration();
                        break;
                      case "import":
                        this.context.isModule || this.tolerateUnexpectedToken(this.lookahead, o.Messages.IllegalImportDeclaration), e4 = this.parseImportDeclaration();
                        break;
                      case "const":
                        e4 = this.parseLexicalDeclaration({ inFor: false });
                        break;
                      case "function":
                        e4 = this.parseFunctionDeclaration();
                        break;
                      case "class":
                        e4 = this.parseClassDeclaration();
                        break;
                      case "let":
                        e4 = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();
                        break;
                      default:
                        e4 = this.parseStatement();
                    }
                  else
                    e4 = this.parseStatement();
                  return e4;
                }, e3.prototype.parseBlock = function() {
                  var e4 = this.createNode();
                  this.expect("{");
                  for (var t3 = []; !this.match("}"); )
                    t3.push(this.parseStatementListItem());
                  return this.expect("}"), this.finalize(e4, new a.BlockStatement(t3));
                }, e3.prototype.parseLexicalBinding = function(e4, t3) {
                  var r3 = this.createNode(), n3 = this.parsePattern([], e4);
                  this.context.strict && n3.type === u.Syntax.Identifier && this.scanner.isRestrictedWord(n3.name) && this.tolerateError(o.Messages.StrictVarName);
                  var i2 = null;
                  return "const" === e4 ? this.matchKeyword("in") || this.matchContextualKeyword("of") || (this.match("=") ? (this.nextToken(), i2 = this.isolateCoverGrammar(this.parseAssignmentExpression)) : this.throwError(o.Messages.DeclarationMissingInitializer, "const")) : (!t3.inFor && n3.type !== u.Syntax.Identifier || this.match("=")) && (this.expect("="), i2 = this.isolateCoverGrammar(this.parseAssignmentExpression)), this.finalize(r3, new a.VariableDeclarator(n3, i2));
                }, e3.prototype.parseBindingList = function(e4, t3) {
                  for (var r3 = [this.parseLexicalBinding(e4, t3)]; this.match(","); )
                    this.nextToken(), r3.push(this.parseLexicalBinding(e4, t3));
                  return r3;
                }, e3.prototype.isLexicalDeclaration = function() {
                  var e4 = this.scanner.saveState();
                  this.scanner.scanComments();
                  var t3 = this.scanner.lex();
                  return this.scanner.restoreState(e4), 3 === t3.type || 7 === t3.type && "[" === t3.value || 7 === t3.type && "{" === t3.value || 4 === t3.type && "let" === t3.value || 4 === t3.type && "yield" === t3.value;
                }, e3.prototype.parseLexicalDeclaration = function(e4) {
                  var t3 = this.createNode(), r3 = this.nextToken().value;
                  n2.assert("let" === r3 || "const" === r3, "Lexical declaration must be either let or const");
                  var i2 = this.parseBindingList(r3, e4);
                  return this.consumeSemicolon(), this.finalize(t3, new a.VariableDeclaration(i2, r3));
                }, e3.prototype.parseBindingRestElement = function(e4, t3) {
                  var r3 = this.createNode();
                  this.expect("...");
                  var n3 = this.parsePattern(e4, t3);
                  return this.finalize(r3, new a.RestElement(n3));
                }, e3.prototype.parseArrayPattern = function(e4, t3) {
                  var r3 = this.createNode();
                  this.expect("[");
                  for (var n3 = []; !this.match("]"); )
                    if (this.match(","))
                      this.nextToken(), n3.push(null);
                    else {
                      if (this.match("...")) {
                        n3.push(this.parseBindingRestElement(e4, t3));
                        break;
                      }
                      n3.push(this.parsePatternWithDefault(e4, t3)), this.match("]") || this.expect(",");
                    }
                  return this.expect("]"), this.finalize(r3, new a.ArrayPattern(n3));
                }, e3.prototype.parsePropertyPattern = function(e4, t3) {
                  var r3, n3, i2 = this.createNode(), o2 = false, s2 = false;
                  if (3 === this.lookahead.type) {
                    var u2 = this.lookahead;
                    r3 = this.parseVariableIdentifier();
                    var l2 = this.finalize(i2, new a.Identifier(u2.value));
                    if (this.match("=")) {
                      e4.push(u2), s2 = true, this.nextToken();
                      var c2 = this.parseAssignmentExpression();
                      n3 = this.finalize(this.startNode(u2), new a.AssignmentPattern(l2, c2));
                    } else
                      this.match(":") ? (this.expect(":"), n3 = this.parsePatternWithDefault(e4, t3)) : (e4.push(u2), s2 = true, n3 = l2);
                  } else
                    o2 = this.match("["), r3 = this.parseObjectPropertyKey(), this.expect(":"), n3 = this.parsePatternWithDefault(e4, t3);
                  return this.finalize(i2, new a.Property("init", r3, o2, n3, false, s2));
                }, e3.prototype.parseObjectPattern = function(e4, t3) {
                  var r3 = this.createNode(), n3 = [];
                  for (this.expect("{"); !this.match("}"); )
                    n3.push(this.parsePropertyPattern(e4, t3)), this.match("}") || this.expect(",");
                  return this.expect("}"), this.finalize(r3, new a.ObjectPattern(n3));
                }, e3.prototype.parsePattern = function(e4, t3) {
                  var r3;
                  return this.match("[") ? r3 = this.parseArrayPattern(e4, t3) : this.match("{") ? r3 = this.parseObjectPattern(e4, t3) : (!this.matchKeyword("let") || "const" !== t3 && "let" !== t3 || this.tolerateUnexpectedToken(this.lookahead, o.Messages.LetInLexicalBinding), e4.push(this.lookahead), r3 = this.parseVariableIdentifier(t3)), r3;
                }, e3.prototype.parsePatternWithDefault = function(e4, t3) {
                  var r3 = this.lookahead, n3 = this.parsePattern(e4, t3);
                  if (this.match("=")) {
                    this.nextToken();
                    var i2 = this.context.allowYield;
                    this.context.allowYield = true;
                    var o2 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                    this.context.allowYield = i2, n3 = this.finalize(this.startNode(r3), new a.AssignmentPattern(n3, o2));
                  }
                  return n3;
                }, e3.prototype.parseVariableIdentifier = function(e4) {
                  var t3 = this.createNode(), r3 = this.nextToken();
                  return 4 === r3.type && "yield" === r3.value ? this.context.strict ? this.tolerateUnexpectedToken(r3, o.Messages.StrictReservedWord) : this.context.allowYield || this.throwUnexpectedToken(r3) : 3 !== r3.type ? this.context.strict && 4 === r3.type && this.scanner.isStrictModeReservedWord(r3.value) ? this.tolerateUnexpectedToken(r3, o.Messages.StrictReservedWord) : (this.context.strict || "let" !== r3.value || "var" !== e4) && this.throwUnexpectedToken(r3) : (this.context.isModule || this.context.await) && 3 === r3.type && "await" === r3.value && this.tolerateUnexpectedToken(r3), this.finalize(t3, new a.Identifier(r3.value));
                }, e3.prototype.parseVariableDeclaration = function(e4) {
                  var t3 = this.createNode(), r3 = this.parsePattern([], "var");
                  this.context.strict && r3.type === u.Syntax.Identifier && this.scanner.isRestrictedWord(r3.name) && this.tolerateError(o.Messages.StrictVarName);
                  var n3 = null;
                  return this.match("=") ? (this.nextToken(), n3 = this.isolateCoverGrammar(this.parseAssignmentExpression)) : r3.type === u.Syntax.Identifier || e4.inFor || this.expect("="), this.finalize(t3, new a.VariableDeclarator(r3, n3));
                }, e3.prototype.parseVariableDeclarationList = function(e4) {
                  var t3 = { inFor: e4.inFor }, r3 = [];
                  for (r3.push(this.parseVariableDeclaration(t3)); this.match(","); )
                    this.nextToken(), r3.push(this.parseVariableDeclaration(t3));
                  return r3;
                }, e3.prototype.parseVariableStatement = function() {
                  var e4 = this.createNode();
                  this.expectKeyword("var");
                  var t3 = this.parseVariableDeclarationList({ inFor: false });
                  return this.consumeSemicolon(), this.finalize(e4, new a.VariableDeclaration(t3, "var"));
                }, e3.prototype.parseEmptyStatement = function() {
                  var e4 = this.createNode();
                  return this.expect(";"), this.finalize(e4, new a.EmptyStatement());
                }, e3.prototype.parseExpressionStatement = function() {
                  var e4 = this.createNode(), t3 = this.parseExpression();
                  return this.consumeSemicolon(), this.finalize(e4, new a.ExpressionStatement(t3));
                }, e3.prototype.parseIfClause = function() {
                  return this.context.strict && this.matchKeyword("function") && this.tolerateError(o.Messages.StrictFunction), this.parseStatement();
                }, e3.prototype.parseIfStatement = function() {
                  var e4, t3 = this.createNode(), r3 = null;
                  this.expectKeyword("if"), this.expect("(");
                  var n3 = this.parseExpression();
                  return !this.match(")") && this.config.tolerant ? (this.tolerateUnexpectedToken(this.nextToken()), e4 = this.finalize(this.createNode(), new a.EmptyStatement())) : (this.expect(")"), e4 = this.parseIfClause(), this.matchKeyword("else") && (this.nextToken(), r3 = this.parseIfClause())), this.finalize(t3, new a.IfStatement(n3, e4, r3));
                }, e3.prototype.parseDoWhileStatement = function() {
                  var e4 = this.createNode();
                  this.expectKeyword("do");
                  var t3 = this.context.inIteration;
                  this.context.inIteration = true;
                  var r3 = this.parseStatement();
                  this.context.inIteration = t3, this.expectKeyword("while"), this.expect("(");
                  var n3 = this.parseExpression();
                  return !this.match(")") && this.config.tolerant ? this.tolerateUnexpectedToken(this.nextToken()) : (this.expect(")"), this.match(";") && this.nextToken()), this.finalize(e4, new a.DoWhileStatement(r3, n3));
                }, e3.prototype.parseWhileStatement = function() {
                  var e4, t3 = this.createNode();
                  this.expectKeyword("while"), this.expect("(");
                  var r3 = this.parseExpression();
                  if (!this.match(")") && this.config.tolerant)
                    this.tolerateUnexpectedToken(this.nextToken()), e4 = this.finalize(this.createNode(), new a.EmptyStatement());
                  else {
                    this.expect(")");
                    var n3 = this.context.inIteration;
                    this.context.inIteration = true, e4 = this.parseStatement(), this.context.inIteration = n3;
                  }
                  return this.finalize(t3, new a.WhileStatement(r3, e4));
                }, e3.prototype.parseForStatement = function() {
                  var e4, t3, r3, n3 = null, i2 = null, s2 = null, l2 = true, c2 = this.createNode();
                  if (this.expectKeyword("for"), this.expect("("), this.match(";"))
                    this.nextToken();
                  else if (this.matchKeyword("var")) {
                    n3 = this.createNode(), this.nextToken();
                    var h = this.context.allowIn;
                    this.context.allowIn = false;
                    var p = this.parseVariableDeclarationList({ inFor: true });
                    if (this.context.allowIn = h, 1 === p.length && this.matchKeyword("in")) {
                      var f = p[0];
                      f.init && (f.id.type === u.Syntax.ArrayPattern || f.id.type === u.Syntax.ObjectPattern || this.context.strict) && this.tolerateError(o.Messages.ForInOfLoopInitializer, "for-in"), n3 = this.finalize(n3, new a.VariableDeclaration(p, "var")), this.nextToken(), e4 = n3, t3 = this.parseExpression(), n3 = null;
                    } else
                      1 === p.length && null === p[0].init && this.matchContextualKeyword("of") ? (n3 = this.finalize(n3, new a.VariableDeclaration(p, "var")), this.nextToken(), e4 = n3, t3 = this.parseAssignmentExpression(), n3 = null, l2 = false) : (n3 = this.finalize(n3, new a.VariableDeclaration(p, "var")), this.expect(";"));
                  } else if (this.matchKeyword("const") || this.matchKeyword("let")) {
                    n3 = this.createNode();
                    var d = this.nextToken().value;
                    this.context.strict || "in" !== this.lookahead.value ? (h = this.context.allowIn, this.context.allowIn = false, p = this.parseBindingList(d, { inFor: true }), this.context.allowIn = h, 1 === p.length && null === p[0].init && this.matchKeyword("in") ? (n3 = this.finalize(n3, new a.VariableDeclaration(p, d)), this.nextToken(), e4 = n3, t3 = this.parseExpression(), n3 = null) : 1 === p.length && null === p[0].init && this.matchContextualKeyword("of") ? (n3 = this.finalize(n3, new a.VariableDeclaration(p, d)), this.nextToken(), e4 = n3, t3 = this.parseAssignmentExpression(), n3 = null, l2 = false) : (this.consumeSemicolon(), n3 = this.finalize(n3, new a.VariableDeclaration(p, d)))) : (n3 = this.finalize(n3, new a.Identifier(d)), this.nextToken(), e4 = n3, t3 = this.parseExpression(), n3 = null);
                  } else {
                    var m = this.lookahead;
                    if (h = this.context.allowIn, this.context.allowIn = false, n3 = this.inheritCoverGrammar(this.parseAssignmentExpression), this.context.allowIn = h, this.matchKeyword("in"))
                      this.context.isAssignmentTarget && n3.type !== u.Syntax.AssignmentExpression || this.tolerateError(o.Messages.InvalidLHSInForIn), this.nextToken(), this.reinterpretExpressionAsPattern(n3), e4 = n3, t3 = this.parseExpression(), n3 = null;
                    else if (this.matchContextualKeyword("of"))
                      this.context.isAssignmentTarget && n3.type !== u.Syntax.AssignmentExpression || this.tolerateError(o.Messages.InvalidLHSInForLoop), this.nextToken(), this.reinterpretExpressionAsPattern(n3), e4 = n3, t3 = this.parseAssignmentExpression(), n3 = null, l2 = false;
                    else {
                      if (this.match(",")) {
                        for (var y = [n3]; this.match(","); )
                          this.nextToken(), y.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                        n3 = this.finalize(this.startNode(m), new a.SequenceExpression(y));
                      }
                      this.expect(";");
                    }
                  }
                  if (void 0 === e4 && (this.match(";") || (i2 = this.parseExpression()), this.expect(";"), this.match(")") || (s2 = this.parseExpression())), !this.match(")") && this.config.tolerant)
                    this.tolerateUnexpectedToken(this.nextToken()), r3 = this.finalize(this.createNode(), new a.EmptyStatement());
                  else {
                    this.expect(")");
                    var v = this.context.inIteration;
                    this.context.inIteration = true, r3 = this.isolateCoverGrammar(this.parseStatement), this.context.inIteration = v;
                  }
                  return void 0 === e4 ? this.finalize(c2, new a.ForStatement(n3, i2, s2, r3)) : l2 ? this.finalize(c2, new a.ForInStatement(e4, t3, r3)) : this.finalize(c2, new a.ForOfStatement(e4, t3, r3));
                }, e3.prototype.parseContinueStatement = function() {
                  var e4 = this.createNode();
                  this.expectKeyword("continue");
                  var t3 = null;
                  if (3 === this.lookahead.type && !this.hasLineTerminator) {
                    var r3 = this.parseVariableIdentifier();
                    t3 = r3;
                    var n3 = "$" + r3.name;
                    Object.prototype.hasOwnProperty.call(this.context.labelSet, n3) || this.throwError(o.Messages.UnknownLabel, r3.name);
                  }
                  return this.consumeSemicolon(), null !== t3 || this.context.inIteration || this.throwError(o.Messages.IllegalContinue), this.finalize(e4, new a.ContinueStatement(t3));
                }, e3.prototype.parseBreakStatement = function() {
                  var e4 = this.createNode();
                  this.expectKeyword("break");
                  var t3 = null;
                  if (3 === this.lookahead.type && !this.hasLineTerminator) {
                    var r3 = this.parseVariableIdentifier(), n3 = "$" + r3.name;
                    Object.prototype.hasOwnProperty.call(this.context.labelSet, n3) || this.throwError(o.Messages.UnknownLabel, r3.name), t3 = r3;
                  }
                  return this.consumeSemicolon(), null !== t3 || this.context.inIteration || this.context.inSwitch || this.throwError(o.Messages.IllegalBreak), this.finalize(e4, new a.BreakStatement(t3));
                }, e3.prototype.parseReturnStatement = function() {
                  this.context.inFunctionBody || this.tolerateError(o.Messages.IllegalReturn);
                  var e4 = this.createNode();
                  this.expectKeyword("return");
                  var t3 = (this.match(";") || this.match("}") || this.hasLineTerminator || 2 === this.lookahead.type) && 8 !== this.lookahead.type && 10 !== this.lookahead.type ? null : this.parseExpression();
                  return this.consumeSemicolon(), this.finalize(e4, new a.ReturnStatement(t3));
                }, e3.prototype.parseWithStatement = function() {
                  this.context.strict && this.tolerateError(o.Messages.StrictModeWith);
                  var e4, t3 = this.createNode();
                  this.expectKeyword("with"), this.expect("(");
                  var r3 = this.parseExpression();
                  return !this.match(")") && this.config.tolerant ? (this.tolerateUnexpectedToken(this.nextToken()), e4 = this.finalize(this.createNode(), new a.EmptyStatement())) : (this.expect(")"), e4 = this.parseStatement()), this.finalize(t3, new a.WithStatement(r3, e4));
                }, e3.prototype.parseSwitchCase = function() {
                  var e4, t3 = this.createNode();
                  this.matchKeyword("default") ? (this.nextToken(), e4 = null) : (this.expectKeyword("case"), e4 = this.parseExpression()), this.expect(":");
                  for (var r3 = []; !(this.match("}") || this.matchKeyword("default") || this.matchKeyword("case")); )
                    r3.push(this.parseStatementListItem());
                  return this.finalize(t3, new a.SwitchCase(e4, r3));
                }, e3.prototype.parseSwitchStatement = function() {
                  var e4 = this.createNode();
                  this.expectKeyword("switch"), this.expect("(");
                  var t3 = this.parseExpression();
                  this.expect(")");
                  var r3 = this.context.inSwitch;
                  this.context.inSwitch = true;
                  var n3 = [], i2 = false;
                  for (this.expect("{"); !this.match("}"); ) {
                    var s2 = this.parseSwitchCase();
                    null === s2.test && (i2 && this.throwError(o.Messages.MultipleDefaultsInSwitch), i2 = true), n3.push(s2);
                  }
                  return this.expect("}"), this.context.inSwitch = r3, this.finalize(e4, new a.SwitchStatement(t3, n3));
                }, e3.prototype.parseLabelledStatement = function() {
                  var e4, t3 = this.createNode(), r3 = this.parseExpression();
                  if (r3.type === u.Syntax.Identifier && this.match(":")) {
                    this.nextToken();
                    var n3 = r3, i2 = "$" + n3.name;
                    Object.prototype.hasOwnProperty.call(this.context.labelSet, i2) && this.throwError(o.Messages.Redeclaration, "Label", n3.name), this.context.labelSet[i2] = true;
                    var s2 = void 0;
                    if (this.matchKeyword("class"))
                      this.tolerateUnexpectedToken(this.lookahead), s2 = this.parseClassDeclaration();
                    else if (this.matchKeyword("function")) {
                      var l2 = this.lookahead, c2 = this.parseFunctionDeclaration();
                      this.context.strict ? this.tolerateUnexpectedToken(l2, o.Messages.StrictFunction) : c2.generator && this.tolerateUnexpectedToken(l2, o.Messages.GeneratorInLegacyContext), s2 = c2;
                    } else
                      s2 = this.parseStatement();
                    delete this.context.labelSet[i2], e4 = new a.LabeledStatement(n3, s2);
                  } else
                    this.consumeSemicolon(), e4 = new a.ExpressionStatement(r3);
                  return this.finalize(t3, e4);
                }, e3.prototype.parseThrowStatement = function() {
                  var e4 = this.createNode();
                  this.expectKeyword("throw"), this.hasLineTerminator && this.throwError(o.Messages.NewlineAfterThrow);
                  var t3 = this.parseExpression();
                  return this.consumeSemicolon(), this.finalize(e4, new a.ThrowStatement(t3));
                }, e3.prototype.parseCatchClause = function() {
                  var e4 = this.createNode();
                  this.expectKeyword("catch"), this.expect("("), this.match(")") && this.throwUnexpectedToken(this.lookahead);
                  for (var t3 = [], r3 = this.parsePattern(t3), n3 = {}, i2 = 0; i2 < t3.length; i2++) {
                    var s2 = "$" + t3[i2].value;
                    Object.prototype.hasOwnProperty.call(n3, s2) && this.tolerateError(o.Messages.DuplicateBinding, t3[i2].value), n3[s2] = true;
                  }
                  this.context.strict && r3.type === u.Syntax.Identifier && this.scanner.isRestrictedWord(r3.name) && this.tolerateError(o.Messages.StrictCatchVariable), this.expect(")");
                  var l2 = this.parseBlock();
                  return this.finalize(e4, new a.CatchClause(r3, l2));
                }, e3.prototype.parseFinallyClause = function() {
                  return this.expectKeyword("finally"), this.parseBlock();
                }, e3.prototype.parseTryStatement = function() {
                  var e4 = this.createNode();
                  this.expectKeyword("try");
                  var t3 = this.parseBlock(), r3 = this.matchKeyword("catch") ? this.parseCatchClause() : null, n3 = this.matchKeyword("finally") ? this.parseFinallyClause() : null;
                  return r3 || n3 || this.throwError(o.Messages.NoCatchOrFinally), this.finalize(e4, new a.TryStatement(t3, r3, n3));
                }, e3.prototype.parseDebuggerStatement = function() {
                  var e4 = this.createNode();
                  return this.expectKeyword("debugger"), this.consumeSemicolon(), this.finalize(e4, new a.DebuggerStatement());
                }, e3.prototype.parseStatement = function() {
                  var e4;
                  switch (this.lookahead.type) {
                    case 1:
                    case 5:
                    case 6:
                    case 8:
                    case 10:
                    case 9:
                      e4 = this.parseExpressionStatement();
                      break;
                    case 7:
                      var t3 = this.lookahead.value;
                      e4 = "{" === t3 ? this.parseBlock() : "(" === t3 ? this.parseExpressionStatement() : ";" === t3 ? this.parseEmptyStatement() : this.parseExpressionStatement();
                      break;
                    case 3:
                      e4 = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
                      break;
                    case 4:
                      switch (this.lookahead.value) {
                        case "break":
                          e4 = this.parseBreakStatement();
                          break;
                        case "continue":
                          e4 = this.parseContinueStatement();
                          break;
                        case "debugger":
                          e4 = this.parseDebuggerStatement();
                          break;
                        case "do":
                          e4 = this.parseDoWhileStatement();
                          break;
                        case "for":
                          e4 = this.parseForStatement();
                          break;
                        case "function":
                          e4 = this.parseFunctionDeclaration();
                          break;
                        case "if":
                          e4 = this.parseIfStatement();
                          break;
                        case "return":
                          e4 = this.parseReturnStatement();
                          break;
                        case "switch":
                          e4 = this.parseSwitchStatement();
                          break;
                        case "throw":
                          e4 = this.parseThrowStatement();
                          break;
                        case "try":
                          e4 = this.parseTryStatement();
                          break;
                        case "var":
                          e4 = this.parseVariableStatement();
                          break;
                        case "while":
                          e4 = this.parseWhileStatement();
                          break;
                        case "with":
                          e4 = this.parseWithStatement();
                          break;
                        default:
                          e4 = this.parseExpressionStatement();
                      }
                      break;
                    default:
                      e4 = this.throwUnexpectedToken(this.lookahead);
                  }
                  return e4;
                }, e3.prototype.parseFunctionSourceElements = function() {
                  var e4 = this.createNode();
                  this.expect("{");
                  var t3 = this.parseDirectivePrologues(), r3 = this.context.labelSet, n3 = this.context.inIteration, i2 = this.context.inSwitch, o2 = this.context.inFunctionBody;
                  for (this.context.labelSet = {}, this.context.inIteration = false, this.context.inSwitch = false, this.context.inFunctionBody = true; 2 !== this.lookahead.type && !this.match("}"); )
                    t3.push(this.parseStatementListItem());
                  return this.expect("}"), this.context.labelSet = r3, this.context.inIteration = n3, this.context.inSwitch = i2, this.context.inFunctionBody = o2, this.finalize(e4, new a.BlockStatement(t3));
                }, e3.prototype.validateParam = function(e4, t3, r3) {
                  var n3 = "$" + r3;
                  this.context.strict ? (this.scanner.isRestrictedWord(r3) && (e4.stricted = t3, e4.message = o.Messages.StrictParamName), Object.prototype.hasOwnProperty.call(e4.paramSet, n3) && (e4.stricted = t3, e4.message = o.Messages.StrictParamDupe)) : e4.firstRestricted || (this.scanner.isRestrictedWord(r3) ? (e4.firstRestricted = t3, e4.message = o.Messages.StrictParamName) : this.scanner.isStrictModeReservedWord(r3) ? (e4.firstRestricted = t3, e4.message = o.Messages.StrictReservedWord) : Object.prototype.hasOwnProperty.call(e4.paramSet, n3) && (e4.stricted = t3, e4.message = o.Messages.StrictParamDupe)), "function" == typeof Object.defineProperty ? Object.defineProperty(e4.paramSet, n3, { value: true, enumerable: true, writable: true, configurable: true }) : e4.paramSet[n3] = true;
                }, e3.prototype.parseRestElement = function(e4) {
                  var t3 = this.createNode();
                  this.expect("...");
                  var r3 = this.parsePattern(e4);
                  return this.match("=") && this.throwError(o.Messages.DefaultRestParameter), this.match(")") || this.throwError(o.Messages.ParameterAfterRestParameter), this.finalize(t3, new a.RestElement(r3));
                }, e3.prototype.parseFormalParameter = function(e4) {
                  for (var t3 = [], r3 = this.match("...") ? this.parseRestElement(t3) : this.parsePatternWithDefault(t3), n3 = 0; n3 < t3.length; n3++)
                    this.validateParam(e4, t3[n3], t3[n3].value);
                  e4.simple = e4.simple && r3 instanceof a.Identifier, e4.params.push(r3);
                }, e3.prototype.parseFormalParameters = function(e4) {
                  var t3;
                  if (t3 = { simple: true, params: [], firstRestricted: e4 }, this.expect("("), !this.match(")"))
                    for (t3.paramSet = {}; 2 !== this.lookahead.type && (this.parseFormalParameter(t3), !this.match(")")) && (this.expect(","), !this.match(")")); )
                      ;
                  return this.expect(")"), { simple: t3.simple, params: t3.params, stricted: t3.stricted, firstRestricted: t3.firstRestricted, message: t3.message };
                }, e3.prototype.matchAsyncFunction = function() {
                  var e4 = this.matchContextualKeyword("async");
                  if (e4) {
                    var t3 = this.scanner.saveState();
                    this.scanner.scanComments();
                    var r3 = this.scanner.lex();
                    this.scanner.restoreState(t3), e4 = t3.lineNumber === r3.lineNumber && 4 === r3.type && "function" === r3.value;
                  }
                  return e4;
                }, e3.prototype.parseFunctionDeclaration = function(e4) {
                  var t3 = this.createNode(), r3 = this.matchContextualKeyword("async");
                  r3 && this.nextToken(), this.expectKeyword("function");
                  var n3, i2 = !r3 && this.match("*");
                  i2 && this.nextToken();
                  var s2 = null, u2 = null;
                  if (!e4 || !this.match("(")) {
                    var l2 = this.lookahead;
                    s2 = this.parseVariableIdentifier(), this.context.strict ? this.scanner.isRestrictedWord(l2.value) && this.tolerateUnexpectedToken(l2, o.Messages.StrictFunctionName) : this.scanner.isRestrictedWord(l2.value) ? (u2 = l2, n3 = o.Messages.StrictFunctionName) : this.scanner.isStrictModeReservedWord(l2.value) && (u2 = l2, n3 = o.Messages.StrictReservedWord);
                  }
                  var c2 = this.context.await, h = this.context.allowYield;
                  this.context.await = r3, this.context.allowYield = !i2;
                  var p = this.parseFormalParameters(u2), f = p.params, d = p.stricted;
                  u2 = p.firstRestricted, p.message && (n3 = p.message);
                  var m = this.context.strict, y = this.context.allowStrictDirective;
                  this.context.allowStrictDirective = p.simple;
                  var v = this.parseFunctionSourceElements();
                  return this.context.strict && u2 && this.throwUnexpectedToken(u2, n3), this.context.strict && d && this.tolerateUnexpectedToken(d, n3), this.context.strict = m, this.context.allowStrictDirective = y, this.context.await = c2, this.context.allowYield = h, r3 ? this.finalize(t3, new a.AsyncFunctionDeclaration(s2, f, v)) : this.finalize(t3, new a.FunctionDeclaration(s2, f, v, i2));
                }, e3.prototype.parseFunctionExpression = function() {
                  var e4 = this.createNode(), t3 = this.matchContextualKeyword("async");
                  t3 && this.nextToken(), this.expectKeyword("function");
                  var r3, n3 = !t3 && this.match("*");
                  n3 && this.nextToken();
                  var i2, s2 = null, u2 = this.context.await, l2 = this.context.allowYield;
                  if (this.context.await = t3, this.context.allowYield = !n3, !this.match("(")) {
                    var c2 = this.lookahead;
                    s2 = this.context.strict || n3 || !this.matchKeyword("yield") ? this.parseVariableIdentifier() : this.parseIdentifierName(), this.context.strict ? this.scanner.isRestrictedWord(c2.value) && this.tolerateUnexpectedToken(c2, o.Messages.StrictFunctionName) : this.scanner.isRestrictedWord(c2.value) ? (i2 = c2, r3 = o.Messages.StrictFunctionName) : this.scanner.isStrictModeReservedWord(c2.value) && (i2 = c2, r3 = o.Messages.StrictReservedWord);
                  }
                  var h = this.parseFormalParameters(i2), p = h.params, f = h.stricted;
                  i2 = h.firstRestricted, h.message && (r3 = h.message);
                  var d = this.context.strict, m = this.context.allowStrictDirective;
                  this.context.allowStrictDirective = h.simple;
                  var y = this.parseFunctionSourceElements();
                  return this.context.strict && i2 && this.throwUnexpectedToken(i2, r3), this.context.strict && f && this.tolerateUnexpectedToken(f, r3), this.context.strict = d, this.context.allowStrictDirective = m, this.context.await = u2, this.context.allowYield = l2, t3 ? this.finalize(e4, new a.AsyncFunctionExpression(s2, p, y)) : this.finalize(e4, new a.FunctionExpression(s2, p, y, n3));
                }, e3.prototype.parseDirective = function() {
                  var e4 = this.lookahead, t3 = this.createNode(), r3 = this.parseExpression(), n3 = r3.type === u.Syntax.Literal ? this.getTokenRaw(e4).slice(1, -1) : null;
                  return this.consumeSemicolon(), this.finalize(t3, n3 ? new a.Directive(r3, n3) : new a.ExpressionStatement(r3));
                }, e3.prototype.parseDirectivePrologues = function() {
                  for (var e4 = null, t3 = []; ; ) {
                    var r3 = this.lookahead;
                    if (8 !== r3.type)
                      break;
                    var n3 = this.parseDirective();
                    t3.push(n3);
                    var i2 = n3.directive;
                    if ("string" != typeof i2)
                      break;
                    "use strict" === i2 ? (this.context.strict = true, e4 && this.tolerateUnexpectedToken(e4, o.Messages.StrictOctalLiteral), this.context.allowStrictDirective || this.tolerateUnexpectedToken(r3, o.Messages.IllegalLanguageModeDirective)) : !e4 && r3.octal && (e4 = r3);
                  }
                  return t3;
                }, e3.prototype.qualifiedPropertyName = function(e4) {
                  switch (e4.type) {
                    case 3:
                    case 8:
                    case 1:
                    case 5:
                    case 6:
                    case 4:
                      return true;
                    case 7:
                      return "[" === e4.value;
                  }
                  return false;
                }, e3.prototype.parseGetterMethod = function() {
                  var e4 = this.createNode(), t3 = this.context.allowYield;
                  this.context.allowYield = true;
                  var r3 = this.parseFormalParameters();
                  r3.params.length > 0 && this.tolerateError(o.Messages.BadGetterArity);
                  var n3 = this.parsePropertyMethod(r3);
                  return this.context.allowYield = t3, this.finalize(e4, new a.FunctionExpression(null, r3.params, n3, false));
                }, e3.prototype.parseSetterMethod = function() {
                  var e4 = this.createNode(), t3 = this.context.allowYield;
                  this.context.allowYield = true;
                  var r3 = this.parseFormalParameters();
                  1 !== r3.params.length ? this.tolerateError(o.Messages.BadSetterArity) : r3.params[0] instanceof a.RestElement && this.tolerateError(o.Messages.BadSetterRestParameter);
                  var n3 = this.parsePropertyMethod(r3);
                  return this.context.allowYield = t3, this.finalize(e4, new a.FunctionExpression(null, r3.params, n3, false));
                }, e3.prototype.parseGeneratorMethod = function() {
                  var e4 = this.createNode(), t3 = this.context.allowYield;
                  this.context.allowYield = true;
                  var r3 = this.parseFormalParameters();
                  this.context.allowYield = false;
                  var n3 = this.parsePropertyMethod(r3);
                  return this.context.allowYield = t3, this.finalize(e4, new a.FunctionExpression(null, r3.params, n3, true));
                }, e3.prototype.isStartOfExpression = function() {
                  var e4 = true, t3 = this.lookahead.value;
                  switch (this.lookahead.type) {
                    case 7:
                      e4 = "[" === t3 || "(" === t3 || "{" === t3 || "+" === t3 || "-" === t3 || "!" === t3 || "~" === t3 || "++" === t3 || "--" === t3 || "/" === t3 || "/=" === t3;
                      break;
                    case 4:
                      e4 = "class" === t3 || "delete" === t3 || "function" === t3 || "let" === t3 || "new" === t3 || "super" === t3 || "this" === t3 || "typeof" === t3 || "void" === t3 || "yield" === t3;
                  }
                  return e4;
                }, e3.prototype.parseYieldExpression = function() {
                  var e4 = this.createNode();
                  this.expectKeyword("yield");
                  var t3 = null, r3 = false;
                  if (!this.hasLineTerminator) {
                    var n3 = this.context.allowYield;
                    this.context.allowYield = false, (r3 = this.match("*")) ? (this.nextToken(), t3 = this.parseAssignmentExpression()) : this.isStartOfExpression() && (t3 = this.parseAssignmentExpression()), this.context.allowYield = n3;
                  }
                  return this.finalize(e4, new a.YieldExpression(t3, r3));
                }, e3.prototype.parseClassElement = function(e4) {
                  var t3 = this.lookahead, r3 = this.createNode(), n3 = "", i2 = null, s2 = null, u2 = false, l2 = false, c2 = false, h = false;
                  if (this.match("*"))
                    this.nextToken();
                  else if (u2 = this.match("["), "static" === (i2 = this.parseObjectPropertyKey()).name && (this.qualifiedPropertyName(this.lookahead) || this.match("*")) && (t3 = this.lookahead, c2 = true, u2 = this.match("["), this.match("*") ? this.nextToken() : i2 = this.parseObjectPropertyKey()), 3 === t3.type && !this.hasLineTerminator && "async" === t3.value) {
                    var p = this.lookahead.value;
                    ":" !== p && "(" !== p && "*" !== p && (h = true, t3 = this.lookahead, i2 = this.parseObjectPropertyKey(), 3 === t3.type && "constructor" === t3.value && this.tolerateUnexpectedToken(t3, o.Messages.ConstructorIsAsync));
                  }
                  var f = this.qualifiedPropertyName(this.lookahead);
                  return 3 === t3.type ? "get" === t3.value && f ? (n3 = "get", u2 = this.match("["), i2 = this.parseObjectPropertyKey(), this.context.allowYield = false, s2 = this.parseGetterMethod()) : "set" === t3.value && f && (n3 = "set", u2 = this.match("["), i2 = this.parseObjectPropertyKey(), s2 = this.parseSetterMethod()) : 7 === t3.type && "*" === t3.value && f && (n3 = "init", u2 = this.match("["), i2 = this.parseObjectPropertyKey(), s2 = this.parseGeneratorMethod(), l2 = true), !n3 && i2 && this.match("(") && (n3 = "init", s2 = h ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction(), l2 = true), n3 || this.throwUnexpectedToken(this.lookahead), "init" === n3 && (n3 = "method"), u2 || (c2 && this.isPropertyKey(i2, "prototype") && this.throwUnexpectedToken(t3, o.Messages.StaticPrototype), !c2 && this.isPropertyKey(i2, "constructor") && (("method" !== n3 || !l2 || s2 && s2.generator) && this.throwUnexpectedToken(t3, o.Messages.ConstructorSpecialMethod), e4.value ? this.throwUnexpectedToken(t3, o.Messages.DuplicateConstructor) : e4.value = true, n3 = "constructor")), this.finalize(r3, new a.MethodDefinition(i2, u2, s2, n3, c2));
                }, e3.prototype.parseClassElementList = function() {
                  var e4 = [], t3 = { value: false };
                  for (this.expect("{"); !this.match("}"); )
                    this.match(";") ? this.nextToken() : e4.push(this.parseClassElement(t3));
                  return this.expect("}"), e4;
                }, e3.prototype.parseClassBody = function() {
                  var e4 = this.createNode(), t3 = this.parseClassElementList();
                  return this.finalize(e4, new a.ClassBody(t3));
                }, e3.prototype.parseClassDeclaration = function(e4) {
                  var t3 = this.createNode(), r3 = this.context.strict;
                  this.context.strict = true, this.expectKeyword("class");
                  var n3 = e4 && 3 !== this.lookahead.type ? null : this.parseVariableIdentifier(), i2 = null;
                  this.matchKeyword("extends") && (this.nextToken(), i2 = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));
                  var o2 = this.parseClassBody();
                  return this.context.strict = r3, this.finalize(t3, new a.ClassDeclaration(n3, i2, o2));
                }, e3.prototype.parseClassExpression = function() {
                  var e4 = this.createNode(), t3 = this.context.strict;
                  this.context.strict = true, this.expectKeyword("class");
                  var r3 = 3 === this.lookahead.type ? this.parseVariableIdentifier() : null, n3 = null;
                  this.matchKeyword("extends") && (this.nextToken(), n3 = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));
                  var i2 = this.parseClassBody();
                  return this.context.strict = t3, this.finalize(e4, new a.ClassExpression(r3, n3, i2));
                }, e3.prototype.parseModule = function() {
                  this.context.strict = true, this.context.isModule = true, this.scanner.isModule = true;
                  for (var e4 = this.createNode(), t3 = this.parseDirectivePrologues(); 2 !== this.lookahead.type; )
                    t3.push(this.parseStatementListItem());
                  return this.finalize(e4, new a.Module(t3));
                }, e3.prototype.parseScript = function() {
                  for (var e4 = this.createNode(), t3 = this.parseDirectivePrologues(); 2 !== this.lookahead.type; )
                    t3.push(this.parseStatementListItem());
                  return this.finalize(e4, new a.Script(t3));
                }, e3.prototype.parseModuleSpecifier = function() {
                  var e4 = this.createNode();
                  8 !== this.lookahead.type && this.throwError(o.Messages.InvalidModuleSpecifier);
                  var t3 = this.nextToken(), r3 = this.getTokenRaw(t3);
                  return this.finalize(e4, new a.Literal(t3.value, r3));
                }, e3.prototype.parseImportSpecifier = function() {
                  var e4, t3, r3 = this.createNode();
                  return 3 === this.lookahead.type ? (t3 = e4 = this.parseVariableIdentifier(), this.matchContextualKeyword("as") && (this.nextToken(), t3 = this.parseVariableIdentifier())) : (t3 = e4 = this.parseIdentifierName(), this.matchContextualKeyword("as") ? (this.nextToken(), t3 = this.parseVariableIdentifier()) : this.throwUnexpectedToken(this.nextToken())), this.finalize(r3, new a.ImportSpecifier(t3, e4));
                }, e3.prototype.parseNamedImports = function() {
                  this.expect("{");
                  for (var e4 = []; !this.match("}"); )
                    e4.push(this.parseImportSpecifier()), this.match("}") || this.expect(",");
                  return this.expect("}"), e4;
                }, e3.prototype.parseImportDefaultSpecifier = function() {
                  var e4 = this.createNode(), t3 = this.parseIdentifierName();
                  return this.finalize(e4, new a.ImportDefaultSpecifier(t3));
                }, e3.prototype.parseImportNamespaceSpecifier = function() {
                  var e4 = this.createNode();
                  this.expect("*"), this.matchContextualKeyword("as") || this.throwError(o.Messages.NoAsAfterImportNamespace), this.nextToken();
                  var t3 = this.parseIdentifierName();
                  return this.finalize(e4, new a.ImportNamespaceSpecifier(t3));
                }, e3.prototype.parseImportDeclaration = function() {
                  this.context.inFunctionBody && this.throwError(o.Messages.IllegalImportDeclaration);
                  var e4, t3 = this.createNode();
                  this.expectKeyword("import");
                  var r3 = [];
                  if (8 === this.lookahead.type)
                    e4 = this.parseModuleSpecifier();
                  else {
                    if (this.match("{") ? r3 = r3.concat(this.parseNamedImports()) : this.match("*") ? r3.push(this.parseImportNamespaceSpecifier()) : this.isIdentifierName(this.lookahead) && !this.matchKeyword("default") ? (r3.push(this.parseImportDefaultSpecifier()), this.match(",") && (this.nextToken(), this.match("*") ? r3.push(this.parseImportNamespaceSpecifier()) : this.match("{") ? r3 = r3.concat(this.parseNamedImports()) : this.throwUnexpectedToken(this.lookahead))) : this.throwUnexpectedToken(this.nextToken()), !this.matchContextualKeyword("from")) {
                      var n3 = this.lookahead.value ? o.Messages.UnexpectedToken : o.Messages.MissingFromClause;
                      this.throwError(n3, this.lookahead.value);
                    }
                    this.nextToken(), e4 = this.parseModuleSpecifier();
                  }
                  return this.consumeSemicolon(), this.finalize(t3, new a.ImportDeclaration(r3, e4));
                }, e3.prototype.parseExportSpecifier = function() {
                  var e4 = this.createNode(), t3 = this.parseIdentifierName(), r3 = t3;
                  return this.matchContextualKeyword("as") && (this.nextToken(), r3 = this.parseIdentifierName()), this.finalize(e4, new a.ExportSpecifier(t3, r3));
                }, e3.prototype.parseExportDeclaration = function() {
                  this.context.inFunctionBody && this.throwError(o.Messages.IllegalExportDeclaration);
                  var e4, t3 = this.createNode();
                  if (this.expectKeyword("export"), this.matchKeyword("default"))
                    if (this.nextToken(), this.matchKeyword("function")) {
                      var r3 = this.parseFunctionDeclaration(true);
                      e4 = this.finalize(t3, new a.ExportDefaultDeclaration(r3));
                    } else
                      this.matchKeyword("class") ? (r3 = this.parseClassDeclaration(true), e4 = this.finalize(t3, new a.ExportDefaultDeclaration(r3))) : this.matchContextualKeyword("async") ? (r3 = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression(), e4 = this.finalize(t3, new a.ExportDefaultDeclaration(r3))) : (this.matchContextualKeyword("from") && this.throwError(o.Messages.UnexpectedToken, this.lookahead.value), r3 = this.match("{") ? this.parseObjectInitializer() : this.match("[") ? this.parseArrayInitializer() : this.parseAssignmentExpression(), this.consumeSemicolon(), e4 = this.finalize(t3, new a.ExportDefaultDeclaration(r3)));
                  else if (this.match("*")) {
                    if (this.nextToken(), !this.matchContextualKeyword("from")) {
                      var n3 = this.lookahead.value ? o.Messages.UnexpectedToken : o.Messages.MissingFromClause;
                      this.throwError(n3, this.lookahead.value);
                    }
                    this.nextToken();
                    var i2 = this.parseModuleSpecifier();
                    this.consumeSemicolon(), e4 = this.finalize(t3, new a.ExportAllDeclaration(i2));
                  } else if (4 === this.lookahead.type) {
                    switch (r3 = void 0, this.lookahead.value) {
                      case "let":
                      case "const":
                        r3 = this.parseLexicalDeclaration({ inFor: false });
                        break;
                      case "var":
                      case "class":
                      case "function":
                        r3 = this.parseStatementListItem();
                        break;
                      default:
                        this.throwUnexpectedToken(this.lookahead);
                    }
                    e4 = this.finalize(t3, new a.ExportNamedDeclaration(r3, [], null));
                  } else if (this.matchAsyncFunction())
                    r3 = this.parseFunctionDeclaration(), e4 = this.finalize(t3, new a.ExportNamedDeclaration(r3, [], null));
                  else {
                    var s2 = [], u2 = null, l2 = false;
                    for (this.expect("{"); !this.match("}"); )
                      l2 = l2 || this.matchKeyword("default"), s2.push(this.parseExportSpecifier()), this.match("}") || this.expect(",");
                    this.expect("}"), this.matchContextualKeyword("from") ? (this.nextToken(), u2 = this.parseModuleSpecifier(), this.consumeSemicolon()) : l2 ? (n3 = this.lookahead.value ? o.Messages.UnexpectedToken : o.Messages.MissingFromClause, this.throwError(n3, this.lookahead.value)) : this.consumeSemicolon(), e4 = this.finalize(t3, new a.ExportNamedDeclaration(null, s2, u2));
                  }
                  return e4;
                }, e3;
              }();
              t2.Parser = c;
            }, function(e2, t2) {
              "use strict";
              Object.defineProperty(t2, "__esModule", { value: true }), t2.assert = function(e3, t3) {
                if (!e3)
                  throw new Error("ASSERT: " + t3);
              };
            }, function(e2, t2) {
              "use strict";
              Object.defineProperty(t2, "__esModule", { value: true });
              var r2 = function() {
                function e3() {
                  this.errors = [], this.tolerant = false;
                }
                return e3.prototype.recordError = function(e4) {
                  this.errors.push(e4);
                }, e3.prototype.tolerate = function(e4) {
                  if (!this.tolerant)
                    throw e4;
                  this.recordError(e4);
                }, e3.prototype.constructError = function(e4, t3) {
                  var r3 = new Error(e4);
                  try {
                    throw r3;
                  } catch (e5) {
                    Object.create && Object.defineProperty && (r3 = Object.create(e5), Object.defineProperty(r3, "column", { value: t3 }));
                  }
                  return r3;
                }, e3.prototype.createError = function(e4, t3, r3, n2) {
                  var i = "Line " + t3 + ": " + n2, o = this.constructError(i, r3);
                  return o.index = e4, o.lineNumber = t3, o.description = n2, o;
                }, e3.prototype.throwError = function(e4, t3, r3, n2) {
                  throw this.createError(e4, t3, r3, n2);
                }, e3.prototype.tolerateError = function(e4, t3, r3, n2) {
                  var i = this.createError(e4, t3, r3, n2);
                  if (!this.tolerant)
                    throw i;
                  this.recordError(i);
                }, e3;
              }();
              t2.ErrorHandler = r2;
            }, function(e2, t2) {
              "use strict";
              Object.defineProperty(t2, "__esModule", { value: true }), t2.Messages = { BadGetterArity: "Getter must not have any formal parameters", BadSetterArity: "Setter must have exactly one formal parameter", BadSetterRestParameter: "Setter function argument must not be a rest parameter", ConstructorIsAsync: "Class constructor may not be an async method", ConstructorSpecialMethod: "Class constructor may not be an accessor", DeclarationMissingInitializer: "Missing initializer in %0 declaration", DefaultRestParameter: "Unexpected token =", DuplicateBinding: "Duplicate binding %0", DuplicateConstructor: "A class may only have one constructor", DuplicateProtoProperty: "Duplicate __proto__ fields are not allowed in object literals", ForInOfLoopInitializer: "%0 loop variable declaration may not have an initializer", GeneratorInLegacyContext: "Generator declarations are not allowed in legacy contexts", IllegalBreak: "Illegal break statement", IllegalContinue: "Illegal continue statement", IllegalExportDeclaration: "Unexpected token", IllegalImportDeclaration: "Unexpected token", IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list", IllegalReturn: "Illegal return statement", InvalidEscapedReservedWord: "Keyword must not contain escaped characters", InvalidHexEscapeSequence: "Invalid hexadecimal escape sequence", InvalidLHSInAssignment: "Invalid left-hand side in assignment", InvalidLHSInForIn: "Invalid left-hand side in for-in", InvalidLHSInForLoop: "Invalid left-hand side in for-loop", InvalidModuleSpecifier: "Unexpected token", InvalidRegExp: "Invalid regular expression", LetInLexicalBinding: "let is disallowed as a lexically bound name", MissingFromClause: "Unexpected token", MultipleDefaultsInSwitch: "More than one default clause in switch statement", NewlineAfterThrow: "Illegal newline after throw", NoAsAfterImportNamespace: "Unexpected token", NoCatchOrFinally: "Missing catch or finally after try", ParameterAfterRestParameter: "Rest parameter must be last formal parameter", Redeclaration: "%0 '%1' has already been declared", StaticPrototype: "Classes may not have static property named prototype", StrictCatchVariable: "Catch variable may not be eval or arguments in strict mode", StrictDelete: "Delete of an unqualified identifier in strict mode.", StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block", StrictFunctionName: "Function name may not be eval or arguments in strict mode", StrictLHSAssignment: "Assignment to eval or arguments is not allowed in strict mode", StrictLHSPostfix: "Postfix increment/decrement may not have eval or arguments operand in strict mode", StrictLHSPrefix: "Prefix increment/decrement may not have eval or arguments operand in strict mode", StrictModeWith: "Strict mode code may not include a with statement", StrictOctalLiteral: "Octal literals are not allowed in strict mode.", StrictParamDupe: "Strict mode function may not have duplicate parameter names", StrictParamName: "Parameter name eval or arguments is not allowed in strict mode", StrictReservedWord: "Use of future reserved word in strict mode", StrictVarName: "Variable name may not be eval or arguments in strict mode", TemplateOctalLiteral: "Octal literals are not allowed in template strings.", UnexpectedEOS: "Unexpected end of input", UnexpectedIdentifier: "Unexpected identifier", UnexpectedNumber: "Unexpected number", UnexpectedReserved: "Unexpected reserved word", UnexpectedString: "Unexpected string", UnexpectedTemplate: "Unexpected quasi %0", UnexpectedToken: "Unexpected token %0", UnexpectedTokenIllegal: "Unexpected token ILLEGAL", UnknownLabel: "Undefined label '%0'", UnterminatedRegExp: "Invalid regular expression: missing /" };
            }, function(e2, t2, r2) {
              "use strict";
              Object.defineProperty(t2, "__esModule", { value: true });
              var n2 = r2(9), i = r2(4), o = r2(11);
              function a(e3) {
                return "0123456789abcdef".indexOf(e3.toLowerCase());
              }
              function s(e3) {
                return "01234567".indexOf(e3);
              }
              var u = function() {
                function e3(e4, t3) {
                  this.source = e4, this.errorHandler = t3, this.trackComment = false, this.isModule = false, this.length = e4.length, this.index = 0, this.lineNumber = e4.length > 0 ? 1 : 0, this.lineStart = 0, this.curlyStack = [];
                }
                return e3.prototype.saveState = function() {
                  return { index: this.index, lineNumber: this.lineNumber, lineStart: this.lineStart };
                }, e3.prototype.restoreState = function(e4) {
                  this.index = e4.index, this.lineNumber = e4.lineNumber, this.lineStart = e4.lineStart;
                }, e3.prototype.eof = function() {
                  return this.index >= this.length;
                }, e3.prototype.throwUnexpectedToken = function(e4) {
                  return void 0 === e4 && (e4 = o.Messages.UnexpectedTokenIllegal), this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, e4);
                }, e3.prototype.tolerateUnexpectedToken = function(e4) {
                  void 0 === e4 && (e4 = o.Messages.UnexpectedTokenIllegal), this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, e4);
                }, e3.prototype.skipSingleLineComment = function(e4) {
                  var t3, r3, n3 = [];
                  for (this.trackComment && (n3 = [], t3 = this.index - e4, r3 = { start: { line: this.lineNumber, column: this.index - this.lineStart - e4 }, end: {} }); !this.eof(); ) {
                    var o2 = this.source.charCodeAt(this.index);
                    if (++this.index, i.Character.isLineTerminator(o2)) {
                      if (this.trackComment) {
                        r3.end = { line: this.lineNumber, column: this.index - this.lineStart - 1 };
                        var a2 = { multiLine: false, slice: [t3 + e4, this.index - 1], range: [t3, this.index - 1], loc: r3 };
                        n3.push(a2);
                      }
                      return 13 === o2 && 10 === this.source.charCodeAt(this.index) && ++this.index, ++this.lineNumber, this.lineStart = this.index, n3;
                    }
                  }
                  return this.trackComment && (r3.end = { line: this.lineNumber, column: this.index - this.lineStart }, a2 = { multiLine: false, slice: [t3 + e4, this.index], range: [t3, this.index], loc: r3 }, n3.push(a2)), n3;
                }, e3.prototype.skipMultiLineComment = function() {
                  var e4, t3, r3 = [];
                  for (this.trackComment && (r3 = [], e4 = this.index - 2, t3 = { start: { line: this.lineNumber, column: this.index - this.lineStart - 2 }, end: {} }); !this.eof(); ) {
                    var n3 = this.source.charCodeAt(this.index);
                    if (i.Character.isLineTerminator(n3))
                      13 === n3 && 10 === this.source.charCodeAt(this.index + 1) && ++this.index, ++this.lineNumber, ++this.index, this.lineStart = this.index;
                    else if (42 === n3) {
                      if (47 === this.source.charCodeAt(this.index + 1)) {
                        if (this.index += 2, this.trackComment) {
                          t3.end = { line: this.lineNumber, column: this.index - this.lineStart };
                          var o2 = { multiLine: true, slice: [e4 + 2, this.index - 2], range: [e4, this.index], loc: t3 };
                          r3.push(o2);
                        }
                        return r3;
                      }
                      ++this.index;
                    } else
                      ++this.index;
                  }
                  return this.trackComment && (t3.end = { line: this.lineNumber, column: this.index - this.lineStart }, o2 = { multiLine: true, slice: [e4 + 2, this.index], range: [e4, this.index], loc: t3 }, r3.push(o2)), this.tolerateUnexpectedToken(), r3;
                }, e3.prototype.scanComments = function() {
                  var e4;
                  this.trackComment && (e4 = []);
                  for (var t3 = 0 === this.index; !this.eof(); ) {
                    var r3 = this.source.charCodeAt(this.index);
                    if (i.Character.isWhiteSpace(r3))
                      ++this.index;
                    else if (i.Character.isLineTerminator(r3))
                      ++this.index, 13 === r3 && 10 === this.source.charCodeAt(this.index) && ++this.index, ++this.lineNumber, this.lineStart = this.index, t3 = true;
                    else if (47 === r3)
                      if (47 === (r3 = this.source.charCodeAt(this.index + 1))) {
                        this.index += 2;
                        var n3 = this.skipSingleLineComment(2);
                        this.trackComment && (e4 = e4.concat(n3)), t3 = true;
                      } else {
                        if (42 !== r3)
                          break;
                        this.index += 2, n3 = this.skipMultiLineComment(), this.trackComment && (e4 = e4.concat(n3));
                      }
                    else if (t3 && 45 === r3) {
                      if (45 !== this.source.charCodeAt(this.index + 1) || 62 !== this.source.charCodeAt(this.index + 2))
                        break;
                      this.index += 3, n3 = this.skipSingleLineComment(3), this.trackComment && (e4 = e4.concat(n3));
                    } else {
                      if (60 !== r3 || this.isModule)
                        break;
                      if ("!--" !== this.source.slice(this.index + 1, this.index + 4))
                        break;
                      this.index += 4, n3 = this.skipSingleLineComment(4), this.trackComment && (e4 = e4.concat(n3));
                    }
                  }
                  return e4;
                }, e3.prototype.isFutureReservedWord = function(e4) {
                  switch (e4) {
                    case "enum":
                    case "export":
                    case "import":
                    case "super":
                      return true;
                    default:
                      return false;
                  }
                }, e3.prototype.isStrictModeReservedWord = function(e4) {
                  switch (e4) {
                    case "implements":
                    case "interface":
                    case "package":
                    case "private":
                    case "protected":
                    case "public":
                    case "static":
                    case "yield":
                    case "let":
                      return true;
                    default:
                      return false;
                  }
                }, e3.prototype.isRestrictedWord = function(e4) {
                  return "eval" === e4 || "arguments" === e4;
                }, e3.prototype.isKeyword = function(e4) {
                  switch (e4.length) {
                    case 2:
                      return "if" === e4 || "in" === e4 || "do" === e4;
                    case 3:
                      return "var" === e4 || "for" === e4 || "new" === e4 || "try" === e4 || "let" === e4;
                    case 4:
                      return "this" === e4 || "else" === e4 || "case" === e4 || "void" === e4 || "with" === e4 || "enum" === e4;
                    case 5:
                      return "while" === e4 || "break" === e4 || "catch" === e4 || "throw" === e4 || "const" === e4 || "yield" === e4 || "class" === e4 || "super" === e4;
                    case 6:
                      return "return" === e4 || "typeof" === e4 || "delete" === e4 || "switch" === e4 || "export" === e4 || "import" === e4;
                    case 7:
                      return "default" === e4 || "finally" === e4 || "extends" === e4;
                    case 8:
                      return "function" === e4 || "continue" === e4 || "debugger" === e4;
                    case 10:
                      return "instanceof" === e4;
                    default:
                      return false;
                  }
                }, e3.prototype.codePointAt = function(e4) {
                  var t3 = this.source.charCodeAt(e4);
                  if (t3 >= 55296 && t3 <= 56319) {
                    var r3 = this.source.charCodeAt(e4 + 1);
                    r3 >= 56320 && r3 <= 57343 && (t3 = 1024 * (t3 - 55296) + r3 - 56320 + 65536);
                  }
                  return t3;
                }, e3.prototype.scanHexEscape = function(e4) {
                  for (var t3 = "u" === e4 ? 4 : 2, r3 = 0, n3 = 0; n3 < t3; ++n3) {
                    if (this.eof() || !i.Character.isHexDigit(this.source.charCodeAt(this.index)))
                      return null;
                    r3 = 16 * r3 + a(this.source[this.index++]);
                  }
                  return String.fromCharCode(r3);
                }, e3.prototype.scanUnicodeCodePointEscape = function() {
                  var e4 = this.source[this.index], t3 = 0;
                  for ("}" === e4 && this.throwUnexpectedToken(); !this.eof() && (e4 = this.source[this.index++], i.Character.isHexDigit(e4.charCodeAt(0))); )
                    t3 = 16 * t3 + a(e4);
                  return (t3 > 1114111 || "}" !== e4) && this.throwUnexpectedToken(), i.Character.fromCodePoint(t3);
                }, e3.prototype.getIdentifier = function() {
                  for (var e4 = this.index++; !this.eof(); ) {
                    var t3 = this.source.charCodeAt(this.index);
                    if (92 === t3)
                      return this.index = e4, this.getComplexIdentifier();
                    if (t3 >= 55296 && t3 < 57343)
                      return this.index = e4, this.getComplexIdentifier();
                    if (!i.Character.isIdentifierPart(t3))
                      break;
                    ++this.index;
                  }
                  return this.source.slice(e4, this.index);
                }, e3.prototype.getComplexIdentifier = function() {
                  var e4, t3 = this.codePointAt(this.index), r3 = i.Character.fromCodePoint(t3);
                  for (this.index += r3.length, 92 === t3 && (117 !== this.source.charCodeAt(this.index) && this.throwUnexpectedToken(), ++this.index, "{" === this.source[this.index] ? (++this.index, e4 = this.scanUnicodeCodePointEscape()) : null !== (e4 = this.scanHexEscape("u")) && "\\" !== e4 && i.Character.isIdentifierStart(e4.charCodeAt(0)) || this.throwUnexpectedToken(), r3 = e4); !this.eof() && (t3 = this.codePointAt(this.index), i.Character.isIdentifierPart(t3)); )
                    r3 += e4 = i.Character.fromCodePoint(t3), this.index += e4.length, 92 === t3 && (r3 = r3.substr(0, r3.length - 1), 117 !== this.source.charCodeAt(this.index) && this.throwUnexpectedToken(), ++this.index, "{" === this.source[this.index] ? (++this.index, e4 = this.scanUnicodeCodePointEscape()) : null !== (e4 = this.scanHexEscape("u")) && "\\" !== e4 && i.Character.isIdentifierPart(e4.charCodeAt(0)) || this.throwUnexpectedToken(), r3 += e4);
                  return r3;
                }, e3.prototype.octalToDecimal = function(e4) {
                  var t3 = "0" !== e4, r3 = s(e4);
                  return !this.eof() && i.Character.isOctalDigit(this.source.charCodeAt(this.index)) && (t3 = true, r3 = 8 * r3 + s(this.source[this.index++]), "0123".indexOf(e4) >= 0 && !this.eof() && i.Character.isOctalDigit(this.source.charCodeAt(this.index)) && (r3 = 8 * r3 + s(this.source[this.index++]))), { code: r3, octal: t3 };
                }, e3.prototype.scanIdentifier = function() {
                  var e4, t3 = this.index, r3 = 92 === this.source.charCodeAt(t3) ? this.getComplexIdentifier() : this.getIdentifier();
                  if (3 != (e4 = 1 === r3.length ? 3 : this.isKeyword(r3) ? 4 : "null" === r3 ? 5 : "true" === r3 || "false" === r3 ? 1 : 3) && t3 + r3.length !== this.index) {
                    var n3 = this.index;
                    this.index = t3, this.tolerateUnexpectedToken(o.Messages.InvalidEscapedReservedWord), this.index = n3;
                  }
                  return { type: e4, value: r3, lineNumber: this.lineNumber, lineStart: this.lineStart, start: t3, end: this.index };
                }, e3.prototype.scanPunctuator = function() {
                  var e4 = this.index, t3 = this.source[this.index];
                  switch (t3) {
                    case "(":
                    case "{":
                      "{" === t3 && this.curlyStack.push("{"), ++this.index;
                      break;
                    case ".":
                      ++this.index, "." === this.source[this.index] && "." === this.source[this.index + 1] && (this.index += 2, t3 = "...");
                      break;
                    case "}":
                      ++this.index, this.curlyStack.pop();
                      break;
                    case ")":
                    case ";":
                    case ",":
                    case "[":
                    case "]":
                    case ":":
                    case "?":
                    case "~":
                      ++this.index;
                      break;
                    default:
                      ">>>=" === (t3 = this.source.substr(this.index, 4)) ? this.index += 4 : "===" === (t3 = t3.substr(0, 3)) || "!==" === t3 || ">>>" === t3 || "<<=" === t3 || ">>=" === t3 || "**=" === t3 ? this.index += 3 : "&&" === (t3 = t3.substr(0, 2)) || "||" === t3 || "==" === t3 || "!=" === t3 || "+=" === t3 || "-=" === t3 || "*=" === t3 || "/=" === t3 || "++" === t3 || "--" === t3 || "<<" === t3 || ">>" === t3 || "&=" === t3 || "|=" === t3 || "^=" === t3 || "%=" === t3 || "<=" === t3 || ">=" === t3 || "=>" === t3 || "**" === t3 ? this.index += 2 : (t3 = this.source[this.index], "<>=!+-*%&|^/".indexOf(t3) >= 0 && ++this.index);
                  }
                  return this.index === e4 && this.throwUnexpectedToken(), { type: 7, value: t3, lineNumber: this.lineNumber, lineStart: this.lineStart, start: e4, end: this.index };
                }, e3.prototype.scanHexLiteral = function(e4) {
                  for (var t3 = ""; !this.eof() && i.Character.isHexDigit(this.source.charCodeAt(this.index)); )
                    t3 += this.source[this.index++];
                  return 0 === t3.length && this.throwUnexpectedToken(), i.Character.isIdentifierStart(this.source.charCodeAt(this.index)) && this.throwUnexpectedToken(), { type: 6, value: parseInt("0x" + t3, 16), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e4, end: this.index };
                }, e3.prototype.scanBinaryLiteral = function(e4) {
                  for (var t3, r3 = ""; !this.eof() && ("0" === (t3 = this.source[this.index]) || "1" === t3); )
                    r3 += this.source[this.index++];
                  return 0 === r3.length && this.throwUnexpectedToken(), this.eof() || (t3 = this.source.charCodeAt(this.index), (i.Character.isIdentifierStart(t3) || i.Character.isDecimalDigit(t3)) && this.throwUnexpectedToken()), { type: 6, value: parseInt(r3, 2), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e4, end: this.index };
                }, e3.prototype.scanOctalLiteral = function(e4, t3) {
                  var r3 = "", n3 = false;
                  for (i.Character.isOctalDigit(e4.charCodeAt(0)) ? (n3 = true, r3 = "0" + this.source[this.index++]) : ++this.index; !this.eof() && i.Character.isOctalDigit(this.source.charCodeAt(this.index)); )
                    r3 += this.source[this.index++];
                  return n3 || 0 !== r3.length || this.throwUnexpectedToken(), (i.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || i.Character.isDecimalDigit(this.source.charCodeAt(this.index))) && this.throwUnexpectedToken(), { type: 6, value: parseInt(r3, 8), octal: n3, lineNumber: this.lineNumber, lineStart: this.lineStart, start: t3, end: this.index };
                }, e3.prototype.isImplicitOctalLiteral = function() {
                  for (var e4 = this.index + 1; e4 < this.length; ++e4) {
                    var t3 = this.source[e4];
                    if ("8" === t3 || "9" === t3)
                      return false;
                    if (!i.Character.isOctalDigit(t3.charCodeAt(0)))
                      return true;
                  }
                  return true;
                }, e3.prototype.scanNumericLiteral = function() {
                  var e4 = this.index, t3 = this.source[e4];
                  n2.assert(i.Character.isDecimalDigit(t3.charCodeAt(0)) || "." === t3, "Numeric literal must start with a decimal digit or a decimal point");
                  var r3 = "";
                  if ("." !== t3) {
                    if (r3 = this.source[this.index++], t3 = this.source[this.index], "0" === r3) {
                      if ("x" === t3 || "X" === t3)
                        return ++this.index, this.scanHexLiteral(e4);
                      if ("b" === t3 || "B" === t3)
                        return ++this.index, this.scanBinaryLiteral(e4);
                      if ("o" === t3 || "O" === t3)
                        return this.scanOctalLiteral(t3, e4);
                      if (t3 && i.Character.isOctalDigit(t3.charCodeAt(0)) && this.isImplicitOctalLiteral())
                        return this.scanOctalLiteral(t3, e4);
                    }
                    for (; i.Character.isDecimalDigit(this.source.charCodeAt(this.index)); )
                      r3 += this.source[this.index++];
                    t3 = this.source[this.index];
                  }
                  if ("." === t3) {
                    for (r3 += this.source[this.index++]; i.Character.isDecimalDigit(this.source.charCodeAt(this.index)); )
                      r3 += this.source[this.index++];
                    t3 = this.source[this.index];
                  }
                  if ("e" === t3 || "E" === t3)
                    if (r3 += this.source[this.index++], "+" !== (t3 = this.source[this.index]) && "-" !== t3 || (r3 += this.source[this.index++]), i.Character.isDecimalDigit(this.source.charCodeAt(this.index)))
                      for (; i.Character.isDecimalDigit(this.source.charCodeAt(this.index)); )
                        r3 += this.source[this.index++];
                    else
                      this.throwUnexpectedToken();
                  return i.Character.isIdentifierStart(this.source.charCodeAt(this.index)) && this.throwUnexpectedToken(), { type: 6, value: parseFloat(r3), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e4, end: this.index };
                }, e3.prototype.scanStringLiteral = function() {
                  var e4 = this.index, t3 = this.source[e4];
                  n2.assert("'" === t3 || '"' === t3, "String literal must starts with a quote"), ++this.index;
                  for (var r3 = false, a2 = ""; !this.eof(); ) {
                    var s2 = this.source[this.index++];
                    if (s2 === t3) {
                      t3 = "";
                      break;
                    }
                    if ("\\" === s2)
                      if ((s2 = this.source[this.index++]) && i.Character.isLineTerminator(s2.charCodeAt(0)))
                        ++this.lineNumber, "\r" === s2 && "\n" === this.source[this.index] && ++this.index, this.lineStart = this.index;
                      else
                        switch (s2) {
                          case "u":
                            if ("{" === this.source[this.index])
                              ++this.index, a2 += this.scanUnicodeCodePointEscape();
                            else {
                              var u2 = this.scanHexEscape(s2);
                              null === u2 && this.throwUnexpectedToken(), a2 += u2;
                            }
                            break;
                          case "x":
                            var l = this.scanHexEscape(s2);
                            null === l && this.throwUnexpectedToken(o.Messages.InvalidHexEscapeSequence), a2 += l;
                            break;
                          case "n":
                            a2 += "\n";
                            break;
                          case "r":
                            a2 += "\r";
                            break;
                          case "t":
                            a2 += "	";
                            break;
                          case "b":
                            a2 += "\b";
                            break;
                          case "f":
                            a2 += "\f";
                            break;
                          case "v":
                            a2 += "\v";
                            break;
                          case "8":
                          case "9":
                            a2 += s2, this.tolerateUnexpectedToken();
                            break;
                          default:
                            if (s2 && i.Character.isOctalDigit(s2.charCodeAt(0))) {
                              var c = this.octalToDecimal(s2);
                              r3 = c.octal || r3, a2 += String.fromCharCode(c.code);
                            } else
                              a2 += s2;
                        }
                    else {
                      if (i.Character.isLineTerminator(s2.charCodeAt(0)))
                        break;
                      a2 += s2;
                    }
                  }
                  return "" !== t3 && (this.index = e4, this.throwUnexpectedToken()), { type: 8, value: a2, octal: r3, lineNumber: this.lineNumber, lineStart: this.lineStart, start: e4, end: this.index };
                }, e3.prototype.scanTemplate = function() {
                  var e4 = "", t3 = false, r3 = this.index, n3 = "`" === this.source[r3], a2 = false, s2 = 2;
                  for (++this.index; !this.eof(); ) {
                    var u2 = this.source[this.index++];
                    if ("`" === u2) {
                      s2 = 1, a2 = true, t3 = true;
                      break;
                    }
                    if ("$" === u2) {
                      if ("{" === this.source[this.index]) {
                        this.curlyStack.push("${"), ++this.index, t3 = true;
                        break;
                      }
                      e4 += u2;
                    } else if ("\\" === u2)
                      if (u2 = this.source[this.index++], i.Character.isLineTerminator(u2.charCodeAt(0)))
                        ++this.lineNumber, "\r" === u2 && "\n" === this.source[this.index] && ++this.index, this.lineStart = this.index;
                      else
                        switch (u2) {
                          case "n":
                            e4 += "\n";
                            break;
                          case "r":
                            e4 += "\r";
                            break;
                          case "t":
                            e4 += "	";
                            break;
                          case "u":
                            if ("{" === this.source[this.index])
                              ++this.index, e4 += this.scanUnicodeCodePointEscape();
                            else {
                              var l = this.index, c = this.scanHexEscape(u2);
                              null !== c ? e4 += c : (this.index = l, e4 += u2);
                            }
                            break;
                          case "x":
                            var h = this.scanHexEscape(u2);
                            null === h && this.throwUnexpectedToken(o.Messages.InvalidHexEscapeSequence), e4 += h;
                            break;
                          case "b":
                            e4 += "\b";
                            break;
                          case "f":
                            e4 += "\f";
                            break;
                          case "v":
                            e4 += "\v";
                            break;
                          default:
                            "0" === u2 ? (i.Character.isDecimalDigit(this.source.charCodeAt(this.index)) && this.throwUnexpectedToken(o.Messages.TemplateOctalLiteral), e4 += "\0") : i.Character.isOctalDigit(u2.charCodeAt(0)) ? this.throwUnexpectedToken(o.Messages.TemplateOctalLiteral) : e4 += u2;
                        }
                    else
                      i.Character.isLineTerminator(u2.charCodeAt(0)) ? (++this.lineNumber, "\r" === u2 && "\n" === this.source[this.index] && ++this.index, this.lineStart = this.index, e4 += "\n") : e4 += u2;
                  }
                  return t3 || this.throwUnexpectedToken(), n3 || this.curlyStack.pop(), { type: 10, value: this.source.slice(r3 + 1, this.index - s2), cooked: e4, head: n3, tail: a2, lineNumber: this.lineNumber, lineStart: this.lineStart, start: r3, end: this.index };
                }, e3.prototype.testRegExp = function(e4, t3) {
                  var r3 = e4, n3 = this;
                  t3.indexOf("u") >= 0 && (r3 = r3.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function(e5, t4, r4) {
                    var i2 = parseInt(t4 || r4, 16);
                    return i2 > 1114111 && n3.throwUnexpectedToken(o.Messages.InvalidRegExp), i2 <= 65535 ? String.fromCharCode(i2) : "\uFFFF";
                  }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "\uFFFF"));
                  try {
                    RegExp(r3);
                  } catch (e5) {
                    this.throwUnexpectedToken(o.Messages.InvalidRegExp);
                  }
                  try {
                    return new RegExp(e4, t3);
                  } catch (e5) {
                    return null;
                  }
                }, e3.prototype.scanRegExpBody = function() {
                  var e4 = this.source[this.index];
                  n2.assert("/" === e4, "Regular expression literal must start with a slash");
                  for (var t3 = this.source[this.index++], r3 = false, a2 = false; !this.eof(); )
                    if (t3 += e4 = this.source[this.index++], "\\" === e4)
                      e4 = this.source[this.index++], i.Character.isLineTerminator(e4.charCodeAt(0)) && this.throwUnexpectedToken(o.Messages.UnterminatedRegExp), t3 += e4;
                    else if (i.Character.isLineTerminator(e4.charCodeAt(0)))
                      this.throwUnexpectedToken(o.Messages.UnterminatedRegExp);
                    else if (r3)
                      "]" === e4 && (r3 = false);
                    else {
                      if ("/" === e4) {
                        a2 = true;
                        break;
                      }
                      "[" === e4 && (r3 = true);
                    }
                  return a2 || this.throwUnexpectedToken(o.Messages.UnterminatedRegExp), t3.substr(1, t3.length - 2);
                }, e3.prototype.scanRegExpFlags = function() {
                  for (var e4 = ""; !this.eof(); ) {
                    var t3 = this.source[this.index];
                    if (!i.Character.isIdentifierPart(t3.charCodeAt(0)))
                      break;
                    if (++this.index, "\\" !== t3 || this.eof())
                      e4 += t3;
                    else if ("u" === (t3 = this.source[this.index])) {
                      ++this.index;
                      var r3 = this.index, n3 = this.scanHexEscape("u");
                      if (null !== n3)
                        for (e4 += n3; r3 < this.index; ++r3)
                          this.source[r3];
                      else
                        this.index = r3, e4 += "u";
                      this.tolerateUnexpectedToken();
                    } else
                      this.tolerateUnexpectedToken();
                  }
                  return e4;
                }, e3.prototype.scanRegExp = function() {
                  var e4 = this.index, t3 = this.scanRegExpBody(), r3 = this.scanRegExpFlags();
                  return { type: 9, value: "", pattern: t3, flags: r3, regex: this.testRegExp(t3, r3), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e4, end: this.index };
                }, e3.prototype.lex = function() {
                  if (this.eof())
                    return { type: 2, value: "", lineNumber: this.lineNumber, lineStart: this.lineStart, start: this.index, end: this.index };
                  var e4 = this.source.charCodeAt(this.index);
                  return i.Character.isIdentifierStart(e4) ? this.scanIdentifier() : 40 === e4 || 41 === e4 || 59 === e4 ? this.scanPunctuator() : 39 === e4 || 34 === e4 ? this.scanStringLiteral() : 46 === e4 ? i.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1)) ? this.scanNumericLiteral() : this.scanPunctuator() : i.Character.isDecimalDigit(e4) ? this.scanNumericLiteral() : 96 === e4 || 125 === e4 && "${" === this.curlyStack[this.curlyStack.length - 1] ? this.scanTemplate() : e4 >= 55296 && e4 < 57343 && i.Character.isIdentifierStart(this.codePointAt(this.index)) ? this.scanIdentifier() : this.scanPunctuator();
                }, e3;
              }();
              t2.Scanner = u;
            }, function(e2, t2) {
              "use strict";
              Object.defineProperty(t2, "__esModule", { value: true }), t2.TokenName = {}, t2.TokenName[1] = "Boolean", t2.TokenName[2] = "<end>", t2.TokenName[3] = "Identifier", t2.TokenName[4] = "Keyword", t2.TokenName[5] = "Null", t2.TokenName[6] = "Numeric", t2.TokenName[7] = "Punctuator", t2.TokenName[8] = "String", t2.TokenName[9] = "RegularExpression", t2.TokenName[10] = "Template";
            }, function(e2, t2) {
              "use strict";
              Object.defineProperty(t2, "__esModule", { value: true }), t2.XHTMLEntities = { quot: '"', amp: "&", apos: "'", gt: ">", nbsp: "\xA0", iexcl: "\xA1", cent: "\xA2", pound: "\xA3", curren: "\xA4", yen: "\xA5", brvbar: "\xA6", sect: "\xA7", uml: "\xA8", copy: "\xA9", ordf: "\xAA", laquo: "\xAB", not: "\xAC", shy: "\xAD", reg: "\xAE", macr: "\xAF", deg: "\xB0", plusmn: "\xB1", sup2: "\xB2", sup3: "\xB3", acute: "\xB4", micro: "\xB5", para: "\xB6", middot: "\xB7", cedil: "\xB8", sup1: "\xB9", ordm: "\xBA", raquo: "\xBB", frac14: "\xBC", frac12: "\xBD", frac34: "\xBE", iquest: "\xBF", Agrave: "\xC0", Aacute: "\xC1", Acirc: "\xC2", Atilde: "\xC3", Auml: "\xC4", Aring: "\xC5", AElig: "\xC6", Ccedil: "\xC7", Egrave: "\xC8", Eacute: "\xC9", Ecirc: "\xCA", Euml: "\xCB", Igrave: "\xCC", Iacute: "\xCD", Icirc: "\xCE", Iuml: "\xCF", ETH: "\xD0", Ntilde: "\xD1", Ograve: "\xD2", Oacute: "\xD3", Ocirc: "\xD4", Otilde: "\xD5", Ouml: "\xD6", times: "\xD7", Oslash: "\xD8", Ugrave: "\xD9", Uacute: "\xDA", Ucirc: "\xDB", Uuml: "\xDC", Yacute: "\xDD", THORN: "\xDE", szlig: "\xDF", agrave: "\xE0", aacute: "\xE1", acirc: "\xE2", atilde: "\xE3", auml: "\xE4", aring: "\xE5", aelig: "\xE6", ccedil: "\xE7", egrave: "\xE8", eacute: "\xE9", ecirc: "\xEA", euml: "\xEB", igrave: "\xEC", iacute: "\xED", icirc: "\xEE", iuml: "\xEF", eth: "\xF0", ntilde: "\xF1", ograve: "\xF2", oacute: "\xF3", ocirc: "\xF4", otilde: "\xF5", ouml: "\xF6", divide: "\xF7", oslash: "\xF8", ugrave: "\xF9", uacute: "\xFA", ucirc: "\xFB", uuml: "\xFC", yacute: "\xFD", thorn: "\xFE", yuml: "\xFF", OElig: "\u0152", oelig: "\u0153", Scaron: "\u0160", scaron: "\u0161", Yuml: "\u0178", fnof: "\u0192", circ: "\u02C6", tilde: "\u02DC", Alpha: "\u0391", Beta: "\u0392", Gamma: "\u0393", Delta: "\u0394", Epsilon: "\u0395", Zeta: "\u0396", Eta: "\u0397", Theta: "\u0398", Iota: "\u0399", Kappa: "\u039A", Lambda: "\u039B", Mu: "\u039C", Nu: "\u039D", Xi: "\u039E", Omicron: "\u039F", Pi: "\u03A0", Rho: "\u03A1", Sigma: "\u03A3", Tau: "\u03A4", Upsilon: "\u03A5", Phi: "\u03A6", Chi: "\u03A7", Psi: "\u03A8", Omega: "\u03A9", alpha: "\u03B1", beta: "\u03B2", gamma: "\u03B3", delta: "\u03B4", epsilon: "\u03B5", zeta: "\u03B6", eta: "\u03B7", theta: "\u03B8", iota: "\u03B9", kappa: "\u03BA", lambda: "\u03BB", mu: "\u03BC", nu: "\u03BD", xi: "\u03BE", omicron: "\u03BF", pi: "\u03C0", rho: "\u03C1", sigmaf: "\u03C2", sigma: "\u03C3", tau: "\u03C4", upsilon: "\u03C5", phi: "\u03C6", chi: "\u03C7", psi: "\u03C8", omega: "\u03C9", thetasym: "\u03D1", upsih: "\u03D2", piv: "\u03D6", ensp: "\u2002", emsp: "\u2003", thinsp: "\u2009", zwnj: "\u200C", zwj: "\u200D", lrm: "\u200E", rlm: "\u200F", ndash: "\u2013", mdash: "\u2014", lsquo: "\u2018", rsquo: "\u2019", sbquo: "\u201A", ldquo: "\u201C", rdquo: "\u201D", bdquo: "\u201E", dagger: "\u2020", Dagger: "\u2021", bull: "\u2022", hellip: "\u2026", permil: "\u2030", prime: "\u2032", Prime: "\u2033", lsaquo: "\u2039", rsaquo: "\u203A", oline: "\u203E", frasl: "\u2044", euro: "\u20AC", image: "\u2111", weierp: "\u2118", real: "\u211C", trade: "\u2122", alefsym: "\u2135", larr: "\u2190", uarr: "\u2191", rarr: "\u2192", darr: "\u2193", harr: "\u2194", crarr: "\u21B5", lArr: "\u21D0", uArr: "\u21D1", rArr: "\u21D2", dArr: "\u21D3", hArr: "\u21D4", forall: "\u2200", part: "\u2202", exist: "\u2203", empty: "\u2205", nabla: "\u2207", isin: "\u2208", notin: "\u2209", ni: "\u220B", prod: "\u220F", sum: "\u2211", minus: "\u2212", lowast: "\u2217", radic: "\u221A", prop: "\u221D", infin: "\u221E", ang: "\u2220", and: "\u2227", or: "\u2228", cap: "\u2229", cup: "\u222A", int: "\u222B", there4: "\u2234", sim: "\u223C", cong: "\u2245", asymp: "\u2248", ne: "\u2260", equiv: "\u2261", le: "\u2264", ge: "\u2265", sub: "\u2282", sup: "\u2283", nsub: "\u2284", sube: "\u2286", supe: "\u2287", oplus: "\u2295", otimes: "\u2297", perp: "\u22A5", sdot: "\u22C5", lceil: "\u2308", rceil: "\u2309", lfloor: "\u230A", rfloor: "\u230B", loz: "\u25CA", spades: "\u2660", clubs: "\u2663", hearts: "\u2665", diams: "\u2666", lang: "\u27E8", rang: "\u27E9" };
            }, function(e2, t2, r2) {
              "use strict";
              Object.defineProperty(t2, "__esModule", { value: true });
              var n2 = r2(10), i = r2(12), o = r2(13), a = function() {
                function e3() {
                  this.values = [], this.curly = this.paren = -1;
                }
                return e3.prototype.beforeFunctionExpression = function(e4) {
                  return ["(", "{", "[", "in", "typeof", "instanceof", "new", "return", "case", "delete", "throw", "void", "=", "+=", "-=", "*=", "**=", "/=", "%=", "<<=", ">>=", ">>>=", "&=", "|=", "^=", ",", "+", "-", "*", "**", "/", "%", "++", "--", "<<", ">>", ">>>", "&", "|", "^", "!", "~", "&&", "||", "?", ":", "===", "==", ">=", "<=", "<", ">", "!=", "!=="].indexOf(e4) >= 0;
                }, e3.prototype.isRegexStart = function() {
                  var e4 = this.values[this.values.length - 1], t3 = null !== e4;
                  switch (e4) {
                    case "this":
                    case "]":
                      t3 = false;
                      break;
                    case ")":
                      var r3 = this.values[this.paren - 1];
                      t3 = "if" === r3 || "while" === r3 || "for" === r3 || "with" === r3;
                      break;
                    case "}":
                      if (t3 = false, "function" === this.values[this.curly - 3])
                        t3 = !!(n3 = this.values[this.curly - 4]) && !this.beforeFunctionExpression(n3);
                      else if ("function" === this.values[this.curly - 4]) {
                        var n3;
                        t3 = !(n3 = this.values[this.curly - 5]) || !this.beforeFunctionExpression(n3);
                      }
                  }
                  return t3;
                }, e3.prototype.push = function(e4) {
                  7 === e4.type || 4 === e4.type ? ("{" === e4.value ? this.curly = this.values.length : "(" === e4.value && (this.paren = this.values.length), this.values.push(e4.value)) : this.values.push(null);
                }, e3;
              }(), s = function() {
                function e3(e4, t3) {
                  this.errorHandler = new n2.ErrorHandler(), this.errorHandler.tolerant = !!t3 && "boolean" == typeof t3.tolerant && t3.tolerant, this.scanner = new i.Scanner(e4, this.errorHandler), this.scanner.trackComment = !!t3 && "boolean" == typeof t3.comment && t3.comment, this.trackRange = !!t3 && "boolean" == typeof t3.range && t3.range, this.trackLoc = !!t3 && "boolean" == typeof t3.loc && t3.loc, this.buffer = [], this.reader = new a();
                }
                return e3.prototype.errors = function() {
                  return this.errorHandler.errors;
                }, e3.prototype.getNextToken = function() {
                  if (0 === this.buffer.length) {
                    var e4 = this.scanner.scanComments();
                    if (this.scanner.trackComment)
                      for (var t3 = 0; t3 < e4.length; ++t3) {
                        var r3 = e4[t3], n3 = this.scanner.source.slice(r3.slice[0], r3.slice[1]), i2 = { type: r3.multiLine ? "BlockComment" : "LineComment", value: n3 };
                        this.trackRange && (i2.range = r3.range), this.trackLoc && (i2.loc = r3.loc), this.buffer.push(i2);
                      }
                    if (!this.scanner.eof()) {
                      var a2 = void 0;
                      this.trackLoc && (a2 = { start: { line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart }, end: {} });
                      var s2 = "/" === this.scanner.source[this.scanner.index] && this.reader.isRegexStart() ? this.scanner.scanRegExp() : this.scanner.lex();
                      this.reader.push(s2);
                      var u = { type: o.TokenName[s2.type], value: this.scanner.source.slice(s2.start, s2.end) };
                      if (this.trackRange && (u.range = [s2.start, s2.end]), this.trackLoc && (a2.end = { line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart }, u.loc = a2), 9 === s2.type) {
                        var l = s2.pattern, c = s2.flags;
                        u.regex = { pattern: l, flags: c };
                      }
                      this.buffer.push(u);
                    }
                  }
                  return this.buffer.shift();
                }, e3;
              }();
              t2.Tokenizer = s;
            }]);
          }, e.exports = n();
        }, function(e, t, r) {
          "use strict";
          var n = r(38), i = r(53), o = r(76), a = r(54), s = Object.prototype.toString, u = Object.prototype.hasOwnProperty, l = { 0: "\\0", 7: "\\a", 8: "\\b", 9: "\\t", 10: "\\n", 11: "\\v", 12: "\\f", 13: "\\r", 27: "\\e", 34: '\\"', 92: "\\\\", 133: "\\N", 160: "\\_", 8232: "\\L", 8233: "\\P" }, c = ["y", "Y", "yes", "Yes", "YES", "on", "On", "ON", "n", "N", "no", "No", "NO", "off", "Off", "OFF"];
          function h(e2) {
            var t2, r2, o2;
            if (t2 = e2.toString(16).toUpperCase(), e2 <= 255)
              r2 = "x", o2 = 2;
            else if (e2 <= 65535)
              r2 = "u", o2 = 4;
            else {
              if (!(e2 <= 4294967295))
                throw new i("code point within a string may not be greater than 0xFFFFFFFF");
              r2 = "U", o2 = 8;
            }
            return "\\" + r2 + n.repeat("0", o2 - t2.length) + t2;
          }
          function p(e2) {
            this.schema = e2.schema || o, this.indent = Math.max(1, e2.indent || 2), this.noArrayIndent = e2.noArrayIndent || false, this.skipInvalid = e2.skipInvalid || false, this.flowLevel = n.isNothing(e2.flowLevel) ? -1 : e2.flowLevel, this.styleMap = function(e3, t2) {
              var r2, n2, i2, o2, a2, s2, l2;
              if (null === t2)
                return {};
              for (r2 = {}, i2 = 0, o2 = (n2 = Object.keys(t2)).length; i2 < o2; i2 += 1)
                a2 = n2[i2], s2 = String(t2[a2]), "!!" === a2.slice(0, 2) && (a2 = "tag:yaml.org,2002:" + a2.slice(2)), (l2 = e3.compiledTypeMap.fallback[a2]) && u.call(l2.styleAliases, s2) && (s2 = l2.styleAliases[s2]), r2[a2] = s2;
              return r2;
            }(this.schema, e2.styles || null), this.sortKeys = e2.sortKeys || false, this.lineWidth = e2.lineWidth || 80, this.noRefs = e2.noRefs || false, this.noCompatMode = e2.noCompatMode || false, this.condenseFlow = e2.condenseFlow || false, this.implicitTypes = this.schema.compiledImplicit, this.explicitTypes = this.schema.compiledExplicit, this.tag = null, this.result = "", this.duplicates = [], this.usedDuplicates = null;
          }
          function f(e2, t2) {
            for (var r2, i2 = n.repeat(" ", t2), o2 = 0, a2 = -1, s2 = "", u2 = e2.length; o2 < u2; )
              -1 === (a2 = e2.indexOf("\n", o2)) ? (r2 = e2.slice(o2), o2 = u2) : (r2 = e2.slice(o2, a2 + 1), o2 = a2 + 1), r2.length && "\n" !== r2 && (s2 += i2), s2 += r2;
            return s2;
          }
          function d(e2, t2) {
            return "\n" + n.repeat(" ", e2.indent * t2);
          }
          function m(e2) {
            return 32 === e2 || 9 === e2;
          }
          function y(e2) {
            return 32 <= e2 && e2 <= 126 || 161 <= e2 && e2 <= 55295 && 8232 !== e2 && 8233 !== e2 || 57344 <= e2 && e2 <= 65533 && 65279 !== e2 || 65536 <= e2 && e2 <= 1114111;
          }
          function v(e2, t2) {
            return y(e2) && 65279 !== e2 && 44 !== e2 && 91 !== e2 && 93 !== e2 && 123 !== e2 && 125 !== e2 && 58 !== e2 && (35 !== e2 || t2 && function(e3) {
              return y(e3) && !m(e3) && 65279 !== e3 && 13 !== e3 && 10 !== e3;
            }(t2));
          }
          function _(e2) {
            return /^\n* /.test(e2);
          }
          function g(e2, t2, r2, n2, i2) {
            var o2, a2, s2, u2, l2 = false, c2 = false, h2 = -1 !== n2, p2 = -1, f2 = y(u2 = e2.charCodeAt(0)) && 65279 !== u2 && !m(u2) && 45 !== u2 && 63 !== u2 && 58 !== u2 && 44 !== u2 && 91 !== u2 && 93 !== u2 && 123 !== u2 && 125 !== u2 && 35 !== u2 && 38 !== u2 && 42 !== u2 && 33 !== u2 && 124 !== u2 && 61 !== u2 && 62 !== u2 && 39 !== u2 && 34 !== u2 && 37 !== u2 && 64 !== u2 && 96 !== u2 && !m(e2.charCodeAt(e2.length - 1));
            if (t2)
              for (o2 = 0; o2 < e2.length; o2++) {
                if (!y(a2 = e2.charCodeAt(o2)))
                  return 5;
                s2 = o2 > 0 ? e2.charCodeAt(o2 - 1) : null, f2 = f2 && v(a2, s2);
              }
            else {
              for (o2 = 0; o2 < e2.length; o2++) {
                if (10 === (a2 = e2.charCodeAt(o2)))
                  l2 = true, h2 && (c2 = c2 || o2 - p2 - 1 > n2 && " " !== e2[p2 + 1], p2 = o2);
                else if (!y(a2))
                  return 5;
                s2 = o2 > 0 ? e2.charCodeAt(o2 - 1) : null, f2 = f2 && v(a2, s2);
              }
              c2 = c2 || h2 && o2 - p2 - 1 > n2 && " " !== e2[p2 + 1];
            }
            return l2 || c2 ? r2 > 9 && _(e2) ? 5 : c2 ? 4 : 3 : f2 && !i2(e2) ? 1 : 2;
          }
          function b(e2, t2, r2, n2) {
            e2.dump = function() {
              if (0 === t2.length)
                return "''";
              if (!e2.noCompatMode && -1 !== c.indexOf(t2))
                return "'" + t2 + "'";
              var o2 = e2.indent * Math.max(1, r2), a2 = -1 === e2.lineWidth ? -1 : Math.max(Math.min(e2.lineWidth, 40), e2.lineWidth - o2), s2 = n2 || e2.flowLevel > -1 && r2 >= e2.flowLevel;
              switch (g(t2, s2, e2.indent, a2, function(t3) {
                return function(e3, t4) {
                  var r3, n3;
                  for (r3 = 0, n3 = e3.implicitTypes.length; r3 < n3; r3 += 1)
                    if (e3.implicitTypes[r3].resolve(t4))
                      return true;
                  return false;
                }(e2, t3);
              })) {
                case 1:
                  return t2;
                case 2:
                  return "'" + t2.replace(/'/g, "''") + "'";
                case 3:
                  return "|" + x(t2, e2.indent) + w(f(t2, o2));
                case 4:
                  return ">" + x(t2, e2.indent) + w(f(function(e3, t3) {
                    var r3, n3, i2 = /(\n+)([^\n]*)/g, o3 = (s3 = e3.indexOf("\n"), s3 = -1 !== s3 ? s3 : e3.length, i2.lastIndex = s3, E(e3.slice(0, s3), t3)), a3 = "\n" === e3[0] || " " === e3[0];
                    var s3;
                    for (; n3 = i2.exec(e3); ) {
                      var u2 = n3[1], l2 = n3[2];
                      r3 = " " === l2[0], o3 += u2 + (a3 || r3 || "" === l2 ? "" : "\n") + E(l2, t3), a3 = r3;
                    }
                    return o3;
                  }(t2, a2), o2));
                case 5:
                  return '"' + function(e3) {
                    for (var t3, r3, n3, i2 = "", o3 = 0; o3 < e3.length; o3++)
                      (t3 = e3.charCodeAt(o3)) >= 55296 && t3 <= 56319 && (r3 = e3.charCodeAt(o3 + 1)) >= 56320 && r3 <= 57343 ? (i2 += h(1024 * (t3 - 55296) + r3 - 56320 + 65536), o3++) : (n3 = l[t3], i2 += !n3 && y(t3) ? e3[o3] : n3 || h(t3));
                    return i2;
                  }(t2) + '"';
                default:
                  throw new i("impossible error: invalid scalar style");
              }
            }();
          }
          function x(e2, t2) {
            var r2 = _(e2) ? String(t2) : "", n2 = "\n" === e2[e2.length - 1];
            return r2 + (n2 && ("\n" === e2[e2.length - 2] || "\n" === e2) ? "+" : n2 ? "" : "-") + "\n";
          }
          function w(e2) {
            return "\n" === e2[e2.length - 1] ? e2.slice(0, -1) : e2;
          }
          function E(e2, t2) {
            if ("" === e2 || " " === e2[0])
              return e2;
            for (var r2, n2, i2 = / [^ ]/g, o2 = 0, a2 = 0, s2 = 0, u2 = ""; r2 = i2.exec(e2); )
              (s2 = r2.index) - o2 > t2 && (n2 = a2 > o2 ? a2 : s2, u2 += "\n" + e2.slice(o2, n2), o2 = n2 + 1), a2 = s2;
            return u2 += "\n", e2.length - o2 > t2 && a2 > o2 ? u2 += e2.slice(o2, a2) + "\n" + e2.slice(a2 + 1) : u2 += e2.slice(o2), u2.slice(1);
          }
          function D(e2, t2, r2) {
            var n2, o2, a2, l2, c2, h2;
            for (a2 = 0, l2 = (o2 = r2 ? e2.explicitTypes : e2.implicitTypes).length; a2 < l2; a2 += 1)
              if (((c2 = o2[a2]).instanceOf || c2.predicate) && (!c2.instanceOf || "object" == typeof t2 && t2 instanceof c2.instanceOf) && (!c2.predicate || c2.predicate(t2))) {
                if (e2.tag = r2 ? c2.tag : "?", c2.represent) {
                  if (h2 = e2.styleMap[c2.tag] || c2.defaultStyle, "[object Function]" === s.call(c2.represent))
                    n2 = c2.represent(t2, h2);
                  else {
                    if (!u.call(c2.represent, h2))
                      throw new i("!<" + c2.tag + '> tag resolver accepts not "' + h2 + '" style');
                    n2 = c2.represent[h2](t2, h2);
                  }
                  e2.dump = n2;
                }
                return true;
              }
            return false;
          }
          function S(e2, t2, r2, n2, o2, a2) {
            e2.tag = null, e2.dump = r2, D(e2, r2, false) || D(e2, r2, true);
            var u2 = s.call(e2.dump);
            n2 && (n2 = e2.flowLevel < 0 || e2.flowLevel > t2);
            var l2, c2, h2 = "[object Object]" === u2 || "[object Array]" === u2;
            if (h2 && (c2 = -1 !== (l2 = e2.duplicates.indexOf(r2))), (null !== e2.tag && "?" !== e2.tag || c2 || 2 !== e2.indent && t2 > 0) && (o2 = false), c2 && e2.usedDuplicates[l2])
              e2.dump = "*ref_" + l2;
            else {
              if (h2 && c2 && !e2.usedDuplicates[l2] && (e2.usedDuplicates[l2] = true), "[object Object]" === u2)
                n2 && 0 !== Object.keys(e2.dump).length ? (!function(e3, t3, r3, n3) {
                  var o3, a3, s2, u3, l3, c3, h3 = "", p3 = e3.tag, f2 = Object.keys(r3);
                  if (true === e3.sortKeys)
                    f2.sort();
                  else if ("function" == typeof e3.sortKeys)
                    f2.sort(e3.sortKeys);
                  else if (e3.sortKeys)
                    throw new i("sortKeys must be a boolean or a function");
                  for (o3 = 0, a3 = f2.length; o3 < a3; o3 += 1)
                    c3 = "", n3 && 0 === o3 || (c3 += d(e3, t3)), u3 = r3[s2 = f2[o3]], S(e3, t3 + 1, s2, true, true, true) && ((l3 = null !== e3.tag && "?" !== e3.tag || e3.dump && e3.dump.length > 1024) && (e3.dump && 10 === e3.dump.charCodeAt(0) ? c3 += "?" : c3 += "? "), c3 += e3.dump, l3 && (c3 += d(e3, t3)), S(e3, t3 + 1, u3, true, l3) && (e3.dump && 10 === e3.dump.charCodeAt(0) ? c3 += ":" : c3 += ": ", h3 += c3 += e3.dump));
                  e3.tag = p3, e3.dump = h3 || "{}";
                }(e2, t2, e2.dump, o2), c2 && (e2.dump = "&ref_" + l2 + e2.dump)) : (!function(e3, t3, r3) {
                  var n3, i2, o3, a3, s2, u3 = "", l3 = e3.tag, c3 = Object.keys(r3);
                  for (n3 = 0, i2 = c3.length; n3 < i2; n3 += 1)
                    s2 = "", 0 !== n3 && (s2 += ", "), e3.condenseFlow && (s2 += '"'), a3 = r3[o3 = c3[n3]], S(e3, t3, o3, false, false) && (e3.dump.length > 1024 && (s2 += "? "), s2 += e3.dump + (e3.condenseFlow ? '"' : "") + ":" + (e3.condenseFlow ? "" : " "), S(e3, t3, a3, false, false) && (u3 += s2 += e3.dump));
                  e3.tag = l3, e3.dump = "{" + u3 + "}";
                }(e2, t2, e2.dump), c2 && (e2.dump = "&ref_" + l2 + " " + e2.dump));
              else if ("[object Array]" === u2) {
                var p2 = e2.noArrayIndent && t2 > 0 ? t2 - 1 : t2;
                n2 && 0 !== e2.dump.length ? (!function(e3, t3, r3, n3) {
                  var i2, o3, a3 = "", s2 = e3.tag;
                  for (i2 = 0, o3 = r3.length; i2 < o3; i2 += 1)
                    S(e3, t3 + 1, r3[i2], true, true) && (n3 && 0 === i2 || (a3 += d(e3, t3)), e3.dump && 10 === e3.dump.charCodeAt(0) ? a3 += "-" : a3 += "- ", a3 += e3.dump);
                  e3.tag = s2, e3.dump = a3 || "[]";
                }(e2, p2, e2.dump, o2), c2 && (e2.dump = "&ref_" + l2 + e2.dump)) : (!function(e3, t3, r3) {
                  var n3, i2, o3 = "", a3 = e3.tag;
                  for (n3 = 0, i2 = r3.length; n3 < i2; n3 += 1)
                    S(e3, t3, r3[n3], false, false) && (0 !== n3 && (o3 += "," + (e3.condenseFlow ? "" : " ")), o3 += e3.dump);
                  e3.tag = a3, e3.dump = "[" + o3 + "]";
                }(e2, p2, e2.dump), c2 && (e2.dump = "&ref_" + l2 + " " + e2.dump));
              } else {
                if ("[object String]" !== u2) {
                  if (e2.skipInvalid)
                    return false;
                  throw new i("unacceptable kind of an object to dump " + u2);
                }
                "?" !== e2.tag && b(e2, e2.dump, t2, a2);
              }
              null !== e2.tag && "?" !== e2.tag && (e2.dump = "!<" + e2.tag + "> " + e2.dump);
            }
            return true;
          }
          function C(e2, t2) {
            var r2, n2, i2 = [], o2 = [];
            for (function e3(t3, r3, n3) {
              var i3, o3, a2;
              if (null !== t3 && "object" == typeof t3)
                if (-1 !== (o3 = r3.indexOf(t3)))
                  -1 === n3.indexOf(o3) && n3.push(o3);
                else if (r3.push(t3), Array.isArray(t3))
                  for (o3 = 0, a2 = t3.length; o3 < a2; o3 += 1)
                    e3(t3[o3], r3, n3);
                else
                  for (i3 = Object.keys(t3), o3 = 0, a2 = i3.length; o3 < a2; o3 += 1)
                    e3(t3[i3[o3]], r3, n3);
            }(e2, i2, o2), r2 = 0, n2 = o2.length; r2 < n2; r2 += 1)
              t2.duplicates.push(i2[o2[r2]]);
            t2.usedDuplicates = new Array(n2);
          }
          function A(e2, t2) {
            var r2 = new p(t2 = t2 || {});
            return r2.noRefs || C(e2, r2), S(r2, 0, e2, true, true) ? r2.dump + "\n" : "";
          }
          e.exports.dump = A, e.exports.safeDump = function(e2, t2) {
            return A(e2, n.extend({ schema: a }, t2));
          };
        }, function(e, t, r) {
          "use strict";
          r(31), r(32), r(33), r(64), r(19), r(65), r(20), r(68), r(92), r(144), r(22), r(94), r(23);
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          }), o = this && this.__values || function(e2) {
            var t2 = "function" == typeof Symbol && Symbol.iterator, r2 = t2 && e2[t2], n2 = 0;
            if (r2)
              return r2.call(e2);
            if (e2 && "number" == typeof e2.length)
              return { next: function() {
                return e2 && n2 >= e2.length && (e2 = void 0), { value: e2 && e2[n2++], done: !e2 };
              } };
            throw new TypeError(t2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          }, a = this && this.__read || function(e2, t2) {
            var r2 = "function" == typeof Symbol && e2[Symbol.iterator];
            if (!r2)
              return e2;
            var n2, i2, o2 = r2.call(e2), a2 = [];
            try {
              for (; (void 0 === t2 || t2-- > 0) && !(n2 = o2.next()).done; )
                a2.push(n2.value);
            } catch (e3) {
              i2 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return a2;
          };
          Object.defineProperty(t, "__esModule", { value: true });
          var s = r(91), u = r(2), l = r(183), c = r(0), h = r(7), p = r(95), f = r(69), d = r(3), m = r(306), y = r(307), v = r(308), _ = function(e2) {
            function t2(t3, r2) {
              void 0 === r2 && (r2 = false);
              var n2 = e2.call(this) || this;
              return n2._hasDeclaration = false, n2._docTypeName = "", n2._hasDocumentElement = false, n2._currentElementSerialized = false, n2._openTags = [], n2._ended = false, n2._fragment = r2, n2._options = u.applyDefaults(t3 || {}, s.DefaultXMLBuilderCBOptions), n2._builderOptions = { defaultNamespace: n2._options.defaultNamespace, namespaceAlias: n2._options.namespaceAlias }, "json" === n2._options.format ? n2._writer = new y.JSONCBWriter(n2._options) : "yaml" === n2._options.format ? n2._writer = new v.YAMLCBWriter(n2._options) : n2._writer = new m.XMLCBWriter(n2._options), void 0 !== n2._options.data && n2.on("data", n2._options.data), void 0 !== n2._options.end && n2.on("end", n2._options.end), void 0 !== n2._options.error && n2.on("error", n2._options.error), n2._prefixMap = new p.NamespacePrefixMap(), n2._prefixMap.set("xml", h.namespace.XML), n2._prefixIndex = { value: 1 }, n2._push(n2._writer.frontMatter()), n2;
            }
            return i(t2, e2), t2.prototype.ele = function(e3, t3, r2) {
              var n2, i2;
              if (u.isObject(e3) || u.isString(e3) && (/^\s*</.test(e3) || /^\s*[\{\[]/.test(e3) || /^(\s*|(#.*)|(%.*))*---/.test(e3))) {
                var a2 = l.fragment().set(this._options);
                try {
                  a2.ele(e3);
                } catch (e4) {
                  return this.emit("error", e4), this;
                }
                try {
                  for (var s2 = o(a2.node.childNodes), c2 = s2.next(); !c2.done; c2 = s2.next()) {
                    var h2 = c2.value;
                    this._fromNode(h2);
                  }
                } catch (e4) {
                  n2 = { error: e4 };
                } finally {
                  try {
                    c2 && !c2.done && (i2 = s2.return) && i2.call(s2);
                  } finally {
                    if (n2)
                      throw n2.error;
                  }
                }
                return this;
              }
              if (this._serializeOpenTag(true), !this._fragment && this._hasDocumentElement && 0 === this._writer.level)
                return this.emit("error", new Error("Document cannot have multiple document element nodes.")), this;
              try {
                this._currentElement = l.fragment(this._builderOptions).ele(e3, t3, r2);
              } catch (e4) {
                return this.emit("error", e4), this;
              }
              return this._fragment || this._hasDocumentElement || "" === this._docTypeName || this._currentElement.node._qualifiedName === this._docTypeName ? (this._currentElementSerialized = false, this._fragment || (this._hasDocumentElement = true), this) : (this.emit("error", new Error("Document element name does not match DocType declaration name.")), this);
            }, t2.prototype.att = function(e3, t3, r2) {
              if (void 0 === this._currentElement)
                return this.emit("error", new Error("Cannot insert an attribute node as child of a document node.")), this;
              try {
                this._currentElement.att(e3, t3, r2);
              } catch (e4) {
                return this.emit("error", e4), this;
              }
              return this;
            }, t2.prototype.com = function(e3) {
              var t3;
              this._serializeOpenTag(true);
              try {
                t3 = l.fragment(this._builderOptions).com(e3).first().node;
              } catch (e4) {
                return this.emit("error", e4), this;
              }
              return !this._options.wellFormed || c.xml_isLegalChar(t3.data) && -1 === t3.data.indexOf("--") && !t3.data.endsWith("-") ? (this._push(this._writer.comment(t3.data)), this) : (this.emit("error", new Error("Comment data contains invalid characters (well-formed required).")), this);
            }, t2.prototype.txt = function(e3) {
              if (!this._fragment && void 0 === this._currentElement)
                return this.emit("error", new Error("Cannot insert a text node as child of a document node.")), this;
              var t3;
              this._serializeOpenTag(true);
              try {
                t3 = l.fragment(this._builderOptions).txt(e3).first().node;
              } catch (e4) {
                return this.emit("error", e4), this;
              }
              if (this._options.wellFormed && !c.xml_isLegalChar(t3.data))
                return this.emit("error", new Error("Text data contains invalid characters (well-formed required).")), this;
              var r2 = t3.data.replace(/(?!&(lt|gt|amp|apos|quot);)&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
              return this._push(this._writer.text(r2)), this;
            }, t2.prototype.ins = function(e3, t3) {
              var r2;
              void 0 === t3 && (t3 = ""), this._serializeOpenTag(true);
              try {
                r2 = l.fragment(this._builderOptions).ins(e3, t3).first().node;
              } catch (e4) {
                return this.emit("error", e4), this;
              }
              return this._options.wellFormed && (-1 !== r2.target.indexOf(":") || /^xml$/i.test(r2.target)) ? (this.emit("error", new Error("Processing instruction target contains invalid characters (well-formed required).")), this) : this._options.wellFormed && !c.xml_isLegalChar(r2.data) ? (this.emit("error", Error("Processing instruction data contains invalid characters (well-formed required).")), this) : (this._push(this._writer.instruction(r2.target, r2.data)), this);
            }, t2.prototype.dat = function(e3) {
              var t3;
              this._serializeOpenTag(true);
              try {
                t3 = l.fragment(this._builderOptions).dat(e3).first().node;
              } catch (e4) {
                return this.emit("error", e4), this;
              }
              return this._push(this._writer.cdata(t3.data)), this;
            }, t2.prototype.dec = function(e3) {
              return void 0 === e3 && (e3 = { version: "1.0" }), this._fragment ? (this.emit("error", Error("Cannot insert an XML declaration into a document fragment.")), this) : this._hasDeclaration ? (this.emit("error", Error("XML declaration is already inserted.")), this) : (this._push(this._writer.declaration(e3.version || "1.0", e3.encoding, e3.standalone)), this._hasDeclaration = true, this);
            }, t2.prototype.dtd = function(e3) {
              if (this._fragment)
                return this.emit("error", Error("Cannot insert a DocType declaration into a document fragment.")), this;
              if ("" !== this._docTypeName)
                return this.emit("error", new Error("DocType declaration is already inserted.")), this;
              if (this._hasDocumentElement)
                return this.emit("error", new Error("Cannot insert DocType declaration after document element.")), this;
              var t3;
              try {
                t3 = l.create().dtd(e3).first().node;
              } catch (e4) {
                return this.emit("error", e4), this;
              }
              return this._options.wellFormed && !c.xml_isPubidChar(t3.publicId) ? (this.emit("error", new Error("DocType public identifier does not match PubidChar construct (well-formed required).")), this) : this._options.wellFormed && (!c.xml_isLegalChar(t3.systemId) || -1 !== t3.systemId.indexOf('"') && -1 !== t3.systemId.indexOf("'")) ? (this.emit("error", new Error("DocType system identifier contains invalid characters (well-formed required).")), this) : (this._docTypeName = e3.name, this._push(this._writer.docType(e3.name, t3.publicId, t3.systemId)), this);
            }, t2.prototype.import = function(e3) {
              var t3, r2, n2 = l.fragment().set(this._options);
              try {
                n2.import(e3);
              } catch (e4) {
                return this.emit("error", e4), this;
              }
              try {
                for (var i2 = o(n2.node.childNodes), a2 = i2.next(); !a2.done; a2 = i2.next()) {
                  var s2 = a2.value;
                  this._fromNode(s2);
                }
              } catch (e4) {
                t3 = { error: e4 };
              } finally {
                try {
                  a2 && !a2.done && (r2 = i2.return) && r2.call(i2);
                } finally {
                  if (t3)
                    throw t3.error;
                }
              }
              return this;
            }, t2.prototype.up = function() {
              return this._serializeOpenTag(false), this._serializeCloseTag(), this;
            }, t2.prototype.end = function() {
              for (this._serializeOpenTag(false); this._openTags.length > 0; )
                this._serializeCloseTag();
              return this._push(null), this;
            }, t2.prototype._serializeOpenTag = function(e3) {
              if (!this._currentElementSerialized && void 0 !== this._currentElement) {
                var r2 = this._currentElement.node;
                if (!this._options.wellFormed || -1 === r2.localName.indexOf(":") && c.xml_isName(r2.localName)) {
                  var n2 = "", i2 = false, o2 = this._prefixMap.copy(), a2 = {}, s2 = this._recordNamespaceInformation(r2, o2, a2), u2 = 0 === this._openTags.length ? null : this._openTags[this._openTags.length - 1][1], l2 = r2.namespaceURI;
                  if (null === l2 && (l2 = u2), u2 === l2)
                    null !== s2 && (i2 = true), n2 = l2 === h.namespace.XML ? "xml:" + r2.localName : r2.localName, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2));
                  else {
                    var p2 = r2.prefix, f2 = null;
                    if (null === p2 && l2 === s2 || (f2 = o2.get(p2, l2)), "xmlns" === p2) {
                      if (this._options.wellFormed)
                        return void this.emit("error", new Error("An element cannot have the 'xmlns' prefix (well-formed required)."));
                      f2 = p2;
                    }
                    null !== f2 ? (n2 = f2 + ":" + r2.localName, null !== s2 && s2 !== h.namespace.XML && (u2 = s2 || null), this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2))) : null !== p2 ? (p2 in a2 && (p2 = this._generatePrefix(l2, o2, this._prefixIndex)), o2.set(p2, l2), n2 += p2 + ":" + r2.localName, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2)), this._push(this._writer.attribute("xmlns:" + p2, this._serializeAttributeValue(l2, this._options.wellFormed))), null !== s2 && (u2 = s2 || null)) : null === s2 || null !== s2 && s2 !== l2 ? (i2 = true, n2 += r2.localName, u2 = l2, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2)), this._push(this._writer.attribute("xmlns", this._serializeAttributeValue(l2, this._options.wellFormed)))) : (n2 += r2.localName, u2 = l2, this._writer.beginElement(n2), this._push(this._writer.openTagBegin(n2)));
                  }
                  this._serializeAttributes(r2, o2, this._prefixIndex, a2, i2, this._options.wellFormed);
                  var d2 = l2 === h.namespace.HTML;
                  d2 && !e3 && t2._VoidElementNames.has(r2.localName) ? (this._push(this._writer.openTagEnd(n2, true, true)), this._writer.endElement(n2)) : d2 || e3 ? this._push(this._writer.openTagEnd(n2, false, false)) : (this._push(this._writer.openTagEnd(n2, true, false)), this._writer.endElement(n2)), this._currentElementSerialized = true, this._openTags.push([n2, u2, this._prefixMap, e3]), this._isPrefixMapModified(this._prefixMap, o2) && (this._prefixMap = o2), this._writer.level++;
                } else
                  this.emit("error", new Error("Node local name contains invalid characters (well-formed required)."));
              }
            }, t2.prototype._serializeCloseTag = function() {
              this._writer.level--;
              var e3 = this._openTags.pop();
              if (void 0 !== e3) {
                var t3 = a(e3, 4), r2 = t3[0], n2 = (t3[1], t3[2]), i2 = t3[3];
                this._prefixMap = n2, i2 && (this._push(this._writer.closeTag(r2)), this._writer.endElement(r2));
              } else
                this.emit("error", new Error("Last element is undefined."));
            }, t2.prototype._push = function(e3) {
              null === e3 ? (this._ended = true, this.emit("end")) : this._ended ? this.emit("error", new Error("Cannot push to ended stream.")) : 0 !== e3.length && (this._writer.hasData = true, this.emit("data", e3, this._writer.level));
            }, t2.prototype._fromNode = function(e3) {
              var t3, r2, n2, i2;
              if (d.Guard.isElementNode(e3)) {
                var a2 = e3.prefix ? e3.prefix + ":" + e3.localName : e3.localName;
                null !== e3.namespaceURI ? this.ele(e3.namespaceURI, a2) : this.ele(a2);
                try {
                  for (var s2 = o(e3.attributes), u2 = s2.next(); !u2.done; u2 = s2.next()) {
                    var l2 = u2.value, c2 = l2.prefix ? l2.prefix + ":" + l2.localName : l2.localName;
                    null !== l2.namespaceURI ? this.att(l2.namespaceURI, c2, l2.value) : this.att(c2, l2.value);
                  }
                } catch (e4) {
                  t3 = { error: e4 };
                } finally {
                  try {
                    u2 && !u2.done && (r2 = s2.return) && r2.call(s2);
                  } finally {
                    if (t3)
                      throw t3.error;
                  }
                }
                try {
                  for (var h2 = o(e3.childNodes), p2 = h2.next(); !p2.done; p2 = h2.next()) {
                    var f2 = p2.value;
                    this._fromNode(f2);
                  }
                } catch (e4) {
                  n2 = { error: e4 };
                } finally {
                  try {
                    p2 && !p2.done && (i2 = h2.return) && i2.call(h2);
                  } finally {
                    if (n2)
                      throw n2.error;
                  }
                }
                this.up();
              } else
                d.Guard.isExclusiveTextNode(e3) && e3.data ? this.txt(e3.data) : d.Guard.isCommentNode(e3) ? this.com(e3.data) : d.Guard.isCDATASectionNode(e3) ? this.dat(e3.data) : d.Guard.isProcessingInstructionNode(e3) && this.ins(e3.target, e3.data);
            }, t2.prototype._serializeAttributes = function(e3, t3, r2, n2, i2, a2) {
              var s2, u2, l2 = a2 ? new f.LocalNameSet() : void 0;
              try {
                for (var p2 = o(e3.attributes), d2 = p2.next(); !d2.done; d2 = p2.next()) {
                  var m2 = d2.value;
                  if (a2 || i2 || null !== m2.namespaceURI) {
                    if (a2 && l2 && l2.has(m2.namespaceURI, m2.localName))
                      return void this.emit("error", new Error("Element contains duplicate attributes (well-formed required)."));
                    a2 && l2 && l2.set(m2.namespaceURI, m2.localName);
                    var y2 = m2.namespaceURI, v2 = null;
                    if (null !== y2)
                      if (v2 = t3.get(m2.prefix, y2), y2 === h.namespace.XMLNS) {
                        if (m2.value === h.namespace.XML || null === m2.prefix && i2 || null !== m2.prefix && (!(m2.localName in n2) || n2[m2.localName] !== m2.value) && t3.has(m2.localName, m2.value))
                          continue;
                        if (a2 && m2.value === h.namespace.XMLNS)
                          return void this.emit("error", new Error("XMLNS namespace is reserved (well-formed required)."));
                        if (a2 && "" === m2.value)
                          return void this.emit("error", new Error("Namespace prefix declarations cannot be used to undeclare a namespace (well-formed required)."));
                        "xmlns" === m2.prefix && (v2 = "xmlns");
                      } else
                        null === v2 && (v2 = null === m2.prefix || t3.hasPrefix(m2.prefix) && !t3.has(m2.prefix, y2) ? this._generatePrefix(y2, t3, r2) : m2.prefix, this._push(this._writer.attribute("xmlns:" + v2, this._serializeAttributeValue(y2, this._options.wellFormed))));
                    if (a2 && (-1 !== m2.localName.indexOf(":") || !c.xml_isName(m2.localName) || "xmlns" === m2.localName && null === y2))
                      return void this.emit("error", new Error("Attribute local name contains invalid characters (well-formed required)."));
                    this._push(this._writer.attribute((null !== v2 ? v2 + ":" : "") + m2.localName, this._serializeAttributeValue(m2.value, this._options.wellFormed)));
                  } else
                    this._push(this._writer.attribute(m2.localName, this._serializeAttributeValue(m2.value, this._options.wellFormed)));
                }
              } catch (e4) {
                s2 = { error: e4 };
              } finally {
                try {
                  d2 && !d2.done && (u2 = p2.return) && u2.call(p2);
                } finally {
                  if (s2)
                    throw s2.error;
                }
              }
            }, t2.prototype._serializeAttributeValue = function(e3, t3) {
              return t3 && null !== e3 && !c.xml_isLegalChar(e3) ? (this.emit("error", new Error("Invalid characters in attribute value.")), "") : null === e3 ? "" : e3.replace(/(?!&(lt|gt|amp|apos|quot);)&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
            }, t2.prototype._recordNamespaceInformation = function(e3, t3, r2) {
              var n2, i2, a2 = null;
              try {
                for (var s2 = o(e3.attributes), u2 = s2.next(); !u2.done; u2 = s2.next()) {
                  var l2 = u2.value, c2 = l2.namespaceURI, p2 = l2.prefix;
                  if (c2 === h.namespace.XMLNS) {
                    if (null === p2) {
                      a2 = l2.value;
                      continue;
                    }
                    var f2 = l2.localName, d2 = l2.value;
                    if (d2 === h.namespace.XML)
                      continue;
                    if ("" === d2 && (d2 = null), t3.has(f2, d2))
                      continue;
                    t3.set(f2, d2), r2[f2] = d2 || "";
                  }
                }
              } catch (e4) {
                n2 = { error: e4 };
              } finally {
                try {
                  u2 && !u2.done && (i2 = s2.return) && i2.call(s2);
                } finally {
                  if (n2)
                    throw n2.error;
                }
              }
              return a2;
            }, t2.prototype._generatePrefix = function(e3, t3, r2) {
              var n2 = "ns" + r2.value;
              return r2.value++, t3.set(n2, e3), n2;
            }, t2.prototype._isPrefixMapModified = function(e3, t3) {
              var r2 = e3._items, n2 = t3._items, i2 = e3._nullItems, o2 = t3._nullItems;
              for (var a2 in n2) {
                var s2 = r2[a2];
                if (void 0 === s2)
                  return true;
                var u2 = n2[a2];
                if (s2.length !== u2.length)
                  return true;
                for (var l2 = 0; l2 < s2.length; l2++)
                  if (s2[l2] !== u2[l2])
                    return true;
              }
              if (i2.length !== o2.length)
                return true;
              for (l2 = 0; l2 < i2.length; l2++)
                if (i2[l2] !== o2[l2])
                  return true;
              return false;
            }, t2._VoidElementNames = /* @__PURE__ */ new Set(["area", "base", "basefont", "bgsound", "br", "col", "embed", "frame", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]), t2;
          }(r(309).EventEmitter);
          t.XMLBuilderCBImpl = _;
        }, function(e, t, r) {
          "use strict";
          r(74);
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = function(e2) {
            function t2(t3) {
              var r2 = e2.call(this, t3) || this;
              return r2._lineLength = 0, r2;
            }
            return i(t2, e2), t2.prototype.frontMatter = function() {
              return "";
            }, t2.prototype.declaration = function(e3, t3, r2) {
              var n2 = this._beginLine() + "<?xml";
              return n2 += ' version="' + e3 + '"', void 0 !== t3 && (n2 += ' encoding="' + t3 + '"'), void 0 !== r2 && (n2 += ' standalone="' + (r2 ? "yes" : "no") + '"'), n2 += "?>";
            }, t2.prototype.docType = function(e3, t3, r2) {
              var n2 = this._beginLine();
              return n2 += t3 && r2 ? "<!DOCTYPE " + e3 + ' PUBLIC "' + t3 + '" "' + r2 + '">' : t3 ? "<!DOCTYPE " + e3 + ' PUBLIC "' + t3 + '">' : r2 ? "<!DOCTYPE " + e3 + ' SYSTEM "' + r2 + '">' : "<!DOCTYPE " + e3 + ">";
            }, t2.prototype.comment = function(e3) {
              return this._beginLine() + "<!--" + e3 + "-->";
            }, t2.prototype.text = function(e3) {
              return this._beginLine() + e3;
            }, t2.prototype.instruction = function(e3, t3) {
              return t3 ? this._beginLine() + "<?" + e3 + " " + t3 + "?>" : this._beginLine() + "<?" + e3 + "?>";
            }, t2.prototype.cdata = function(e3) {
              return this._beginLine() + "<![CDATA[" + e3 + "]]>";
            }, t2.prototype.openTagBegin = function(e3) {
              return this._lineLength += 1 + e3.length, this._beginLine() + "<" + e3;
            }, t2.prototype.openTagEnd = function(e3, t3, r2) {
              return r2 ? " />" : t3 ? this._writerOptions.allowEmptyTags ? "></" + e3 + ">" : this._writerOptions.spaceBeforeSlash ? " />" : "/>" : ">";
            }, t2.prototype.closeTag = function(e3) {
              return this._beginLine() + "</" + e3 + ">";
            }, t2.prototype.attribute = function(e3, t3) {
              var r2 = e3 + '="' + t3 + '"';
              return this._writerOptions.prettyPrint && this._writerOptions.width > 0 && this._lineLength + 1 + r2.length > this._writerOptions.width ? (r2 = this._beginLine() + this._indent(1) + r2, this._lineLength = r2.length, r2) : (this._lineLength += 1 + r2.length, " " + r2);
            }, t2.prototype.beginElement = function(e3) {
            }, t2.prototype.endElement = function(e3) {
            }, t2.prototype._beginLine = function() {
              if (this._writerOptions.prettyPrint) {
                var e3 = (this.hasData ? this._writerOptions.newline : "") + this._indent(this._writerOptions.offset + this.level);
                return this._lineLength = e3.length, e3;
              }
              return "";
            }, t2.prototype._indent = function(e3) {
              return e3 <= 0 ? "" : this._writerOptions.indent.repeat(e3);
            }, t2;
          }(r(114).BaseCBWriter);
          t.XMLCBWriter = o;
        }, function(e, t, r) {
          "use strict";
          r(74);
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = function(e2) {
            function t2(t3) {
              var r2 = e2.call(this, t3) || this;
              return r2._hasChildren = [], r2._additionalLevel = 0, r2;
            }
            return i(t2, e2), t2.prototype.frontMatter = function() {
              return "";
            }, t2.prototype.declaration = function(e3, t3, r2) {
              return "";
            }, t2.prototype.docType = function(e3, t3, r2) {
              return "";
            }, t2.prototype.comment = function(e3) {
              return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.comment) + this._sep() + this._val(e3) + this._sep() + "}";
            }, t2.prototype.text = function(e3) {
              return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.text) + this._sep() + this._val(e3) + this._sep() + "}";
            }, t2.prototype.instruction = function(e3, t3) {
              return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.ins) + this._sep() + this._val(t3 ? e3 + " " + t3 : e3) + this._sep() + "}";
            }, t2.prototype.cdata = function(e3) {
              return this._comma() + this._beginLine() + "{" + this._sep() + this._key(this._builderOptions.convert.cdata) + this._sep() + this._val(e3) + this._sep() + "}";
            }, t2.prototype.attribute = function(e3, t3) {
              return this._comma() + this._beginLine(1) + "{" + this._sep() + this._key(this._builderOptions.convert.att + e3) + this._sep() + this._val(t3) + this._sep() + "}";
            }, t2.prototype.openTagBegin = function(e3) {
              var t3 = this._comma() + this._beginLine() + "{" + this._sep() + this._key(e3) + this._sep() + "{";
              return this._additionalLevel++, this.hasData = true, t3 += this._beginLine() + this._key(this._builderOptions.convert.text) + this._sep() + "[", this._hasChildren.push(false), t3;
            }, t2.prototype.openTagEnd = function(e3, t3, r2) {
              if (t3) {
                var n2 = this._sep() + "]";
                return this._additionalLevel--, n2 += this._beginLine() + "}" + this._sep() + "}";
              }
              return "";
            }, t2.prototype.closeTag = function(e3) {
              var t3 = this._beginLine() + "]";
              return this._additionalLevel--, t3 += this._beginLine() + "}" + this._sep() + "}";
            }, t2.prototype.beginElement = function(e3) {
            }, t2.prototype.endElement = function(e3) {
              this._hasChildren.pop();
            }, t2.prototype._beginLine = function(e3) {
              return void 0 === e3 && (e3 = 0), this._writerOptions.prettyPrint ? (this.hasData ? this._writerOptions.newline : "") + this._indent(this._writerOptions.offset + this.level + e3) : "";
            }, t2.prototype._indent = function(e3) {
              return e3 + this._additionalLevel <= 0 ? "" : this._writerOptions.indent.repeat(e3 + this._additionalLevel);
            }, t2.prototype._comma = function() {
              var e3 = this._hasChildren[this._hasChildren.length - 1] ? "," : "";
              return this._hasChildren.length > 0 && (this._hasChildren[this._hasChildren.length - 1] = true), e3;
            }, t2.prototype._sep = function() {
              return this._writerOptions.prettyPrint ? " " : "";
            }, t2.prototype._key = function(e3) {
              return '"' + e3 + '":';
            }, t2.prototype._val = function(e3) {
              return JSON.stringify(e3);
            }, t2;
          }(r(114).BaseCBWriter);
          t.JSONCBWriter = o;
        }, function(e, t, r) {
          "use strict";
          r(74);
          var n, i = this && this.__extends || (n = function(e2, t2) {
            return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e3, t3) {
              e3.__proto__ = t3;
            } || function(e3, t3) {
              for (var r2 in t3)
                t3.hasOwnProperty(r2) && (e3[r2] = t3[r2]);
            })(e2, t2);
          }, function(e2, t2) {
            function r2() {
              this.constructor = e2;
            }
            n(e2, t2), e2.prototype = null === t2 ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
          });
          Object.defineProperty(t, "__esModule", { value: true });
          var o = function(e2) {
            function t2(t3) {
              var r2 = e2.call(this, t3) || this;
              if (r2._rootWritten = false, r2._additionalLevel = 0, t3.indent.length < 2)
                throw new Error("YAML indententation string must be at least two characters long.");
              if (t3.offset < 0)
                throw new Error("YAML offset should be zero or a positive number.");
              return r2;
            }
            return i(t2, e2), t2.prototype.frontMatter = function() {
              return this._beginLine() + "---";
            }, t2.prototype.declaration = function(e3, t3, r2) {
              return "";
            }, t2.prototype.docType = function(e3, t3, r2) {
              return "";
            }, t2.prototype.comment = function(e3) {
              return this._beginLine() + this._key(this._builderOptions.convert.comment) + " " + this._val(e3);
            }, t2.prototype.text = function(e3) {
              return this._beginLine() + this._key(this._builderOptions.convert.text) + " " + this._val(e3);
            }, t2.prototype.instruction = function(e3, t3) {
              return this._beginLine() + this._key(this._builderOptions.convert.ins) + " " + this._val(t3 ? e3 + " " + t3 : e3);
            }, t2.prototype.cdata = function(e3) {
              return this._beginLine() + this._key(this._builderOptions.convert.cdata) + " " + this._val(e3);
            }, t2.prototype.attribute = function(e3, t3) {
              this._additionalLevel++;
              var r2 = this._beginLine() + this._key(this._builderOptions.convert.att + e3) + " " + this._val(t3);
              return this._additionalLevel--, r2;
            }, t2.prototype.openTagBegin = function(e3) {
              var t3 = this._beginLine() + this._key(e3);
              return this._rootWritten || (this._rootWritten = true), this.hasData = true, this._additionalLevel++, t3 += this._beginLine(true) + this._key(this._builderOptions.convert.text);
            }, t2.prototype.openTagEnd = function(e3, t3, r2) {
              return t3 ? " " + this._val("") : "";
            }, t2.prototype.closeTag = function(e3) {
              return this._additionalLevel--, "";
            }, t2.prototype.beginElement = function(e3) {
            }, t2.prototype.endElement = function(e3) {
            }, t2.prototype._beginLine = function(e3) {
              return void 0 === e3 && (e3 = false), (this.hasData ? this._writerOptions.newline : "") + this._indent(this._writerOptions.offset + this.level, e3);
            }, t2.prototype._indent = function(e3, t3) {
              if (e3 + this._additionalLevel <= 0)
                return "";
              var r2 = this._writerOptions.indent.repeat(e3 + this._additionalLevel);
              return !t3 && this._rootWritten ? r2.substr(0, r2.length - 2) + "-" + r2.substr(-1, 1) : r2;
            }, t2.prototype._key = function(e3) {
              return '"' + e3 + '":';
            }, t2.prototype._val = function(e3) {
              return JSON.stringify(e3);
            }, t2;
          }(r(114).BaseCBWriter);
          t.YAMLCBWriter = o;
        }, function(e, t, r) {
          "use strict";
          var n, i = "object" == typeof Reflect ? Reflect : null, o = i && "function" == typeof i.apply ? i.apply : function(e2, t2, r2) {
            return Function.prototype.apply.call(e2, t2, r2);
          };
          n = i && "function" == typeof i.ownKeys ? i.ownKeys : Object.getOwnPropertySymbols ? function(e2) {
            return Object.getOwnPropertyNames(e2).concat(Object.getOwnPropertySymbols(e2));
          } : function(e2) {
            return Object.getOwnPropertyNames(e2);
          };
          var a = Number.isNaN || function(e2) {
            return e2 != e2;
          };
          function s() {
            s.init.call(this);
          }
          e.exports = s, s.EventEmitter = s, s.prototype._events = void 0, s.prototype._eventsCount = 0, s.prototype._maxListeners = void 0;
          var u = 10;
          function l(e2) {
            if ("function" != typeof e2)
              throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e2);
          }
          function c(e2) {
            return void 0 === e2._maxListeners ? s.defaultMaxListeners : e2._maxListeners;
          }
          function h(e2, t2, r2, n2) {
            var i2, o2, a2, s2;
            if (l(r2), void 0 === (o2 = e2._events) ? (o2 = e2._events = /* @__PURE__ */ Object.create(null), e2._eventsCount = 0) : (void 0 !== o2.newListener && (e2.emit("newListener", t2, r2.listener ? r2.listener : r2), o2 = e2._events), a2 = o2[t2]), void 0 === a2)
              a2 = o2[t2] = r2, ++e2._eventsCount;
            else if ("function" == typeof a2 ? a2 = o2[t2] = n2 ? [r2, a2] : [a2, r2] : n2 ? a2.unshift(r2) : a2.push(r2), (i2 = c(e2)) > 0 && a2.length > i2 && !a2.warned) {
              a2.warned = true;
              var u2 = new Error("Possible EventEmitter memory leak detected. " + a2.length + " " + String(t2) + " listeners added. Use emitter.setMaxListeners() to increase limit");
              u2.name = "MaxListenersExceededWarning", u2.emitter = e2, u2.type = t2, u2.count = a2.length, s2 = u2, console && console.warn && console.warn(s2);
            }
            return e2;
          }
          function p() {
            if (!this.fired)
              return this.target.removeListener(this.type, this.wrapFn), this.fired = true, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
          }
          function f(e2, t2, r2) {
            var n2 = { fired: false, wrapFn: void 0, target: e2, type: t2, listener: r2 }, i2 = p.bind(n2);
            return i2.listener = r2, n2.wrapFn = i2, i2;
          }
          function d(e2, t2, r2) {
            var n2 = e2._events;
            if (void 0 === n2)
              return [];
            var i2 = n2[t2];
            return void 0 === i2 ? [] : "function" == typeof i2 ? r2 ? [i2.listener || i2] : [i2] : r2 ? function(e3) {
              for (var t3 = new Array(e3.length), r3 = 0; r3 < t3.length; ++r3)
                t3[r3] = e3[r3].listener || e3[r3];
              return t3;
            }(i2) : y(i2, i2.length);
          }
          function m(e2) {
            var t2 = this._events;
            if (void 0 !== t2) {
              var r2 = t2[e2];
              if ("function" == typeof r2)
                return 1;
              if (void 0 !== r2)
                return r2.length;
            }
            return 0;
          }
          function y(e2, t2) {
            for (var r2 = new Array(t2), n2 = 0; n2 < t2; ++n2)
              r2[n2] = e2[n2];
            return r2;
          }
          Object.defineProperty(s, "defaultMaxListeners", { enumerable: true, get: function() {
            return u;
          }, set: function(e2) {
            if ("number" != typeof e2 || e2 < 0 || a(e2))
              throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e2 + ".");
            u = e2;
          } }), s.init = function() {
            void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
          }, s.prototype.setMaxListeners = function(e2) {
            if ("number" != typeof e2 || e2 < 0 || a(e2))
              throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e2 + ".");
            return this._maxListeners = e2, this;
          }, s.prototype.getMaxListeners = function() {
            return c(this);
          }, s.prototype.emit = function(e2) {
            for (var t2 = [], r2 = 1; r2 < arguments.length; r2++)
              t2.push(arguments[r2]);
            var n2 = "error" === e2, i2 = this._events;
            if (void 0 !== i2)
              n2 = n2 && void 0 === i2.error;
            else if (!n2)
              return false;
            if (n2) {
              var a2;
              if (t2.length > 0 && (a2 = t2[0]), a2 instanceof Error)
                throw a2;
              var s2 = new Error("Unhandled error." + (a2 ? " (" + a2.message + ")" : ""));
              throw s2.context = a2, s2;
            }
            var u2 = i2[e2];
            if (void 0 === u2)
              return false;
            if ("function" == typeof u2)
              o(u2, this, t2);
            else {
              var l2 = u2.length, c2 = y(u2, l2);
              for (r2 = 0; r2 < l2; ++r2)
                o(c2[r2], this, t2);
            }
            return true;
          }, s.prototype.addListener = function(e2, t2) {
            return h(this, e2, t2, false);
          }, s.prototype.on = s.prototype.addListener, s.prototype.prependListener = function(e2, t2) {
            return h(this, e2, t2, true);
          }, s.prototype.once = function(e2, t2) {
            return l(t2), this.on(e2, f(this, e2, t2)), this;
          }, s.prototype.prependOnceListener = function(e2, t2) {
            return l(t2), this.prependListener(e2, f(this, e2, t2)), this;
          }, s.prototype.removeListener = function(e2, t2) {
            var r2, n2, i2, o2, a2;
            if (l(t2), void 0 === (n2 = this._events))
              return this;
            if (void 0 === (r2 = n2[e2]))
              return this;
            if (r2 === t2 || r2.listener === t2)
              0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : (delete n2[e2], n2.removeListener && this.emit("removeListener", e2, r2.listener || t2));
            else if ("function" != typeof r2) {
              for (i2 = -1, o2 = r2.length - 1; o2 >= 0; o2--)
                if (r2[o2] === t2 || r2[o2].listener === t2) {
                  a2 = r2[o2].listener, i2 = o2;
                  break;
                }
              if (i2 < 0)
                return this;
              0 === i2 ? r2.shift() : function(e3, t3) {
                for (; t3 + 1 < e3.length; t3++)
                  e3[t3] = e3[t3 + 1];
                e3.pop();
              }(r2, i2), 1 === r2.length && (n2[e2] = r2[0]), void 0 !== n2.removeListener && this.emit("removeListener", e2, a2 || t2);
            }
            return this;
          }, s.prototype.off = s.prototype.removeListener, s.prototype.removeAllListeners = function(e2) {
            var t2, r2, n2;
            if (void 0 === (r2 = this._events))
              return this;
            if (void 0 === r2.removeListener)
              return 0 === arguments.length ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : void 0 !== r2[e2] && (0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : delete r2[e2]), this;
            if (0 === arguments.length) {
              var i2, o2 = Object.keys(r2);
              for (n2 = 0; n2 < o2.length; ++n2)
                "removeListener" !== (i2 = o2[n2]) && this.removeAllListeners(i2);
              return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
            }
            if ("function" == typeof (t2 = r2[e2]))
              this.removeListener(e2, t2);
            else if (void 0 !== t2)
              for (n2 = t2.length - 1; n2 >= 0; n2--)
                this.removeListener(e2, t2[n2]);
            return this;
          }, s.prototype.listeners = function(e2) {
            return d(this, e2, true);
          }, s.prototype.rawListeners = function(e2) {
            return d(this, e2, false);
          }, s.listenerCount = function(e2, t2) {
            return "function" == typeof e2.listenerCount ? e2.listenerCount(t2) : m.call(e2, t2);
          }, s.prototype.listenerCount = m, s.prototype.eventNames = function() {
            return this._eventsCount > 0 ? n(this._events) : [];
          };
        }, function(e, t, r) {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: true });
          var n = r(77);
          t.createCB = function(e2) {
            return new n.XMLBuilderCBImpl(e2);
          }, t.fragmentCB = function(e2) {
            return new n.XMLBuilderCBImpl(e2, true);
          };
        }]);
      });
    }
  });

  // src/worker/zip.ts
  var import_jszip = __toESM(require_jszip_min(), 1);

  // node_modules/three/build/three.module.js
  var REVISION = "154";
  var CullFaceNone = 0;
  var CullFaceBack = 1;
  var CullFaceFront = 2;
  var PCFShadowMap = 1;
  var PCFSoftShadowMap = 2;
  var VSMShadowMap = 3;
  var FrontSide = 0;
  var BackSide = 1;
  var DoubleSide = 2;
  var NoBlending = 0;
  var NormalBlending = 1;
  var AdditiveBlending = 2;
  var SubtractiveBlending = 3;
  var MultiplyBlending = 4;
  var CustomBlending = 5;
  var AddEquation = 100;
  var SubtractEquation = 101;
  var ReverseSubtractEquation = 102;
  var MinEquation = 103;
  var MaxEquation = 104;
  var ZeroFactor = 200;
  var OneFactor = 201;
  var SrcColorFactor = 202;
  var OneMinusSrcColorFactor = 203;
  var SrcAlphaFactor = 204;
  var OneMinusSrcAlphaFactor = 205;
  var DstAlphaFactor = 206;
  var OneMinusDstAlphaFactor = 207;
  var DstColorFactor = 208;
  var OneMinusDstColorFactor = 209;
  var SrcAlphaSaturateFactor = 210;
  var NeverDepth = 0;
  var AlwaysDepth = 1;
  var LessDepth = 2;
  var LessEqualDepth = 3;
  var EqualDepth = 4;
  var GreaterEqualDepth = 5;
  var GreaterDepth = 6;
  var NotEqualDepth = 7;
  var MultiplyOperation = 0;
  var MixOperation = 1;
  var AddOperation = 2;
  var NoToneMapping = 0;
  var LinearToneMapping = 1;
  var ReinhardToneMapping = 2;
  var CineonToneMapping = 3;
  var ACESFilmicToneMapping = 4;
  var CustomToneMapping = 5;
  var UVMapping = 300;
  var CubeReflectionMapping = 301;
  var CubeRefractionMapping = 302;
  var EquirectangularReflectionMapping = 303;
  var EquirectangularRefractionMapping = 304;
  var CubeUVReflectionMapping = 306;
  var RepeatWrapping = 1e3;
  var ClampToEdgeWrapping = 1001;
  var MirroredRepeatWrapping = 1002;
  var NearestFilter = 1003;
  var NearestMipmapNearestFilter = 1004;
  var NearestMipmapLinearFilter = 1005;
  var LinearFilter = 1006;
  var LinearMipmapNearestFilter = 1007;
  var LinearMipmapLinearFilter = 1008;
  var UnsignedByteType = 1009;
  var ByteType = 1010;
  var ShortType = 1011;
  var UnsignedShortType = 1012;
  var IntType = 1013;
  var UnsignedIntType = 1014;
  var FloatType = 1015;
  var HalfFloatType = 1016;
  var UnsignedShort4444Type = 1017;
  var UnsignedShort5551Type = 1018;
  var UnsignedInt248Type = 1020;
  var AlphaFormat = 1021;
  var RGBAFormat = 1023;
  var LuminanceFormat = 1024;
  var LuminanceAlphaFormat = 1025;
  var DepthFormat = 1026;
  var DepthStencilFormat = 1027;
  var RedFormat = 1028;
  var RedIntegerFormat = 1029;
  var RGFormat = 1030;
  var RGIntegerFormat = 1031;
  var RGBAIntegerFormat = 1033;
  var RGB_S3TC_DXT1_Format = 33776;
  var RGBA_S3TC_DXT1_Format = 33777;
  var RGBA_S3TC_DXT3_Format = 33778;
  var RGBA_S3TC_DXT5_Format = 33779;
  var RGB_PVRTC_4BPPV1_Format = 35840;
  var RGB_PVRTC_2BPPV1_Format = 35841;
  var RGBA_PVRTC_4BPPV1_Format = 35842;
  var RGBA_PVRTC_2BPPV1_Format = 35843;
  var RGB_ETC1_Format = 36196;
  var RGB_ETC2_Format = 37492;
  var RGBA_ETC2_EAC_Format = 37496;
  var RGBA_ASTC_4x4_Format = 37808;
  var RGBA_ASTC_5x4_Format = 37809;
  var RGBA_ASTC_5x5_Format = 37810;
  var RGBA_ASTC_6x5_Format = 37811;
  var RGBA_ASTC_6x6_Format = 37812;
  var RGBA_ASTC_8x5_Format = 37813;
  var RGBA_ASTC_8x6_Format = 37814;
  var RGBA_ASTC_8x8_Format = 37815;
  var RGBA_ASTC_10x5_Format = 37816;
  var RGBA_ASTC_10x6_Format = 37817;
  var RGBA_ASTC_10x8_Format = 37818;
  var RGBA_ASTC_10x10_Format = 37819;
  var RGBA_ASTC_12x10_Format = 37820;
  var RGBA_ASTC_12x12_Format = 37821;
  var RGBA_BPTC_Format = 36492;
  var RED_RGTC1_Format = 36283;
  var SIGNED_RED_RGTC1_Format = 36284;
  var RED_GREEN_RGTC2_Format = 36285;
  var SIGNED_RED_GREEN_RGTC2_Format = 36286;
  var InterpolateDiscrete = 2300;
  var InterpolateLinear = 2301;
  var InterpolateSmooth = 2302;
  var ZeroCurvatureEnding = 2400;
  var ZeroSlopeEnding = 2401;
  var WrapAroundEnding = 2402;
  var LinearEncoding = 3e3;
  var sRGBEncoding = 3001;
  var BasicDepthPacking = 3200;
  var RGBADepthPacking = 3201;
  var TangentSpaceNormalMap = 0;
  var ObjectSpaceNormalMap = 1;
  var NoColorSpace = "";
  var SRGBColorSpace = "srgb";
  var LinearSRGBColorSpace = "srgb-linear";
  var DisplayP3ColorSpace = "display-p3";
  var KeepStencilOp = 7680;
  var AlwaysStencilFunc = 519;
  var NeverCompare = 512;
  var LessCompare = 513;
  var EqualCompare = 514;
  var LessEqualCompare = 515;
  var GreaterCompare = 516;
  var NotEqualCompare = 517;
  var GreaterEqualCompare = 518;
  var AlwaysCompare = 519;
  var StaticDrawUsage = 35044;
  var GLSL3 = "300 es";
  var _SRGBAFormat = 1035;
  var WebGLCoordinateSystem = 2e3;
  var WebGPUCoordinateSystem = 2001;
  var EventDispatcher = class {
    addEventListener(type, listener) {
      if (this._listeners === void 0)
        this._listeners = {};
      const listeners = this._listeners;
      if (listeners[type] === void 0) {
        listeners[type] = [];
      }
      if (listeners[type].indexOf(listener) === -1) {
        listeners[type].push(listener);
      }
    }
    hasEventListener(type, listener) {
      if (this._listeners === void 0)
        return false;
      const listeners = this._listeners;
      return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
    }
    removeEventListener(type, listener) {
      if (this._listeners === void 0)
        return;
      const listeners = this._listeners;
      const listenerArray = listeners[type];
      if (listenerArray !== void 0) {
        const index = listenerArray.indexOf(listener);
        if (index !== -1) {
          listenerArray.splice(index, 1);
        }
      }
    }
    dispatchEvent(event) {
      if (this._listeners === void 0)
        return;
      const listeners = this._listeners;
      const listenerArray = listeners[event.type];
      if (listenerArray !== void 0) {
        event.target = this;
        const array = listenerArray.slice(0);
        for (let i = 0, l = array.length; i < l; i++) {
          array[i].call(this, event);
        }
        event.target = null;
      }
    }
  };
  var _lut = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
  var _seed = 1234567;
  var DEG2RAD = Math.PI / 180;
  var RAD2DEG = 180 / Math.PI;
  function generateUUID() {
    const d0 = Math.random() * 4294967295 | 0;
    const d1 = Math.random() * 4294967295 | 0;
    const d2 = Math.random() * 4294967295 | 0;
    const d3 = Math.random() * 4294967295 | 0;
    const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
    return uuid.toLowerCase();
  }
  function clamp(value, min, max) {
    return Math.max(min, Math.min(max, value));
  }
  function euclideanModulo(n, m) {
    return (n % m + m) % m;
  }
  function mapLinear(x, a1, a2, b1, b2) {
    return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
  }
  function inverseLerp(x, y, value) {
    if (x !== y) {
      return (value - x) / (y - x);
    } else {
      return 0;
    }
  }
  function lerp(x, y, t) {
    return (1 - t) * x + t * y;
  }
  function damp(x, y, lambda, dt) {
    return lerp(x, y, 1 - Math.exp(-lambda * dt));
  }
  function pingpong(x, length = 1) {
    return length - Math.abs(euclideanModulo(x, length * 2) - length);
  }
  function smoothstep(x, min, max) {
    if (x <= min)
      return 0;
    if (x >= max)
      return 1;
    x = (x - min) / (max - min);
    return x * x * (3 - 2 * x);
  }
  function smootherstep(x, min, max) {
    if (x <= min)
      return 0;
    if (x >= max)
      return 1;
    x = (x - min) / (max - min);
    return x * x * x * (x * (x * 6 - 15) + 10);
  }
  function randInt(low, high) {
    return low + Math.floor(Math.random() * (high - low + 1));
  }
  function randFloat(low, high) {
    return low + Math.random() * (high - low);
  }
  function randFloatSpread(range) {
    return range * (0.5 - Math.random());
  }
  function seededRandom(s) {
    if (s !== void 0)
      _seed = s;
    let t = _seed += 1831565813;
    t = Math.imul(t ^ t >>> 15, t | 1);
    t ^= t + Math.imul(t ^ t >>> 7, t | 61);
    return ((t ^ t >>> 14) >>> 0) / 4294967296;
  }
  function degToRad(degrees) {
    return degrees * DEG2RAD;
  }
  function radToDeg(radians) {
    return radians * RAD2DEG;
  }
  function isPowerOfTwo(value) {
    return (value & value - 1) === 0 && value !== 0;
  }
  function ceilPowerOfTwo(value) {
    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
  }
  function floorPowerOfTwo(value) {
    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
  }
  function setQuaternionFromProperEuler(q, a, b, c, order) {
    const cos = Math.cos;
    const sin = Math.sin;
    const c2 = cos(b / 2);
    const s2 = sin(b / 2);
    const c13 = cos((a + c) / 2);
    const s13 = sin((a + c) / 2);
    const c1_3 = cos((a - c) / 2);
    const s1_3 = sin((a - c) / 2);
    const c3_1 = cos((c - a) / 2);
    const s3_1 = sin((c - a) / 2);
    switch (order) {
      case "XYX":
        q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
        break;
      case "YZY":
        q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
        break;
      case "ZXZ":
        q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
        break;
      case "XZX":
        q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
        break;
      case "YXY":
        q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
        break;
      case "ZYZ":
        q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
        break;
      default:
        console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + order);
    }
  }
  function denormalize(value, array) {
    switch (array.constructor) {
      case Float32Array:
        return value;
      case Uint32Array:
        return value / 4294967295;
      case Uint16Array:
        return value / 65535;
      case Uint8Array:
        return value / 255;
      case Int32Array:
        return Math.max(value / 2147483647, -1);
      case Int16Array:
        return Math.max(value / 32767, -1);
      case Int8Array:
        return Math.max(value / 127, -1);
      default:
        throw new Error("Invalid component type.");
    }
  }
  function normalize(value, array) {
    switch (array.constructor) {
      case Float32Array:
        return value;
      case Uint32Array:
        return Math.round(value * 4294967295);
      case Uint16Array:
        return Math.round(value * 65535);
      case Uint8Array:
        return Math.round(value * 255);
      case Int32Array:
        return Math.round(value * 2147483647);
      case Int16Array:
        return Math.round(value * 32767);
      case Int8Array:
        return Math.round(value * 127);
      default:
        throw new Error("Invalid component type.");
    }
  }
  var MathUtils = {
    DEG2RAD,
    RAD2DEG,
    generateUUID,
    clamp,
    euclideanModulo,
    mapLinear,
    inverseLerp,
    lerp,
    damp,
    pingpong,
    smoothstep,
    smootherstep,
    randInt,
    randFloat,
    randFloatSpread,
    seededRandom,
    degToRad,
    radToDeg,
    isPowerOfTwo,
    ceilPowerOfTwo,
    floorPowerOfTwo,
    setQuaternionFromProperEuler,
    normalize,
    denormalize
  };
  var Vector2 = class _Vector2 {
    constructor(x = 0, y = 0) {
      _Vector2.prototype.isVector2 = true;
      this.x = x;
      this.y = y;
    }
    get width() {
      return this.x;
    }
    set width(value) {
      this.x = value;
    }
    get height() {
      return this.y;
    }
    set height(value) {
      this.y = value;
    }
    set(x, y) {
      this.x = x;
      this.y = y;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      return this;
    }
    setX(x) {
      this.x = x;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      return this;
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    applyMatrix3(m) {
      const x = this.x, y = this.y;
      const e = m.elements;
      this.x = e[0] * x + e[3] * y + e[6];
      this.y = e[1] * x + e[4] * y + e[7];
      return this;
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      return this;
    }
    clamp(min, max) {
      this.x = Math.max(min.x, Math.min(max.x, this.x));
      this.y = Math.max(min.y, Math.min(max.y, this.y));
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = Math.max(minVal, Math.min(maxVal, this.x));
      this.y = Math.max(minVal, Math.min(maxVal, this.y));
      return this;
    }
    clampLength(min, max) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      return this;
    }
    roundToZero() {
      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y;
    }
    cross(v) {
      return this.x * v.y - this.y * v.x;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    angle() {
      const angle = Math.atan2(-this.y, -this.x) + Math.PI;
      return angle;
    }
    angleTo(v) {
      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
      if (denominator === 0)
        return Math.PI / 2;
      const theta = this.dot(v) / denominator;
      return Math.acos(clamp(theta, -1, 1));
    }
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y;
      return dx * dx + dy * dy;
    }
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      return this;
    }
    rotateAround(center, angle) {
      const c = Math.cos(angle), s = Math.sin(angle);
      const x = this.x - center.x;
      const y = this.y - center.y;
      this.x = x * c - y * s + center.x;
      this.y = x * s + y * c + center.y;
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
    }
  };
  var Matrix3 = class _Matrix3 {
    constructor(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      _Matrix3.prototype.isMatrix3 = true;
      this.elements = [
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);
      }
    }
    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
      const te = this.elements;
      te[0] = n11;
      te[1] = n21;
      te[2] = n31;
      te[3] = n12;
      te[4] = n22;
      te[5] = n32;
      te[6] = n13;
      te[7] = n23;
      te[8] = n33;
      return this;
    }
    identity() {
      this.set(
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1
      );
      return this;
    }
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrix3Column(this, 0);
      yAxis.setFromMatrix3Column(this, 1);
      zAxis.setFromMatrix3Column(this, 2);
      return this;
    }
    setFromMatrix4(m) {
      const me = m.elements;
      this.set(
        me[0],
        me[4],
        me[8],
        me[1],
        me[5],
        me[9],
        me[2],
        me[6],
        me[10]
      );
      return this;
    }
    multiply(m) {
      return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[3], a13 = ae[6];
      const a21 = ae[1], a22 = ae[4], a23 = ae[7];
      const a31 = ae[2], a32 = ae[5], a33 = ae[8];
      const b11 = be[0], b12 = be[3], b13 = be[6];
      const b21 = be[1], b22 = be[4], b23 = be[7];
      const b31 = be[2], b32 = be[5], b33 = be[8];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31;
      te[3] = a11 * b12 + a12 * b22 + a13 * b32;
      te[6] = a11 * b13 + a12 * b23 + a13 * b33;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31;
      te[4] = a21 * b12 + a22 * b22 + a23 * b32;
      te[7] = a21 * b13 + a22 * b23 + a23 * b33;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31;
      te[5] = a31 * b12 + a32 * b22 + a33 * b32;
      te[8] = a31 * b13 + a32 * b23 + a33 * b33;
      return this;
    }
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[3] *= s;
      te[6] *= s;
      te[1] *= s;
      te[4] *= s;
      te[7] *= s;
      te[2] *= s;
      te[5] *= s;
      te[8] *= s;
      return this;
    }
    determinant() {
      const te = this.elements;
      const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i = te[8];
      return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
    }
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
      if (det === 0)
        return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n31 * n23 - n33 * n21) * detInv;
      te[2] = (n32 * n21 - n31 * n22) * detInv;
      te[3] = t12 * detInv;
      te[4] = (n33 * n11 - n31 * n13) * detInv;
      te[5] = (n31 * n12 - n32 * n11) * detInv;
      te[6] = t13 * detInv;
      te[7] = (n21 * n13 - n23 * n11) * detInv;
      te[8] = (n22 * n11 - n21 * n12) * detInv;
      return this;
    }
    transpose() {
      let tmp;
      const m = this.elements;
      tmp = m[1];
      m[1] = m[3];
      m[3] = tmp;
      tmp = m[2];
      m[2] = m[6];
      m[6] = tmp;
      tmp = m[5];
      m[5] = m[7];
      m[7] = tmp;
      return this;
    }
    getNormalMatrix(matrix4) {
      return this.setFromMatrix4(matrix4).invert().transpose();
    }
    transposeIntoArray(r) {
      const m = this.elements;
      r[0] = m[0];
      r[1] = m[3];
      r[2] = m[6];
      r[3] = m[1];
      r[4] = m[4];
      r[5] = m[7];
      r[6] = m[2];
      r[7] = m[5];
      r[8] = m[8];
      return this;
    }
    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
      const c = Math.cos(rotation);
      const s = Math.sin(rotation);
      this.set(
        sx * c,
        sx * s,
        -sx * (c * cx + s * cy) + cx + tx,
        -sy * s,
        sy * c,
        -sy * (-s * cx + c * cy) + cy + ty,
        0,
        0,
        1
      );
      return this;
    }
    //
    scale(sx, sy) {
      this.premultiply(_m3.makeScale(sx, sy));
      return this;
    }
    rotate(theta) {
      this.premultiply(_m3.makeRotation(-theta));
      return this;
    }
    translate(tx, ty) {
      this.premultiply(_m3.makeTranslation(tx, ty));
      return this;
    }
    // for 2D Transforms
    makeTranslation(x, y) {
      if (x.isVector2) {
        this.set(
          1,
          0,
          x.x,
          0,
          1,
          x.y,
          0,
          0,
          1
        );
      } else {
        this.set(
          1,
          0,
          x,
          0,
          1,
          y,
          0,
          0,
          1
        );
      }
      return this;
    }
    makeRotation(theta) {
      const c = Math.cos(theta);
      const s = Math.sin(theta);
      this.set(
        c,
        -s,
        0,
        s,
        c,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeScale(x, y) {
      this.set(
        x,
        0,
        0,
        0,
        y,
        0,
        0,
        0,
        1
      );
      return this;
    }
    //
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i = 0; i < 9; i++) {
        if (te[i] !== me[i])
          return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i = 0; i < 9; i++) {
        this.elements[i] = array[i + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      return array;
    }
    clone() {
      return new this.constructor().fromArray(this.elements);
    }
  };
  var _m3 = /* @__PURE__ */ new Matrix3();
  function arrayNeedsUint32(array) {
    for (let i = array.length - 1; i >= 0; --i) {
      if (array[i] >= 65535)
        return true;
    }
    return false;
  }
  function createElementNS(name) {
    return document.createElementNS("http://www.w3.org/1999/xhtml", name);
  }
  var _cache = {};
  function warnOnce(message) {
    if (message in _cache)
      return;
    _cache[message] = true;
    console.warn(message);
  }
  function SRGBToLinear(c) {
    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
  }
  function LinearToSRGB(c) {
    return c < 31308e-7 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
  }
  var LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = /* @__PURE__ */ new Matrix3().fromArray([
    0.8224621,
    0.0331941,
    0.0170827,
    0.177538,
    0.9668058,
    0.0723974,
    -1e-7,
    1e-7,
    0.9105199
  ]);
  var LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = /* @__PURE__ */ new Matrix3().fromArray([
    1.2249401,
    -0.0420569,
    -0.0196376,
    -0.2249404,
    1.0420571,
    -0.0786361,
    1e-7,
    0,
    1.0982735
  ]);
  function DisplayP3ToLinearSRGB(color) {
    return color.convertSRGBToLinear().applyMatrix3(LINEAR_DISPLAY_P3_TO_LINEAR_SRGB);
  }
  function LinearSRGBToDisplayP3(color) {
    return color.applyMatrix3(LINEAR_SRGB_TO_LINEAR_DISPLAY_P3).convertLinearToSRGB();
  }
  var TO_LINEAR = {
    [LinearSRGBColorSpace]: (color) => color,
    [SRGBColorSpace]: (color) => color.convertSRGBToLinear(),
    [DisplayP3ColorSpace]: DisplayP3ToLinearSRGB
  };
  var FROM_LINEAR = {
    [LinearSRGBColorSpace]: (color) => color,
    [SRGBColorSpace]: (color) => color.convertLinearToSRGB(),
    [DisplayP3ColorSpace]: LinearSRGBToDisplayP3
  };
  var ColorManagement = {
    enabled: true,
    get legacyMode() {
      console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.");
      return !this.enabled;
    },
    set legacyMode(legacyMode) {
      console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.");
      this.enabled = !legacyMode;
    },
    get workingColorSpace() {
      return LinearSRGBColorSpace;
    },
    set workingColorSpace(colorSpace) {
      console.warn("THREE.ColorManagement: .workingColorSpace is readonly.");
    },
    convert: function(color, sourceColorSpace, targetColorSpace) {
      if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {
        return color;
      }
      const sourceToLinear = TO_LINEAR[sourceColorSpace];
      const targetFromLinear = FROM_LINEAR[targetColorSpace];
      if (sourceToLinear === void 0 || targetFromLinear === void 0) {
        throw new Error(`Unsupported color space conversion, "${sourceColorSpace}" to "${targetColorSpace}".`);
      }
      return targetFromLinear(sourceToLinear(color));
    },
    fromWorkingColorSpace: function(color, targetColorSpace) {
      return this.convert(color, this.workingColorSpace, targetColorSpace);
    },
    toWorkingColorSpace: function(color, sourceColorSpace) {
      return this.convert(color, sourceColorSpace, this.workingColorSpace);
    }
  };
  var _canvas;
  var ImageUtils = class {
    static getDataURL(image) {
      if (/^data:/i.test(image.src)) {
        return image.src;
      }
      if (typeof HTMLCanvasElement === "undefined") {
        return image.src;
      }
      let canvas;
      if (image instanceof HTMLCanvasElement) {
        canvas = image;
      } else {
        if (_canvas === void 0)
          _canvas = createElementNS("canvas");
        _canvas.width = image.width;
        _canvas.height = image.height;
        const context = _canvas.getContext("2d");
        if (image instanceof ImageData) {
          context.putImageData(image, 0, 0);
        } else {
          context.drawImage(image, 0, 0, image.width, image.height);
        }
        canvas = _canvas;
      }
      if (canvas.width > 2048 || canvas.height > 2048) {
        console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", image);
        return canvas.toDataURL("image/jpeg", 0.6);
      } else {
        return canvas.toDataURL("image/png");
      }
    }
    static sRGBToLinear(image) {
      if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
        const canvas = createElementNS("canvas");
        canvas.width = image.width;
        canvas.height = image.height;
        const context = canvas.getContext("2d");
        context.drawImage(image, 0, 0, image.width, image.height);
        const imageData = context.getImageData(0, 0, image.width, image.height);
        const data = imageData.data;
        for (let i = 0; i < data.length; i++) {
          data[i] = SRGBToLinear(data[i] / 255) * 255;
        }
        context.putImageData(imageData, 0, 0);
        return canvas;
      } else if (image.data) {
        const data = image.data.slice(0);
        for (let i = 0; i < data.length; i++) {
          if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
            data[i] = Math.floor(SRGBToLinear(data[i] / 255) * 255);
          } else {
            data[i] = SRGBToLinear(data[i]);
          }
        }
        return {
          data,
          width: image.width,
          height: image.height
        };
      } else {
        console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
        return image;
      }
    }
  };
  var sourceId = 0;
  var Source = class {
    constructor(data = null) {
      this.isSource = true;
      Object.defineProperty(this, "id", { value: sourceId++ });
      this.uuid = generateUUID();
      this.data = data;
      this.version = 0;
    }
    set needsUpdate(value) {
      if (value === true)
        this.version++;
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (!isRootObject && meta.images[this.uuid] !== void 0) {
        return meta.images[this.uuid];
      }
      const output = {
        uuid: this.uuid,
        url: ""
      };
      const data = this.data;
      if (data !== null) {
        let url;
        if (Array.isArray(data)) {
          url = [];
          for (let i = 0, l = data.length; i < l; i++) {
            if (data[i].isDataTexture) {
              url.push(serializeImage(data[i].image));
            } else {
              url.push(serializeImage(data[i]));
            }
          }
        } else {
          url = serializeImage(data);
        }
        output.url = url;
      }
      if (!isRootObject) {
        meta.images[this.uuid] = output;
      }
      return output;
    }
  };
  function serializeImage(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
      return ImageUtils.getDataURL(image);
    } else {
      if (image.data) {
        return {
          data: Array.from(image.data),
          width: image.width,
          height: image.height,
          type: image.data.constructor.name
        };
      } else {
        console.warn("THREE.Texture: Unable to serialize Texture.");
        return {};
      }
    }
  }
  var textureId = 0;
  var Texture = class _Texture extends EventDispatcher {
    constructor(image = _Texture.DEFAULT_IMAGE, mapping = _Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = _Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace) {
      super();
      this.isTexture = true;
      Object.defineProperty(this, "id", { value: textureId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.source = new Source(image);
      this.mipmaps = [];
      this.mapping = mapping;
      this.channel = 0;
      this.wrapS = wrapS;
      this.wrapT = wrapT;
      this.magFilter = magFilter;
      this.minFilter = minFilter;
      this.anisotropy = anisotropy;
      this.format = format;
      this.internalFormat = null;
      this.type = type;
      this.offset = new Vector2(0, 0);
      this.repeat = new Vector2(1, 1);
      this.center = new Vector2(0, 0);
      this.rotation = 0;
      this.matrixAutoUpdate = true;
      this.matrix = new Matrix3();
      this.generateMipmaps = true;
      this.premultiplyAlpha = false;
      this.flipY = true;
      this.unpackAlignment = 4;
      if (typeof colorSpace === "string") {
        this.colorSpace = colorSpace;
      } else {
        warnOnce("THREE.Texture: Property .encoding has been replaced by .colorSpace.");
        this.colorSpace = colorSpace === sRGBEncoding ? SRGBColorSpace : NoColorSpace;
      }
      this.userData = {};
      this.version = 0;
      this.onUpdate = null;
      this.isRenderTargetTexture = false;
      this.needsPMREMUpdate = false;
    }
    get image() {
      return this.source.data;
    }
    set image(value = null) {
      this.source.data = value;
    }
    updateMatrix() {
      this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.name = source.name;
      this.source = source.source;
      this.mipmaps = source.mipmaps.slice(0);
      this.mapping = source.mapping;
      this.channel = source.channel;
      this.wrapS = source.wrapS;
      this.wrapT = source.wrapT;
      this.magFilter = source.magFilter;
      this.minFilter = source.minFilter;
      this.anisotropy = source.anisotropy;
      this.format = source.format;
      this.internalFormat = source.internalFormat;
      this.type = source.type;
      this.offset.copy(source.offset);
      this.repeat.copy(source.repeat);
      this.center.copy(source.center);
      this.rotation = source.rotation;
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrix.copy(source.matrix);
      this.generateMipmaps = source.generateMipmaps;
      this.premultiplyAlpha = source.premultiplyAlpha;
      this.flipY = source.flipY;
      this.unpackAlignment = source.unpackAlignment;
      this.colorSpace = source.colorSpace;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      this.needsUpdate = true;
      return this;
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (!isRootObject && meta.textures[this.uuid] !== void 0) {
        return meta.textures[this.uuid];
      }
      const output = {
        metadata: {
          version: 4.6,
          type: "Texture",
          generator: "Texture.toJSON"
        },
        uuid: this.uuid,
        name: this.name,
        image: this.source.toJSON(meta).uuid,
        mapping: this.mapping,
        channel: this.channel,
        repeat: [this.repeat.x, this.repeat.y],
        offset: [this.offset.x, this.offset.y],
        center: [this.center.x, this.center.y],
        rotation: this.rotation,
        wrap: [this.wrapS, this.wrapT],
        format: this.format,
        internalFormat: this.internalFormat,
        type: this.type,
        colorSpace: this.colorSpace,
        minFilter: this.minFilter,
        magFilter: this.magFilter,
        anisotropy: this.anisotropy,
        flipY: this.flipY,
        generateMipmaps: this.generateMipmaps,
        premultiplyAlpha: this.premultiplyAlpha,
        unpackAlignment: this.unpackAlignment
      };
      if (Object.keys(this.userData).length > 0)
        output.userData = this.userData;
      if (!isRootObject) {
        meta.textures[this.uuid] = output;
      }
      return output;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
    transformUv(uv) {
      if (this.mapping !== UVMapping)
        return uv;
      uv.applyMatrix3(this.matrix);
      if (uv.x < 0 || uv.x > 1) {
        switch (this.wrapS) {
          case RepeatWrapping:
            uv.x = uv.x - Math.floor(uv.x);
            break;
          case ClampToEdgeWrapping:
            uv.x = uv.x < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.x) % 2) === 1) {
              uv.x = Math.ceil(uv.x) - uv.x;
            } else {
              uv.x = uv.x - Math.floor(uv.x);
            }
            break;
        }
      }
      if (uv.y < 0 || uv.y > 1) {
        switch (this.wrapT) {
          case RepeatWrapping:
            uv.y = uv.y - Math.floor(uv.y);
            break;
          case ClampToEdgeWrapping:
            uv.y = uv.y < 0 ? 0 : 1;
            break;
          case MirroredRepeatWrapping:
            if (Math.abs(Math.floor(uv.y) % 2) === 1) {
              uv.y = Math.ceil(uv.y) - uv.y;
            } else {
              uv.y = uv.y - Math.floor(uv.y);
            }
            break;
        }
      }
      if (this.flipY) {
        uv.y = 1 - uv.y;
      }
      return uv;
    }
    set needsUpdate(value) {
      if (value === true) {
        this.version++;
        this.source.needsUpdate = true;
      }
    }
    get encoding() {
      warnOnce("THREE.Texture: Property .encoding has been replaced by .colorSpace.");
      return this.colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;
    }
    set encoding(encoding) {
      warnOnce("THREE.Texture: Property .encoding has been replaced by .colorSpace.");
      this.colorSpace = encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;
    }
  };
  Texture.DEFAULT_IMAGE = null;
  Texture.DEFAULT_MAPPING = UVMapping;
  Texture.DEFAULT_ANISOTROPY = 1;
  var Vector4 = class _Vector4 {
    constructor(x = 0, y = 0, z2 = 0, w = 1) {
      _Vector4.prototype.isVector4 = true;
      this.x = x;
      this.y = y;
      this.z = z2;
      this.w = w;
    }
    get width() {
      return this.z;
    }
    set width(value) {
      this.z = value;
    }
    get height() {
      return this.w;
    }
    set height(value) {
      this.w = value;
    }
    set(x, y, z2, w) {
      this.x = x;
      this.y = y;
      this.z = z2;
      this.w = w;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      this.w = scalar;
      return this;
    }
    setX(x) {
      this.x = x;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setZ(z2) {
      this.z = z2;
      return this;
    }
    setW(w) {
      this.w = w;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        case 3:
          this.w = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        case 3:
          return this.w;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z, this.w);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      this.w = v.w !== void 0 ? v.w : 1;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      this.w += v.w;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      this.w += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      this.w = a.w + b.w;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      this.w += v.w * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      this.w -= v.w;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      this.w -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      this.w = a.w - b.w;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      this.w *= v.w;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      this.w *= scalar;
      return this;
    }
    applyMatrix4(m) {
      const x = this.x, y = this.y, z2 = this.z, w = this.w;
      const e = m.elements;
      this.x = e[0] * x + e[4] * y + e[8] * z2 + e[12] * w;
      this.y = e[1] * x + e[5] * y + e[9] * z2 + e[13] * w;
      this.z = e[2] * x + e[6] * y + e[10] * z2 + e[14] * w;
      this.w = e[3] * x + e[7] * y + e[11] * z2 + e[15] * w;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    setAxisAngleFromQuaternion(q) {
      this.w = 2 * Math.acos(q.w);
      const s = Math.sqrt(1 - q.w * q.w);
      if (s < 1e-4) {
        this.x = 1;
        this.y = 0;
        this.z = 0;
      } else {
        this.x = q.x / s;
        this.y = q.y / s;
        this.z = q.z / s;
      }
      return this;
    }
    setAxisAngleFromRotationMatrix(m) {
      let angle, x, y, z2;
      const epsilon = 0.01, epsilon2 = 0.1, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
      if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
        if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
          this.set(1, 0, 0, 0);
          return this;
        }
        angle = Math.PI;
        const xx = (m11 + 1) / 2;
        const yy = (m22 + 1) / 2;
        const zz = (m33 + 1) / 2;
        const xy = (m12 + m21) / 4;
        const xz = (m13 + m31) / 4;
        const yz = (m23 + m32) / 4;
        if (xx > yy && xx > zz) {
          if (xx < epsilon) {
            x = 0;
            y = 0.707106781;
            z2 = 0.707106781;
          } else {
            x = Math.sqrt(xx);
            y = xy / x;
            z2 = xz / x;
          }
        } else if (yy > zz) {
          if (yy < epsilon) {
            x = 0.707106781;
            y = 0;
            z2 = 0.707106781;
          } else {
            y = Math.sqrt(yy);
            x = xy / y;
            z2 = yz / y;
          }
        } else {
          if (zz < epsilon) {
            x = 0.707106781;
            y = 0.707106781;
            z2 = 0;
          } else {
            z2 = Math.sqrt(zz);
            x = xz / z2;
            y = yz / z2;
          }
        }
        this.set(x, y, z2, angle);
        return this;
      }
      let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
      if (Math.abs(s) < 1e-3)
        s = 1;
      this.x = (m32 - m23) / s;
      this.y = (m13 - m31) / s;
      this.z = (m21 - m12) / s;
      this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
      return this;
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      this.w = Math.min(this.w, v.w);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      this.w = Math.max(this.w, v.w);
      return this;
    }
    clamp(min, max) {
      this.x = Math.max(min.x, Math.min(max.x, this.x));
      this.y = Math.max(min.y, Math.min(max.y, this.y));
      this.z = Math.max(min.z, Math.min(max.z, this.z));
      this.w = Math.max(min.w, Math.min(max.w, this.w));
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = Math.max(minVal, Math.min(maxVal, this.x));
      this.y = Math.max(minVal, Math.min(maxVal, this.y));
      this.z = Math.max(minVal, Math.min(maxVal, this.z));
      this.w = Math.max(minVal, Math.min(maxVal, this.w));
      return this;
    }
    clampLength(min, max) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      this.w = Math.floor(this.w);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      this.w = Math.ceil(this.w);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      this.w = Math.round(this.w);
      return this;
    }
    roundToZero() {
      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
      this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      this.w = -this.w;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
    }
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      this.w += (v.w - this.w) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      this.w = v1.w + (v2.w - v1.w) * alpha;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      this.w = array[offset + 3];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      array[offset + 3] = this.w;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      this.w = attribute.getW(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      this.w = Math.random();
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
      yield this.z;
      yield this.w;
    }
  };
  var WebGLRenderTarget = class extends EventDispatcher {
    constructor(width = 1, height = 1, options = {}) {
      super();
      this.isWebGLRenderTarget = true;
      this.width = width;
      this.height = height;
      this.depth = 1;
      this.scissor = new Vector4(0, 0, width, height);
      this.scissorTest = false;
      this.viewport = new Vector4(0, 0, width, height);
      const image = { width, height, depth: 1 };
      if (options.encoding !== void 0) {
        warnOnce("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace.");
        options.colorSpace = options.encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;
      }
      this.texture = new Texture(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
      this.texture.isRenderTargetTexture = true;
      this.texture.flipY = false;
      this.texture.generateMipmaps = options.generateMipmaps !== void 0 ? options.generateMipmaps : false;
      this.texture.internalFormat = options.internalFormat !== void 0 ? options.internalFormat : null;
      this.texture.minFilter = options.minFilter !== void 0 ? options.minFilter : LinearFilter;
      this.depthBuffer = options.depthBuffer !== void 0 ? options.depthBuffer : true;
      this.stencilBuffer = options.stencilBuffer !== void 0 ? options.stencilBuffer : false;
      this.depthTexture = options.depthTexture !== void 0 ? options.depthTexture : null;
      this.samples = options.samples !== void 0 ? options.samples : 0;
    }
    setSize(width, height, depth = 1) {
      if (this.width !== width || this.height !== height || this.depth !== depth) {
        this.width = width;
        this.height = height;
        this.depth = depth;
        this.texture.image.width = width;
        this.texture.image.height = height;
        this.texture.image.depth = depth;
        this.dispose();
      }
      this.viewport.set(0, 0, width, height);
      this.scissor.set(0, 0, width, height);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.width = source.width;
      this.height = source.height;
      this.depth = source.depth;
      this.scissor.copy(source.scissor);
      this.scissorTest = source.scissorTest;
      this.viewport.copy(source.viewport);
      this.texture = source.texture.clone();
      this.texture.isRenderTargetTexture = true;
      const image = Object.assign({}, source.texture.image);
      this.texture.source = new Source(image);
      this.depthBuffer = source.depthBuffer;
      this.stencilBuffer = source.stencilBuffer;
      if (source.depthTexture !== null)
        this.depthTexture = source.depthTexture.clone();
      this.samples = source.samples;
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
  };
  var DataArrayTexture = class extends Texture {
    constructor(data = null, width = 1, height = 1, depth = 1) {
      super(null);
      this.isDataArrayTexture = true;
      this.image = { data, width, height, depth };
      this.magFilter = NearestFilter;
      this.minFilter = NearestFilter;
      this.wrapR = ClampToEdgeWrapping;
      this.generateMipmaps = false;
      this.flipY = false;
      this.unpackAlignment = 1;
    }
  };
  var Data3DTexture = class extends Texture {
    constructor(data = null, width = 1, height = 1, depth = 1) {
      super(null);
      this.isData3DTexture = true;
      this.image = { data, width, height, depth };
      this.magFilter = NearestFilter;
      this.minFilter = NearestFilter;
      this.wrapR = ClampToEdgeWrapping;
      this.generateMipmaps = false;
      this.flipY = false;
      this.unpackAlignment = 1;
    }
  };
  var Quaternion = class {
    constructor(x = 0, y = 0, z2 = 0, w = 1) {
      this.isQuaternion = true;
      this._x = x;
      this._y = y;
      this._z = z2;
      this._w = w;
    }
    static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
      let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
      if (t === 0) {
        dst[dstOffset + 0] = x0;
        dst[dstOffset + 1] = y0;
        dst[dstOffset + 2] = z0;
        dst[dstOffset + 3] = w0;
        return;
      }
      if (t === 1) {
        dst[dstOffset + 0] = x1;
        dst[dstOffset + 1] = y1;
        dst[dstOffset + 2] = z1;
        dst[dstOffset + 3] = w1;
        return;
      }
      if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
        let s = 1 - t;
        const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
        if (sqrSin > Number.EPSILON) {
          const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
          s = Math.sin(s * len) / sin;
          t = Math.sin(t * len) / sin;
        }
        const tDir = t * dir;
        x0 = x0 * s + x1 * tDir;
        y0 = y0 * s + y1 * tDir;
        z0 = z0 * s + z1 * tDir;
        w0 = w0 * s + w1 * tDir;
        if (s === 1 - t) {
          const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
          x0 *= f;
          y0 *= f;
          z0 *= f;
          w0 *= f;
        }
      }
      dst[dstOffset] = x0;
      dst[dstOffset + 1] = y0;
      dst[dstOffset + 2] = z0;
      dst[dstOffset + 3] = w0;
    }
    static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
      const x0 = src0[srcOffset0];
      const y0 = src0[srcOffset0 + 1];
      const z0 = src0[srcOffset0 + 2];
      const w0 = src0[srcOffset0 + 3];
      const x1 = src1[srcOffset1];
      const y1 = src1[srcOffset1 + 1];
      const z1 = src1[srcOffset1 + 2];
      const w1 = src1[srcOffset1 + 3];
      dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
      dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
      dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
      dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
      return dst;
    }
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    get w() {
      return this._w;
    }
    set w(value) {
      this._w = value;
      this._onChangeCallback();
    }
    set(x, y, z2, w) {
      this._x = x;
      this._y = y;
      this._z = z2;
      this._w = w;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._w);
    }
    copy(quaternion) {
      this._x = quaternion.x;
      this._y = quaternion.y;
      this._z = quaternion.z;
      this._w = quaternion.w;
      this._onChangeCallback();
      return this;
    }
    setFromEuler(euler, update) {
      const x = euler._x, y = euler._y, z2 = euler._z, order = euler._order;
      const cos = Math.cos;
      const sin = Math.sin;
      const c1 = cos(x / 2);
      const c2 = cos(y / 2);
      const c3 = cos(z2 / 2);
      const s1 = sin(x / 2);
      const s2 = sin(y / 2);
      const s3 = sin(z2 / 2);
      switch (order) {
        case "XYZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "YXZ":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "ZXY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "ZYX":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        case "YZX":
          this._x = s1 * c2 * c3 + c1 * s2 * s3;
          this._y = c1 * s2 * c3 + s1 * c2 * s3;
          this._z = c1 * c2 * s3 - s1 * s2 * c3;
          this._w = c1 * c2 * c3 - s1 * s2 * s3;
          break;
        case "XZY":
          this._x = s1 * c2 * c3 - c1 * s2 * s3;
          this._y = c1 * s2 * c3 - s1 * c2 * s3;
          this._z = c1 * c2 * s3 + s1 * s2 * c3;
          this._w = c1 * c2 * c3 + s1 * s2 * s3;
          break;
        default:
          console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
      }
      if (update !== false)
        this._onChangeCallback();
      return this;
    }
    setFromAxisAngle(axis, angle) {
      const halfAngle = angle / 2, s = Math.sin(halfAngle);
      this._x = axis.x * s;
      this._y = axis.y * s;
      this._z = axis.z * s;
      this._w = Math.cos(halfAngle);
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m) {
      const te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
      if (trace > 0) {
        const s = 0.5 / Math.sqrt(trace + 1);
        this._w = 0.25 / s;
        this._x = (m32 - m23) * s;
        this._y = (m13 - m31) * s;
        this._z = (m21 - m12) * s;
      } else if (m11 > m22 && m11 > m33) {
        const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
        this._w = (m32 - m23) / s;
        this._x = 0.25 * s;
        this._y = (m12 + m21) / s;
        this._z = (m13 + m31) / s;
      } else if (m22 > m33) {
        const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
        this._w = (m13 - m31) / s;
        this._x = (m12 + m21) / s;
        this._y = 0.25 * s;
        this._z = (m23 + m32) / s;
      } else {
        const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
        this._w = (m21 - m12) / s;
        this._x = (m13 + m31) / s;
        this._y = (m23 + m32) / s;
        this._z = 0.25 * s;
      }
      this._onChangeCallback();
      return this;
    }
    setFromUnitVectors(vFrom, vTo) {
      let r = vFrom.dot(vTo) + 1;
      if (r < Number.EPSILON) {
        r = 0;
        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
          this._x = -vFrom.y;
          this._y = vFrom.x;
          this._z = 0;
          this._w = r;
        } else {
          this._x = 0;
          this._y = -vFrom.z;
          this._z = vFrom.y;
          this._w = r;
        }
      } else {
        this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
        this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
        this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
        this._w = r;
      }
      return this.normalize();
    }
    angleTo(q) {
      return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));
    }
    rotateTowards(q, step) {
      const angle = this.angleTo(q);
      if (angle === 0)
        return this;
      const t = Math.min(1, step / angle);
      this.slerp(q, t);
      return this;
    }
    identity() {
      return this.set(0, 0, 0, 1);
    }
    invert() {
      return this.conjugate();
    }
    conjugate() {
      this._x *= -1;
      this._y *= -1;
      this._z *= -1;
      this._onChangeCallback();
      return this;
    }
    dot(v) {
      return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
    }
    lengthSq() {
      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    length() {
      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    normalize() {
      let l = this.length();
      if (l === 0) {
        this._x = 0;
        this._y = 0;
        this._z = 0;
        this._w = 1;
      } else {
        l = 1 / l;
        this._x = this._x * l;
        this._y = this._y * l;
        this._z = this._z * l;
        this._w = this._w * l;
      }
      this._onChangeCallback();
      return this;
    }
    multiply(q) {
      return this.multiplyQuaternions(this, q);
    }
    premultiply(q) {
      return this.multiplyQuaternions(q, this);
    }
    multiplyQuaternions(a, b) {
      const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
      const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
      this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
      this._onChangeCallback();
      return this;
    }
    slerp(qb, t) {
      if (t === 0)
        return this;
      if (t === 1)
        return this.copy(qb);
      const x = this._x, y = this._y, z2 = this._z, w = this._w;
      let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z2 * qb._z;
      if (cosHalfTheta < 0) {
        this._w = -qb._w;
        this._x = -qb._x;
        this._y = -qb._y;
        this._z = -qb._z;
        cosHalfTheta = -cosHalfTheta;
      } else {
        this.copy(qb);
      }
      if (cosHalfTheta >= 1) {
        this._w = w;
        this._x = x;
        this._y = y;
        this._z = z2;
        return this;
      }
      const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
      if (sqrSinHalfTheta <= Number.EPSILON) {
        const s = 1 - t;
        this._w = s * w + t * this._w;
        this._x = s * x + t * this._x;
        this._y = s * y + t * this._y;
        this._z = s * z2 + t * this._z;
        this.normalize();
        this._onChangeCallback();
        return this;
      }
      const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
      const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
      const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
      this._w = w * ratioA + this._w * ratioB;
      this._x = x * ratioA + this._x * ratioB;
      this._y = y * ratioA + this._y * ratioB;
      this._z = z2 * ratioA + this._z * ratioB;
      this._onChangeCallback();
      return this;
    }
    slerpQuaternions(qa, qb, t) {
      return this.copy(qa).slerp(qb, t);
    }
    random() {
      const u1 = Math.random();
      const sqrt1u1 = Math.sqrt(1 - u1);
      const sqrtu1 = Math.sqrt(u1);
      const u2 = 2 * Math.PI * Math.random();
      const u3 = 2 * Math.PI * Math.random();
      return this.set(
        sqrt1u1 * Math.cos(u2),
        sqrtu1 * Math.sin(u3),
        sqrtu1 * Math.cos(u3),
        sqrt1u1 * Math.sin(u2)
      );
    }
    equals(quaternion) {
      return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
    }
    fromArray(array, offset = 0) {
      this._x = array[offset];
      this._y = array[offset + 1];
      this._z = array[offset + 2];
      this._w = array[offset + 3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._w;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this._x = attribute.getX(index);
      this._y = attribute.getY(index);
      this._z = attribute.getZ(index);
      this._w = attribute.getW(index);
      return this;
    }
    toJSON() {
      return this.toArray();
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
    *[Symbol.iterator]() {
      yield this._x;
      yield this._y;
      yield this._z;
      yield this._w;
    }
  };
  var Vector3 = class _Vector3 {
    constructor(x = 0, y = 0, z2 = 0) {
      _Vector3.prototype.isVector3 = true;
      this.x = x;
      this.y = y;
      this.z = z2;
    }
    set(x, y, z2) {
      if (z2 === void 0)
        z2 = this.z;
      this.x = x;
      this.y = y;
      this.z = z2;
      return this;
    }
    setScalar(scalar) {
      this.x = scalar;
      this.y = scalar;
      this.z = scalar;
      return this;
    }
    setX(x) {
      this.x = x;
      return this;
    }
    setY(y) {
      this.y = y;
      return this;
    }
    setZ(z2) {
      this.z = z2;
      return this;
    }
    setComponent(index, value) {
      switch (index) {
        case 0:
          this.x = value;
          break;
        case 1:
          this.y = value;
          break;
        case 2:
          this.z = value;
          break;
        default:
          throw new Error("index is out of range: " + index);
      }
      return this;
    }
    getComponent(index) {
      switch (index) {
        case 0:
          return this.x;
        case 1:
          return this.y;
        case 2:
          return this.z;
        default:
          throw new Error("index is out of range: " + index);
      }
    }
    clone() {
      return new this.constructor(this.x, this.y, this.z);
    }
    copy(v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
      return this;
    }
    add(v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
      return this;
    }
    addScalar(s) {
      this.x += s;
      this.y += s;
      this.z += s;
      return this;
    }
    addVectors(a, b) {
      this.x = a.x + b.x;
      this.y = a.y + b.y;
      this.z = a.z + b.z;
      return this;
    }
    addScaledVector(v, s) {
      this.x += v.x * s;
      this.y += v.y * s;
      this.z += v.z * s;
      return this;
    }
    sub(v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
      return this;
    }
    subScalar(s) {
      this.x -= s;
      this.y -= s;
      this.z -= s;
      return this;
    }
    subVectors(a, b) {
      this.x = a.x - b.x;
      this.y = a.y - b.y;
      this.z = a.z - b.z;
      return this;
    }
    multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      return this;
    }
    multiplyScalar(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      return this;
    }
    multiplyVectors(a, b) {
      this.x = a.x * b.x;
      this.y = a.y * b.y;
      this.z = a.z * b.z;
      return this;
    }
    applyEuler(euler) {
      return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
    }
    applyAxisAngle(axis, angle) {
      return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));
    }
    applyMatrix3(m) {
      const x = this.x, y = this.y, z2 = this.z;
      const e = m.elements;
      this.x = e[0] * x + e[3] * y + e[6] * z2;
      this.y = e[1] * x + e[4] * y + e[7] * z2;
      this.z = e[2] * x + e[5] * y + e[8] * z2;
      return this;
    }
    applyNormalMatrix(m) {
      return this.applyMatrix3(m).normalize();
    }
    applyMatrix4(m) {
      const x = this.x, y = this.y, z2 = this.z;
      const e = m.elements;
      const w = 1 / (e[3] * x + e[7] * y + e[11] * z2 + e[15]);
      this.x = (e[0] * x + e[4] * y + e[8] * z2 + e[12]) * w;
      this.y = (e[1] * x + e[5] * y + e[9] * z2 + e[13]) * w;
      this.z = (e[2] * x + e[6] * y + e[10] * z2 + e[14]) * w;
      return this;
    }
    applyQuaternion(q) {
      const x = this.x, y = this.y, z2 = this.z;
      const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
      const ix = qw * x + qy * z2 - qz * y;
      const iy = qw * y + qz * x - qx * z2;
      const iz = qw * z2 + qx * y - qy * x;
      const iw = -qx * x - qy * y - qz * z2;
      this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
      return this;
    }
    project(camera) {
      return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
    }
    unproject(camera) {
      return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
    }
    transformDirection(m) {
      const x = this.x, y = this.y, z2 = this.z;
      const e = m.elements;
      this.x = e[0] * x + e[4] * y + e[8] * z2;
      this.y = e[1] * x + e[5] * y + e[9] * z2;
      this.z = e[2] * x + e[6] * y + e[10] * z2;
      return this.normalize();
    }
    divide(v) {
      this.x /= v.x;
      this.y /= v.y;
      this.z /= v.z;
      return this;
    }
    divideScalar(scalar) {
      return this.multiplyScalar(1 / scalar);
    }
    min(v) {
      this.x = Math.min(this.x, v.x);
      this.y = Math.min(this.y, v.y);
      this.z = Math.min(this.z, v.z);
      return this;
    }
    max(v) {
      this.x = Math.max(this.x, v.x);
      this.y = Math.max(this.y, v.y);
      this.z = Math.max(this.z, v.z);
      return this;
    }
    clamp(min, max) {
      this.x = Math.max(min.x, Math.min(max.x, this.x));
      this.y = Math.max(min.y, Math.min(max.y, this.y));
      this.z = Math.max(min.z, Math.min(max.z, this.z));
      return this;
    }
    clampScalar(minVal, maxVal) {
      this.x = Math.max(minVal, Math.min(maxVal, this.x));
      this.y = Math.max(minVal, Math.min(maxVal, this.y));
      this.z = Math.max(minVal, Math.min(maxVal, this.z));
      return this;
    }
    clampLength(min, max) {
      const length = this.length();
      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
      this.x = Math.floor(this.x);
      this.y = Math.floor(this.y);
      this.z = Math.floor(this.z);
      return this;
    }
    ceil() {
      this.x = Math.ceil(this.x);
      this.y = Math.ceil(this.y);
      this.z = Math.ceil(this.z);
      return this;
    }
    round() {
      this.x = Math.round(this.x);
      this.y = Math.round(this.y);
      this.z = Math.round(this.z);
      return this;
    }
    roundToZero() {
      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
      return this;
    }
    negate() {
      this.x = -this.x;
      this.y = -this.y;
      this.z = -this.z;
      return this;
    }
    dot(v) {
      return this.x * v.x + this.y * v.y + this.z * v.z;
    }
    // TODO lengthSquared?
    lengthSq() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    manhattanLength() {
      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    normalize() {
      return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
      return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
      this.x += (v.x - this.x) * alpha;
      this.y += (v.y - this.y) * alpha;
      this.z += (v.z - this.z) * alpha;
      return this;
    }
    lerpVectors(v1, v2, alpha) {
      this.x = v1.x + (v2.x - v1.x) * alpha;
      this.y = v1.y + (v2.y - v1.y) * alpha;
      this.z = v1.z + (v2.z - v1.z) * alpha;
      return this;
    }
    cross(v) {
      return this.crossVectors(this, v);
    }
    crossVectors(a, b) {
      const ax = a.x, ay = a.y, az = a.z;
      const bx = b.x, by = b.y, bz = b.z;
      this.x = ay * bz - az * by;
      this.y = az * bx - ax * bz;
      this.z = ax * by - ay * bx;
      return this;
    }
    projectOnVector(v) {
      const denominator = v.lengthSq();
      if (denominator === 0)
        return this.set(0, 0, 0);
      const scalar = v.dot(this) / denominator;
      return this.copy(v).multiplyScalar(scalar);
    }
    projectOnPlane(planeNormal) {
      _vector$b.copy(this).projectOnVector(planeNormal);
      return this.sub(_vector$b);
    }
    reflect(normal) {
      return this.sub(_vector$b.copy(normal).multiplyScalar(2 * this.dot(normal)));
    }
    angleTo(v) {
      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
      if (denominator === 0)
        return Math.PI / 2;
      const theta = this.dot(v) / denominator;
      return Math.acos(clamp(theta, -1, 1));
    }
    distanceTo(v) {
      return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
      const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
      return dx * dx + dy * dy + dz * dz;
    }
    manhattanDistanceTo(v) {
      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
    }
    setFromSpherical(s) {
      return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
    }
    setFromSphericalCoords(radius, phi, theta) {
      const sinPhiRadius = Math.sin(phi) * radius;
      this.x = sinPhiRadius * Math.sin(theta);
      this.y = Math.cos(phi) * radius;
      this.z = sinPhiRadius * Math.cos(theta);
      return this;
    }
    setFromCylindrical(c) {
      return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
    }
    setFromCylindricalCoords(radius, theta, y) {
      this.x = radius * Math.sin(theta);
      this.y = y;
      this.z = radius * Math.cos(theta);
      return this;
    }
    setFromMatrixPosition(m) {
      const e = m.elements;
      this.x = e[12];
      this.y = e[13];
      this.z = e[14];
      return this;
    }
    setFromMatrixScale(m) {
      const sx = this.setFromMatrixColumn(m, 0).length();
      const sy = this.setFromMatrixColumn(m, 1).length();
      const sz = this.setFromMatrixColumn(m, 2).length();
      this.x = sx;
      this.y = sy;
      this.z = sz;
      return this;
    }
    setFromMatrixColumn(m, index) {
      return this.fromArray(m.elements, index * 4);
    }
    setFromMatrix3Column(m, index) {
      return this.fromArray(m.elements, index * 3);
    }
    setFromEuler(e) {
      this.x = e._x;
      this.y = e._y;
      this.z = e._z;
      return this;
    }
    setFromColor(c) {
      this.x = c.r;
      this.y = c.g;
      this.z = c.b;
      return this;
    }
    equals(v) {
      return v.x === this.x && v.y === this.y && v.z === this.z;
    }
    fromArray(array, offset = 0) {
      this.x = array[offset];
      this.y = array[offset + 1];
      this.z = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.x;
      array[offset + 1] = this.y;
      array[offset + 2] = this.z;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.x = attribute.getX(index);
      this.y = attribute.getY(index);
      this.z = attribute.getZ(index);
      return this;
    }
    random() {
      this.x = Math.random();
      this.y = Math.random();
      this.z = Math.random();
      return this;
    }
    randomDirection() {
      const u = (Math.random() - 0.5) * 2;
      const t = Math.random() * Math.PI * 2;
      const f = Math.sqrt(1 - u ** 2);
      this.x = f * Math.cos(t);
      this.y = f * Math.sin(t);
      this.z = u;
      return this;
    }
    *[Symbol.iterator]() {
      yield this.x;
      yield this.y;
      yield this.z;
    }
  };
  var _vector$b = /* @__PURE__ */ new Vector3();
  var _quaternion$4 = /* @__PURE__ */ new Quaternion();
  var Box3 = class {
    constructor(min = new Vector3(Infinity, Infinity, Infinity), max = new Vector3(-Infinity, -Infinity, -Infinity)) {
      this.isBox3 = true;
      this.min = min;
      this.max = max;
    }
    set(min, max) {
      this.min.copy(min);
      this.max.copy(max);
      return this;
    }
    setFromArray(array) {
      this.makeEmpty();
      for (let i = 0, il = array.length; i < il; i += 3) {
        this.expandByPoint(_vector$a.fromArray(array, i));
      }
      return this;
    }
    setFromBufferAttribute(attribute) {
      this.makeEmpty();
      for (let i = 0, il = attribute.count; i < il; i++) {
        this.expandByPoint(_vector$a.fromBufferAttribute(attribute, i));
      }
      return this;
    }
    setFromPoints(points) {
      this.makeEmpty();
      for (let i = 0, il = points.length; i < il; i++) {
        this.expandByPoint(points[i]);
      }
      return this;
    }
    setFromCenterAndSize(center, size) {
      const halfSize = _vector$a.copy(size).multiplyScalar(0.5);
      this.min.copy(center).sub(halfSize);
      this.max.copy(center).add(halfSize);
      return this;
    }
    setFromObject(object, precise = false) {
      this.makeEmpty();
      return this.expandByObject(object, precise);
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(box) {
      this.min.copy(box.min);
      this.max.copy(box.max);
      return this;
    }
    makeEmpty() {
      this.min.x = this.min.y = this.min.z = Infinity;
      this.max.x = this.max.y = this.max.z = -Infinity;
      return this;
    }
    isEmpty() {
      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    getCenter(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
      return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
      this.min.min(point);
      this.max.max(point);
      return this;
    }
    expandByVector(vector) {
      this.min.sub(vector);
      this.max.add(vector);
      return this;
    }
    expandByScalar(scalar) {
      this.min.addScalar(-scalar);
      this.max.addScalar(scalar);
      return this;
    }
    expandByObject(object, precise = false) {
      object.updateWorldMatrix(false, false);
      if (object.boundingBox !== void 0) {
        if (object.boundingBox === null) {
          object.computeBoundingBox();
        }
        _box$3.copy(object.boundingBox);
        _box$3.applyMatrix4(object.matrixWorld);
        this.union(_box$3);
      } else {
        const geometry = object.geometry;
        if (geometry !== void 0) {
          if (precise && geometry.attributes !== void 0 && geometry.attributes.position !== void 0) {
            const position = geometry.attributes.position;
            for (let i = 0, l = position.count; i < l; i++) {
              _vector$a.fromBufferAttribute(position, i).applyMatrix4(object.matrixWorld);
              this.expandByPoint(_vector$a);
            }
          } else {
            if (geometry.boundingBox === null) {
              geometry.computeBoundingBox();
            }
            _box$3.copy(geometry.boundingBox);
            _box$3.applyMatrix4(object.matrixWorld);
            this.union(_box$3);
          }
        }
      }
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        this.expandByObject(children[i], precise);
      }
      return this;
    }
    containsPoint(point) {
      return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
    }
    containsBox(box) {
      return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
    }
    getParameter(point, target) {
      return target.set(
        (point.x - this.min.x) / (this.max.x - this.min.x),
        (point.y - this.min.y) / (this.max.y - this.min.y),
        (point.z - this.min.z) / (this.max.z - this.min.z)
      );
    }
    intersectsBox(box) {
      return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
    }
    intersectsSphere(sphere) {
      this.clampPoint(sphere.center, _vector$a);
      return _vector$a.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
    }
    intersectsPlane(plane) {
      let min, max;
      if (plane.normal.x > 0) {
        min = plane.normal.x * this.min.x;
        max = plane.normal.x * this.max.x;
      } else {
        min = plane.normal.x * this.max.x;
        max = plane.normal.x * this.min.x;
      }
      if (plane.normal.y > 0) {
        min += plane.normal.y * this.min.y;
        max += plane.normal.y * this.max.y;
      } else {
        min += plane.normal.y * this.max.y;
        max += plane.normal.y * this.min.y;
      }
      if (plane.normal.z > 0) {
        min += plane.normal.z * this.min.z;
        max += plane.normal.z * this.max.z;
      } else {
        min += plane.normal.z * this.max.z;
        max += plane.normal.z * this.min.z;
      }
      return min <= -plane.constant && max >= -plane.constant;
    }
    intersectsTriangle(triangle) {
      if (this.isEmpty()) {
        return false;
      }
      this.getCenter(_center);
      _extents.subVectors(this.max, _center);
      _v0$2.subVectors(triangle.a, _center);
      _v1$7.subVectors(triangle.b, _center);
      _v2$4.subVectors(triangle.c, _center);
      _f0.subVectors(_v1$7, _v0$2);
      _f1.subVectors(_v2$4, _v1$7);
      _f2.subVectors(_v0$2, _v2$4);
      let axes = [
        0,
        -_f0.z,
        _f0.y,
        0,
        -_f1.z,
        _f1.y,
        0,
        -_f2.z,
        _f2.y,
        _f0.z,
        0,
        -_f0.x,
        _f1.z,
        0,
        -_f1.x,
        _f2.z,
        0,
        -_f2.x,
        -_f0.y,
        _f0.x,
        0,
        -_f1.y,
        _f1.x,
        0,
        -_f2.y,
        _f2.x,
        0
      ];
      if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
        return false;
      }
      axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
      if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {
        return false;
      }
      _triangleNormal.crossVectors(_f0, _f1);
      axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
      return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);
    }
    clampPoint(point, target) {
      return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
      return this.clampPoint(point, _vector$a).distanceTo(point);
    }
    getBoundingSphere(target) {
      if (this.isEmpty()) {
        target.makeEmpty();
      } else {
        this.getCenter(target.center);
        target.radius = this.getSize(_vector$a).length() * 0.5;
      }
      return target;
    }
    intersect(box) {
      this.min.max(box.min);
      this.max.min(box.max);
      if (this.isEmpty())
        this.makeEmpty();
      return this;
    }
    union(box) {
      this.min.min(box.min);
      this.max.max(box.max);
      return this;
    }
    applyMatrix4(matrix) {
      if (this.isEmpty())
        return this;
      _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
      _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
      _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
      _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
      _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
      this.setFromPoints(_points);
      return this;
    }
    translate(offset) {
      this.min.add(offset);
      this.max.add(offset);
      return this;
    }
    equals(box) {
      return box.min.equals(this.min) && box.max.equals(this.max);
    }
  };
  var _points = [
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3(),
    /* @__PURE__ */ new Vector3()
  ];
  var _vector$a = /* @__PURE__ */ new Vector3();
  var _box$3 = /* @__PURE__ */ new Box3();
  var _v0$2 = /* @__PURE__ */ new Vector3();
  var _v1$7 = /* @__PURE__ */ new Vector3();
  var _v2$4 = /* @__PURE__ */ new Vector3();
  var _f0 = /* @__PURE__ */ new Vector3();
  var _f1 = /* @__PURE__ */ new Vector3();
  var _f2 = /* @__PURE__ */ new Vector3();
  var _center = /* @__PURE__ */ new Vector3();
  var _extents = /* @__PURE__ */ new Vector3();
  var _triangleNormal = /* @__PURE__ */ new Vector3();
  var _testAxis = /* @__PURE__ */ new Vector3();
  function satForAxes(axes, v0, v1, v2, extents) {
    for (let i = 0, j = axes.length - 3; i <= j; i += 3) {
      _testAxis.fromArray(axes, i);
      const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
      const p0 = v0.dot(_testAxis);
      const p1 = v1.dot(_testAxis);
      const p2 = v2.dot(_testAxis);
      if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
        return false;
      }
    }
    return true;
  }
  var _box$2 = /* @__PURE__ */ new Box3();
  var _v1$6 = /* @__PURE__ */ new Vector3();
  var _v2$3 = /* @__PURE__ */ new Vector3();
  var Sphere = class {
    constructor(center = new Vector3(), radius = -1) {
      this.center = center;
      this.radius = radius;
    }
    set(center, radius) {
      this.center.copy(center);
      this.radius = radius;
      return this;
    }
    setFromPoints(points, optionalCenter) {
      const center = this.center;
      if (optionalCenter !== void 0) {
        center.copy(optionalCenter);
      } else {
        _box$2.setFromPoints(points).getCenter(center);
      }
      let maxRadiusSq = 0;
      for (let i = 0, il = points.length; i < il; i++) {
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
      }
      this.radius = Math.sqrt(maxRadiusSq);
      return this;
    }
    copy(sphere) {
      this.center.copy(sphere.center);
      this.radius = sphere.radius;
      return this;
    }
    isEmpty() {
      return this.radius < 0;
    }
    makeEmpty() {
      this.center.set(0, 0, 0);
      this.radius = -1;
      return this;
    }
    containsPoint(point) {
      return point.distanceToSquared(this.center) <= this.radius * this.radius;
    }
    distanceToPoint(point) {
      return point.distanceTo(this.center) - this.radius;
    }
    intersectsSphere(sphere) {
      const radiusSum = this.radius + sphere.radius;
      return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
    }
    intersectsBox(box) {
      return box.intersectsSphere(this);
    }
    intersectsPlane(plane) {
      return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
    }
    clampPoint(point, target) {
      const deltaLengthSq = this.center.distanceToSquared(point);
      target.copy(point);
      if (deltaLengthSq > this.radius * this.radius) {
        target.sub(this.center).normalize();
        target.multiplyScalar(this.radius).add(this.center);
      }
      return target;
    }
    getBoundingBox(target) {
      if (this.isEmpty()) {
        target.makeEmpty();
        return target;
      }
      target.set(this.center, this.center);
      target.expandByScalar(this.radius);
      return target;
    }
    applyMatrix4(matrix) {
      this.center.applyMatrix4(matrix);
      this.radius = this.radius * matrix.getMaxScaleOnAxis();
      return this;
    }
    translate(offset) {
      this.center.add(offset);
      return this;
    }
    expandByPoint(point) {
      if (this.isEmpty()) {
        this.center.copy(point);
        this.radius = 0;
        return this;
      }
      _v1$6.subVectors(point, this.center);
      const lengthSq = _v1$6.lengthSq();
      if (lengthSq > this.radius * this.radius) {
        const length = Math.sqrt(lengthSq);
        const delta = (length - this.radius) * 0.5;
        this.center.addScaledVector(_v1$6, delta / length);
        this.radius += delta;
      }
      return this;
    }
    union(sphere) {
      if (sphere.isEmpty()) {
        return this;
      }
      if (this.isEmpty()) {
        this.copy(sphere);
        return this;
      }
      if (this.center.equals(sphere.center) === true) {
        this.radius = Math.max(this.radius, sphere.radius);
      } else {
        _v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);
        this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));
        this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));
      }
      return this;
    }
    equals(sphere) {
      return sphere.center.equals(this.center) && sphere.radius === this.radius;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var _vector$9 = /* @__PURE__ */ new Vector3();
  var _segCenter = /* @__PURE__ */ new Vector3();
  var _segDir = /* @__PURE__ */ new Vector3();
  var _diff = /* @__PURE__ */ new Vector3();
  var _edge1 = /* @__PURE__ */ new Vector3();
  var _edge2 = /* @__PURE__ */ new Vector3();
  var _normal$1 = /* @__PURE__ */ new Vector3();
  var Ray = class {
    constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {
      this.origin = origin;
      this.direction = direction;
    }
    set(origin, direction) {
      this.origin.copy(origin);
      this.direction.copy(direction);
      return this;
    }
    copy(ray) {
      this.origin.copy(ray.origin);
      this.direction.copy(ray.direction);
      return this;
    }
    at(t, target) {
      return target.copy(this.origin).addScaledVector(this.direction, t);
    }
    lookAt(v) {
      this.direction.copy(v).sub(this.origin).normalize();
      return this;
    }
    recast(t) {
      this.origin.copy(this.at(t, _vector$9));
      return this;
    }
    closestPointToPoint(point, target) {
      target.subVectors(point, this.origin);
      const directionDistance = target.dot(this.direction);
      if (directionDistance < 0) {
        return target.copy(this.origin);
      }
      return target.copy(this.origin).addScaledVector(this.direction, directionDistance);
    }
    distanceToPoint(point) {
      return Math.sqrt(this.distanceSqToPoint(point));
    }
    distanceSqToPoint(point) {
      const directionDistance = _vector$9.subVectors(point, this.origin).dot(this.direction);
      if (directionDistance < 0) {
        return this.origin.distanceToSquared(point);
      }
      _vector$9.copy(this.origin).addScaledVector(this.direction, directionDistance);
      return _vector$9.distanceToSquared(point);
    }
    distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
      _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
      _segDir.copy(v1).sub(v0).normalize();
      _diff.copy(this.origin).sub(_segCenter);
      const segExtent = v0.distanceTo(v1) * 0.5;
      const a01 = -this.direction.dot(_segDir);
      const b0 = _diff.dot(this.direction);
      const b1 = -_diff.dot(_segDir);
      const c = _diff.lengthSq();
      const det = Math.abs(1 - a01 * a01);
      let s0, s1, sqrDist, extDet;
      if (det > 0) {
        s0 = a01 * b1 - b0;
        s1 = a01 * b0 - b1;
        extDet = segExtent * det;
        if (s0 >= 0) {
          if (s1 >= -extDet) {
            if (s1 <= extDet) {
              const invDet = 1 / det;
              s0 *= invDet;
              s1 *= invDet;
              sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
            } else {
              s1 = segExtent;
              s0 = Math.max(0, -(a01 * s1 + b0));
              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
            }
          } else {
            s1 = -segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        } else {
          if (s1 <= -extDet) {
            s0 = Math.max(0, -(-a01 * segExtent + b0));
            s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          } else if (s1 <= extDet) {
            s0 = 0;
            s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = s1 * (s1 + 2 * b1) + c;
          } else {
            s0 = Math.max(0, -(a01 * segExtent + b0));
            s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        }
      } else {
        s1 = a01 > 0 ? -segExtent : segExtent;
        s0 = Math.max(0, -(a01 * s1 + b0));
        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
      }
      if (optionalPointOnRay) {
        optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);
      }
      if (optionalPointOnSegment) {
        optionalPointOnSegment.copy(_segCenter).addScaledVector(_segDir, s1);
      }
      return sqrDist;
    }
    intersectSphere(sphere, target) {
      _vector$9.subVectors(sphere.center, this.origin);
      const tca = _vector$9.dot(this.direction);
      const d2 = _vector$9.dot(_vector$9) - tca * tca;
      const radius2 = sphere.radius * sphere.radius;
      if (d2 > radius2)
        return null;
      const thc = Math.sqrt(radius2 - d2);
      const t0 = tca - thc;
      const t1 = tca + thc;
      if (t1 < 0)
        return null;
      if (t0 < 0)
        return this.at(t1, target);
      return this.at(t0, target);
    }
    intersectsSphere(sphere) {
      return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
    }
    distanceToPlane(plane) {
      const denominator = plane.normal.dot(this.direction);
      if (denominator === 0) {
        if (plane.distanceToPoint(this.origin) === 0) {
          return 0;
        }
        return null;
      }
      const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
      return t >= 0 ? t : null;
    }
    intersectPlane(plane, target) {
      const t = this.distanceToPlane(plane);
      if (t === null) {
        return null;
      }
      return this.at(t, target);
    }
    intersectsPlane(plane) {
      const distToPoint = plane.distanceToPoint(this.origin);
      if (distToPoint === 0) {
        return true;
      }
      const denominator = plane.normal.dot(this.direction);
      if (denominator * distToPoint < 0) {
        return true;
      }
      return false;
    }
    intersectBox(box, target) {
      let tmin, tmax, tymin, tymax, tzmin, tzmax;
      const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
      const origin = this.origin;
      if (invdirx >= 0) {
        tmin = (box.min.x - origin.x) * invdirx;
        tmax = (box.max.x - origin.x) * invdirx;
      } else {
        tmin = (box.max.x - origin.x) * invdirx;
        tmax = (box.min.x - origin.x) * invdirx;
      }
      if (invdiry >= 0) {
        tymin = (box.min.y - origin.y) * invdiry;
        tymax = (box.max.y - origin.y) * invdiry;
      } else {
        tymin = (box.max.y - origin.y) * invdiry;
        tymax = (box.min.y - origin.y) * invdiry;
      }
      if (tmin > tymax || tymin > tmax)
        return null;
      if (tymin > tmin || isNaN(tmin))
        tmin = tymin;
      if (tymax < tmax || isNaN(tmax))
        tmax = tymax;
      if (invdirz >= 0) {
        tzmin = (box.min.z - origin.z) * invdirz;
        tzmax = (box.max.z - origin.z) * invdirz;
      } else {
        tzmin = (box.max.z - origin.z) * invdirz;
        tzmax = (box.min.z - origin.z) * invdirz;
      }
      if (tmin > tzmax || tzmin > tmax)
        return null;
      if (tzmin > tmin || tmin !== tmin)
        tmin = tzmin;
      if (tzmax < tmax || tmax !== tmax)
        tmax = tzmax;
      if (tmax < 0)
        return null;
      return this.at(tmin >= 0 ? tmin : tmax, target);
    }
    intersectsBox(box) {
      return this.intersectBox(box, _vector$9) !== null;
    }
    intersectTriangle(a, b, c, backfaceCulling, target) {
      _edge1.subVectors(b, a);
      _edge2.subVectors(c, a);
      _normal$1.crossVectors(_edge1, _edge2);
      let DdN = this.direction.dot(_normal$1);
      let sign;
      if (DdN > 0) {
        if (backfaceCulling)
          return null;
        sign = 1;
      } else if (DdN < 0) {
        sign = -1;
        DdN = -DdN;
      } else {
        return null;
      }
      _diff.subVectors(this.origin, a);
      const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
      if (DdQxE2 < 0) {
        return null;
      }
      const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff));
      if (DdE1xQ < 0) {
        return null;
      }
      if (DdQxE2 + DdE1xQ > DdN) {
        return null;
      }
      const QdN = -sign * _diff.dot(_normal$1);
      if (QdN < 0) {
        return null;
      }
      return this.at(QdN / DdN, target);
    }
    applyMatrix4(matrix4) {
      this.origin.applyMatrix4(matrix4);
      this.direction.transformDirection(matrix4);
      return this;
    }
    equals(ray) {
      return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var Matrix4 = class _Matrix4 {
    constructor(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      _Matrix4.prototype.isMatrix4 = true;
      this.elements = [
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      ];
      if (n11 !== void 0) {
        this.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
      }
    }
    set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
      const te = this.elements;
      te[0] = n11;
      te[4] = n12;
      te[8] = n13;
      te[12] = n14;
      te[1] = n21;
      te[5] = n22;
      te[9] = n23;
      te[13] = n24;
      te[2] = n31;
      te[6] = n32;
      te[10] = n33;
      te[14] = n34;
      te[3] = n41;
      te[7] = n42;
      te[11] = n43;
      te[15] = n44;
      return this;
    }
    identity() {
      this.set(
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    clone() {
      return new _Matrix4().fromArray(this.elements);
    }
    copy(m) {
      const te = this.elements;
      const me = m.elements;
      te[0] = me[0];
      te[1] = me[1];
      te[2] = me[2];
      te[3] = me[3];
      te[4] = me[4];
      te[5] = me[5];
      te[6] = me[6];
      te[7] = me[7];
      te[8] = me[8];
      te[9] = me[9];
      te[10] = me[10];
      te[11] = me[11];
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      te[15] = me[15];
      return this;
    }
    copyPosition(m) {
      const te = this.elements, me = m.elements;
      te[12] = me[12];
      te[13] = me[13];
      te[14] = me[14];
      return this;
    }
    setFromMatrix3(m) {
      const me = m.elements;
      this.set(
        me[0],
        me[3],
        me[6],
        0,
        me[1],
        me[4],
        me[7],
        0,
        me[2],
        me[5],
        me[8],
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
      xAxis.setFromMatrixColumn(this, 0);
      yAxis.setFromMatrixColumn(this, 1);
      zAxis.setFromMatrixColumn(this, 2);
      return this;
    }
    makeBasis(xAxis, yAxis, zAxis) {
      this.set(
        xAxis.x,
        yAxis.x,
        zAxis.x,
        0,
        xAxis.y,
        yAxis.y,
        zAxis.y,
        0,
        xAxis.z,
        yAxis.z,
        zAxis.z,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    extractRotation(m) {
      const te = this.elements;
      const me = m.elements;
      const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();
      const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();
      const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();
      te[0] = me[0] * scaleX;
      te[1] = me[1] * scaleX;
      te[2] = me[2] * scaleX;
      te[3] = 0;
      te[4] = me[4] * scaleY;
      te[5] = me[5] * scaleY;
      te[6] = me[6] * scaleY;
      te[7] = 0;
      te[8] = me[8] * scaleZ;
      te[9] = me[9] * scaleZ;
      te[10] = me[10] * scaleZ;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
    makeRotationFromEuler(euler) {
      const te = this.elements;
      const x = euler.x, y = euler.y, z2 = euler.z;
      const a = Math.cos(x), b = Math.sin(x);
      const c = Math.cos(y), d = Math.sin(y);
      const e = Math.cos(z2), f = Math.sin(z2);
      if (euler.order === "XYZ") {
        const ae = a * e, af = a * f, be = b * e, bf = b * f;
        te[0] = c * e;
        te[4] = -c * f;
        te[8] = d;
        te[1] = af + be * d;
        te[5] = ae - bf * d;
        te[9] = -b * c;
        te[2] = bf - ae * d;
        te[6] = be + af * d;
        te[10] = a * c;
      } else if (euler.order === "YXZ") {
        const ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce + df * b;
        te[4] = de * b - cf;
        te[8] = a * d;
        te[1] = a * f;
        te[5] = a * e;
        te[9] = -b;
        te[2] = cf * b - de;
        te[6] = df + ce * b;
        te[10] = a * c;
      } else if (euler.order === "ZXY") {
        const ce = c * e, cf = c * f, de = d * e, df = d * f;
        te[0] = ce - df * b;
        te[4] = -a * f;
        te[8] = de + cf * b;
        te[1] = cf + de * b;
        te[5] = a * e;
        te[9] = df - ce * b;
        te[2] = -a * d;
        te[6] = b;
        te[10] = a * c;
      } else if (euler.order === "ZYX") {
        const ae = a * e, af = a * f, be = b * e, bf = b * f;
        te[0] = c * e;
        te[4] = be * d - af;
        te[8] = ae * d + bf;
        te[1] = c * f;
        te[5] = bf * d + ae;
        te[9] = af * d - be;
        te[2] = -d;
        te[6] = b * c;
        te[10] = a * c;
      } else if (euler.order === "YZX") {
        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
        te[0] = c * e;
        te[4] = bd - ac * f;
        te[8] = bc * f + ad;
        te[1] = f;
        te[5] = a * e;
        te[9] = -b * e;
        te[2] = -d * e;
        te[6] = ad * f + bc;
        te[10] = ac - bd * f;
      } else if (euler.order === "XZY") {
        const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
        te[0] = c * e;
        te[4] = -f;
        te[8] = d * e;
        te[1] = ac * f + bd;
        te[5] = a * e;
        te[9] = ad * f - bc;
        te[2] = bc * f - ad;
        te[6] = b * e;
        te[10] = bd * f + ac;
      }
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
    makeRotationFromQuaternion(q) {
      return this.compose(_zero, q, _one);
    }
    lookAt(eye, target, up) {
      const te = this.elements;
      _z.subVectors(eye, target);
      if (_z.lengthSq() === 0) {
        _z.z = 1;
      }
      _z.normalize();
      _x.crossVectors(up, _z);
      if (_x.lengthSq() === 0) {
        if (Math.abs(up.z) === 1) {
          _z.x += 1e-4;
        } else {
          _z.z += 1e-4;
        }
        _z.normalize();
        _x.crossVectors(up, _z);
      }
      _x.normalize();
      _y.crossVectors(_z, _x);
      te[0] = _x.x;
      te[4] = _y.x;
      te[8] = _z.x;
      te[1] = _x.y;
      te[5] = _y.y;
      te[9] = _z.y;
      te[2] = _x.z;
      te[6] = _y.z;
      te[10] = _z.z;
      return this;
    }
    multiply(m) {
      return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
      return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
      const ae = a.elements;
      const be = b.elements;
      const te = this.elements;
      const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
      const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
      const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
      const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
      const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
      const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
      const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
      const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
      te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
      te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
      te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
      te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
      te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
      te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
      te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
      te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
      te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
      te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
      te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
      te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
      te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
      te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
      te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
      te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
      return this;
    }
    multiplyScalar(s) {
      const te = this.elements;
      te[0] *= s;
      te[4] *= s;
      te[8] *= s;
      te[12] *= s;
      te[1] *= s;
      te[5] *= s;
      te[9] *= s;
      te[13] *= s;
      te[2] *= s;
      te[6] *= s;
      te[10] *= s;
      te[14] *= s;
      te[3] *= s;
      te[7] *= s;
      te[11] *= s;
      te[15] *= s;
      return this;
    }
    determinant() {
      const te = this.elements;
      const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
      const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
      const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
      const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
      return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
    }
    transpose() {
      const te = this.elements;
      let tmp;
      tmp = te[1];
      te[1] = te[4];
      te[4] = tmp;
      tmp = te[2];
      te[2] = te[8];
      te[8] = tmp;
      tmp = te[6];
      te[6] = te[9];
      te[9] = tmp;
      tmp = te[3];
      te[3] = te[12];
      te[12] = tmp;
      tmp = te[7];
      te[7] = te[13];
      te[13] = tmp;
      tmp = te[11];
      te[11] = te[14];
      te[14] = tmp;
      return this;
    }
    setPosition(x, y, z2) {
      const te = this.elements;
      if (x.isVector3) {
        te[12] = x.x;
        te[13] = x.y;
        te[14] = x.z;
      } else {
        te[12] = x;
        te[13] = y;
        te[14] = z2;
      }
      return this;
    }
    invert() {
      const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
      const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
      if (det === 0)
        return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      const detInv = 1 / det;
      te[0] = t11 * detInv;
      te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
      te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
      te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
      te[4] = t12 * detInv;
      te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
      te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
      te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
      te[8] = t13 * detInv;
      te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
      te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
      te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
      te[12] = t14 * detInv;
      te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
      te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
      te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
      return this;
    }
    scale(v) {
      const te = this.elements;
      const x = v.x, y = v.y, z2 = v.z;
      te[0] *= x;
      te[4] *= y;
      te[8] *= z2;
      te[1] *= x;
      te[5] *= y;
      te[9] *= z2;
      te[2] *= x;
      te[6] *= y;
      te[10] *= z2;
      te[3] *= x;
      te[7] *= y;
      te[11] *= z2;
      return this;
    }
    getMaxScaleOnAxis() {
      const te = this.elements;
      const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
      const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
      const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
      return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
    }
    makeTranslation(x, y, z2) {
      if (x.isVector3) {
        this.set(
          1,
          0,
          0,
          x.x,
          0,
          1,
          0,
          x.y,
          0,
          0,
          1,
          x.z,
          0,
          0,
          0,
          1
        );
      } else {
        this.set(
          1,
          0,
          0,
          x,
          0,
          1,
          0,
          y,
          0,
          0,
          1,
          z2,
          0,
          0,
          0,
          1
        );
      }
      return this;
    }
    makeRotationX(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        1,
        0,
        0,
        0,
        0,
        c,
        -s,
        0,
        0,
        s,
        c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeRotationY(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        c,
        0,
        s,
        0,
        0,
        1,
        0,
        0,
        -s,
        0,
        c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeRotationZ(theta) {
      const c = Math.cos(theta), s = Math.sin(theta);
      this.set(
        c,
        -s,
        0,
        0,
        s,
        c,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeRotationAxis(axis, angle) {
      const c = Math.cos(angle);
      const s = Math.sin(angle);
      const t = 1 - c;
      const x = axis.x, y = axis.y, z2 = axis.z;
      const tx = t * x, ty = t * y;
      this.set(
        tx * x + c,
        tx * y - s * z2,
        tx * z2 + s * y,
        0,
        tx * y + s * z2,
        ty * y + c,
        ty * z2 - s * x,
        0,
        tx * z2 - s * y,
        ty * z2 + s * x,
        t * z2 * z2 + c,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeScale(x, y, z2) {
      this.set(
        x,
        0,
        0,
        0,
        0,
        y,
        0,
        0,
        0,
        0,
        z2,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    makeShear(xy, xz, yx, yz, zx, zy) {
      this.set(
        1,
        yx,
        zx,
        0,
        xy,
        1,
        zy,
        0,
        xz,
        yz,
        1,
        0,
        0,
        0,
        0,
        1
      );
      return this;
    }
    compose(position, quaternion, scale) {
      const te = this.elements;
      const x = quaternion._x, y = quaternion._y, z2 = quaternion._z, w = quaternion._w;
      const x2 = x + x, y2 = y + y, z22 = z2 + z2;
      const xx = x * x2, xy = x * y2, xz = x * z22;
      const yy = y * y2, yz = y * z22, zz = z2 * z22;
      const wx = w * x2, wy = w * y2, wz = w * z22;
      const sx = scale.x, sy = scale.y, sz = scale.z;
      te[0] = (1 - (yy + zz)) * sx;
      te[1] = (xy + wz) * sx;
      te[2] = (xz - wy) * sx;
      te[3] = 0;
      te[4] = (xy - wz) * sy;
      te[5] = (1 - (xx + zz)) * sy;
      te[6] = (yz + wx) * sy;
      te[7] = 0;
      te[8] = (xz + wy) * sz;
      te[9] = (yz - wx) * sz;
      te[10] = (1 - (xx + yy)) * sz;
      te[11] = 0;
      te[12] = position.x;
      te[13] = position.y;
      te[14] = position.z;
      te[15] = 1;
      return this;
    }
    decompose(position, quaternion, scale) {
      const te = this.elements;
      let sx = _v1$5.set(te[0], te[1], te[2]).length();
      const sy = _v1$5.set(te[4], te[5], te[6]).length();
      const sz = _v1$5.set(te[8], te[9], te[10]).length();
      const det = this.determinant();
      if (det < 0)
        sx = -sx;
      position.x = te[12];
      position.y = te[13];
      position.z = te[14];
      _m1$2.copy(this);
      const invSX = 1 / sx;
      const invSY = 1 / sy;
      const invSZ = 1 / sz;
      _m1$2.elements[0] *= invSX;
      _m1$2.elements[1] *= invSX;
      _m1$2.elements[2] *= invSX;
      _m1$2.elements[4] *= invSY;
      _m1$2.elements[5] *= invSY;
      _m1$2.elements[6] *= invSY;
      _m1$2.elements[8] *= invSZ;
      _m1$2.elements[9] *= invSZ;
      _m1$2.elements[10] *= invSZ;
      quaternion.setFromRotationMatrix(_m1$2);
      scale.x = sx;
      scale.y = sy;
      scale.z = sz;
      return this;
    }
    makePerspective(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
      const te = this.elements;
      const x = 2 * near / (right - left);
      const y = 2 * near / (top - bottom);
      const a = (right + left) / (right - left);
      const b = (top + bottom) / (top - bottom);
      let c, d;
      if (coordinateSystem === WebGLCoordinateSystem) {
        c = -(far + near) / (far - near);
        d = -2 * far * near / (far - near);
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        c = -far / (far - near);
        d = -far * near / (far - near);
      } else {
        throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + coordinateSystem);
      }
      te[0] = x;
      te[4] = 0;
      te[8] = a;
      te[12] = 0;
      te[1] = 0;
      te[5] = y;
      te[9] = b;
      te[13] = 0;
      te[2] = 0;
      te[6] = 0;
      te[10] = c;
      te[14] = d;
      te[3] = 0;
      te[7] = 0;
      te[11] = -1;
      te[15] = 0;
      return this;
    }
    makeOrthographic(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
      const te = this.elements;
      const w = 1 / (right - left);
      const h = 1 / (top - bottom);
      const p = 1 / (far - near);
      const x = (right + left) * w;
      const y = (top + bottom) * h;
      let z2, zInv;
      if (coordinateSystem === WebGLCoordinateSystem) {
        z2 = (far + near) * p;
        zInv = -2 * p;
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        z2 = near * p;
        zInv = -1 * p;
      } else {
        throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + coordinateSystem);
      }
      te[0] = 2 * w;
      te[4] = 0;
      te[8] = 0;
      te[12] = -x;
      te[1] = 0;
      te[5] = 2 * h;
      te[9] = 0;
      te[13] = -y;
      te[2] = 0;
      te[6] = 0;
      te[10] = zInv;
      te[14] = -z2;
      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[15] = 1;
      return this;
    }
    equals(matrix) {
      const te = this.elements;
      const me = matrix.elements;
      for (let i = 0; i < 16; i++) {
        if (te[i] !== me[i])
          return false;
      }
      return true;
    }
    fromArray(array, offset = 0) {
      for (let i = 0; i < 16; i++) {
        this.elements[i] = array[i + offset];
      }
      return this;
    }
    toArray(array = [], offset = 0) {
      const te = this.elements;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      array[offset + 9] = te[9];
      array[offset + 10] = te[10];
      array[offset + 11] = te[11];
      array[offset + 12] = te[12];
      array[offset + 13] = te[13];
      array[offset + 14] = te[14];
      array[offset + 15] = te[15];
      return array;
    }
  };
  var _v1$5 = /* @__PURE__ */ new Vector3();
  var _m1$2 = /* @__PURE__ */ new Matrix4();
  var _zero = /* @__PURE__ */ new Vector3(0, 0, 0);
  var _one = /* @__PURE__ */ new Vector3(1, 1, 1);
  var _x = /* @__PURE__ */ new Vector3();
  var _y = /* @__PURE__ */ new Vector3();
  var _z = /* @__PURE__ */ new Vector3();
  var _matrix = /* @__PURE__ */ new Matrix4();
  var _quaternion$3 = /* @__PURE__ */ new Quaternion();
  var Euler = class _Euler {
    constructor(x = 0, y = 0, z2 = 0, order = _Euler.DEFAULT_ORDER) {
      this.isEuler = true;
      this._x = x;
      this._y = y;
      this._z = z2;
      this._order = order;
    }
    get x() {
      return this._x;
    }
    set x(value) {
      this._x = value;
      this._onChangeCallback();
    }
    get y() {
      return this._y;
    }
    set y(value) {
      this._y = value;
      this._onChangeCallback();
    }
    get z() {
      return this._z;
    }
    set z(value) {
      this._z = value;
      this._onChangeCallback();
    }
    get order() {
      return this._order;
    }
    set order(value) {
      this._order = value;
      this._onChangeCallback();
    }
    set(x, y, z2, order = this._order) {
      this._x = x;
      this._y = y;
      this._z = z2;
      this._order = order;
      this._onChangeCallback();
      return this;
    }
    clone() {
      return new this.constructor(this._x, this._y, this._z, this._order);
    }
    copy(euler) {
      this._x = euler._x;
      this._y = euler._y;
      this._z = euler._z;
      this._order = euler._order;
      this._onChangeCallback();
      return this;
    }
    setFromRotationMatrix(m, order = this._order, update = true) {
      const te = m.elements;
      const m11 = te[0], m12 = te[4], m13 = te[8];
      const m21 = te[1], m22 = te[5], m23 = te[9];
      const m31 = te[2], m32 = te[6], m33 = te[10];
      switch (order) {
        case "XYZ":
          this._y = Math.asin(clamp(m13, -1, 1));
          if (Math.abs(m13) < 0.9999999) {
            this._x = Math.atan2(-m23, m33);
            this._z = Math.atan2(-m12, m11);
          } else {
            this._x = Math.atan2(m32, m22);
            this._z = 0;
          }
          break;
        case "YXZ":
          this._x = Math.asin(-clamp(m23, -1, 1));
          if (Math.abs(m23) < 0.9999999) {
            this._y = Math.atan2(m13, m33);
            this._z = Math.atan2(m21, m22);
          } else {
            this._y = Math.atan2(-m31, m11);
            this._z = 0;
          }
          break;
        case "ZXY":
          this._x = Math.asin(clamp(m32, -1, 1));
          if (Math.abs(m32) < 0.9999999) {
            this._y = Math.atan2(-m31, m33);
            this._z = Math.atan2(-m12, m22);
          } else {
            this._y = 0;
            this._z = Math.atan2(m21, m11);
          }
          break;
        case "ZYX":
          this._y = Math.asin(-clamp(m31, -1, 1));
          if (Math.abs(m31) < 0.9999999) {
            this._x = Math.atan2(m32, m33);
            this._z = Math.atan2(m21, m11);
          } else {
            this._x = 0;
            this._z = Math.atan2(-m12, m22);
          }
          break;
        case "YZX":
          this._z = Math.asin(clamp(m21, -1, 1));
          if (Math.abs(m21) < 0.9999999) {
            this._x = Math.atan2(-m23, m22);
            this._y = Math.atan2(-m31, m11);
          } else {
            this._x = 0;
            this._y = Math.atan2(m13, m33);
          }
          break;
        case "XZY":
          this._z = Math.asin(-clamp(m12, -1, 1));
          if (Math.abs(m12) < 0.9999999) {
            this._x = Math.atan2(m32, m22);
            this._y = Math.atan2(m13, m11);
          } else {
            this._x = Math.atan2(-m23, m33);
            this._y = 0;
          }
          break;
        default:
          console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
      }
      this._order = order;
      if (update === true)
        this._onChangeCallback();
      return this;
    }
    setFromQuaternion(q, order, update) {
      _matrix.makeRotationFromQuaternion(q);
      return this.setFromRotationMatrix(_matrix, order, update);
    }
    setFromVector3(v, order = this._order) {
      return this.set(v.x, v.y, v.z, order);
    }
    reorder(newOrder) {
      _quaternion$3.setFromEuler(this);
      return this.setFromQuaternion(_quaternion$3, newOrder);
    }
    equals(euler) {
      return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
    }
    fromArray(array) {
      this._x = array[0];
      this._y = array[1];
      this._z = array[2];
      if (array[3] !== void 0)
        this._order = array[3];
      this._onChangeCallback();
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this._x;
      array[offset + 1] = this._y;
      array[offset + 2] = this._z;
      array[offset + 3] = this._order;
      return array;
    }
    _onChange(callback) {
      this._onChangeCallback = callback;
      return this;
    }
    _onChangeCallback() {
    }
    *[Symbol.iterator]() {
      yield this._x;
      yield this._y;
      yield this._z;
      yield this._order;
    }
  };
  Euler.DEFAULT_ORDER = "XYZ";
  var Layers = class {
    constructor() {
      this.mask = 1 | 0;
    }
    set(channel) {
      this.mask = (1 << channel | 0) >>> 0;
    }
    enable(channel) {
      this.mask |= 1 << channel | 0;
    }
    enableAll() {
      this.mask = 4294967295 | 0;
    }
    toggle(channel) {
      this.mask ^= 1 << channel | 0;
    }
    disable(channel) {
      this.mask &= ~(1 << channel | 0);
    }
    disableAll() {
      this.mask = 0;
    }
    test(layers) {
      return (this.mask & layers.mask) !== 0;
    }
    isEnabled(channel) {
      return (this.mask & (1 << channel | 0)) !== 0;
    }
  };
  var _object3DId = 0;
  var _v1$4 = /* @__PURE__ */ new Vector3();
  var _q1 = /* @__PURE__ */ new Quaternion();
  var _m1$1 = /* @__PURE__ */ new Matrix4();
  var _target = /* @__PURE__ */ new Vector3();
  var _position$3 = /* @__PURE__ */ new Vector3();
  var _scale$2 = /* @__PURE__ */ new Vector3();
  var _quaternion$2 = /* @__PURE__ */ new Quaternion();
  var _xAxis = /* @__PURE__ */ new Vector3(1, 0, 0);
  var _yAxis = /* @__PURE__ */ new Vector3(0, 1, 0);
  var _zAxis = /* @__PURE__ */ new Vector3(0, 0, 1);
  var _addedEvent = { type: "added" };
  var _removedEvent = { type: "removed" };
  var Object3D = class _Object3D extends EventDispatcher {
    constructor() {
      super();
      this.isObject3D = true;
      Object.defineProperty(this, "id", { value: _object3DId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "Object3D";
      this.parent = null;
      this.children = [];
      this.up = _Object3D.DEFAULT_UP.clone();
      const position = new Vector3();
      const rotation = new Euler();
      const quaternion = new Quaternion();
      const scale = new Vector3(1, 1, 1);
      function onRotationChange() {
        quaternion.setFromEuler(rotation, false);
      }
      function onQuaternionChange() {
        rotation.setFromQuaternion(quaternion, void 0, false);
      }
      rotation._onChange(onRotationChange);
      quaternion._onChange(onQuaternionChange);
      Object.defineProperties(this, {
        position: {
          configurable: true,
          enumerable: true,
          value: position
        },
        rotation: {
          configurable: true,
          enumerable: true,
          value: rotation
        },
        quaternion: {
          configurable: true,
          enumerable: true,
          value: quaternion
        },
        scale: {
          configurable: true,
          enumerable: true,
          value: scale
        },
        modelViewMatrix: {
          value: new Matrix4()
        },
        normalMatrix: {
          value: new Matrix3()
        }
      });
      this.matrix = new Matrix4();
      this.matrixWorld = new Matrix4();
      this.matrixAutoUpdate = _Object3D.DEFAULT_MATRIX_AUTO_UPDATE;
      this.matrixWorldNeedsUpdate = false;
      this.matrixWorldAutoUpdate = _Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;
      this.layers = new Layers();
      this.visible = true;
      this.castShadow = false;
      this.receiveShadow = false;
      this.frustumCulled = true;
      this.renderOrder = 0;
      this.animations = [];
      this.userData = {};
    }
    onBeforeRender() {
    }
    onAfterRender() {
    }
    applyMatrix4(matrix) {
      if (this.matrixAutoUpdate)
        this.updateMatrix();
      this.matrix.premultiply(matrix);
      this.matrix.decompose(this.position, this.quaternion, this.scale);
    }
    applyQuaternion(q) {
      this.quaternion.premultiply(q);
      return this;
    }
    setRotationFromAxisAngle(axis, angle) {
      this.quaternion.setFromAxisAngle(axis, angle);
    }
    setRotationFromEuler(euler) {
      this.quaternion.setFromEuler(euler, true);
    }
    setRotationFromMatrix(m) {
      this.quaternion.setFromRotationMatrix(m);
    }
    setRotationFromQuaternion(q) {
      this.quaternion.copy(q);
    }
    rotateOnAxis(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.multiply(_q1);
      return this;
    }
    rotateOnWorldAxis(axis, angle) {
      _q1.setFromAxisAngle(axis, angle);
      this.quaternion.premultiply(_q1);
      return this;
    }
    rotateX(angle) {
      return this.rotateOnAxis(_xAxis, angle);
    }
    rotateY(angle) {
      return this.rotateOnAxis(_yAxis, angle);
    }
    rotateZ(angle) {
      return this.rotateOnAxis(_zAxis, angle);
    }
    translateOnAxis(axis, distance) {
      _v1$4.copy(axis).applyQuaternion(this.quaternion);
      this.position.add(_v1$4.multiplyScalar(distance));
      return this;
    }
    translateX(distance) {
      return this.translateOnAxis(_xAxis, distance);
    }
    translateY(distance) {
      return this.translateOnAxis(_yAxis, distance);
    }
    translateZ(distance) {
      return this.translateOnAxis(_zAxis, distance);
    }
    localToWorld(vector) {
      this.updateWorldMatrix(true, false);
      return vector.applyMatrix4(this.matrixWorld);
    }
    worldToLocal(vector) {
      this.updateWorldMatrix(true, false);
      return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
    }
    lookAt(x, y, z2) {
      if (x.isVector3) {
        _target.copy(x);
      } else {
        _target.set(x, y, z2);
      }
      const parent = this.parent;
      this.updateWorldMatrix(true, false);
      _position$3.setFromMatrixPosition(this.matrixWorld);
      if (this.isCamera || this.isLight) {
        _m1$1.lookAt(_position$3, _target, this.up);
      } else {
        _m1$1.lookAt(_target, _position$3, this.up);
      }
      this.quaternion.setFromRotationMatrix(_m1$1);
      if (parent) {
        _m1$1.extractRotation(parent.matrixWorld);
        _q1.setFromRotationMatrix(_m1$1);
        this.quaternion.premultiply(_q1.invert());
      }
    }
    add(object) {
      if (arguments.length > 1) {
        for (let i = 0; i < arguments.length; i++) {
          this.add(arguments[i]);
        }
        return this;
      }
      if (object === this) {
        console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
        return this;
      }
      if (object && object.isObject3D) {
        if (object.parent !== null) {
          object.parent.remove(object);
        }
        object.parent = this;
        this.children.push(object);
        object.dispatchEvent(_addedEvent);
      } else {
        console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
      }
      return this;
    }
    remove(object) {
      if (arguments.length > 1) {
        for (let i = 0; i < arguments.length; i++) {
          this.remove(arguments[i]);
        }
        return this;
      }
      const index = this.children.indexOf(object);
      if (index !== -1) {
        object.parent = null;
        this.children.splice(index, 1);
        object.dispatchEvent(_removedEvent);
      }
      return this;
    }
    removeFromParent() {
      const parent = this.parent;
      if (parent !== null) {
        parent.remove(this);
      }
      return this;
    }
    clear() {
      for (let i = 0; i < this.children.length; i++) {
        const object = this.children[i];
        object.parent = null;
        object.dispatchEvent(_removedEvent);
      }
      this.children.length = 0;
      return this;
    }
    attach(object) {
      this.updateWorldMatrix(true, false);
      _m1$1.copy(this.matrixWorld).invert();
      if (object.parent !== null) {
        object.parent.updateWorldMatrix(true, false);
        _m1$1.multiply(object.parent.matrixWorld);
      }
      object.applyMatrix4(_m1$1);
      this.add(object);
      object.updateWorldMatrix(false, true);
      return this;
    }
    getObjectById(id) {
      return this.getObjectByProperty("id", id);
    }
    getObjectByName(name) {
      return this.getObjectByProperty("name", name);
    }
    getObjectByProperty(name, value) {
      if (this[name] === value)
        return this;
      for (let i = 0, l = this.children.length; i < l; i++) {
        const child = this.children[i];
        const object = child.getObjectByProperty(name, value);
        if (object !== void 0) {
          return object;
        }
      }
      return void 0;
    }
    getObjectsByProperty(name, value) {
      let result = [];
      if (this[name] === value)
        result.push(this);
      for (let i = 0, l = this.children.length; i < l; i++) {
        const childResult = this.children[i].getObjectsByProperty(name, value);
        if (childResult.length > 0) {
          result = result.concat(childResult);
        }
      }
      return result;
    }
    getWorldPosition(target) {
      this.updateWorldMatrix(true, false);
      return target.setFromMatrixPosition(this.matrixWorld);
    }
    getWorldQuaternion(target) {
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position$3, target, _scale$2);
      return target;
    }
    getWorldScale(target) {
      this.updateWorldMatrix(true, false);
      this.matrixWorld.decompose(_position$3, _quaternion$2, target);
      return target;
    }
    getWorldDirection(target) {
      this.updateWorldMatrix(true, false);
      const e = this.matrixWorld.elements;
      return target.set(e[8], e[9], e[10]).normalize();
    }
    raycast() {
    }
    traverse(callback) {
      callback(this);
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].traverse(callback);
      }
    }
    traverseVisible(callback) {
      if (this.visible === false)
        return;
      callback(this);
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].traverseVisible(callback);
      }
    }
    traverseAncestors(callback) {
      const parent = this.parent;
      if (parent !== null) {
        callback(parent);
        parent.traverseAncestors(callback);
      }
    }
    updateMatrix() {
      this.matrix.compose(this.position, this.quaternion, this.scale);
      this.matrixWorldNeedsUpdate = true;
    }
    updateMatrixWorld(force) {
      if (this.matrixAutoUpdate)
        this.updateMatrix();
      if (this.matrixWorldNeedsUpdate || force) {
        if (this.parent === null) {
          this.matrixWorld.copy(this.matrix);
        } else {
          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        }
        this.matrixWorldNeedsUpdate = false;
        force = true;
      }
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        const child = children[i];
        if (child.matrixWorldAutoUpdate === true || force === true) {
          child.updateMatrixWorld(force);
        }
      }
    }
    updateWorldMatrix(updateParents, updateChildren) {
      const parent = this.parent;
      if (updateParents === true && parent !== null && parent.matrixWorldAutoUpdate === true) {
        parent.updateWorldMatrix(true, false);
      }
      if (this.matrixAutoUpdate)
        this.updateMatrix();
      if (this.parent === null) {
        this.matrixWorld.copy(this.matrix);
      } else {
        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
      }
      if (updateChildren === true) {
        const children = this.children;
        for (let i = 0, l = children.length; i < l; i++) {
          const child = children[i];
          if (child.matrixWorldAutoUpdate === true) {
            child.updateWorldMatrix(false, true);
          }
        }
      }
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      const output = {};
      if (isRootObject) {
        meta = {
          geometries: {},
          materials: {},
          textures: {},
          images: {},
          shapes: {},
          skeletons: {},
          animations: {},
          nodes: {}
        };
        output.metadata = {
          version: 4.6,
          type: "Object",
          generator: "Object3D.toJSON"
        };
      }
      const object = {};
      object.uuid = this.uuid;
      object.type = this.type;
      if (this.name !== "")
        object.name = this.name;
      if (this.castShadow === true)
        object.castShadow = true;
      if (this.receiveShadow === true)
        object.receiveShadow = true;
      if (this.visible === false)
        object.visible = false;
      if (this.frustumCulled === false)
        object.frustumCulled = false;
      if (this.renderOrder !== 0)
        object.renderOrder = this.renderOrder;
      if (Object.keys(this.userData).length > 0)
        object.userData = this.userData;
      object.layers = this.layers.mask;
      object.matrix = this.matrix.toArray();
      object.up = this.up.toArray();
      if (this.matrixAutoUpdate === false)
        object.matrixAutoUpdate = false;
      if (this.isInstancedMesh) {
        object.type = "InstancedMesh";
        object.count = this.count;
        object.instanceMatrix = this.instanceMatrix.toJSON();
        if (this.instanceColor !== null)
          object.instanceColor = this.instanceColor.toJSON();
      }
      function serialize(library, element) {
        if (library[element.uuid] === void 0) {
          library[element.uuid] = element.toJSON(meta);
        }
        return element.uuid;
      }
      if (this.isScene) {
        if (this.background) {
          if (this.background.isColor) {
            object.background = this.background.toJSON();
          } else if (this.background.isTexture) {
            object.background = this.background.toJSON(meta).uuid;
          }
        }
        if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {
          object.environment = this.environment.toJSON(meta).uuid;
        }
      } else if (this.isMesh || this.isLine || this.isPoints) {
        object.geometry = serialize(meta.geometries, this.geometry);
        const parameters = this.geometry.parameters;
        if (parameters !== void 0 && parameters.shapes !== void 0) {
          const shapes = parameters.shapes;
          if (Array.isArray(shapes)) {
            for (let i = 0, l = shapes.length; i < l; i++) {
              const shape = shapes[i];
              serialize(meta.shapes, shape);
            }
          } else {
            serialize(meta.shapes, shapes);
          }
        }
      }
      if (this.isSkinnedMesh) {
        object.bindMode = this.bindMode;
        object.bindMatrix = this.bindMatrix.toArray();
        if (this.skeleton !== void 0) {
          serialize(meta.skeletons, this.skeleton);
          object.skeleton = this.skeleton.uuid;
        }
      }
      if (this.material !== void 0) {
        if (Array.isArray(this.material)) {
          const uuids = [];
          for (let i = 0, l = this.material.length; i < l; i++) {
            uuids.push(serialize(meta.materials, this.material[i]));
          }
          object.material = uuids;
        } else {
          object.material = serialize(meta.materials, this.material);
        }
      }
      if (this.children.length > 0) {
        object.children = [];
        for (let i = 0; i < this.children.length; i++) {
          object.children.push(this.children[i].toJSON(meta).object);
        }
      }
      if (this.animations.length > 0) {
        object.animations = [];
        for (let i = 0; i < this.animations.length; i++) {
          const animation = this.animations[i];
          object.animations.push(serialize(meta.animations, animation));
        }
      }
      if (isRootObject) {
        const geometries = extractFromCache(meta.geometries);
        const materials = extractFromCache(meta.materials);
        const textures = extractFromCache(meta.textures);
        const images = extractFromCache(meta.images);
        const shapes = extractFromCache(meta.shapes);
        const skeletons = extractFromCache(meta.skeletons);
        const animations = extractFromCache(meta.animations);
        const nodes = extractFromCache(meta.nodes);
        if (geometries.length > 0)
          output.geometries = geometries;
        if (materials.length > 0)
          output.materials = materials;
        if (textures.length > 0)
          output.textures = textures;
        if (images.length > 0)
          output.images = images;
        if (shapes.length > 0)
          output.shapes = shapes;
        if (skeletons.length > 0)
          output.skeletons = skeletons;
        if (animations.length > 0)
          output.animations = animations;
        if (nodes.length > 0)
          output.nodes = nodes;
      }
      output.object = object;
      return output;
      function extractFromCache(cache) {
        const values = [];
        for (const key in cache) {
          const data = cache[key];
          delete data.metadata;
          values.push(data);
        }
        return values;
      }
    }
    clone(recursive) {
      return new this.constructor().copy(this, recursive);
    }
    copy(source, recursive = true) {
      this.name = source.name;
      this.up.copy(source.up);
      this.position.copy(source.position);
      this.rotation.order = source.rotation.order;
      this.quaternion.copy(source.quaternion);
      this.scale.copy(source.scale);
      this.matrix.copy(source.matrix);
      this.matrixWorld.copy(source.matrixWorld);
      this.matrixAutoUpdate = source.matrixAutoUpdate;
      this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
      this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
      this.layers.mask = source.layers.mask;
      this.visible = source.visible;
      this.castShadow = source.castShadow;
      this.receiveShadow = source.receiveShadow;
      this.frustumCulled = source.frustumCulled;
      this.renderOrder = source.renderOrder;
      this.animations = source.animations;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      if (recursive === true) {
        for (let i = 0; i < source.children.length; i++) {
          const child = source.children[i];
          this.add(child.clone());
        }
      }
      return this;
    }
  };
  Object3D.DEFAULT_UP = /* @__PURE__ */ new Vector3(0, 1, 0);
  Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;
  Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
  var _v0$1 = /* @__PURE__ */ new Vector3();
  var _v1$3 = /* @__PURE__ */ new Vector3();
  var _v2$2 = /* @__PURE__ */ new Vector3();
  var _v3$1 = /* @__PURE__ */ new Vector3();
  var _vab = /* @__PURE__ */ new Vector3();
  var _vac = /* @__PURE__ */ new Vector3();
  var _vbc = /* @__PURE__ */ new Vector3();
  var _vap = /* @__PURE__ */ new Vector3();
  var _vbp = /* @__PURE__ */ new Vector3();
  var _vcp = /* @__PURE__ */ new Vector3();
  var warnedGetUV = false;
  var Triangle = class _Triangle {
    constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {
      this.a = a;
      this.b = b;
      this.c = c;
    }
    static getNormal(a, b, c, target) {
      target.subVectors(c, b);
      _v0$1.subVectors(a, b);
      target.cross(_v0$1);
      const targetLengthSq = target.lengthSq();
      if (targetLengthSq > 0) {
        return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
      }
      return target.set(0, 0, 0);
    }
    // static/instance method to calculate barycentric coordinates
    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
    static getBarycoord(point, a, b, c, target) {
      _v0$1.subVectors(c, a);
      _v1$3.subVectors(b, a);
      _v2$2.subVectors(point, a);
      const dot00 = _v0$1.dot(_v0$1);
      const dot01 = _v0$1.dot(_v1$3);
      const dot02 = _v0$1.dot(_v2$2);
      const dot11 = _v1$3.dot(_v1$3);
      const dot12 = _v1$3.dot(_v2$2);
      const denom = dot00 * dot11 - dot01 * dot01;
      if (denom === 0) {
        return target.set(-2, -1, -1);
      }
      const invDenom = 1 / denom;
      const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
      const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
      return target.set(1 - u - v, v, u);
    }
    static containsPoint(point, a, b, c) {
      this.getBarycoord(point, a, b, c, _v3$1);
      return _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;
    }
    static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {
      if (warnedGetUV === false) {
        console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().");
        warnedGetUV = true;
      }
      return this.getInterpolation(point, p1, p2, p3, uv1, uv2, uv3, target);
    }
    static getInterpolation(point, p1, p2, p3, v1, v2, v3, target) {
      this.getBarycoord(point, p1, p2, p3, _v3$1);
      target.setScalar(0);
      target.addScaledVector(v1, _v3$1.x);
      target.addScaledVector(v2, _v3$1.y);
      target.addScaledVector(v3, _v3$1.z);
      return target;
    }
    static isFrontFacing(a, b, c, direction) {
      _v0$1.subVectors(c, b);
      _v1$3.subVectors(a, b);
      return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
    }
    set(a, b, c) {
      this.a.copy(a);
      this.b.copy(b);
      this.c.copy(c);
      return this;
    }
    setFromPointsAndIndices(points, i0, i1, i2) {
      this.a.copy(points[i0]);
      this.b.copy(points[i1]);
      this.c.copy(points[i2]);
      return this;
    }
    setFromAttributeAndIndices(attribute, i0, i1, i2) {
      this.a.fromBufferAttribute(attribute, i0);
      this.b.fromBufferAttribute(attribute, i1);
      this.c.fromBufferAttribute(attribute, i2);
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(triangle) {
      this.a.copy(triangle.a);
      this.b.copy(triangle.b);
      this.c.copy(triangle.c);
      return this;
    }
    getArea() {
      _v0$1.subVectors(this.c, this.b);
      _v1$3.subVectors(this.a, this.b);
      return _v0$1.cross(_v1$3).length() * 0.5;
    }
    getMidpoint(target) {
      return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
    getNormal(target) {
      return _Triangle.getNormal(this.a, this.b, this.c, target);
    }
    getPlane(target) {
      return target.setFromCoplanarPoints(this.a, this.b, this.c);
    }
    getBarycoord(point, target) {
      return _Triangle.getBarycoord(point, this.a, this.b, this.c, target);
    }
    getUV(point, uv1, uv2, uv3, target) {
      if (warnedGetUV === false) {
        console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().");
        warnedGetUV = true;
      }
      return _Triangle.getInterpolation(point, this.a, this.b, this.c, uv1, uv2, uv3, target);
    }
    getInterpolation(point, v1, v2, v3, target) {
      return _Triangle.getInterpolation(point, this.a, this.b, this.c, v1, v2, v3, target);
    }
    containsPoint(point) {
      return _Triangle.containsPoint(point, this.a, this.b, this.c);
    }
    isFrontFacing(direction) {
      return _Triangle.isFrontFacing(this.a, this.b, this.c, direction);
    }
    intersectsBox(box) {
      return box.intersectsTriangle(this);
    }
    closestPointToPoint(p, target) {
      const a = this.a, b = this.b, c = this.c;
      let v, w;
      _vab.subVectors(b, a);
      _vac.subVectors(c, a);
      _vap.subVectors(p, a);
      const d1 = _vab.dot(_vap);
      const d2 = _vac.dot(_vap);
      if (d1 <= 0 && d2 <= 0) {
        return target.copy(a);
      }
      _vbp.subVectors(p, b);
      const d3 = _vab.dot(_vbp);
      const d4 = _vac.dot(_vbp);
      if (d3 >= 0 && d4 <= d3) {
        return target.copy(b);
      }
      const vc = d1 * d4 - d3 * d2;
      if (vc <= 0 && d1 >= 0 && d3 <= 0) {
        v = d1 / (d1 - d3);
        return target.copy(a).addScaledVector(_vab, v);
      }
      _vcp.subVectors(p, c);
      const d5 = _vab.dot(_vcp);
      const d6 = _vac.dot(_vcp);
      if (d6 >= 0 && d5 <= d6) {
        return target.copy(c);
      }
      const vb = d5 * d2 - d1 * d6;
      if (vb <= 0 && d2 >= 0 && d6 <= 0) {
        w = d2 / (d2 - d6);
        return target.copy(a).addScaledVector(_vac, w);
      }
      const va = d3 * d6 - d5 * d4;
      if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
        _vbc.subVectors(c, b);
        w = (d4 - d3) / (d4 - d3 + (d5 - d6));
        return target.copy(b).addScaledVector(_vbc, w);
      }
      const denom = 1 / (va + vb + vc);
      v = vb * denom;
      w = vc * denom;
      return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
    }
    equals(triangle) {
      return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
    }
  };
  var materialId = 0;
  var Material = class extends EventDispatcher {
    constructor() {
      super();
      this.isMaterial = true;
      Object.defineProperty(this, "id", { value: materialId++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "Material";
      this.blending = NormalBlending;
      this.side = FrontSide;
      this.vertexColors = false;
      this.opacity = 1;
      this.transparent = false;
      this.alphaHash = false;
      this.blendSrc = SrcAlphaFactor;
      this.blendDst = OneMinusSrcAlphaFactor;
      this.blendEquation = AddEquation;
      this.blendSrcAlpha = null;
      this.blendDstAlpha = null;
      this.blendEquationAlpha = null;
      this.depthFunc = LessEqualDepth;
      this.depthTest = true;
      this.depthWrite = true;
      this.stencilWriteMask = 255;
      this.stencilFunc = AlwaysStencilFunc;
      this.stencilRef = 0;
      this.stencilFuncMask = 255;
      this.stencilFail = KeepStencilOp;
      this.stencilZFail = KeepStencilOp;
      this.stencilZPass = KeepStencilOp;
      this.stencilWrite = false;
      this.clippingPlanes = null;
      this.clipIntersection = false;
      this.clipShadows = false;
      this.shadowSide = null;
      this.colorWrite = true;
      this.precision = null;
      this.polygonOffset = false;
      this.polygonOffsetFactor = 0;
      this.polygonOffsetUnits = 0;
      this.dithering = false;
      this.alphaToCoverage = false;
      this.premultipliedAlpha = false;
      this.forceSinglePass = false;
      this.visible = true;
      this.toneMapped = true;
      this.userData = {};
      this.version = 0;
      this._alphaTest = 0;
    }
    get alphaTest() {
      return this._alphaTest;
    }
    set alphaTest(value) {
      if (this._alphaTest > 0 !== value > 0) {
        this.version++;
      }
      this._alphaTest = value;
    }
    onBuild() {
    }
    onBeforeRender() {
    }
    onBeforeCompile() {
    }
    customProgramCacheKey() {
      return this.onBeforeCompile.toString();
    }
    setValues(values) {
      if (values === void 0)
        return;
      for (const key in values) {
        const newValue = values[key];
        if (newValue === void 0) {
          console.warn(`THREE.Material: parameter '${key}' has value of undefined.`);
          continue;
        }
        const currentValue = this[key];
        if (currentValue === void 0) {
          console.warn(`THREE.Material: '${key}' is not a property of THREE.${this.type}.`);
          continue;
        }
        if (currentValue && currentValue.isColor) {
          currentValue.set(newValue);
        } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
          currentValue.copy(newValue);
        } else {
          this[key] = newValue;
        }
      }
    }
    toJSON(meta) {
      const isRootObject = meta === void 0 || typeof meta === "string";
      if (isRootObject) {
        meta = {
          textures: {},
          images: {}
        };
      }
      const data = {
        metadata: {
          version: 4.6,
          type: "Material",
          generator: "Material.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "")
        data.name = this.name;
      if (this.color && this.color.isColor)
        data.color = this.color.getHex();
      if (this.roughness !== void 0)
        data.roughness = this.roughness;
      if (this.metalness !== void 0)
        data.metalness = this.metalness;
      if (this.sheen !== void 0)
        data.sheen = this.sheen;
      if (this.sheenColor && this.sheenColor.isColor)
        data.sheenColor = this.sheenColor.getHex();
      if (this.sheenRoughness !== void 0)
        data.sheenRoughness = this.sheenRoughness;
      if (this.emissive && this.emissive.isColor)
        data.emissive = this.emissive.getHex();
      if (this.emissiveIntensity && this.emissiveIntensity !== 1)
        data.emissiveIntensity = this.emissiveIntensity;
      if (this.specular && this.specular.isColor)
        data.specular = this.specular.getHex();
      if (this.specularIntensity !== void 0)
        data.specularIntensity = this.specularIntensity;
      if (this.specularColor && this.specularColor.isColor)
        data.specularColor = this.specularColor.getHex();
      if (this.shininess !== void 0)
        data.shininess = this.shininess;
      if (this.clearcoat !== void 0)
        data.clearcoat = this.clearcoat;
      if (this.clearcoatRoughness !== void 0)
        data.clearcoatRoughness = this.clearcoatRoughness;
      if (this.clearcoatMap && this.clearcoatMap.isTexture) {
        data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
      }
      if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
        data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
      }
      if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
        data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
        data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
      }
      if (this.iridescence !== void 0)
        data.iridescence = this.iridescence;
      if (this.iridescenceIOR !== void 0)
        data.iridescenceIOR = this.iridescenceIOR;
      if (this.iridescenceThicknessRange !== void 0)
        data.iridescenceThicknessRange = this.iridescenceThicknessRange;
      if (this.iridescenceMap && this.iridescenceMap.isTexture) {
        data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;
      }
      if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {
        data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;
      }
      if (this.anisotropy !== void 0)
        data.anisotropy = this.anisotropy;
      if (this.anisotropyRotation !== void 0)
        data.anisotropyRotation = this.anisotropyRotation;
      if (this.anisotropyMap && this.anisotropyMap.isTexture) {
        data.anisotropyMap = this.anisotropyMap.toJSON(meta).uuid;
      }
      if (this.map && this.map.isTexture)
        data.map = this.map.toJSON(meta).uuid;
      if (this.matcap && this.matcap.isTexture)
        data.matcap = this.matcap.toJSON(meta).uuid;
      if (this.alphaMap && this.alphaMap.isTexture)
        data.alphaMap = this.alphaMap.toJSON(meta).uuid;
      if (this.lightMap && this.lightMap.isTexture) {
        data.lightMap = this.lightMap.toJSON(meta).uuid;
        data.lightMapIntensity = this.lightMapIntensity;
      }
      if (this.aoMap && this.aoMap.isTexture) {
        data.aoMap = this.aoMap.toJSON(meta).uuid;
        data.aoMapIntensity = this.aoMapIntensity;
      }
      if (this.bumpMap && this.bumpMap.isTexture) {
        data.bumpMap = this.bumpMap.toJSON(meta).uuid;
        data.bumpScale = this.bumpScale;
      }
      if (this.normalMap && this.normalMap.isTexture) {
        data.normalMap = this.normalMap.toJSON(meta).uuid;
        data.normalMapType = this.normalMapType;
        data.normalScale = this.normalScale.toArray();
      }
      if (this.displacementMap && this.displacementMap.isTexture) {
        data.displacementMap = this.displacementMap.toJSON(meta).uuid;
        data.displacementScale = this.displacementScale;
        data.displacementBias = this.displacementBias;
      }
      if (this.roughnessMap && this.roughnessMap.isTexture)
        data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
      if (this.metalnessMap && this.metalnessMap.isTexture)
        data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
      if (this.emissiveMap && this.emissiveMap.isTexture)
        data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
      if (this.specularMap && this.specularMap.isTexture)
        data.specularMap = this.specularMap.toJSON(meta).uuid;
      if (this.specularIntensityMap && this.specularIntensityMap.isTexture)
        data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
      if (this.specularColorMap && this.specularColorMap.isTexture)
        data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
      if (this.envMap && this.envMap.isTexture) {
        data.envMap = this.envMap.toJSON(meta).uuid;
        if (this.combine !== void 0)
          data.combine = this.combine;
      }
      if (this.envMapIntensity !== void 0)
        data.envMapIntensity = this.envMapIntensity;
      if (this.reflectivity !== void 0)
        data.reflectivity = this.reflectivity;
      if (this.refractionRatio !== void 0)
        data.refractionRatio = this.refractionRatio;
      if (this.gradientMap && this.gradientMap.isTexture) {
        data.gradientMap = this.gradientMap.toJSON(meta).uuid;
      }
      if (this.transmission !== void 0)
        data.transmission = this.transmission;
      if (this.transmissionMap && this.transmissionMap.isTexture)
        data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
      if (this.thickness !== void 0)
        data.thickness = this.thickness;
      if (this.thicknessMap && this.thicknessMap.isTexture)
        data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
      if (this.attenuationDistance !== void 0 && this.attenuationDistance !== Infinity)
        data.attenuationDistance = this.attenuationDistance;
      if (this.attenuationColor !== void 0)
        data.attenuationColor = this.attenuationColor.getHex();
      if (this.size !== void 0)
        data.size = this.size;
      if (this.shadowSide !== null)
        data.shadowSide = this.shadowSide;
      if (this.sizeAttenuation !== void 0)
        data.sizeAttenuation = this.sizeAttenuation;
      if (this.blending !== NormalBlending)
        data.blending = this.blending;
      if (this.side !== FrontSide)
        data.side = this.side;
      if (this.vertexColors)
        data.vertexColors = true;
      if (this.opacity < 1)
        data.opacity = this.opacity;
      if (this.transparent === true)
        data.transparent = this.transparent;
      data.depthFunc = this.depthFunc;
      data.depthTest = this.depthTest;
      data.depthWrite = this.depthWrite;
      data.colorWrite = this.colorWrite;
      data.stencilWrite = this.stencilWrite;
      data.stencilWriteMask = this.stencilWriteMask;
      data.stencilFunc = this.stencilFunc;
      data.stencilRef = this.stencilRef;
      data.stencilFuncMask = this.stencilFuncMask;
      data.stencilFail = this.stencilFail;
      data.stencilZFail = this.stencilZFail;
      data.stencilZPass = this.stencilZPass;
      if (this.rotation !== void 0 && this.rotation !== 0)
        data.rotation = this.rotation;
      if (this.polygonOffset === true)
        data.polygonOffset = true;
      if (this.polygonOffsetFactor !== 0)
        data.polygonOffsetFactor = this.polygonOffsetFactor;
      if (this.polygonOffsetUnits !== 0)
        data.polygonOffsetUnits = this.polygonOffsetUnits;
      if (this.linewidth !== void 0 && this.linewidth !== 1)
        data.linewidth = this.linewidth;
      if (this.dashSize !== void 0)
        data.dashSize = this.dashSize;
      if (this.gapSize !== void 0)
        data.gapSize = this.gapSize;
      if (this.scale !== void 0)
        data.scale = this.scale;
      if (this.dithering === true)
        data.dithering = true;
      if (this.alphaTest > 0)
        data.alphaTest = this.alphaTest;
      if (this.alphaHash === true)
        data.alphaHash = this.alphaHash;
      if (this.alphaToCoverage === true)
        data.alphaToCoverage = this.alphaToCoverage;
      if (this.premultipliedAlpha === true)
        data.premultipliedAlpha = this.premultipliedAlpha;
      if (this.forceSinglePass === true)
        data.forceSinglePass = this.forceSinglePass;
      if (this.wireframe === true)
        data.wireframe = this.wireframe;
      if (this.wireframeLinewidth > 1)
        data.wireframeLinewidth = this.wireframeLinewidth;
      if (this.wireframeLinecap !== "round")
        data.wireframeLinecap = this.wireframeLinecap;
      if (this.wireframeLinejoin !== "round")
        data.wireframeLinejoin = this.wireframeLinejoin;
      if (this.flatShading === true)
        data.flatShading = this.flatShading;
      if (this.visible === false)
        data.visible = false;
      if (this.toneMapped === false)
        data.toneMapped = false;
      if (this.fog === false)
        data.fog = false;
      if (Object.keys(this.userData).length > 0)
        data.userData = this.userData;
      function extractFromCache(cache) {
        const values = [];
        for (const key in cache) {
          const data2 = cache[key];
          delete data2.metadata;
          values.push(data2);
        }
        return values;
      }
      if (isRootObject) {
        const textures = extractFromCache(meta.textures);
        const images = extractFromCache(meta.images);
        if (textures.length > 0)
          data.textures = textures;
        if (images.length > 0)
          data.images = images;
      }
      return data;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.name = source.name;
      this.blending = source.blending;
      this.side = source.side;
      this.vertexColors = source.vertexColors;
      this.opacity = source.opacity;
      this.transparent = source.transparent;
      this.blendSrc = source.blendSrc;
      this.blendDst = source.blendDst;
      this.blendEquation = source.blendEquation;
      this.blendSrcAlpha = source.blendSrcAlpha;
      this.blendDstAlpha = source.blendDstAlpha;
      this.blendEquationAlpha = source.blendEquationAlpha;
      this.depthFunc = source.depthFunc;
      this.depthTest = source.depthTest;
      this.depthWrite = source.depthWrite;
      this.stencilWriteMask = source.stencilWriteMask;
      this.stencilFunc = source.stencilFunc;
      this.stencilRef = source.stencilRef;
      this.stencilFuncMask = source.stencilFuncMask;
      this.stencilFail = source.stencilFail;
      this.stencilZFail = source.stencilZFail;
      this.stencilZPass = source.stencilZPass;
      this.stencilWrite = source.stencilWrite;
      const srcPlanes = source.clippingPlanes;
      let dstPlanes = null;
      if (srcPlanes !== null) {
        const n = srcPlanes.length;
        dstPlanes = new Array(n);
        for (let i = 0; i !== n; ++i) {
          dstPlanes[i] = srcPlanes[i].clone();
        }
      }
      this.clippingPlanes = dstPlanes;
      this.clipIntersection = source.clipIntersection;
      this.clipShadows = source.clipShadows;
      this.shadowSide = source.shadowSide;
      this.colorWrite = source.colorWrite;
      this.precision = source.precision;
      this.polygonOffset = source.polygonOffset;
      this.polygonOffsetFactor = source.polygonOffsetFactor;
      this.polygonOffsetUnits = source.polygonOffsetUnits;
      this.dithering = source.dithering;
      this.alphaTest = source.alphaTest;
      this.alphaHash = source.alphaHash;
      this.alphaToCoverage = source.alphaToCoverage;
      this.premultipliedAlpha = source.premultipliedAlpha;
      this.forceSinglePass = source.forceSinglePass;
      this.visible = source.visible;
      this.toneMapped = source.toneMapped;
      this.userData = JSON.parse(JSON.stringify(source.userData));
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
    set needsUpdate(value) {
      if (value === true)
        this.version++;
    }
  };
  var _colorKeywords = {
    "aliceblue": 15792383,
    "antiquewhite": 16444375,
    "aqua": 65535,
    "aquamarine": 8388564,
    "azure": 15794175,
    "beige": 16119260,
    "bisque": 16770244,
    "black": 0,
    "blanchedalmond": 16772045,
    "blue": 255,
    "blueviolet": 9055202,
    "brown": 10824234,
    "burlywood": 14596231,
    "cadetblue": 6266528,
    "chartreuse": 8388352,
    "chocolate": 13789470,
    "coral": 16744272,
    "cornflowerblue": 6591981,
    "cornsilk": 16775388,
    "crimson": 14423100,
    "cyan": 65535,
    "darkblue": 139,
    "darkcyan": 35723,
    "darkgoldenrod": 12092939,
    "darkgray": 11119017,
    "darkgreen": 25600,
    "darkgrey": 11119017,
    "darkkhaki": 12433259,
    "darkmagenta": 9109643,
    "darkolivegreen": 5597999,
    "darkorange": 16747520,
    "darkorchid": 10040012,
    "darkred": 9109504,
    "darksalmon": 15308410,
    "darkseagreen": 9419919,
    "darkslateblue": 4734347,
    "darkslategray": 3100495,
    "darkslategrey": 3100495,
    "darkturquoise": 52945,
    "darkviolet": 9699539,
    "deeppink": 16716947,
    "deepskyblue": 49151,
    "dimgray": 6908265,
    "dimgrey": 6908265,
    "dodgerblue": 2003199,
    "firebrick": 11674146,
    "floralwhite": 16775920,
    "forestgreen": 2263842,
    "fuchsia": 16711935,
    "gainsboro": 14474460,
    "ghostwhite": 16316671,
    "gold": 16766720,
    "goldenrod": 14329120,
    "gray": 8421504,
    "green": 32768,
    "greenyellow": 11403055,
    "grey": 8421504,
    "honeydew": 15794160,
    "hotpink": 16738740,
    "indianred": 13458524,
    "indigo": 4915330,
    "ivory": 16777200,
    "khaki": 15787660,
    "lavender": 15132410,
    "lavenderblush": 16773365,
    "lawngreen": 8190976,
    "lemonchiffon": 16775885,
    "lightblue": 11393254,
    "lightcoral": 15761536,
    "lightcyan": 14745599,
    "lightgoldenrodyellow": 16448210,
    "lightgray": 13882323,
    "lightgreen": 9498256,
    "lightgrey": 13882323,
    "lightpink": 16758465,
    "lightsalmon": 16752762,
    "lightseagreen": 2142890,
    "lightskyblue": 8900346,
    "lightslategray": 7833753,
    "lightslategrey": 7833753,
    "lightsteelblue": 11584734,
    "lightyellow": 16777184,
    "lime": 65280,
    "limegreen": 3329330,
    "linen": 16445670,
    "magenta": 16711935,
    "maroon": 8388608,
    "mediumaquamarine": 6737322,
    "mediumblue": 205,
    "mediumorchid": 12211667,
    "mediumpurple": 9662683,
    "mediumseagreen": 3978097,
    "mediumslateblue": 8087790,
    "mediumspringgreen": 64154,
    "mediumturquoise": 4772300,
    "mediumvioletred": 13047173,
    "midnightblue": 1644912,
    "mintcream": 16121850,
    "mistyrose": 16770273,
    "moccasin": 16770229,
    "navajowhite": 16768685,
    "navy": 128,
    "oldlace": 16643558,
    "olive": 8421376,
    "olivedrab": 7048739,
    "orange": 16753920,
    "orangered": 16729344,
    "orchid": 14315734,
    "palegoldenrod": 15657130,
    "palegreen": 10025880,
    "paleturquoise": 11529966,
    "palevioletred": 14381203,
    "papayawhip": 16773077,
    "peachpuff": 16767673,
    "peru": 13468991,
    "pink": 16761035,
    "plum": 14524637,
    "powderblue": 11591910,
    "purple": 8388736,
    "rebeccapurple": 6697881,
    "red": 16711680,
    "rosybrown": 12357519,
    "royalblue": 4286945,
    "saddlebrown": 9127187,
    "salmon": 16416882,
    "sandybrown": 16032864,
    "seagreen": 3050327,
    "seashell": 16774638,
    "sienna": 10506797,
    "silver": 12632256,
    "skyblue": 8900331,
    "slateblue": 6970061,
    "slategray": 7372944,
    "slategrey": 7372944,
    "snow": 16775930,
    "springgreen": 65407,
    "steelblue": 4620980,
    "tan": 13808780,
    "teal": 32896,
    "thistle": 14204888,
    "tomato": 16737095,
    "turquoise": 4251856,
    "violet": 15631086,
    "wheat": 16113331,
    "white": 16777215,
    "whitesmoke": 16119285,
    "yellow": 16776960,
    "yellowgreen": 10145074
  };
  var _hslA = { h: 0, s: 0, l: 0 };
  var _hslB = { h: 0, s: 0, l: 0 };
  function hue2rgb(p, q, t) {
    if (t < 0)
      t += 1;
    if (t > 1)
      t -= 1;
    if (t < 1 / 6)
      return p + (q - p) * 6 * t;
    if (t < 1 / 2)
      return q;
    if (t < 2 / 3)
      return p + (q - p) * 6 * (2 / 3 - t);
    return p;
  }
  var Color = class {
    constructor(r, g, b) {
      this.isColor = true;
      this.r = 1;
      this.g = 1;
      this.b = 1;
      return this.set(r, g, b);
    }
    set(r, g, b) {
      if (g === void 0 && b === void 0) {
        const value = r;
        if (value && value.isColor) {
          this.copy(value);
        } else if (typeof value === "number") {
          this.setHex(value);
        } else if (typeof value === "string") {
          this.setStyle(value);
        }
      } else {
        this.setRGB(r, g, b);
      }
      return this;
    }
    setScalar(scalar) {
      this.r = scalar;
      this.g = scalar;
      this.b = scalar;
      return this;
    }
    setHex(hex, colorSpace = SRGBColorSpace) {
      hex = Math.floor(hex);
      this.r = (hex >> 16 & 255) / 255;
      this.g = (hex >> 8 & 255) / 255;
      this.b = (hex & 255) / 255;
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setRGB(r, g, b, colorSpace = ColorManagement.workingColorSpace) {
      this.r = r;
      this.g = g;
      this.b = b;
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setHSL(h, s, l, colorSpace = ColorManagement.workingColorSpace) {
      h = euclideanModulo(h, 1);
      s = clamp(s, 0, 1);
      l = clamp(l, 0, 1);
      if (s === 0) {
        this.r = this.g = this.b = l;
      } else {
        const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
        const q = 2 * l - p;
        this.r = hue2rgb(q, p, h + 1 / 3);
        this.g = hue2rgb(q, p, h);
        this.b = hue2rgb(q, p, h - 1 / 3);
      }
      ColorManagement.toWorkingColorSpace(this, colorSpace);
      return this;
    }
    setStyle(style, colorSpace = SRGBColorSpace) {
      function handleAlpha(string) {
        if (string === void 0)
          return;
        if (parseFloat(string) < 1) {
          console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
        }
      }
      let m;
      if (m = /^(\w+)\(([^\)]*)\)/.exec(style)) {
        let color;
        const name = m[1];
        const components = m[2];
        switch (name) {
          case "rgb":
          case "rgba":
            if (color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setRGB(
                Math.min(255, parseInt(color[1], 10)) / 255,
                Math.min(255, parseInt(color[2], 10)) / 255,
                Math.min(255, parseInt(color[3], 10)) / 255,
                colorSpace
              );
            }
            if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setRGB(
                Math.min(100, parseInt(color[1], 10)) / 100,
                Math.min(100, parseInt(color[2], 10)) / 100,
                Math.min(100, parseInt(color[3], 10)) / 100,
                colorSpace
              );
            }
            break;
          case "hsl":
          case "hsla":
            if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
              handleAlpha(color[4]);
              return this.setHSL(
                parseFloat(color[1]) / 360,
                parseFloat(color[2]) / 100,
                parseFloat(color[3]) / 100,
                colorSpace
              );
            }
            break;
          default:
            console.warn("THREE.Color: Unknown color model " + style);
        }
      } else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
        const hex = m[1];
        const size = hex.length;
        if (size === 3) {
          return this.setRGB(
            parseInt(hex.charAt(0), 16) / 15,
            parseInt(hex.charAt(1), 16) / 15,
            parseInt(hex.charAt(2), 16) / 15,
            colorSpace
          );
        } else if (size === 6) {
          return this.setHex(parseInt(hex, 16), colorSpace);
        } else {
          console.warn("THREE.Color: Invalid hex color " + style);
        }
      } else if (style && style.length > 0) {
        return this.setColorName(style, colorSpace);
      }
      return this;
    }
    setColorName(style, colorSpace = SRGBColorSpace) {
      const hex = _colorKeywords[style.toLowerCase()];
      if (hex !== void 0) {
        this.setHex(hex, colorSpace);
      } else {
        console.warn("THREE.Color: Unknown color " + style);
      }
      return this;
    }
    clone() {
      return new this.constructor(this.r, this.g, this.b);
    }
    copy(color) {
      this.r = color.r;
      this.g = color.g;
      this.b = color.b;
      return this;
    }
    copySRGBToLinear(color) {
      this.r = SRGBToLinear(color.r);
      this.g = SRGBToLinear(color.g);
      this.b = SRGBToLinear(color.b);
      return this;
    }
    copyLinearToSRGB(color) {
      this.r = LinearToSRGB(color.r);
      this.g = LinearToSRGB(color.g);
      this.b = LinearToSRGB(color.b);
      return this;
    }
    convertSRGBToLinear() {
      this.copySRGBToLinear(this);
      return this;
    }
    convertLinearToSRGB() {
      this.copyLinearToSRGB(this);
      return this;
    }
    getHex(colorSpace = SRGBColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      return Math.round(clamp(_color.r * 255, 0, 255)) * 65536 + Math.round(clamp(_color.g * 255, 0, 255)) * 256 + Math.round(clamp(_color.b * 255, 0, 255));
    }
    getHexString(colorSpace = SRGBColorSpace) {
      return ("000000" + this.getHex(colorSpace).toString(16)).slice(-6);
    }
    getHSL(target, colorSpace = ColorManagement.workingColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      const r = _color.r, g = _color.g, b = _color.b;
      const max = Math.max(r, g, b);
      const min = Math.min(r, g, b);
      let hue, saturation;
      const lightness = (min + max) / 2;
      if (min === max) {
        hue = 0;
        saturation = 0;
      } else {
        const delta = max - min;
        saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
        switch (max) {
          case r:
            hue = (g - b) / delta + (g < b ? 6 : 0);
            break;
          case g:
            hue = (b - r) / delta + 2;
            break;
          case b:
            hue = (r - g) / delta + 4;
            break;
        }
        hue /= 6;
      }
      target.h = hue;
      target.s = saturation;
      target.l = lightness;
      return target;
    }
    getRGB(target, colorSpace = ColorManagement.workingColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      target.r = _color.r;
      target.g = _color.g;
      target.b = _color.b;
      return target;
    }
    getStyle(colorSpace = SRGBColorSpace) {
      ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
      const r = _color.r, g = _color.g, b = _color.b;
      if (colorSpace !== SRGBColorSpace) {
        return `color(${colorSpace} ${r.toFixed(3)} ${g.toFixed(3)} ${b.toFixed(3)})`;
      }
      return `rgb(${Math.round(r * 255)},${Math.round(g * 255)},${Math.round(b * 255)})`;
    }
    offsetHSL(h, s, l) {
      this.getHSL(_hslA);
      _hslA.h += h;
      _hslA.s += s;
      _hslA.l += l;
      this.setHSL(_hslA.h, _hslA.s, _hslA.l);
      return this;
    }
    add(color) {
      this.r += color.r;
      this.g += color.g;
      this.b += color.b;
      return this;
    }
    addColors(color1, color2) {
      this.r = color1.r + color2.r;
      this.g = color1.g + color2.g;
      this.b = color1.b + color2.b;
      return this;
    }
    addScalar(s) {
      this.r += s;
      this.g += s;
      this.b += s;
      return this;
    }
    sub(color) {
      this.r = Math.max(0, this.r - color.r);
      this.g = Math.max(0, this.g - color.g);
      this.b = Math.max(0, this.b - color.b);
      return this;
    }
    multiply(color) {
      this.r *= color.r;
      this.g *= color.g;
      this.b *= color.b;
      return this;
    }
    multiplyScalar(s) {
      this.r *= s;
      this.g *= s;
      this.b *= s;
      return this;
    }
    lerp(color, alpha) {
      this.r += (color.r - this.r) * alpha;
      this.g += (color.g - this.g) * alpha;
      this.b += (color.b - this.b) * alpha;
      return this;
    }
    lerpColors(color1, color2, alpha) {
      this.r = color1.r + (color2.r - color1.r) * alpha;
      this.g = color1.g + (color2.g - color1.g) * alpha;
      this.b = color1.b + (color2.b - color1.b) * alpha;
      return this;
    }
    lerpHSL(color, alpha) {
      this.getHSL(_hslA);
      color.getHSL(_hslB);
      const h = lerp(_hslA.h, _hslB.h, alpha);
      const s = lerp(_hslA.s, _hslB.s, alpha);
      const l = lerp(_hslA.l, _hslB.l, alpha);
      this.setHSL(h, s, l);
      return this;
    }
    setFromVector3(v) {
      this.r = v.x;
      this.g = v.y;
      this.b = v.z;
      return this;
    }
    applyMatrix3(m) {
      const r = this.r, g = this.g, b = this.b;
      const e = m.elements;
      this.r = e[0] * r + e[3] * g + e[6] * b;
      this.g = e[1] * r + e[4] * g + e[7] * b;
      this.b = e[2] * r + e[5] * g + e[8] * b;
      return this;
    }
    equals(c) {
      return c.r === this.r && c.g === this.g && c.b === this.b;
    }
    fromArray(array, offset = 0) {
      this.r = array[offset];
      this.g = array[offset + 1];
      this.b = array[offset + 2];
      return this;
    }
    toArray(array = [], offset = 0) {
      array[offset] = this.r;
      array[offset + 1] = this.g;
      array[offset + 2] = this.b;
      return array;
    }
    fromBufferAttribute(attribute, index) {
      this.r = attribute.getX(index);
      this.g = attribute.getY(index);
      this.b = attribute.getZ(index);
      return this;
    }
    toJSON() {
      return this.getHex();
    }
    *[Symbol.iterator]() {
      yield this.r;
      yield this.g;
      yield this.b;
    }
  };
  var _color = /* @__PURE__ */ new Color();
  Color.NAMES = _colorKeywords;
  var MeshBasicMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.isMeshBasicMaterial = true;
      this.type = "MeshBasicMaterial";
      this.color = new Color(16777215);
      this.map = null;
      this.lightMap = null;
      this.lightMapIntensity = 1;
      this.aoMap = null;
      this.aoMapIntensity = 1;
      this.specularMap = null;
      this.alphaMap = null;
      this.envMap = null;
      this.combine = MultiplyOperation;
      this.reflectivity = 1;
      this.refractionRatio = 0.98;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.wireframeLinecap = "round";
      this.wireframeLinejoin = "round";
      this.fog = true;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.color.copy(source.color);
      this.map = source.map;
      this.lightMap = source.lightMap;
      this.lightMapIntensity = source.lightMapIntensity;
      this.aoMap = source.aoMap;
      this.aoMapIntensity = source.aoMapIntensity;
      this.specularMap = source.specularMap;
      this.alphaMap = source.alphaMap;
      this.envMap = source.envMap;
      this.combine = source.combine;
      this.reflectivity = source.reflectivity;
      this.refractionRatio = source.refractionRatio;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.wireframeLinecap = source.wireframeLinecap;
      this.wireframeLinejoin = source.wireframeLinejoin;
      this.fog = source.fog;
      return this;
    }
  };
  var _vector$8 = /* @__PURE__ */ new Vector3();
  var _vector2$1 = /* @__PURE__ */ new Vector2();
  var BufferAttribute = class {
    constructor(array, itemSize, normalized = false) {
      if (Array.isArray(array)) {
        throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
      }
      this.isBufferAttribute = true;
      this.name = "";
      this.array = array;
      this.itemSize = itemSize;
      this.count = array !== void 0 ? array.length / itemSize : 0;
      this.normalized = normalized;
      this.usage = StaticDrawUsage;
      this.updateRange = { offset: 0, count: -1 };
      this.gpuType = FloatType;
      this.version = 0;
    }
    onUploadCallback() {
    }
    set needsUpdate(value) {
      if (value === true)
        this.version++;
    }
    setUsage(value) {
      this.usage = value;
      return this;
    }
    copy(source) {
      this.name = source.name;
      this.array = new source.array.constructor(source.array);
      this.itemSize = source.itemSize;
      this.count = source.count;
      this.normalized = source.normalized;
      this.usage = source.usage;
      this.gpuType = source.gpuType;
      return this;
    }
    copyAt(index1, attribute, index2) {
      index1 *= this.itemSize;
      index2 *= attribute.itemSize;
      for (let i = 0, l = this.itemSize; i < l; i++) {
        this.array[index1 + i] = attribute.array[index2 + i];
      }
      return this;
    }
    copyArray(array) {
      this.array.set(array);
      return this;
    }
    applyMatrix3(m) {
      if (this.itemSize === 2) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector2$1.fromBufferAttribute(this, i);
          _vector2$1.applyMatrix3(m);
          this.setXY(i, _vector2$1.x, _vector2$1.y);
        }
      } else if (this.itemSize === 3) {
        for (let i = 0, l = this.count; i < l; i++) {
          _vector$8.fromBufferAttribute(this, i);
          _vector$8.applyMatrix3(m);
          this.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
        }
      }
      return this;
    }
    applyMatrix4(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$8.fromBufferAttribute(this, i);
        _vector$8.applyMatrix4(m);
        this.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
      }
      return this;
    }
    applyNormalMatrix(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$8.fromBufferAttribute(this, i);
        _vector$8.applyNormalMatrix(m);
        this.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
      }
      return this;
    }
    transformDirection(m) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$8.fromBufferAttribute(this, i);
        _vector$8.transformDirection(m);
        this.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);
      }
      return this;
    }
    set(value, offset = 0) {
      this.array.set(value, offset);
      return this;
    }
    getX(index) {
      let x = this.array[index * this.itemSize];
      if (this.normalized)
        x = denormalize(x, this.array);
      return x;
    }
    setX(index, x) {
      if (this.normalized)
        x = normalize(x, this.array);
      this.array[index * this.itemSize] = x;
      return this;
    }
    getY(index) {
      let y = this.array[index * this.itemSize + 1];
      if (this.normalized)
        y = denormalize(y, this.array);
      return y;
    }
    setY(index, y) {
      if (this.normalized)
        y = normalize(y, this.array);
      this.array[index * this.itemSize + 1] = y;
      return this;
    }
    getZ(index) {
      let z2 = this.array[index * this.itemSize + 2];
      if (this.normalized)
        z2 = denormalize(z2, this.array);
      return z2;
    }
    setZ(index, z2) {
      if (this.normalized)
        z2 = normalize(z2, this.array);
      this.array[index * this.itemSize + 2] = z2;
      return this;
    }
    getW(index) {
      let w = this.array[index * this.itemSize + 3];
      if (this.normalized)
        w = denormalize(w, this.array);
      return w;
    }
    setW(index, w) {
      if (this.normalized)
        w = normalize(w, this.array);
      this.array[index * this.itemSize + 3] = w;
      return this;
    }
    setXY(index, x, y) {
      index *= this.itemSize;
      if (this.normalized) {
        x = normalize(x, this.array);
        y = normalize(y, this.array);
      }
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      return this;
    }
    setXYZ(index, x, y, z2) {
      index *= this.itemSize;
      if (this.normalized) {
        x = normalize(x, this.array);
        y = normalize(y, this.array);
        z2 = normalize(z2, this.array);
      }
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      this.array[index + 2] = z2;
      return this;
    }
    setXYZW(index, x, y, z2, w) {
      index *= this.itemSize;
      if (this.normalized) {
        x = normalize(x, this.array);
        y = normalize(y, this.array);
        z2 = normalize(z2, this.array);
        w = normalize(w, this.array);
      }
      this.array[index + 0] = x;
      this.array[index + 1] = y;
      this.array[index + 2] = z2;
      this.array[index + 3] = w;
      return this;
    }
    onUpload(callback) {
      this.onUploadCallback = callback;
      return this;
    }
    clone() {
      return new this.constructor(this.array, this.itemSize).copy(this);
    }
    toJSON() {
      const data = {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: Array.from(this.array),
        normalized: this.normalized
      };
      if (this.name !== "")
        data.name = this.name;
      if (this.usage !== StaticDrawUsage)
        data.usage = this.usage;
      if (this.updateRange.offset !== 0 || this.updateRange.count !== -1)
        data.updateRange = this.updateRange;
      return data;
    }
  };
  var Uint16BufferAttribute = class extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Uint16Array(array), itemSize, normalized);
    }
  };
  var Uint32BufferAttribute = class extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Uint32Array(array), itemSize, normalized);
    }
  };
  var Float32BufferAttribute = class extends BufferAttribute {
    constructor(array, itemSize, normalized) {
      super(new Float32Array(array), itemSize, normalized);
    }
  };
  var _id$1 = 0;
  var _m1 = /* @__PURE__ */ new Matrix4();
  var _obj = /* @__PURE__ */ new Object3D();
  var _offset = /* @__PURE__ */ new Vector3();
  var _box$1 = /* @__PURE__ */ new Box3();
  var _boxMorphTargets = /* @__PURE__ */ new Box3();
  var _vector$7 = /* @__PURE__ */ new Vector3();
  var BufferGeometry = class _BufferGeometry extends EventDispatcher {
    constructor() {
      super();
      this.isBufferGeometry = true;
      Object.defineProperty(this, "id", { value: _id$1++ });
      this.uuid = generateUUID();
      this.name = "";
      this.type = "BufferGeometry";
      this.index = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.morphTargetsRelative = false;
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      this.drawRange = { start: 0, count: Infinity };
      this.userData = {};
    }
    getIndex() {
      return this.index;
    }
    setIndex(index) {
      if (Array.isArray(index)) {
        this.index = new (arrayNeedsUint32(index) ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
      } else {
        this.index = index;
      }
      return this;
    }
    getAttribute(name) {
      return this.attributes[name];
    }
    setAttribute(name, attribute) {
      this.attributes[name] = attribute;
      return this;
    }
    deleteAttribute(name) {
      delete this.attributes[name];
      return this;
    }
    hasAttribute(name) {
      return this.attributes[name] !== void 0;
    }
    addGroup(start, count, materialIndex = 0) {
      this.groups.push({
        start,
        count,
        materialIndex
      });
    }
    clearGroups() {
      this.groups = [];
    }
    setDrawRange(start, count) {
      this.drawRange.start = start;
      this.drawRange.count = count;
    }
    applyMatrix4(matrix) {
      const position = this.attributes.position;
      if (position !== void 0) {
        position.applyMatrix4(matrix);
        position.needsUpdate = true;
      }
      const normal = this.attributes.normal;
      if (normal !== void 0) {
        const normalMatrix = new Matrix3().getNormalMatrix(matrix);
        normal.applyNormalMatrix(normalMatrix);
        normal.needsUpdate = true;
      }
      const tangent = this.attributes.tangent;
      if (tangent !== void 0) {
        tangent.transformDirection(matrix);
        tangent.needsUpdate = true;
      }
      if (this.boundingBox !== null) {
        this.computeBoundingBox();
      }
      if (this.boundingSphere !== null) {
        this.computeBoundingSphere();
      }
      return this;
    }
    applyQuaternion(q) {
      _m1.makeRotationFromQuaternion(q);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateX(angle) {
      _m1.makeRotationX(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateY(angle) {
      _m1.makeRotationY(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    rotateZ(angle) {
      _m1.makeRotationZ(angle);
      this.applyMatrix4(_m1);
      return this;
    }
    translate(x, y, z2) {
      _m1.makeTranslation(x, y, z2);
      this.applyMatrix4(_m1);
      return this;
    }
    scale(x, y, z2) {
      _m1.makeScale(x, y, z2);
      this.applyMatrix4(_m1);
      return this;
    }
    lookAt(vector) {
      _obj.lookAt(vector);
      _obj.updateMatrix();
      this.applyMatrix4(_obj.matrix);
      return this;
    }
    center() {
      this.computeBoundingBox();
      this.boundingBox.getCenter(_offset).negate();
      this.translate(_offset.x, _offset.y, _offset.z);
      return this;
    }
    setFromPoints(points) {
      const position = [];
      for (let i = 0, l = points.length; i < l; i++) {
        const point = points[i];
        position.push(point.x, point.y, point.z || 0);
      }
      this.setAttribute("position", new Float32BufferAttribute(position, 3));
      return this;
    }
    computeBoundingBox() {
      if (this.boundingBox === null) {
        this.boundingBox = new Box3();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
        this.boundingBox.set(
          new Vector3(-Infinity, -Infinity, -Infinity),
          new Vector3(Infinity, Infinity, Infinity)
        );
        return;
      }
      if (position !== void 0) {
        this.boundingBox.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
            const morphAttribute = morphAttributesPosition[i];
            _box$1.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$7.addVectors(this.boundingBox.min, _box$1.min);
              this.boundingBox.expandByPoint(_vector$7);
              _vector$7.addVectors(this.boundingBox.max, _box$1.max);
              this.boundingBox.expandByPoint(_vector$7);
            } else {
              this.boundingBox.expandByPoint(_box$1.min);
              this.boundingBox.expandByPoint(_box$1.max);
            }
          }
        }
      } else {
        this.boundingBox.makeEmpty();
      }
      if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
        console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
      }
    }
    computeBoundingSphere() {
      if (this.boundingSphere === null) {
        this.boundingSphere = new Sphere();
      }
      const position = this.attributes.position;
      const morphAttributesPosition = this.morphAttributes.position;
      if (position && position.isGLBufferAttribute) {
        console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
        this.boundingSphere.set(new Vector3(), Infinity);
        return;
      }
      if (position) {
        const center = this.boundingSphere.center;
        _box$1.setFromBufferAttribute(position);
        if (morphAttributesPosition) {
          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
            const morphAttribute = morphAttributesPosition[i];
            _boxMorphTargets.setFromBufferAttribute(morphAttribute);
            if (this.morphTargetsRelative) {
              _vector$7.addVectors(_box$1.min, _boxMorphTargets.min);
              _box$1.expandByPoint(_vector$7);
              _vector$7.addVectors(_box$1.max, _boxMorphTargets.max);
              _box$1.expandByPoint(_vector$7);
            } else {
              _box$1.expandByPoint(_boxMorphTargets.min);
              _box$1.expandByPoint(_boxMorphTargets.max);
            }
          }
        }
        _box$1.getCenter(center);
        let maxRadiusSq = 0;
        for (let i = 0, il = position.count; i < il; i++) {
          _vector$7.fromBufferAttribute(position, i);
          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$7));
        }
        if (morphAttributesPosition) {
          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
            const morphAttribute = morphAttributesPosition[i];
            const morphTargetsRelative = this.morphTargetsRelative;
            for (let j = 0, jl = morphAttribute.count; j < jl; j++) {
              _vector$7.fromBufferAttribute(morphAttribute, j);
              if (morphTargetsRelative) {
                _offset.fromBufferAttribute(position, j);
                _vector$7.add(_offset);
              }
              maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$7));
            }
          }
        }
        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
        if (isNaN(this.boundingSphere.radius)) {
          console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
      }
    }
    computeTangents() {
      const index = this.index;
      const attributes = this.attributes;
      if (index === null || attributes.position === void 0 || attributes.normal === void 0 || attributes.uv === void 0) {
        console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
        return;
      }
      const indices = index.array;
      const positions = attributes.position.array;
      const normals = attributes.normal.array;
      const uvs = attributes.uv.array;
      const nVertices = positions.length / 3;
      if (this.hasAttribute("tangent") === false) {
        this.setAttribute("tangent", new BufferAttribute(new Float32Array(4 * nVertices), 4));
      }
      const tangents = this.getAttribute("tangent").array;
      const tan1 = [], tan2 = [];
      for (let i = 0; i < nVertices; i++) {
        tan1[i] = new Vector3();
        tan2[i] = new Vector3();
      }
      const vA = new Vector3(), vB = new Vector3(), vC = new Vector3(), uvA = new Vector2(), uvB = new Vector2(), uvC = new Vector2(), sdir = new Vector3(), tdir = new Vector3();
      function handleTriangle(a, b, c) {
        vA.fromArray(positions, a * 3);
        vB.fromArray(positions, b * 3);
        vC.fromArray(positions, c * 3);
        uvA.fromArray(uvs, a * 2);
        uvB.fromArray(uvs, b * 2);
        uvC.fromArray(uvs, c * 2);
        vB.sub(vA);
        vC.sub(vA);
        uvB.sub(uvA);
        uvC.sub(uvA);
        const r = 1 / (uvB.x * uvC.y - uvC.x * uvB.y);
        if (!isFinite(r))
          return;
        sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
        tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
        tan1[a].add(sdir);
        tan1[b].add(sdir);
        tan1[c].add(sdir);
        tan2[a].add(tdir);
        tan2[b].add(tdir);
        tan2[c].add(tdir);
      }
      let groups = this.groups;
      if (groups.length === 0) {
        groups = [{
          start: 0,
          count: indices.length
        }];
      }
      for (let i = 0, il = groups.length; i < il; ++i) {
        const group = groups[i];
        const start = group.start;
        const count = group.count;
        for (let j = start, jl = start + count; j < jl; j += 3) {
          handleTriangle(
            indices[j + 0],
            indices[j + 1],
            indices[j + 2]
          );
        }
      }
      const tmp = new Vector3(), tmp2 = new Vector3();
      const n = new Vector3(), n2 = new Vector3();
      function handleVertex(v) {
        n.fromArray(normals, v * 3);
        n2.copy(n);
        const t = tan1[v];
        tmp.copy(t);
        tmp.sub(n.multiplyScalar(n.dot(t))).normalize();
        tmp2.crossVectors(n2, t);
        const test = tmp2.dot(tan2[v]);
        const w = test < 0 ? -1 : 1;
        tangents[v * 4] = tmp.x;
        tangents[v * 4 + 1] = tmp.y;
        tangents[v * 4 + 2] = tmp.z;
        tangents[v * 4 + 3] = w;
      }
      for (let i = 0, il = groups.length; i < il; ++i) {
        const group = groups[i];
        const start = group.start;
        const count = group.count;
        for (let j = start, jl = start + count; j < jl; j += 3) {
          handleVertex(indices[j + 0]);
          handleVertex(indices[j + 1]);
          handleVertex(indices[j + 2]);
        }
      }
    }
    computeVertexNormals() {
      const index = this.index;
      const positionAttribute = this.getAttribute("position");
      if (positionAttribute !== void 0) {
        let normalAttribute = this.getAttribute("normal");
        if (normalAttribute === void 0) {
          normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
          this.setAttribute("normal", normalAttribute);
        } else {
          for (let i = 0, il = normalAttribute.count; i < il; i++) {
            normalAttribute.setXYZ(i, 0, 0, 0);
          }
        }
        const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
        const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
        const cb = new Vector3(), ab = new Vector3();
        if (index) {
          for (let i = 0, il = index.count; i < il; i += 3) {
            const vA = index.getX(i + 0);
            const vB = index.getX(i + 1);
            const vC = index.getX(i + 2);
            pA.fromBufferAttribute(positionAttribute, vA);
            pB.fromBufferAttribute(positionAttribute, vB);
            pC.fromBufferAttribute(positionAttribute, vC);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            nA.fromBufferAttribute(normalAttribute, vA);
            nB.fromBufferAttribute(normalAttribute, vB);
            nC.fromBufferAttribute(normalAttribute, vC);
            nA.add(cb);
            nB.add(cb);
            nC.add(cb);
            normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
            normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
            normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
          }
        } else {
          for (let i = 0, il = positionAttribute.count; i < il; i += 3) {
            pA.fromBufferAttribute(positionAttribute, i + 0);
            pB.fromBufferAttribute(positionAttribute, i + 1);
            pC.fromBufferAttribute(positionAttribute, i + 2);
            cb.subVectors(pC, pB);
            ab.subVectors(pA, pB);
            cb.cross(ab);
            normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);
            normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);
          }
        }
        this.normalizeNormals();
        normalAttribute.needsUpdate = true;
      }
    }
    normalizeNormals() {
      const normals = this.attributes.normal;
      for (let i = 0, il = normals.count; i < il; i++) {
        _vector$7.fromBufferAttribute(normals, i);
        _vector$7.normalize();
        normals.setXYZ(i, _vector$7.x, _vector$7.y, _vector$7.z);
      }
    }
    toNonIndexed() {
      function convertBufferAttribute(attribute, indices2) {
        const array = attribute.array;
        const itemSize = attribute.itemSize;
        const normalized = attribute.normalized;
        const array2 = new array.constructor(indices2.length * itemSize);
        let index = 0, index2 = 0;
        for (let i = 0, l = indices2.length; i < l; i++) {
          if (attribute.isInterleavedBufferAttribute) {
            index = indices2[i] * attribute.data.stride + attribute.offset;
          } else {
            index = indices2[i] * itemSize;
          }
          for (let j = 0; j < itemSize; j++) {
            array2[index2++] = array[index++];
          }
        }
        return new BufferAttribute(array2, itemSize, normalized);
      }
      if (this.index === null) {
        console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
        return this;
      }
      const geometry2 = new _BufferGeometry();
      const indices = this.index.array;
      const attributes = this.attributes;
      for (const name in attributes) {
        const attribute = attributes[name];
        const newAttribute = convertBufferAttribute(attribute, indices);
        geometry2.setAttribute(name, newAttribute);
      }
      const morphAttributes = this.morphAttributes;
      for (const name in morphAttributes) {
        const morphArray = [];
        const morphAttribute = morphAttributes[name];
        for (let i = 0, il = morphAttribute.length; i < il; i++) {
          const attribute = morphAttribute[i];
          const newAttribute = convertBufferAttribute(attribute, indices);
          morphArray.push(newAttribute);
        }
        geometry2.morphAttributes[name] = morphArray;
      }
      geometry2.morphTargetsRelative = this.morphTargetsRelative;
      const groups = this.groups;
      for (let i = 0, l = groups.length; i < l; i++) {
        const group = groups[i];
        geometry2.addGroup(group.start, group.count, group.materialIndex);
      }
      return geometry2;
    }
    toJSON() {
      const data = {
        metadata: {
          version: 4.6,
          type: "BufferGeometry",
          generator: "BufferGeometry.toJSON"
        }
      };
      data.uuid = this.uuid;
      data.type = this.type;
      if (this.name !== "")
        data.name = this.name;
      if (Object.keys(this.userData).length > 0)
        data.userData = this.userData;
      if (this.parameters !== void 0) {
        const parameters = this.parameters;
        for (const key in parameters) {
          if (parameters[key] !== void 0)
            data[key] = parameters[key];
        }
        return data;
      }
      data.data = { attributes: {} };
      const index = this.index;
      if (index !== null) {
        data.data.index = {
          type: index.array.constructor.name,
          array: Array.prototype.slice.call(index.array)
        };
      }
      const attributes = this.attributes;
      for (const key in attributes) {
        const attribute = attributes[key];
        data.data.attributes[key] = attribute.toJSON(data.data);
      }
      const morphAttributes = {};
      let hasMorphAttributes = false;
      for (const key in this.morphAttributes) {
        const attributeArray = this.morphAttributes[key];
        const array = [];
        for (let i = 0, il = attributeArray.length; i < il; i++) {
          const attribute = attributeArray[i];
          array.push(attribute.toJSON(data.data));
        }
        if (array.length > 0) {
          morphAttributes[key] = array;
          hasMorphAttributes = true;
        }
      }
      if (hasMorphAttributes) {
        data.data.morphAttributes = morphAttributes;
        data.data.morphTargetsRelative = this.morphTargetsRelative;
      }
      const groups = this.groups;
      if (groups.length > 0) {
        data.data.groups = JSON.parse(JSON.stringify(groups));
      }
      const boundingSphere = this.boundingSphere;
      if (boundingSphere !== null) {
        data.data.boundingSphere = {
          center: boundingSphere.center.toArray(),
          radius: boundingSphere.radius
        };
      }
      return data;
    }
    clone() {
      return new this.constructor().copy(this);
    }
    copy(source) {
      this.index = null;
      this.attributes = {};
      this.morphAttributes = {};
      this.groups = [];
      this.boundingBox = null;
      this.boundingSphere = null;
      const data = {};
      this.name = source.name;
      const index = source.index;
      if (index !== null) {
        this.setIndex(index.clone(data));
      }
      const attributes = source.attributes;
      for (const name in attributes) {
        const attribute = attributes[name];
        this.setAttribute(name, attribute.clone(data));
      }
      const morphAttributes = source.morphAttributes;
      for (const name in morphAttributes) {
        const array = [];
        const morphAttribute = morphAttributes[name];
        for (let i = 0, l = morphAttribute.length; i < l; i++) {
          array.push(morphAttribute[i].clone(data));
        }
        this.morphAttributes[name] = array;
      }
      this.morphTargetsRelative = source.morphTargetsRelative;
      const groups = source.groups;
      for (let i = 0, l = groups.length; i < l; i++) {
        const group = groups[i];
        this.addGroup(group.start, group.count, group.materialIndex);
      }
      const boundingBox = source.boundingBox;
      if (boundingBox !== null) {
        this.boundingBox = boundingBox.clone();
      }
      const boundingSphere = source.boundingSphere;
      if (boundingSphere !== null) {
        this.boundingSphere = boundingSphere.clone();
      }
      this.drawRange.start = source.drawRange.start;
      this.drawRange.count = source.drawRange.count;
      this.userData = source.userData;
      return this;
    }
    dispose() {
      this.dispatchEvent({ type: "dispose" });
    }
  };
  var _inverseMatrix$3 = /* @__PURE__ */ new Matrix4();
  var _ray$3 = /* @__PURE__ */ new Ray();
  var _sphere$5 = /* @__PURE__ */ new Sphere();
  var _sphereHitAt = /* @__PURE__ */ new Vector3();
  var _vA$1 = /* @__PURE__ */ new Vector3();
  var _vB$1 = /* @__PURE__ */ new Vector3();
  var _vC$1 = /* @__PURE__ */ new Vector3();
  var _tempA = /* @__PURE__ */ new Vector3();
  var _morphA = /* @__PURE__ */ new Vector3();
  var _uvA$1 = /* @__PURE__ */ new Vector2();
  var _uvB$1 = /* @__PURE__ */ new Vector2();
  var _uvC$1 = /* @__PURE__ */ new Vector2();
  var _normalA = /* @__PURE__ */ new Vector3();
  var _normalB = /* @__PURE__ */ new Vector3();
  var _normalC = /* @__PURE__ */ new Vector3();
  var _intersectionPoint = /* @__PURE__ */ new Vector3();
  var _intersectionPointWorld = /* @__PURE__ */ new Vector3();
  var Mesh = class extends Object3D {
    constructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {
      super();
      this.isMesh = true;
      this.type = "Mesh";
      this.geometry = geometry;
      this.material = material;
      this.updateMorphTargets();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      if (source.morphTargetInfluences !== void 0) {
        this.morphTargetInfluences = source.morphTargetInfluences.slice();
      }
      if (source.morphTargetDictionary !== void 0) {
        this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
      }
      this.material = source.material;
      this.geometry = source.geometry;
      return this;
    }
    updateMorphTargets() {
      const geometry = this.geometry;
      const morphAttributes = geometry.morphAttributes;
      const keys = Object.keys(morphAttributes);
      if (keys.length > 0) {
        const morphAttribute = morphAttributes[keys[0]];
        if (morphAttribute !== void 0) {
          this.morphTargetInfluences = [];
          this.morphTargetDictionary = {};
          for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
            const name = morphAttribute[m].name || String(m);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[name] = m;
          }
        }
      }
    }
    getVertexPosition(index, target) {
      const geometry = this.geometry;
      const position = geometry.attributes.position;
      const morphPosition = geometry.morphAttributes.position;
      const morphTargetsRelative = geometry.morphTargetsRelative;
      target.fromBufferAttribute(position, index);
      const morphInfluences = this.morphTargetInfluences;
      if (morphPosition && morphInfluences) {
        _morphA.set(0, 0, 0);
        for (let i = 0, il = morphPosition.length; i < il; i++) {
          const influence = morphInfluences[i];
          const morphAttribute = morphPosition[i];
          if (influence === 0)
            continue;
          _tempA.fromBufferAttribute(morphAttribute, index);
          if (morphTargetsRelative) {
            _morphA.addScaledVector(_tempA, influence);
          } else {
            _morphA.addScaledVector(_tempA.sub(target), influence);
          }
        }
        target.add(_morphA);
      }
      return target;
    }
    raycast(raycaster, intersects) {
      const geometry = this.geometry;
      const material = this.material;
      const matrixWorld = this.matrixWorld;
      if (material === void 0)
        return;
      if (geometry.boundingSphere === null)
        geometry.computeBoundingSphere();
      _sphere$5.copy(geometry.boundingSphere);
      _sphere$5.applyMatrix4(matrixWorld);
      _ray$3.copy(raycaster.ray).recast(raycaster.near);
      if (_sphere$5.containsPoint(_ray$3.origin) === false) {
        if (_ray$3.intersectSphere(_sphere$5, _sphereHitAt) === null)
          return;
        if (_ray$3.origin.distanceToSquared(_sphereHitAt) > (raycaster.far - raycaster.near) ** 2)
          return;
      }
      _inverseMatrix$3.copy(matrixWorld).invert();
      _ray$3.copy(raycaster.ray).applyMatrix4(_inverseMatrix$3);
      if (geometry.boundingBox !== null) {
        if (_ray$3.intersectsBox(geometry.boundingBox) === false)
          return;
      }
      this._computeIntersections(raycaster, intersects, _ray$3);
    }
    _computeIntersections(raycaster, intersects, rayLocalSpace) {
      let intersection;
      const geometry = this.geometry;
      const material = this.material;
      const index = geometry.index;
      const position = geometry.attributes.position;
      const uv = geometry.attributes.uv;
      const uv1 = geometry.attributes.uv1;
      const normal = geometry.attributes.normal;
      const groups = geometry.groups;
      const drawRange = geometry.drawRange;
      if (index !== null) {
        if (Array.isArray(material)) {
          for (let i = 0, il = groups.length; i < il; i++) {
            const group = groups[i];
            const groupMaterial = material[group.materialIndex];
            const start = Math.max(group.start, drawRange.start);
            const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
            for (let j = start, jl = end; j < jl; j += 3) {
              const a = index.getX(j);
              const b = index.getX(j + 1);
              const c = index.getX(j + 2);
              intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(j / 3);
                intersection.face.materialIndex = group.materialIndex;
                intersects.push(intersection);
              }
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(index.count, drawRange.start + drawRange.count);
          for (let i = start, il = end; i < il; i += 3) {
            const a = index.getX(i);
            const b = index.getX(i + 1);
            const c = index.getX(i + 2);
            intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(i / 3);
              intersects.push(intersection);
            }
          }
        }
      } else if (position !== void 0) {
        if (Array.isArray(material)) {
          for (let i = 0, il = groups.length; i < il; i++) {
            const group = groups[i];
            const groupMaterial = material[group.materialIndex];
            const start = Math.max(group.start, drawRange.start);
            const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
            for (let j = start, jl = end; j < jl; j += 3) {
              const a = j;
              const b = j + 1;
              const c = j + 2;
              intersection = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(j / 3);
                intersection.face.materialIndex = group.materialIndex;
                intersects.push(intersection);
              }
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(position.count, drawRange.start + drawRange.count);
          for (let i = start, il = end; i < il; i += 3) {
            const a = i;
            const b = i + 1;
            const c = i + 2;
            intersection = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(i / 3);
              intersects.push(intersection);
            }
          }
        }
      }
    }
  };
  function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
    let intersect;
    if (material.side === BackSide) {
      intersect = ray.intersectTriangle(pC, pB, pA, true, point);
    } else {
      intersect = ray.intersectTriangle(pA, pB, pC, material.side === FrontSide, point);
    }
    if (intersect === null)
      return null;
    _intersectionPointWorld.copy(point);
    _intersectionPointWorld.applyMatrix4(object.matrixWorld);
    const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
    if (distance < raycaster.near || distance > raycaster.far)
      return null;
    return {
      distance,
      point: _intersectionPointWorld.clone(),
      object
    };
  }
  function checkGeometryIntersection(object, material, raycaster, ray, uv, uv1, normal, a, b, c) {
    object.getVertexPosition(a, _vA$1);
    object.getVertexPosition(b, _vB$1);
    object.getVertexPosition(c, _vC$1);
    const intersection = checkIntersection(object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);
    if (intersection) {
      if (uv) {
        _uvA$1.fromBufferAttribute(uv, a);
        _uvB$1.fromBufferAttribute(uv, b);
        _uvC$1.fromBufferAttribute(uv, c);
        intersection.uv = Triangle.getInterpolation(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
      }
      if (uv1) {
        _uvA$1.fromBufferAttribute(uv1, a);
        _uvB$1.fromBufferAttribute(uv1, b);
        _uvC$1.fromBufferAttribute(uv1, c);
        intersection.uv1 = Triangle.getInterpolation(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
        intersection.uv2 = intersection.uv1;
      }
      if (normal) {
        _normalA.fromBufferAttribute(normal, a);
        _normalB.fromBufferAttribute(normal, b);
        _normalC.fromBufferAttribute(normal, c);
        intersection.normal = Triangle.getInterpolation(_intersectionPoint, _vA$1, _vB$1, _vC$1, _normalA, _normalB, _normalC, new Vector3());
        if (intersection.normal.dot(ray.direction) > 0) {
          intersection.normal.multiplyScalar(-1);
        }
      }
      const face = {
        a,
        b,
        c,
        normal: new Vector3(),
        materialIndex: 0
      };
      Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
      intersection.face = face;
    }
    return intersection;
  }
  var BoxGeometry = class _BoxGeometry extends BufferGeometry {
    constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
      super();
      this.type = "BoxGeometry";
      this.parameters = {
        width,
        height,
        depth,
        widthSegments,
        heightSegments,
        depthSegments
      };
      const scope = this;
      widthSegments = Math.floor(widthSegments);
      heightSegments = Math.floor(heightSegments);
      depthSegments = Math.floor(depthSegments);
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      let numberOfVertices = 0;
      let groupStart = 0;
      buildPlane("z", "y", "x", -1, -1, depth, height, width, depthSegments, heightSegments, 0);
      buildPlane("z", "y", "x", 1, -1, depth, height, -width, depthSegments, heightSegments, 1);
      buildPlane("x", "z", "y", 1, 1, width, depth, height, widthSegments, depthSegments, 2);
      buildPlane("x", "z", "y", 1, -1, width, depth, -height, widthSegments, depthSegments, 3);
      buildPlane("x", "y", "z", 1, -1, width, height, depth, widthSegments, heightSegments, 4);
      buildPlane("x", "y", "z", -1, -1, width, height, -depth, widthSegments, heightSegments, 5);
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
      function buildPlane(u, v, w, udir, vdir, width2, height2, depth2, gridX, gridY, materialIndex) {
        const segmentWidth = width2 / gridX;
        const segmentHeight = height2 / gridY;
        const widthHalf = width2 / 2;
        const heightHalf = height2 / 2;
        const depthHalf = depth2 / 2;
        const gridX1 = gridX + 1;
        const gridY1 = gridY + 1;
        let vertexCounter = 0;
        let groupCount = 0;
        const vector = new Vector3();
        for (let iy = 0; iy < gridY1; iy++) {
          const y = iy * segmentHeight - heightHalf;
          for (let ix = 0; ix < gridX1; ix++) {
            const x = ix * segmentWidth - widthHalf;
            vector[u] = x * udir;
            vector[v] = y * vdir;
            vector[w] = depthHalf;
            vertices.push(vector.x, vector.y, vector.z);
            vector[u] = 0;
            vector[v] = 0;
            vector[w] = depth2 > 0 ? 1 : -1;
            normals.push(vector.x, vector.y, vector.z);
            uvs.push(ix / gridX);
            uvs.push(1 - iy / gridY);
            vertexCounter += 1;
          }
        }
        for (let iy = 0; iy < gridY; iy++) {
          for (let ix = 0; ix < gridX; ix++) {
            const a = numberOfVertices + ix + gridX1 * iy;
            const b = numberOfVertices + ix + gridX1 * (iy + 1);
            const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
            const d = numberOfVertices + (ix + 1) + gridX1 * iy;
            indices.push(a, b, d);
            indices.push(b, c, d);
            groupCount += 6;
          }
        }
        scope.addGroup(groupStart, groupCount, materialIndex);
        groupStart += groupCount;
        numberOfVertices += vertexCounter;
      }
    }
    copy(source) {
      super.copy(source);
      this.parameters = Object.assign({}, source.parameters);
      return this;
    }
    static fromJSON(data) {
      return new _BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
    }
  };
  function cloneUniforms(src) {
    const dst = {};
    for (const u in src) {
      dst[u] = {};
      for (const p in src[u]) {
        const property = src[u][p];
        if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {
          if (property.isRenderTargetTexture) {
            console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");
            dst[u][p] = null;
          } else {
            dst[u][p] = property.clone();
          }
        } else if (Array.isArray(property)) {
          dst[u][p] = property.slice();
        } else {
          dst[u][p] = property;
        }
      }
    }
    return dst;
  }
  function mergeUniforms(uniforms) {
    const merged = {};
    for (let u = 0; u < uniforms.length; u++) {
      const tmp = cloneUniforms(uniforms[u]);
      for (const p in tmp) {
        merged[p] = tmp[p];
      }
    }
    return merged;
  }
  function cloneUniformsGroups(src) {
    const dst = [];
    for (let u = 0; u < src.length; u++) {
      dst.push(src[u].clone());
    }
    return dst;
  }
  function getUnlitUniformColorSpace(renderer) {
    if (renderer.getRenderTarget() === null) {
      return renderer.outputColorSpace;
    }
    return LinearSRGBColorSpace;
  }
  var UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };
  var default_vertex = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
  var default_fragment = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
  var ShaderMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.isShaderMaterial = true;
      this.type = "ShaderMaterial";
      this.defines = {};
      this.uniforms = {};
      this.uniformsGroups = [];
      this.vertexShader = default_vertex;
      this.fragmentShader = default_fragment;
      this.linewidth = 1;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.fog = false;
      this.lights = false;
      this.clipping = false;
      this.forceSinglePass = true;
      this.extensions = {
        derivatives: false,
        // set to use derivatives
        fragDepth: false,
        // set to use fragment depth values
        drawBuffers: false,
        // set to use draw buffers
        shaderTextureLOD: false
        // set to use shader texture LOD
      };
      this.defaultAttributeValues = {
        "color": [1, 1, 1],
        "uv": [0, 0],
        "uv1": [0, 0]
      };
      this.index0AttributeName = void 0;
      this.uniformsNeedUpdate = false;
      this.glslVersion = null;
      if (parameters !== void 0) {
        this.setValues(parameters);
      }
    }
    copy(source) {
      super.copy(source);
      this.fragmentShader = source.fragmentShader;
      this.vertexShader = source.vertexShader;
      this.uniforms = cloneUniforms(source.uniforms);
      this.uniformsGroups = cloneUniformsGroups(source.uniformsGroups);
      this.defines = Object.assign({}, source.defines);
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      this.fog = source.fog;
      this.lights = source.lights;
      this.clipping = source.clipping;
      this.extensions = Object.assign({}, source.extensions);
      this.glslVersion = source.glslVersion;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.glslVersion = this.glslVersion;
      data.uniforms = {};
      for (const name in this.uniforms) {
        const uniform = this.uniforms[name];
        const value = uniform.value;
        if (value && value.isTexture) {
          data.uniforms[name] = {
            type: "t",
            value: value.toJSON(meta).uuid
          };
        } else if (value && value.isColor) {
          data.uniforms[name] = {
            type: "c",
            value: value.getHex()
          };
        } else if (value && value.isVector2) {
          data.uniforms[name] = {
            type: "v2",
            value: value.toArray()
          };
        } else if (value && value.isVector3) {
          data.uniforms[name] = {
            type: "v3",
            value: value.toArray()
          };
        } else if (value && value.isVector4) {
          data.uniforms[name] = {
            type: "v4",
            value: value.toArray()
          };
        } else if (value && value.isMatrix3) {
          data.uniforms[name] = {
            type: "m3",
            value: value.toArray()
          };
        } else if (value && value.isMatrix4) {
          data.uniforms[name] = {
            type: "m4",
            value: value.toArray()
          };
        } else {
          data.uniforms[name] = {
            value
          };
        }
      }
      if (Object.keys(this.defines).length > 0)
        data.defines = this.defines;
      data.vertexShader = this.vertexShader;
      data.fragmentShader = this.fragmentShader;
      data.lights = this.lights;
      data.clipping = this.clipping;
      const extensions = {};
      for (const key in this.extensions) {
        if (this.extensions[key] === true)
          extensions[key] = true;
      }
      if (Object.keys(extensions).length > 0)
        data.extensions = extensions;
      return data;
    }
  };
  var Camera = class extends Object3D {
    constructor() {
      super();
      this.isCamera = true;
      this.type = "Camera";
      this.matrixWorldInverse = new Matrix4();
      this.projectionMatrix = new Matrix4();
      this.projectionMatrixInverse = new Matrix4();
      this.coordinateSystem = WebGLCoordinateSystem;
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.matrixWorldInverse.copy(source.matrixWorldInverse);
      this.projectionMatrix.copy(source.projectionMatrix);
      this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
      this.coordinateSystem = source.coordinateSystem;
      return this;
    }
    getWorldDirection(target) {
      this.updateWorldMatrix(true, false);
      const e = this.matrixWorld.elements;
      return target.set(-e[8], -e[9], -e[10]).normalize();
    }
    updateMatrixWorld(force) {
      super.updateMatrixWorld(force);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    updateWorldMatrix(updateParents, updateChildren) {
      super.updateWorldMatrix(updateParents, updateChildren);
      this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var PerspectiveCamera = class extends Camera {
    constructor(fov2 = 50, aspect2 = 1, near = 0.1, far = 2e3) {
      super();
      this.isPerspectiveCamera = true;
      this.type = "PerspectiveCamera";
      this.fov = fov2;
      this.zoom = 1;
      this.near = near;
      this.far = far;
      this.focus = 10;
      this.aspect = aspect2;
      this.view = null;
      this.filmGauge = 35;
      this.filmOffset = 0;
      this.updateProjectionMatrix();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.fov = source.fov;
      this.zoom = source.zoom;
      this.near = source.near;
      this.far = source.far;
      this.focus = source.focus;
      this.aspect = source.aspect;
      this.view = source.view === null ? null : Object.assign({}, source.view);
      this.filmGauge = source.filmGauge;
      this.filmOffset = source.filmOffset;
      return this;
    }
    /**
     * Sets the FOV by focal length in respect to the current .filmGauge.
     *
     * The default film gauge is 35, so that the focal length can be specified for
     * a 35mm (full frame) camera.
     *
     * Values for focal length and film gauge must have the same unit.
     */
    setFocalLength(focalLength) {
      const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
      this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);
      this.updateProjectionMatrix();
    }
    /**
     * Calculates the focal length from the current .fov and .filmGauge.
     */
    getFocalLength() {
      const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);
      return 0.5 * this.getFilmHeight() / vExtentSlope;
    }
    getEffectiveFOV() {
      return RAD2DEG * 2 * Math.atan(
        Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom
      );
    }
    getFilmWidth() {
      return this.filmGauge * Math.min(this.aspect, 1);
    }
    getFilmHeight() {
      return this.filmGauge / Math.max(this.aspect, 1);
    }
    /**
     * Sets an offset in a larger frustum. This is useful for multi-window or
     * multi-monitor/multi-machine setups.
     *
     * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
     * the monitors are in grid like this
     *
     *   +---+---+---+
     *   | A | B | C |
     *   +---+---+---+
     *   | D | E | F |
     *   +---+---+---+
     *
     * then for each monitor you would call it like this
     *
     *   const w = 1920;
     *   const h = 1080;
     *   const fullWidth = w * 3;
     *   const fullHeight = h * 2;
     *
     *   --A--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
     *   --B--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
     *   --C--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
     *   --D--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
     *   --E--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
     *   --F--
     *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
     *
     *   Note there is no reason monitors have to be the same size or in a grid.
     */
    setViewOffset(fullWidth, fullHeight, x, y, width, height) {
      this.aspect = fullWidth / fullHeight;
      if (this.view === null) {
        this.view = {
          enabled: true,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        };
      }
      this.view.enabled = true;
      this.view.fullWidth = fullWidth;
      this.view.fullHeight = fullHeight;
      this.view.offsetX = x;
      this.view.offsetY = y;
      this.view.width = width;
      this.view.height = height;
      this.updateProjectionMatrix();
    }
    clearViewOffset() {
      if (this.view !== null) {
        this.view.enabled = false;
      }
      this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
      const near = this.near;
      let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
      let height = 2 * top;
      let width = this.aspect * height;
      let left = -0.5 * width;
      const view = this.view;
      if (this.view !== null && this.view.enabled) {
        const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
        left += view.offsetX * width / fullWidth;
        top -= view.offsetY * height / fullHeight;
        width *= view.width / fullWidth;
        height *= view.height / fullHeight;
      }
      const skew = this.filmOffset;
      if (skew !== 0)
        left += near * skew / this.getFilmWidth();
      this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far, this.coordinateSystem);
      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.object.fov = this.fov;
      data.object.zoom = this.zoom;
      data.object.near = this.near;
      data.object.far = this.far;
      data.object.focus = this.focus;
      data.object.aspect = this.aspect;
      if (this.view !== null)
        data.object.view = Object.assign({}, this.view);
      data.object.filmGauge = this.filmGauge;
      data.object.filmOffset = this.filmOffset;
      return data;
    }
  };
  var fov = -90;
  var aspect = 1;
  var CubeCamera = class extends Object3D {
    constructor(near, far, renderTarget) {
      super();
      this.type = "CubeCamera";
      this.renderTarget = renderTarget;
      this.coordinateSystem = null;
      const cameraPX = new PerspectiveCamera(fov, aspect, near, far);
      cameraPX.layers = this.layers;
      this.add(cameraPX);
      const cameraNX = new PerspectiveCamera(fov, aspect, near, far);
      cameraNX.layers = this.layers;
      this.add(cameraNX);
      const cameraPY = new PerspectiveCamera(fov, aspect, near, far);
      cameraPY.layers = this.layers;
      this.add(cameraPY);
      const cameraNY = new PerspectiveCamera(fov, aspect, near, far);
      cameraNY.layers = this.layers;
      this.add(cameraNY);
      const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
      cameraPZ.layers = this.layers;
      this.add(cameraPZ);
      const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
      cameraNZ.layers = this.layers;
      this.add(cameraNZ);
    }
    updateCoordinateSystem() {
      const coordinateSystem = this.coordinateSystem;
      const cameras = this.children.concat();
      const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = cameras;
      for (const camera of cameras)
        this.remove(camera);
      if (coordinateSystem === WebGLCoordinateSystem) {
        cameraPX.up.set(0, 1, 0);
        cameraPX.lookAt(1, 0, 0);
        cameraNX.up.set(0, 1, 0);
        cameraNX.lookAt(-1, 0, 0);
        cameraPY.up.set(0, 0, -1);
        cameraPY.lookAt(0, 1, 0);
        cameraNY.up.set(0, 0, 1);
        cameraNY.lookAt(0, -1, 0);
        cameraPZ.up.set(0, 1, 0);
        cameraPZ.lookAt(0, 0, 1);
        cameraNZ.up.set(0, 1, 0);
        cameraNZ.lookAt(0, 0, -1);
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        cameraPX.up.set(0, -1, 0);
        cameraPX.lookAt(-1, 0, 0);
        cameraNX.up.set(0, -1, 0);
        cameraNX.lookAt(1, 0, 0);
        cameraPY.up.set(0, 0, 1);
        cameraPY.lookAt(0, 1, 0);
        cameraNY.up.set(0, 0, -1);
        cameraNY.lookAt(0, -1, 0);
        cameraPZ.up.set(0, -1, 0);
        cameraPZ.lookAt(0, 0, 1);
        cameraNZ.up.set(0, -1, 0);
        cameraNZ.lookAt(0, 0, -1);
      } else {
        throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + coordinateSystem);
      }
      for (const camera of cameras) {
        this.add(camera);
        camera.updateMatrixWorld();
      }
    }
    update(renderer, scene) {
      if (this.parent === null)
        this.updateMatrixWorld();
      const renderTarget = this.renderTarget;
      if (this.coordinateSystem !== renderer.coordinateSystem) {
        this.coordinateSystem = renderer.coordinateSystem;
        this.updateCoordinateSystem();
      }
      const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;
      const currentRenderTarget = renderer.getRenderTarget();
      const currentToneMapping = renderer.toneMapping;
      const currentXrEnabled = renderer.xr.enabled;
      renderer.toneMapping = NoToneMapping;
      renderer.xr.enabled = false;
      const generateMipmaps = renderTarget.texture.generateMipmaps;
      renderTarget.texture.generateMipmaps = false;
      renderer.setRenderTarget(renderTarget, 0);
      renderer.render(scene, cameraPX);
      renderer.setRenderTarget(renderTarget, 1);
      renderer.render(scene, cameraNX);
      renderer.setRenderTarget(renderTarget, 2);
      renderer.render(scene, cameraPY);
      renderer.setRenderTarget(renderTarget, 3);
      renderer.render(scene, cameraNY);
      renderer.setRenderTarget(renderTarget, 4);
      renderer.render(scene, cameraPZ);
      renderTarget.texture.generateMipmaps = generateMipmaps;
      renderer.setRenderTarget(renderTarget, 5);
      renderer.render(scene, cameraNZ);
      renderer.setRenderTarget(currentRenderTarget);
      renderer.toneMapping = currentToneMapping;
      renderer.xr.enabled = currentXrEnabled;
      renderTarget.texture.needsPMREMUpdate = true;
    }
  };
  var CubeTexture = class extends Texture {
    constructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace) {
      images = images !== void 0 ? images : [];
      mapping = mapping !== void 0 ? mapping : CubeReflectionMapping;
      super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace);
      this.isCubeTexture = true;
      this.flipY = false;
    }
    get images() {
      return this.image;
    }
    set images(value) {
      this.image = value;
    }
  };
  var WebGLCubeRenderTarget = class extends WebGLRenderTarget {
    constructor(size = 1, options = {}) {
      super(size, size, options);
      this.isWebGLCubeRenderTarget = true;
      const image = { width: size, height: size, depth: 1 };
      const images = [image, image, image, image, image, image];
      if (options.encoding !== void 0) {
        warnOnce("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace.");
        options.colorSpace = options.encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;
      }
      this.texture = new CubeTexture(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
      this.texture.isRenderTargetTexture = true;
      this.texture.generateMipmaps = options.generateMipmaps !== void 0 ? options.generateMipmaps : false;
      this.texture.minFilter = options.minFilter !== void 0 ? options.minFilter : LinearFilter;
    }
    fromEquirectangularTexture(renderer, texture) {
      this.texture.type = texture.type;
      this.texture.colorSpace = texture.colorSpace;
      this.texture.generateMipmaps = texture.generateMipmaps;
      this.texture.minFilter = texture.minFilter;
      this.texture.magFilter = texture.magFilter;
      const shader = {
        uniforms: {
          tEquirect: { value: null }
        },
        vertexShader: (
          /* glsl */
          `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
        ),
        fragmentShader: (
          /* glsl */
          `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
        )
      };
      const geometry = new BoxGeometry(5, 5, 5);
      const material = new ShaderMaterial({
        name: "CubemapFromEquirect",
        uniforms: cloneUniforms(shader.uniforms),
        vertexShader: shader.vertexShader,
        fragmentShader: shader.fragmentShader,
        side: BackSide,
        blending: NoBlending
      });
      material.uniforms.tEquirect.value = texture;
      const mesh = new Mesh(geometry, material);
      const currentMinFilter = texture.minFilter;
      if (texture.minFilter === LinearMipmapLinearFilter)
        texture.minFilter = LinearFilter;
      const camera = new CubeCamera(1, 10, this);
      camera.update(renderer, mesh);
      texture.minFilter = currentMinFilter;
      mesh.geometry.dispose();
      mesh.material.dispose();
      return this;
    }
    clear(renderer, color, depth, stencil) {
      const currentRenderTarget = renderer.getRenderTarget();
      for (let i = 0; i < 6; i++) {
        renderer.setRenderTarget(this, i);
        renderer.clear(color, depth, stencil);
      }
      renderer.setRenderTarget(currentRenderTarget);
    }
  };
  var _vector1 = /* @__PURE__ */ new Vector3();
  var _vector2 = /* @__PURE__ */ new Vector3();
  var _normalMatrix = /* @__PURE__ */ new Matrix3();
  var Plane = class {
    constructor(normal = new Vector3(1, 0, 0), constant = 0) {
      this.isPlane = true;
      this.normal = normal;
      this.constant = constant;
    }
    set(normal, constant) {
      this.normal.copy(normal);
      this.constant = constant;
      return this;
    }
    setComponents(x, y, z2, w) {
      this.normal.set(x, y, z2);
      this.constant = w;
      return this;
    }
    setFromNormalAndCoplanarPoint(normal, point) {
      this.normal.copy(normal);
      this.constant = -point.dot(this.normal);
      return this;
    }
    setFromCoplanarPoints(a, b, c) {
      const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();
      this.setFromNormalAndCoplanarPoint(normal, a);
      return this;
    }
    copy(plane) {
      this.normal.copy(plane.normal);
      this.constant = plane.constant;
      return this;
    }
    normalize() {
      const inverseNormalLength = 1 / this.normal.length();
      this.normal.multiplyScalar(inverseNormalLength);
      this.constant *= inverseNormalLength;
      return this;
    }
    negate() {
      this.constant *= -1;
      this.normal.negate();
      return this;
    }
    distanceToPoint(point) {
      return this.normal.dot(point) + this.constant;
    }
    distanceToSphere(sphere) {
      return this.distanceToPoint(sphere.center) - sphere.radius;
    }
    projectPoint(point, target) {
      return target.copy(point).addScaledVector(this.normal, -this.distanceToPoint(point));
    }
    intersectLine(line, target) {
      const direction = line.delta(_vector1);
      const denominator = this.normal.dot(direction);
      if (denominator === 0) {
        if (this.distanceToPoint(line.start) === 0) {
          return target.copy(line.start);
        }
        return null;
      }
      const t = -(line.start.dot(this.normal) + this.constant) / denominator;
      if (t < 0 || t > 1) {
        return null;
      }
      return target.copy(line.start).addScaledVector(direction, t);
    }
    intersectsLine(line) {
      const startSign = this.distanceToPoint(line.start);
      const endSign = this.distanceToPoint(line.end);
      return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
    }
    intersectsBox(box) {
      return box.intersectsPlane(this);
    }
    intersectsSphere(sphere) {
      return sphere.intersectsPlane(this);
    }
    coplanarPoint(target) {
      return target.copy(this.normal).multiplyScalar(-this.constant);
    }
    applyMatrix4(matrix, optionalNormalMatrix) {
      const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);
      const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
      const normal = this.normal.applyMatrix3(normalMatrix).normalize();
      this.constant = -referencePoint.dot(normal);
      return this;
    }
    translate(offset) {
      this.constant -= offset.dot(this.normal);
      return this;
    }
    equals(plane) {
      return plane.normal.equals(this.normal) && plane.constant === this.constant;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  var _sphere$4 = /* @__PURE__ */ new Sphere();
  var _vector$6 = /* @__PURE__ */ new Vector3();
  var Frustum = class {
    constructor(p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {
      this.planes = [p0, p1, p2, p3, p4, p5];
    }
    set(p0, p1, p2, p3, p4, p5) {
      const planes = this.planes;
      planes[0].copy(p0);
      planes[1].copy(p1);
      planes[2].copy(p2);
      planes[3].copy(p3);
      planes[4].copy(p4);
      planes[5].copy(p5);
      return this;
    }
    copy(frustum) {
      const planes = this.planes;
      for (let i = 0; i < 6; i++) {
        planes[i].copy(frustum.planes[i]);
      }
      return this;
    }
    setFromProjectionMatrix(m, coordinateSystem = WebGLCoordinateSystem) {
      const planes = this.planes;
      const me = m.elements;
      const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
      const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
      const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
      const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
      planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
      planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
      planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
      planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
      planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
      if (coordinateSystem === WebGLCoordinateSystem) {
        planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
      } else if (coordinateSystem === WebGPUCoordinateSystem) {
        planes[5].setComponents(me2, me6, me10, me14).normalize();
      } else {
        throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + coordinateSystem);
      }
      return this;
    }
    intersectsObject(object) {
      if (object.boundingSphere !== void 0) {
        if (object.boundingSphere === null)
          object.computeBoundingSphere();
        _sphere$4.copy(object.boundingSphere).applyMatrix4(object.matrixWorld);
      } else {
        const geometry = object.geometry;
        if (geometry.boundingSphere === null)
          geometry.computeBoundingSphere();
        _sphere$4.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
      }
      return this.intersectsSphere(_sphere$4);
    }
    intersectsSprite(sprite) {
      _sphere$4.center.set(0, 0, 0);
      _sphere$4.radius = 0.7071067811865476;
      _sphere$4.applyMatrix4(sprite.matrixWorld);
      return this.intersectsSphere(_sphere$4);
    }
    intersectsSphere(sphere) {
      const planes = this.planes;
      const center = sphere.center;
      const negRadius = -sphere.radius;
      for (let i = 0; i < 6; i++) {
        const distance = planes[i].distanceToPoint(center);
        if (distance < negRadius) {
          return false;
        }
      }
      return true;
    }
    intersectsBox(box) {
      const planes = this.planes;
      for (let i = 0; i < 6; i++) {
        const plane = planes[i];
        _vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;
        _vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;
        _vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;
        if (plane.distanceToPoint(_vector$6) < 0) {
          return false;
        }
      }
      return true;
    }
    containsPoint(point) {
      const planes = this.planes;
      for (let i = 0; i < 6; i++) {
        if (planes[i].distanceToPoint(point) < 0) {
          return false;
        }
      }
      return true;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  };
  function WebGLAnimation() {
    let context = null;
    let isAnimating = false;
    let animationLoop = null;
    let requestId = null;
    function onAnimationFrame(time, frame) {
      animationLoop(time, frame);
      requestId = context.requestAnimationFrame(onAnimationFrame);
    }
    return {
      start: function() {
        if (isAnimating === true)
          return;
        if (animationLoop === null)
          return;
        requestId = context.requestAnimationFrame(onAnimationFrame);
        isAnimating = true;
      },
      stop: function() {
        context.cancelAnimationFrame(requestId);
        isAnimating = false;
      },
      setAnimationLoop: function(callback) {
        animationLoop = callback;
      },
      setContext: function(value) {
        context = value;
      }
    };
  }
  function WebGLAttributes(gl, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    const buffers = /* @__PURE__ */ new WeakMap();
    function createBuffer(attribute, bufferType) {
      const array = attribute.array;
      const usage = attribute.usage;
      const buffer = gl.createBuffer();
      gl.bindBuffer(bufferType, buffer);
      gl.bufferData(bufferType, array, usage);
      attribute.onUploadCallback();
      let type;
      if (array instanceof Float32Array) {
        type = gl.FLOAT;
      } else if (array instanceof Uint16Array) {
        if (attribute.isFloat16BufferAttribute) {
          if (isWebGL2) {
            type = gl.HALF_FLOAT;
          } else {
            throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
          }
        } else {
          type = gl.UNSIGNED_SHORT;
        }
      } else if (array instanceof Int16Array) {
        type = gl.SHORT;
      } else if (array instanceof Uint32Array) {
        type = gl.UNSIGNED_INT;
      } else if (array instanceof Int32Array) {
        type = gl.INT;
      } else if (array instanceof Int8Array) {
        type = gl.BYTE;
      } else if (array instanceof Uint8Array) {
        type = gl.UNSIGNED_BYTE;
      } else if (array instanceof Uint8ClampedArray) {
        type = gl.UNSIGNED_BYTE;
      } else {
        throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + array);
      }
      return {
        buffer,
        type,
        bytesPerElement: array.BYTES_PER_ELEMENT,
        version: attribute.version
      };
    }
    function updateBuffer(buffer, attribute, bufferType) {
      const array = attribute.array;
      const updateRange = attribute.updateRange;
      gl.bindBuffer(bufferType, buffer);
      if (updateRange.count === -1) {
        gl.bufferSubData(bufferType, 0, array);
      } else {
        if (isWebGL2) {
          gl.bufferSubData(
            bufferType,
            updateRange.offset * array.BYTES_PER_ELEMENT,
            array,
            updateRange.offset,
            updateRange.count
          );
        } else {
          gl.bufferSubData(
            bufferType,
            updateRange.offset * array.BYTES_PER_ELEMENT,
            array.subarray(updateRange.offset, updateRange.offset + updateRange.count)
          );
        }
        updateRange.count = -1;
      }
      attribute.onUploadCallback();
    }
    function get(attribute) {
      if (attribute.isInterleavedBufferAttribute)
        attribute = attribute.data;
      return buffers.get(attribute);
    }
    function remove(attribute) {
      if (attribute.isInterleavedBufferAttribute)
        attribute = attribute.data;
      const data = buffers.get(attribute);
      if (data) {
        gl.deleteBuffer(data.buffer);
        buffers.delete(attribute);
      }
    }
    function update(attribute, bufferType) {
      if (attribute.isGLBufferAttribute) {
        const cached = buffers.get(attribute);
        if (!cached || cached.version < attribute.version) {
          buffers.set(attribute, {
            buffer: attribute.buffer,
            type: attribute.type,
            bytesPerElement: attribute.elementSize,
            version: attribute.version
          });
        }
        return;
      }
      if (attribute.isInterleavedBufferAttribute)
        attribute = attribute.data;
      const data = buffers.get(attribute);
      if (data === void 0) {
        buffers.set(attribute, createBuffer(attribute, bufferType));
      } else if (data.version < attribute.version) {
        updateBuffer(data.buffer, attribute, bufferType);
        data.version = attribute.version;
      }
    }
    return {
      get,
      remove,
      update
    };
  }
  var PlaneGeometry = class _PlaneGeometry extends BufferGeometry {
    constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
      super();
      this.type = "PlaneGeometry";
      this.parameters = {
        width,
        height,
        widthSegments,
        heightSegments
      };
      const width_half = width / 2;
      const height_half = height / 2;
      const gridX = Math.floor(widthSegments);
      const gridY = Math.floor(heightSegments);
      const gridX1 = gridX + 1;
      const gridY1 = gridY + 1;
      const segment_width = width / gridX;
      const segment_height = height / gridY;
      const indices = [];
      const vertices = [];
      const normals = [];
      const uvs = [];
      for (let iy = 0; iy < gridY1; iy++) {
        const y = iy * segment_height - height_half;
        for (let ix = 0; ix < gridX1; ix++) {
          const x = ix * segment_width - width_half;
          vertices.push(x, -y, 0);
          normals.push(0, 0, 1);
          uvs.push(ix / gridX);
          uvs.push(1 - iy / gridY);
        }
      }
      for (let iy = 0; iy < gridY; iy++) {
        for (let ix = 0; ix < gridX; ix++) {
          const a = ix + gridX1 * iy;
          const b = ix + gridX1 * (iy + 1);
          const c = ix + 1 + gridX1 * (iy + 1);
          const d = ix + 1 + gridX1 * iy;
          indices.push(a, b, d);
          indices.push(b, c, d);
        }
      }
      this.setIndex(indices);
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    }
    copy(source) {
      super.copy(source);
      this.parameters = Object.assign({}, source.parameters);
      return this;
    }
    static fromJSON(data) {
      return new _PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
    }
  };
  var alphahash_fragment = "#ifdef USE_ALPHAHASH\n	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";
  var alphahash_pars_fragment = "#ifdef USE_ALPHAHASH\n	const float ALPHA_HASH_SCALE = 0.05;\n	float hash2D( vec2 value ) {\n		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n	}\n	float hash3D( vec3 value ) {\n		return hash2D( vec2( hash2D( value.xy ), value.z ) );\n	}\n	float getAlphaHashThreshold( vec3 position ) {\n		float maxDeriv = max(\n			length( dFdx( position.xyz ) ),\n			length( dFdy( position.xyz ) )\n		);\n		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n		vec2 pixScales = vec2(\n			exp2( floor( log2( pixScale ) ) ),\n			exp2( ceil( log2( pixScale ) ) )\n		);\n		vec2 alpha = vec2(\n			hash3D( floor( pixScales.x * position.xyz ) ),\n			hash3D( floor( pixScales.y * position.xyz ) )\n		);\n		float lerpFactor = fract( log2( pixScale ) );\n		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n		float a = min( lerpFactor, 1.0 - lerpFactor );\n		vec3 cases = vec3(\n			x * x / ( 2.0 * a * ( 1.0 - a ) ),\n			( x - 0.5 * a ) / ( 1.0 - a ),\n			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n		);\n		float threshold = ( x < ( 1.0 - a ) )\n			? ( ( x < a ) ? cases.x : cases.y )\n			: cases.z;\n		return clamp( threshold , 1.0e-6, 1.0 );\n	}\n#endif";
  var alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";
  var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
  var alphatest_fragment = "#ifdef USE_ALPHATEST\n	if ( diffuseColor.a < alphaTest ) discard;\n#endif";
  var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";
  var aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";
  var aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
  var begin_vertex = "vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n	vPosition = vec3( position );\n#endif";
  var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
  var bsdfs = "float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated";
  var iridescence_fragment = "#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			 return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float R21 = R12;\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif";
  var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = dFdx( surf_pos.xyz );\n		vec3 vSigmaY = dFdy( surf_pos.xyz );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
  var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#pragma unroll_loop_end\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop_start\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		#pragma unroll_loop_end\n		if ( clipped ) discard;\n	#endif\n#endif";
  var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
  var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
  var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
  var color_fragment = "#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";
  var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";
  var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif";
  var color_vertex = "#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif";
  var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal;\n#endif\n};\n#ifdef USE_ALPHAHASH\n	varying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n	return dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";
  var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_v0 0.339\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_v1 0.276\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_v4 0.046\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_v5 0.016\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_v6 0.0038\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
  var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n	mat3 m = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n	transformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
  var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
  var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";
  var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
  var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
  var colorspace_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
  var colorspace_pars_fragment = "vec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
  var envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
  var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
  var envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
  var envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
  var envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
  var fog_vertex = "#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";
  var fog_pars_vertex = "#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";
  var fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
  var fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
  var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}";
  var lightmap_fragment = "#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n	reflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";
  var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
  var lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";
  var lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert";
  var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	#if defined ( LEGACY_LIGHTS )\n		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n		}\n		return 1.0;\n	#else\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		if ( cutoffDistance > 0.0 ) {\n			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		}\n		return distanceFalloff;\n	#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";
  var envmap_physical_pars_fragment = "#ifdef USE_ENVMAP\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	#ifdef USE_ANISOTROPY\n		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n			#ifdef ENVMAP_TYPE_CUBE_UV\n				vec3 bentNormal = cross( bitangent, viewDir );\n				bentNormal = normalize( cross( bentNormal, bitangent ) );\n				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n				return getIBLRadiance( viewDir, bentNormal, roughness );\n			#else\n				return vec3( 0.0 );\n			#endif\n		}\n	#endif\n#endif";
  var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
  var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon";
  var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
  var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong";
  var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	#ifdef USE_ANISOTROPYMAP\n		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n	#else\n		vec2 anisotropyV = anisotropyVector;\n	#endif\n	material.anisotropy = length( anisotropyV );\n	anisotropyV /= material.anisotropy;\n	material.anisotropy = saturate( material.anisotropy );\n	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n	material.anisotropyT = tbn[ 0 ] * anisotropyV.x - tbn[ 1 ] * anisotropyV.y;\n	material.anisotropyB = tbn[ 1 ] * anisotropyV.x + tbn[ 0 ] * anisotropyV.y;\n#endif";
  var lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n	#ifdef USE_ANISOTROPY\n		float anisotropy;\n		float alphaT;\n		vec3 anisotropyT;\n		vec3 anisotropyB;\n	#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n		float v = 0.5 / ( gv + gl );\n		return saturate(v);\n	}\n	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n		float a2 = alphaT * alphaB;\n		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n		highp float v2 = dot( v, v );\n		float w2 = a2 / v2;\n		return RECIPROCAL_PI * a2 * pow2 ( w2 );\n	}\n#endif\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	#ifdef USE_ANISOTROPY\n		float dotTL = dot( material.anisotropyT, lightDir );\n		float dotTV = dot( material.anisotropyT, viewDir );\n		float dotTH = dot( material.anisotropyT, halfDir );\n		float dotBL = dot( material.anisotropyB, lightDir );\n		float dotBV = dot( material.anisotropyB, viewDir );\n		float dotBH = dot( material.anisotropyB, halfDir );\n		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n	#else\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n	#endif\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometry.normal;\n		vec3 viewDir = geometry.viewDir;\n		vec3 position = geometry.position;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
  var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n	geometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometry.viewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometry, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
  var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometry.normal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	#ifdef USE_ANISOTROPY\n		radiance += getIBLAnisotropyRadiance( geometry.viewDir, geometry.normal, material.roughness, material.anisotropyB, material.anisotropy );\n	#else\n		radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n	#endif\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";
  var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
  var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
  var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
  var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif";
  var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif";
  var map_fragment = "#ifdef USE_MAP\n	diffuseColor *= texture2D( map, vMapUv );\n#endif";
  var map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
  var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
  var map_particle_pars_fragment = "#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
  var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
  var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
  var morphcolor_vertex = "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif";
  var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n	#endif\n#endif";
  var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	uniform float morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n		uniform sampler2DArray morphTargetsTexture;\n		uniform ivec2 morphTargetsTextureSize;\n		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n			int y = texelIndex / morphTargetsTextureSize.x;\n			int x = texelIndex - y * morphTargetsTextureSize.x;\n			ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n			return texelFetch( morphTargetsTexture, morphUV, 0 );\n		}\n	#else\n		#ifndef USE_MORPHNORMALS\n			uniform float morphTargetInfluences[ 8 ];\n		#else\n			uniform float morphTargetInfluences[ 4 ];\n		#endif\n	#endif\n#endif";
  var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n		transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n		transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n		transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n		#ifndef USE_MORPHNORMALS\n			transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n			transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n			transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n			transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n		#endif\n	#endif\n#endif";
  var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal,\n		#if defined( USE_NORMALMAP )\n			vNormalMapUv\n		#elif defined( USE_CLEARCOAT_NORMALMAP )\n			vClearcoatNormalMapUv\n		#else\n			vUv\n		#endif\n		);\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 geometryNormal = normal;";
  var normal_fragment_maps = "#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
  var normal_pars_fragment = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
  var normal_pars_vertex = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
  var normal_vertex = "#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";
  var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif";
  var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = geometryNormal;\n#endif";
  var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";
  var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif";
  var iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif";
  var opaque_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
  var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n	return packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}";
  var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
  var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
  var dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
  var dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
  var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
  var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
  var shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif";
  var shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
  var shadowmap_vertex = "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif";
  var shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
  var skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
  var skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	uniform int boneTextureSize;\n	mat4 getBoneMatrix( const in float i ) {\n		float j = i * 4.0;\n		float x = mod( j, float( boneTextureSize ) );\n		float y = floor( j / float( boneTextureSize ) );\n		float dx = 1.0 / float( boneTextureSize );\n		float dy = 1.0 / float( boneTextureSize );\n		y = dy * ( y + 0.5 );\n		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n		mat4 bone = mat4( v1, v2, v3, v4 );\n		return bone;\n	}\n#endif";
  var skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
  var skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
  var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
  var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
  var tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
  var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
  var transmission_fragment = "#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmitted = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";
  var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return vec3( 1.0 );\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n		vec3 refractedRayExit = position + transmissionRay;\n		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n		vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n		refractionCoords += 1.0;\n		refractionCoords /= 2.0;\n		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n		vec3 attenuatedColor = transmittance * transmittedLight.rgb;\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n	}\n#endif";
  var uv_pars_fragment = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
  var uv_pars_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	uniform mat3 anisotropyMapTransform;\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
  var uv_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";
  var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
  var vertex$h = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
  var fragment$h = "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
  var vertex$g = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
  var fragment$g = "#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
  var vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
  var fragment$f = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
  var vertex$e = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
  var fragment$e = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}";
  var vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
  var fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
  var vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
  var fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
  var vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
  var fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
  var vertex$a = "#include <common>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
  var fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
  var fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}";
  var vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";
  var fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	uniform vec2 anisotropyVector;\n	#ifdef USE_ANISOTROPYMAP\n		uniform sampler2D anisotropyMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n	#endif\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
  var vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
  var fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
  var vertex$2 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
  var fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
  var vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
  var fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
  var ShaderChunk = {
    alphahash_fragment,
    alphahash_pars_fragment,
    alphamap_fragment,
    alphamap_pars_fragment,
    alphatest_fragment,
    alphatest_pars_fragment,
    aomap_fragment,
    aomap_pars_fragment,
    begin_vertex,
    beginnormal_vertex,
    bsdfs,
    iridescence_fragment,
    bumpmap_pars_fragment,
    clipping_planes_fragment,
    clipping_planes_pars_fragment,
    clipping_planes_pars_vertex,
    clipping_planes_vertex,
    color_fragment,
    color_pars_fragment,
    color_pars_vertex,
    color_vertex,
    common,
    cube_uv_reflection_fragment,
    defaultnormal_vertex,
    displacementmap_pars_vertex,
    displacementmap_vertex,
    emissivemap_fragment,
    emissivemap_pars_fragment,
    colorspace_fragment,
    colorspace_pars_fragment,
    envmap_fragment,
    envmap_common_pars_fragment,
    envmap_pars_fragment,
    envmap_pars_vertex,
    envmap_physical_pars_fragment,
    envmap_vertex,
    fog_vertex,
    fog_pars_vertex,
    fog_fragment,
    fog_pars_fragment,
    gradientmap_pars_fragment,
    lightmap_fragment,
    lightmap_pars_fragment,
    lights_lambert_fragment,
    lights_lambert_pars_fragment,
    lights_pars_begin,
    lights_toon_fragment,
    lights_toon_pars_fragment,
    lights_phong_fragment,
    lights_phong_pars_fragment,
    lights_physical_fragment,
    lights_physical_pars_fragment,
    lights_fragment_begin,
    lights_fragment_maps,
    lights_fragment_end,
    logdepthbuf_fragment,
    logdepthbuf_pars_fragment,
    logdepthbuf_pars_vertex,
    logdepthbuf_vertex,
    map_fragment,
    map_pars_fragment,
    map_particle_fragment,
    map_particle_pars_fragment,
    metalnessmap_fragment,
    metalnessmap_pars_fragment,
    morphcolor_vertex,
    morphnormal_vertex,
    morphtarget_pars_vertex,
    morphtarget_vertex,
    normal_fragment_begin,
    normal_fragment_maps,
    normal_pars_fragment,
    normal_pars_vertex,
    normal_vertex,
    normalmap_pars_fragment,
    clearcoat_normal_fragment_begin,
    clearcoat_normal_fragment_maps,
    clearcoat_pars_fragment,
    iridescence_pars_fragment,
    opaque_fragment,
    packing,
    premultiplied_alpha_fragment,
    project_vertex,
    dithering_fragment,
    dithering_pars_fragment,
    roughnessmap_fragment,
    roughnessmap_pars_fragment,
    shadowmap_pars_fragment,
    shadowmap_pars_vertex,
    shadowmap_vertex,
    shadowmask_pars_fragment,
    skinbase_vertex,
    skinning_pars_vertex,
    skinning_vertex,
    skinnormal_vertex,
    specularmap_fragment,
    specularmap_pars_fragment,
    tonemapping_fragment,
    tonemapping_pars_fragment,
    transmission_fragment,
    transmission_pars_fragment,
    uv_pars_fragment,
    uv_pars_vertex,
    uv_vertex,
    worldpos_vertex,
    background_vert: vertex$h,
    background_frag: fragment$h,
    backgroundCube_vert: vertex$g,
    backgroundCube_frag: fragment$g,
    cube_vert: vertex$f,
    cube_frag: fragment$f,
    depth_vert: vertex$e,
    depth_frag: fragment$e,
    distanceRGBA_vert: vertex$d,
    distanceRGBA_frag: fragment$d,
    equirect_vert: vertex$c,
    equirect_frag: fragment$c,
    linedashed_vert: vertex$b,
    linedashed_frag: fragment$b,
    meshbasic_vert: vertex$a,
    meshbasic_frag: fragment$a,
    meshlambert_vert: vertex$9,
    meshlambert_frag: fragment$9,
    meshmatcap_vert: vertex$8,
    meshmatcap_frag: fragment$8,
    meshnormal_vert: vertex$7,
    meshnormal_frag: fragment$7,
    meshphong_vert: vertex$6,
    meshphong_frag: fragment$6,
    meshphysical_vert: vertex$5,
    meshphysical_frag: fragment$5,
    meshtoon_vert: vertex$4,
    meshtoon_frag: fragment$4,
    points_vert: vertex$3,
    points_frag: fragment$3,
    shadow_vert: vertex$2,
    shadow_frag: fragment$2,
    sprite_vert: vertex$1,
    sprite_frag: fragment$1
  };
  var UniformsLib = {
    common: {
      diffuse: { value: /* @__PURE__ */ new Color(16777215) },
      opacity: { value: 1 },
      map: { value: null },
      mapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaMap: { value: null },
      alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaTest: { value: 0 }
    },
    specularmap: {
      specularMap: { value: null },
      specularMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    envmap: {
      envMap: { value: null },
      flipEnvMap: { value: -1 },
      reflectivity: { value: 1 },
      // basic, lambert, phong
      ior: { value: 1.5 },
      // physical
      refractionRatio: { value: 0.98 }
      // basic, lambert, phong
    },
    aomap: {
      aoMap: { value: null },
      aoMapIntensity: { value: 1 },
      aoMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    lightmap: {
      lightMap: { value: null },
      lightMapIntensity: { value: 1 },
      lightMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    bumpmap: {
      bumpMap: { value: null },
      bumpMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      bumpScale: { value: 1 }
    },
    normalmap: {
      normalMap: { value: null },
      normalMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      normalScale: { value: /* @__PURE__ */ new Vector2(1, 1) }
    },
    displacementmap: {
      displacementMap: { value: null },
      displacementMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      displacementScale: { value: 1 },
      displacementBias: { value: 0 }
    },
    emissivemap: {
      emissiveMap: { value: null },
      emissiveMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    metalnessmap: {
      metalnessMap: { value: null },
      metalnessMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    roughnessmap: {
      roughnessMap: { value: null },
      roughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    gradientmap: {
      gradientMap: { value: null }
    },
    fog: {
      fogDensity: { value: 25e-5 },
      fogNear: { value: 1 },
      fogFar: { value: 2e3 },
      fogColor: { value: /* @__PURE__ */ new Color(16777215) }
    },
    lights: {
      ambientLightColor: { value: [] },
      lightProbe: { value: [] },
      directionalLights: { value: [], properties: {
        direction: {},
        color: {}
      } },
      directionalLightShadows: { value: [], properties: {
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {}
      } },
      directionalShadowMap: { value: [] },
      directionalShadowMatrix: { value: [] },
      spotLights: { value: [], properties: {
        color: {},
        position: {},
        direction: {},
        distance: {},
        coneCos: {},
        penumbraCos: {},
        decay: {}
      } },
      spotLightShadows: { value: [], properties: {
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {}
      } },
      spotLightMap: { value: [] },
      spotShadowMap: { value: [] },
      spotLightMatrix: { value: [] },
      pointLights: { value: [], properties: {
        color: {},
        position: {},
        decay: {},
        distance: {}
      } },
      pointLightShadows: { value: [], properties: {
        shadowBias: {},
        shadowNormalBias: {},
        shadowRadius: {},
        shadowMapSize: {},
        shadowCameraNear: {},
        shadowCameraFar: {}
      } },
      pointShadowMap: { value: [] },
      pointShadowMatrix: { value: [] },
      hemisphereLights: { value: [], properties: {
        direction: {},
        skyColor: {},
        groundColor: {}
      } },
      // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
      rectAreaLights: { value: [], properties: {
        color: {},
        position: {},
        width: {},
        height: {}
      } },
      ltc_1: { value: null },
      ltc_2: { value: null }
    },
    points: {
      diffuse: { value: /* @__PURE__ */ new Color(16777215) },
      opacity: { value: 1 },
      size: { value: 1 },
      scale: { value: 1 },
      map: { value: null },
      alphaMap: { value: null },
      alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaTest: { value: 0 },
      uvTransform: { value: /* @__PURE__ */ new Matrix3() }
    },
    sprite: {
      diffuse: { value: /* @__PURE__ */ new Color(16777215) },
      opacity: { value: 1 },
      center: { value: /* @__PURE__ */ new Vector2(0.5, 0.5) },
      rotation: { value: 0 },
      map: { value: null },
      mapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaMap: { value: null },
      alphaMapTransform: { value: /* @__PURE__ */ new Matrix3() },
      alphaTest: { value: 0 }
    }
  };
  var ShaderLib = {
    basic: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.meshbasic_vert,
      fragmentShader: ShaderChunk.meshbasic_frag
    },
    lambert: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: /* @__PURE__ */ new Color(0) }
        }
      ]),
      vertexShader: ShaderChunk.meshlambert_vert,
      fragmentShader: ShaderChunk.meshlambert_frag
    },
    phong: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.specularmap,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: /* @__PURE__ */ new Color(0) },
          specular: { value: /* @__PURE__ */ new Color(1118481) },
          shininess: { value: 30 }
        }
      ]),
      vertexShader: ShaderChunk.meshphong_vert,
      fragmentShader: ShaderChunk.meshphong_frag
    },
    standard: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.envmap,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.roughnessmap,
        UniformsLib.metalnessmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: /* @__PURE__ */ new Color(0) },
          roughness: { value: 1 },
          metalness: { value: 0 },
          envMapIntensity: { value: 1 }
          // temporary
        }
      ]),
      vertexShader: ShaderChunk.meshphysical_vert,
      fragmentShader: ShaderChunk.meshphysical_frag
    },
    toon: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.aomap,
        UniformsLib.lightmap,
        UniformsLib.emissivemap,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.gradientmap,
        UniformsLib.fog,
        UniformsLib.lights,
        {
          emissive: { value: /* @__PURE__ */ new Color(0) }
        }
      ]),
      vertexShader: ShaderChunk.meshtoon_vert,
      fragmentShader: ShaderChunk.meshtoon_frag
    },
    matcap: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        UniformsLib.fog,
        {
          matcap: { value: null }
        }
      ]),
      vertexShader: ShaderChunk.meshmatcap_vert,
      fragmentShader: ShaderChunk.meshmatcap_frag
    },
    points: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.points,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.points_vert,
      fragmentShader: ShaderChunk.points_frag
    },
    dashed: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.fog,
        {
          scale: { value: 1 },
          dashSize: { value: 1 },
          totalSize: { value: 2 }
        }
      ]),
      vertexShader: ShaderChunk.linedashed_vert,
      fragmentShader: ShaderChunk.linedashed_frag
    },
    depth: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.displacementmap
      ]),
      vertexShader: ShaderChunk.depth_vert,
      fragmentShader: ShaderChunk.depth_frag
    },
    normal: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.bumpmap,
        UniformsLib.normalmap,
        UniformsLib.displacementmap,
        {
          opacity: { value: 1 }
        }
      ]),
      vertexShader: ShaderChunk.meshnormal_vert,
      fragmentShader: ShaderChunk.meshnormal_frag
    },
    sprite: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.sprite,
        UniformsLib.fog
      ]),
      vertexShader: ShaderChunk.sprite_vert,
      fragmentShader: ShaderChunk.sprite_frag
    },
    background: {
      uniforms: {
        uvTransform: { value: /* @__PURE__ */ new Matrix3() },
        t2D: { value: null },
        backgroundIntensity: { value: 1 }
      },
      vertexShader: ShaderChunk.background_vert,
      fragmentShader: ShaderChunk.background_frag
    },
    backgroundCube: {
      uniforms: {
        envMap: { value: null },
        flipEnvMap: { value: -1 },
        backgroundBlurriness: { value: 0 },
        backgroundIntensity: { value: 1 }
      },
      vertexShader: ShaderChunk.backgroundCube_vert,
      fragmentShader: ShaderChunk.backgroundCube_frag
    },
    cube: {
      uniforms: {
        tCube: { value: null },
        tFlip: { value: -1 },
        opacity: { value: 1 }
      },
      vertexShader: ShaderChunk.cube_vert,
      fragmentShader: ShaderChunk.cube_frag
    },
    equirect: {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: ShaderChunk.equirect_vert,
      fragmentShader: ShaderChunk.equirect_frag
    },
    distanceRGBA: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.common,
        UniformsLib.displacementmap,
        {
          referencePosition: { value: /* @__PURE__ */ new Vector3() },
          nearDistance: { value: 1 },
          farDistance: { value: 1e3 }
        }
      ]),
      vertexShader: ShaderChunk.distanceRGBA_vert,
      fragmentShader: ShaderChunk.distanceRGBA_frag
    },
    shadow: {
      uniforms: /* @__PURE__ */ mergeUniforms([
        UniformsLib.lights,
        UniformsLib.fog,
        {
          color: { value: /* @__PURE__ */ new Color(0) },
          opacity: { value: 1 }
        }
      ]),
      vertexShader: ShaderChunk.shadow_vert,
      fragmentShader: ShaderChunk.shadow_frag
    }
  };
  ShaderLib.physical = {
    uniforms: /* @__PURE__ */ mergeUniforms([
      ShaderLib.standard.uniforms,
      {
        clearcoat: { value: 0 },
        clearcoatMap: { value: null },
        clearcoatMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        clearcoatNormalMap: { value: null },
        clearcoatNormalMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        clearcoatNormalScale: { value: /* @__PURE__ */ new Vector2(1, 1) },
        clearcoatRoughness: { value: 0 },
        clearcoatRoughnessMap: { value: null },
        clearcoatRoughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        iridescence: { value: 0 },
        iridescenceMap: { value: null },
        iridescenceMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        iridescenceIOR: { value: 1.3 },
        iridescenceThicknessMinimum: { value: 100 },
        iridescenceThicknessMaximum: { value: 400 },
        iridescenceThicknessMap: { value: null },
        iridescenceThicknessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        sheen: { value: 0 },
        sheenColor: { value: /* @__PURE__ */ new Color(0) },
        sheenColorMap: { value: null },
        sheenColorMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        sheenRoughness: { value: 1 },
        sheenRoughnessMap: { value: null },
        sheenRoughnessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        transmission: { value: 0 },
        transmissionMap: { value: null },
        transmissionMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        transmissionSamplerSize: { value: /* @__PURE__ */ new Vector2() },
        transmissionSamplerMap: { value: null },
        thickness: { value: 0 },
        thicknessMap: { value: null },
        thicknessMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        attenuationDistance: { value: 0 },
        attenuationColor: { value: /* @__PURE__ */ new Color(0) },
        specularColor: { value: /* @__PURE__ */ new Color(1, 1, 1) },
        specularColorMap: { value: null },
        specularColorMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        specularIntensity: { value: 1 },
        specularIntensityMap: { value: null },
        specularIntensityMapTransform: { value: /* @__PURE__ */ new Matrix3() },
        anisotropyVector: { value: /* @__PURE__ */ new Vector2() },
        anisotropyMap: { value: null },
        anisotropyMapTransform: { value: /* @__PURE__ */ new Matrix3() }
      }
    ]),
    vertexShader: ShaderChunk.meshphysical_vert,
    fragmentShader: ShaderChunk.meshphysical_frag
  };
  var _rgb = { r: 0, b: 0, g: 0 };
  function WebGLBackground(renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha) {
    const clearColor = new Color(0);
    let clearAlpha = alpha === true ? 0 : 1;
    let planeMesh;
    let boxMesh;
    let currentBackground = null;
    let currentBackgroundVersion = 0;
    let currentTonemapping = null;
    function render(renderList, scene) {
      let forceClear = false;
      let background = scene.isScene === true ? scene.background : null;
      if (background && background.isTexture) {
        const usePMREM = scene.backgroundBlurriness > 0;
        background = (usePMREM ? cubeuvmaps : cubemaps).get(background);
      }
      if (background === null) {
        setClear(clearColor, clearAlpha);
      } else if (background && background.isColor) {
        setClear(background, 1);
        forceClear = true;
      }
      const xr = renderer.xr;
      const environmentBlendMode = xr.getEnvironmentBlendMode();
      switch (environmentBlendMode) {
        case "opaque":
          forceClear = true;
          break;
        case "additive":
          state.buffers.color.setClear(0, 0, 0, 1, premultipliedAlpha);
          forceClear = true;
          break;
        case "alpha-blend":
          state.buffers.color.setClear(0, 0, 0, 0, premultipliedAlpha);
          forceClear = true;
          break;
      }
      if (renderer.autoClear || forceClear) {
        renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
      }
      if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {
        if (boxMesh === void 0) {
          boxMesh = new Mesh(
            new BoxGeometry(1, 1, 1),
            new ShaderMaterial({
              name: "BackgroundCubeMaterial",
              uniforms: cloneUniforms(ShaderLib.backgroundCube.uniforms),
              vertexShader: ShaderLib.backgroundCube.vertexShader,
              fragmentShader: ShaderLib.backgroundCube.fragmentShader,
              side: BackSide,
              depthTest: false,
              depthWrite: false,
              fog: false
            })
          );
          boxMesh.geometry.deleteAttribute("normal");
          boxMesh.geometry.deleteAttribute("uv");
          boxMesh.onBeforeRender = function(renderer2, scene2, camera) {
            this.matrixWorld.copyPosition(camera.matrixWorld);
          };
          Object.defineProperty(boxMesh.material, "envMap", {
            get: function() {
              return this.uniforms.envMap.value;
            }
          });
          objects.update(boxMesh);
        }
        boxMesh.material.uniforms.envMap.value = background;
        boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;
        boxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;
        boxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
        boxMesh.material.toneMapped = background.colorSpace === SRGBColorSpace ? false : true;
        if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
          boxMesh.material.needsUpdate = true;
          currentBackground = background;
          currentBackgroundVersion = background.version;
          currentTonemapping = renderer.toneMapping;
        }
        boxMesh.layers.enableAll();
        renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
      } else if (background && background.isTexture) {
        if (planeMesh === void 0) {
          planeMesh = new Mesh(
            new PlaneGeometry(2, 2),
            new ShaderMaterial({
              name: "BackgroundMaterial",
              uniforms: cloneUniforms(ShaderLib.background.uniforms),
              vertexShader: ShaderLib.background.vertexShader,
              fragmentShader: ShaderLib.background.fragmentShader,
              side: FrontSide,
              depthTest: false,
              depthWrite: false,
              fog: false
            })
          );
          planeMesh.geometry.deleteAttribute("normal");
          Object.defineProperty(planeMesh.material, "map", {
            get: function() {
              return this.uniforms.t2D.value;
            }
          });
          objects.update(planeMesh);
        }
        planeMesh.material.uniforms.t2D.value = background;
        planeMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
        planeMesh.material.toneMapped = background.colorSpace === SRGBColorSpace ? false : true;
        if (background.matrixAutoUpdate === true) {
          background.updateMatrix();
        }
        planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
        if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
          planeMesh.material.needsUpdate = true;
          currentBackground = background;
          currentBackgroundVersion = background.version;
          currentTonemapping = renderer.toneMapping;
        }
        planeMesh.layers.enableAll();
        renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
      }
    }
    function setClear(color, alpha2) {
      color.getRGB(_rgb, getUnlitUniformColorSpace(renderer));
      state.buffers.color.setClear(_rgb.r, _rgb.g, _rgb.b, alpha2, premultipliedAlpha);
    }
    return {
      getClearColor: function() {
        return clearColor;
      },
      setClearColor: function(color, alpha2 = 1) {
        clearColor.set(color);
        clearAlpha = alpha2;
        setClear(clearColor, clearAlpha);
      },
      getClearAlpha: function() {
        return clearAlpha;
      },
      setClearAlpha: function(alpha2) {
        clearAlpha = alpha2;
        setClear(clearColor, clearAlpha);
      },
      render
    };
  }
  function WebGLBindingStates(gl, extensions, attributes, capabilities) {
    const maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
    const extension = capabilities.isWebGL2 ? null : extensions.get("OES_vertex_array_object");
    const vaoAvailable = capabilities.isWebGL2 || extension !== null;
    const bindingStates = {};
    const defaultState = createBindingState(null);
    let currentState = defaultState;
    let forceUpdate = false;
    function setup(object, material, program, geometry, index) {
      let updateBuffers = false;
      if (vaoAvailable) {
        const state = getBindingState(geometry, program, material);
        if (currentState !== state) {
          currentState = state;
          bindVertexArrayObject(currentState.object);
        }
        updateBuffers = needsUpdate(object, geometry, program, index);
        if (updateBuffers)
          saveCache(object, geometry, program, index);
      } else {
        const wireframe = material.wireframe === true;
        if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {
          currentState.geometry = geometry.id;
          currentState.program = program.id;
          currentState.wireframe = wireframe;
          updateBuffers = true;
        }
      }
      if (index !== null) {
        attributes.update(index, gl.ELEMENT_ARRAY_BUFFER);
      }
      if (updateBuffers || forceUpdate) {
        forceUpdate = false;
        setupVertexAttributes(object, material, program, geometry);
        if (index !== null) {
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);
        }
      }
    }
    function createVertexArrayObject() {
      if (capabilities.isWebGL2)
        return gl.createVertexArray();
      return extension.createVertexArrayOES();
    }
    function bindVertexArrayObject(vao) {
      if (capabilities.isWebGL2)
        return gl.bindVertexArray(vao);
      return extension.bindVertexArrayOES(vao);
    }
    function deleteVertexArrayObject(vao) {
      if (capabilities.isWebGL2)
        return gl.deleteVertexArray(vao);
      return extension.deleteVertexArrayOES(vao);
    }
    function getBindingState(geometry, program, material) {
      const wireframe = material.wireframe === true;
      let programMap = bindingStates[geometry.id];
      if (programMap === void 0) {
        programMap = {};
        bindingStates[geometry.id] = programMap;
      }
      let stateMap = programMap[program.id];
      if (stateMap === void 0) {
        stateMap = {};
        programMap[program.id] = stateMap;
      }
      let state = stateMap[wireframe];
      if (state === void 0) {
        state = createBindingState(createVertexArrayObject());
        stateMap[wireframe] = state;
      }
      return state;
    }
    function createBindingState(vao) {
      const newAttributes = [];
      const enabledAttributes = [];
      const attributeDivisors = [];
      for (let i = 0; i < maxVertexAttributes; i++) {
        newAttributes[i] = 0;
        enabledAttributes[i] = 0;
        attributeDivisors[i] = 0;
      }
      return {
        // for backward compatibility on non-VAO support browser
        geometry: null,
        program: null,
        wireframe: false,
        newAttributes,
        enabledAttributes,
        attributeDivisors,
        object: vao,
        attributes: {},
        index: null
      };
    }
    function needsUpdate(object, geometry, program, index) {
      const cachedAttributes = currentState.attributes;
      const geometryAttributes = geometry.attributes;
      let attributesNum = 0;
      const programAttributes = program.getAttributes();
      for (const name in programAttributes) {
        const programAttribute = programAttributes[name];
        if (programAttribute.location >= 0) {
          const cachedAttribute = cachedAttributes[name];
          let geometryAttribute = geometryAttributes[name];
          if (geometryAttribute === void 0) {
            if (name === "instanceMatrix" && object.instanceMatrix)
              geometryAttribute = object.instanceMatrix;
            if (name === "instanceColor" && object.instanceColor)
              geometryAttribute = object.instanceColor;
          }
          if (cachedAttribute === void 0)
            return true;
          if (cachedAttribute.attribute !== geometryAttribute)
            return true;
          if (geometryAttribute && cachedAttribute.data !== geometryAttribute.data)
            return true;
          attributesNum++;
        }
      }
      if (currentState.attributesNum !== attributesNum)
        return true;
      if (currentState.index !== index)
        return true;
      return false;
    }
    function saveCache(object, geometry, program, index) {
      const cache = {};
      const attributes2 = geometry.attributes;
      let attributesNum = 0;
      const programAttributes = program.getAttributes();
      for (const name in programAttributes) {
        const programAttribute = programAttributes[name];
        if (programAttribute.location >= 0) {
          let attribute = attributes2[name];
          if (attribute === void 0) {
            if (name === "instanceMatrix" && object.instanceMatrix)
              attribute = object.instanceMatrix;
            if (name === "instanceColor" && object.instanceColor)
              attribute = object.instanceColor;
          }
          const data = {};
          data.attribute = attribute;
          if (attribute && attribute.data) {
            data.data = attribute.data;
          }
          cache[name] = data;
          attributesNum++;
        }
      }
      currentState.attributes = cache;
      currentState.attributesNum = attributesNum;
      currentState.index = index;
    }
    function initAttributes() {
      const newAttributes = currentState.newAttributes;
      for (let i = 0, il = newAttributes.length; i < il; i++) {
        newAttributes[i] = 0;
      }
    }
    function enableAttribute(attribute) {
      enableAttributeAndDivisor(attribute, 0);
    }
    function enableAttributeAndDivisor(attribute, meshPerAttribute) {
      const newAttributes = currentState.newAttributes;
      const enabledAttributes = currentState.enabledAttributes;
      const attributeDivisors = currentState.attributeDivisors;
      newAttributes[attribute] = 1;
      if (enabledAttributes[attribute] === 0) {
        gl.enableVertexAttribArray(attribute);
        enabledAttributes[attribute] = 1;
      }
      if (attributeDivisors[attribute] !== meshPerAttribute) {
        const extension2 = capabilities.isWebGL2 ? gl : extensions.get("ANGLE_instanced_arrays");
        extension2[capabilities.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](attribute, meshPerAttribute);
        attributeDivisors[attribute] = meshPerAttribute;
      }
    }
    function disableUnusedAttributes() {
      const newAttributes = currentState.newAttributes;
      const enabledAttributes = currentState.enabledAttributes;
      for (let i = 0, il = enabledAttributes.length; i < il; i++) {
        if (enabledAttributes[i] !== newAttributes[i]) {
          gl.disableVertexAttribArray(i);
          enabledAttributes[i] = 0;
        }
      }
    }
    function vertexAttribPointer(index, size, type, normalized, stride, offset, integer) {
      if (integer === true) {
        gl.vertexAttribIPointer(index, size, type, stride, offset);
      } else {
        gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
      }
    }
    function setupVertexAttributes(object, material, program, geometry) {
      if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {
        if (extensions.get("ANGLE_instanced_arrays") === null)
          return;
      }
      initAttributes();
      const geometryAttributes = geometry.attributes;
      const programAttributes = program.getAttributes();
      const materialDefaultAttributeValues = material.defaultAttributeValues;
      for (const name in programAttributes) {
        const programAttribute = programAttributes[name];
        if (programAttribute.location >= 0) {
          let geometryAttribute = geometryAttributes[name];
          if (geometryAttribute === void 0) {
            if (name === "instanceMatrix" && object.instanceMatrix)
              geometryAttribute = object.instanceMatrix;
            if (name === "instanceColor" && object.instanceColor)
              geometryAttribute = object.instanceColor;
          }
          if (geometryAttribute !== void 0) {
            const normalized = geometryAttribute.normalized;
            const size = geometryAttribute.itemSize;
            const attribute = attributes.get(geometryAttribute);
            if (attribute === void 0)
              continue;
            const buffer = attribute.buffer;
            const type = attribute.type;
            const bytesPerElement = attribute.bytesPerElement;
            const integer = capabilities.isWebGL2 === true && (type === gl.INT || type === gl.UNSIGNED_INT || geometryAttribute.gpuType === IntType);
            if (geometryAttribute.isInterleavedBufferAttribute) {
              const data = geometryAttribute.data;
              const stride = data.stride;
              const offset = geometryAttribute.offset;
              if (data.isInstancedInterleavedBuffer) {
                for (let i = 0; i < programAttribute.locationSize; i++) {
                  enableAttributeAndDivisor(programAttribute.location + i, data.meshPerAttribute);
                }
                if (object.isInstancedMesh !== true && geometry._maxInstanceCount === void 0) {
                  geometry._maxInstanceCount = data.meshPerAttribute * data.count;
                }
              } else {
                for (let i = 0; i < programAttribute.locationSize; i++) {
                  enableAttribute(programAttribute.location + i);
                }
              }
              gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
              for (let i = 0; i < programAttribute.locationSize; i++) {
                vertexAttribPointer(
                  programAttribute.location + i,
                  size / programAttribute.locationSize,
                  type,
                  normalized,
                  stride * bytesPerElement,
                  (offset + size / programAttribute.locationSize * i) * bytesPerElement,
                  integer
                );
              }
            } else {
              if (geometryAttribute.isInstancedBufferAttribute) {
                for (let i = 0; i < programAttribute.locationSize; i++) {
                  enableAttributeAndDivisor(programAttribute.location + i, geometryAttribute.meshPerAttribute);
                }
                if (object.isInstancedMesh !== true && geometry._maxInstanceCount === void 0) {
                  geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
                }
              } else {
                for (let i = 0; i < programAttribute.locationSize; i++) {
                  enableAttribute(programAttribute.location + i);
                }
              }
              gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
              for (let i = 0; i < programAttribute.locationSize; i++) {
                vertexAttribPointer(
                  programAttribute.location + i,
                  size / programAttribute.locationSize,
                  type,
                  normalized,
                  size * bytesPerElement,
                  size / programAttribute.locationSize * i * bytesPerElement,
                  integer
                );
              }
            }
          } else if (materialDefaultAttributeValues !== void 0) {
            const value = materialDefaultAttributeValues[name];
            if (value !== void 0) {
              switch (value.length) {
                case 2:
                  gl.vertexAttrib2fv(programAttribute.location, value);
                  break;
                case 3:
                  gl.vertexAttrib3fv(programAttribute.location, value);
                  break;
                case 4:
                  gl.vertexAttrib4fv(programAttribute.location, value);
                  break;
                default:
                  gl.vertexAttrib1fv(programAttribute.location, value);
              }
            }
          }
        }
      }
      disableUnusedAttributes();
    }
    function dispose() {
      reset();
      for (const geometryId in bindingStates) {
        const programMap = bindingStates[geometryId];
        for (const programId in programMap) {
          const stateMap = programMap[programId];
          for (const wireframe in stateMap) {
            deleteVertexArrayObject(stateMap[wireframe].object);
            delete stateMap[wireframe];
          }
          delete programMap[programId];
        }
        delete bindingStates[geometryId];
      }
    }
    function releaseStatesOfGeometry(geometry) {
      if (bindingStates[geometry.id] === void 0)
        return;
      const programMap = bindingStates[geometry.id];
      for (const programId in programMap) {
        const stateMap = programMap[programId];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[programId];
      }
      delete bindingStates[geometry.id];
    }
    function releaseStatesOfProgram(program) {
      for (const geometryId in bindingStates) {
        const programMap = bindingStates[geometryId];
        if (programMap[program.id] === void 0)
          continue;
        const stateMap = programMap[program.id];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[program.id];
      }
    }
    function reset() {
      resetDefaultState();
      forceUpdate = true;
      if (currentState === defaultState)
        return;
      currentState = defaultState;
      bindVertexArrayObject(currentState.object);
    }
    function resetDefaultState() {
      defaultState.geometry = null;
      defaultState.program = null;
      defaultState.wireframe = false;
    }
    return {
      setup,
      reset,
      resetDefaultState,
      dispose,
      releaseStatesOfGeometry,
      releaseStatesOfProgram,
      initAttributes,
      enableAttribute,
      disableUnusedAttributes
    };
  }
  function WebGLBufferRenderer(gl, extensions, info, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    let mode;
    function setMode(value) {
      mode = value;
    }
    function render(start, count) {
      gl.drawArrays(mode, start, count);
      info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
      if (primcount === 0)
        return;
      let extension, methodName;
      if (isWebGL2) {
        extension = gl;
        methodName = "drawArraysInstanced";
      } else {
        extension = extensions.get("ANGLE_instanced_arrays");
        methodName = "drawArraysInstancedANGLE";
        if (extension === null) {
          console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
          return;
        }
      }
      extension[methodName](mode, start, count, primcount);
      info.update(count, mode, primcount);
    }
    this.setMode = setMode;
    this.render = render;
    this.renderInstances = renderInstances;
  }
  function WebGLCapabilities(gl, extensions, parameters) {
    let maxAnisotropy;
    function getMaxAnisotropy() {
      if (maxAnisotropy !== void 0)
        return maxAnisotropy;
      if (extensions.has("EXT_texture_filter_anisotropic") === true) {
        const extension = extensions.get("EXT_texture_filter_anisotropic");
        maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
      } else {
        maxAnisotropy = 0;
      }
      return maxAnisotropy;
    }
    function getMaxPrecision(precision2) {
      if (precision2 === "highp") {
        if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {
          return "highp";
        }
        precision2 = "mediump";
      }
      if (precision2 === "mediump") {
        if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {
          return "mediump";
        }
      }
      return "lowp";
    }
    const isWebGL2 = typeof WebGL2RenderingContext !== "undefined" && gl.constructor.name === "WebGL2RenderingContext";
    let precision = parameters.precision !== void 0 ? parameters.precision : "highp";
    const maxPrecision = getMaxPrecision(precision);
    if (maxPrecision !== precision) {
      console.warn("THREE.WebGLRenderer:", precision, "not supported, using", maxPrecision, "instead.");
      precision = maxPrecision;
    }
    const drawBuffers = isWebGL2 || extensions.has("WEBGL_draw_buffers");
    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
    const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
    const maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
    const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
    const maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
    const maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
    const maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
    const maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);
    const maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
    const vertexTextures = maxVertexTextures > 0;
    const floatFragmentTextures = isWebGL2 || extensions.has("OES_texture_float");
    const floatVertexTextures = vertexTextures && floatFragmentTextures;
    const maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;
    return {
      isWebGL2,
      drawBuffers,
      getMaxAnisotropy,
      getMaxPrecision,
      precision,
      logarithmicDepthBuffer,
      maxTextures,
      maxVertexTextures,
      maxTextureSize,
      maxCubemapSize,
      maxAttributes,
      maxVertexUniforms,
      maxVaryings,
      maxFragmentUniforms,
      vertexTextures,
      floatFragmentTextures,
      floatVertexTextures,
      maxSamples
    };
  }
  function WebGLClipping(properties) {
    const scope = this;
    let globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false;
    const plane = new Plane(), viewNormalMatrix = new Matrix3(), uniform = { value: null, needsUpdate: false };
    this.uniform = uniform;
    this.numPlanes = 0;
    this.numIntersection = 0;
    this.init = function(planes, enableLocalClipping) {
      const enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
      // run another frame in order to reset the state:
      numGlobalPlanes !== 0 || localClippingEnabled;
      localClippingEnabled = enableLocalClipping;
      numGlobalPlanes = planes.length;
      return enabled;
    };
    this.beginShadows = function() {
      renderingShadows = true;
      projectPlanes(null);
    };
    this.endShadows = function() {
      renderingShadows = false;
    };
    this.setGlobalState = function(planes, camera) {
      globalState = projectPlanes(planes, camera, 0);
    };
    this.setState = function(material, camera, useCache) {
      const planes = material.clippingPlanes, clipIntersection = material.clipIntersection, clipShadows = material.clipShadows;
      const materialProperties = properties.get(material);
      if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
        if (renderingShadows) {
          projectPlanes(null);
        } else {
          resetGlobalState();
        }
      } else {
        const nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4;
        let dstArray = materialProperties.clippingState || null;
        uniform.value = dstArray;
        dstArray = projectPlanes(planes, camera, lGlobal, useCache);
        for (let i = 0; i !== lGlobal; ++i) {
          dstArray[i] = globalState[i];
        }
        materialProperties.clippingState = dstArray;
        this.numIntersection = clipIntersection ? this.numPlanes : 0;
        this.numPlanes += nGlobal;
      }
    };
    function resetGlobalState() {
      if (uniform.value !== globalState) {
        uniform.value = globalState;
        uniform.needsUpdate = numGlobalPlanes > 0;
      }
      scope.numPlanes = numGlobalPlanes;
      scope.numIntersection = 0;
    }
    function projectPlanes(planes, camera, dstOffset, skipTransform) {
      const nPlanes = planes !== null ? planes.length : 0;
      let dstArray = null;
      if (nPlanes !== 0) {
        dstArray = uniform.value;
        if (skipTransform !== true || dstArray === null) {
          const flatSize = dstOffset + nPlanes * 4, viewMatrix = camera.matrixWorldInverse;
          viewNormalMatrix.getNormalMatrix(viewMatrix);
          if (dstArray === null || dstArray.length < flatSize) {
            dstArray = new Float32Array(flatSize);
          }
          for (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {
            plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
            plane.normal.toArray(dstArray, i4);
            dstArray[i4 + 3] = plane.constant;
          }
        }
        uniform.value = dstArray;
        uniform.needsUpdate = true;
      }
      scope.numPlanes = nPlanes;
      scope.numIntersection = 0;
      return dstArray;
    }
  }
  function WebGLCubeMaps(renderer) {
    let cubemaps = /* @__PURE__ */ new WeakMap();
    function mapTextureMapping(texture, mapping) {
      if (mapping === EquirectangularReflectionMapping) {
        texture.mapping = CubeReflectionMapping;
      } else if (mapping === EquirectangularRefractionMapping) {
        texture.mapping = CubeRefractionMapping;
      }
      return texture;
    }
    function get(texture) {
      if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {
        const mapping = texture.mapping;
        if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
          if (cubemaps.has(texture)) {
            const cubemap = cubemaps.get(texture).texture;
            return mapTextureMapping(cubemap, texture.mapping);
          } else {
            const image = texture.image;
            if (image && image.height > 0) {
              const renderTarget = new WebGLCubeRenderTarget(image.height / 2);
              renderTarget.fromEquirectangularTexture(renderer, texture);
              cubemaps.set(texture, renderTarget);
              texture.addEventListener("dispose", onTextureDispose);
              return mapTextureMapping(renderTarget.texture, texture.mapping);
            } else {
              return null;
            }
          }
        }
      }
      return texture;
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      const cubemap = cubemaps.get(texture);
      if (cubemap !== void 0) {
        cubemaps.delete(texture);
        cubemap.dispose();
      }
    }
    function dispose() {
      cubemaps = /* @__PURE__ */ new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  var OrthographicCamera = class extends Camera {
    constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2e3) {
      super();
      this.isOrthographicCamera = true;
      this.type = "OrthographicCamera";
      this.zoom = 1;
      this.view = null;
      this.left = left;
      this.right = right;
      this.top = top;
      this.bottom = bottom;
      this.near = near;
      this.far = far;
      this.updateProjectionMatrix();
    }
    copy(source, recursive) {
      super.copy(source, recursive);
      this.left = source.left;
      this.right = source.right;
      this.top = source.top;
      this.bottom = source.bottom;
      this.near = source.near;
      this.far = source.far;
      this.zoom = source.zoom;
      this.view = source.view === null ? null : Object.assign({}, source.view);
      return this;
    }
    setViewOffset(fullWidth, fullHeight, x, y, width, height) {
      if (this.view === null) {
        this.view = {
          enabled: true,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1
        };
      }
      this.view.enabled = true;
      this.view.fullWidth = fullWidth;
      this.view.fullHeight = fullHeight;
      this.view.offsetX = x;
      this.view.offsetY = y;
      this.view.width = width;
      this.view.height = height;
      this.updateProjectionMatrix();
    }
    clearViewOffset() {
      if (this.view !== null) {
        this.view.enabled = false;
      }
      this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
      const dx = (this.right - this.left) / (2 * this.zoom);
      const dy = (this.top - this.bottom) / (2 * this.zoom);
      const cx = (this.right + this.left) / 2;
      const cy = (this.top + this.bottom) / 2;
      let left = cx - dx;
      let right = cx + dx;
      let top = cy + dy;
      let bottom = cy - dy;
      if (this.view !== null && this.view.enabled) {
        const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
        const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
        left += scaleW * this.view.offsetX;
        right = left + scaleW * this.view.width;
        top -= scaleH * this.view.offsetY;
        bottom = top - scaleH * this.view.height;
      }
      this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far, this.coordinateSystem);
      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      data.object.zoom = this.zoom;
      data.object.left = this.left;
      data.object.right = this.right;
      data.object.top = this.top;
      data.object.bottom = this.bottom;
      data.object.near = this.near;
      data.object.far = this.far;
      if (this.view !== null)
        data.object.view = Object.assign({}, this.view);
      return data;
    }
  };
  var LOD_MIN = 4;
  var EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
  var MAX_SAMPLES = 20;
  var _flatCamera = /* @__PURE__ */ new OrthographicCamera();
  var _clearColor = /* @__PURE__ */ new Color();
  var _oldTarget = null;
  var PHI = (1 + Math.sqrt(5)) / 2;
  var INV_PHI = 1 / PHI;
  var _axisDirections = [
    /* @__PURE__ */ new Vector3(1, 1, 1),
    /* @__PURE__ */ new Vector3(-1, 1, 1),
    /* @__PURE__ */ new Vector3(1, 1, -1),
    /* @__PURE__ */ new Vector3(-1, 1, -1),
    /* @__PURE__ */ new Vector3(0, PHI, INV_PHI),
    /* @__PURE__ */ new Vector3(0, PHI, -INV_PHI),
    /* @__PURE__ */ new Vector3(INV_PHI, 0, PHI),
    /* @__PURE__ */ new Vector3(-INV_PHI, 0, PHI),
    /* @__PURE__ */ new Vector3(PHI, INV_PHI, 0),
    /* @__PURE__ */ new Vector3(-PHI, INV_PHI, 0)
  ];
  var PMREMGenerator = class {
    constructor(renderer) {
      this._renderer = renderer;
      this._pingPongRenderTarget = null;
      this._lodMax = 0;
      this._cubeSize = 0;
      this._lodPlanes = [];
      this._sizeLods = [];
      this._sigmas = [];
      this._blurMaterial = null;
      this._cubemapMaterial = null;
      this._equirectMaterial = null;
      this._compileMaterial(this._blurMaterial);
    }
    /**
     * Generates a PMREM from a supplied Scene, which can be faster than using an
     * image if networking bandwidth is low. Optional sigma specifies a blur radius
     * in radians to be applied to the scene before PMREM generation. Optional near
     * and far planes ensure the scene is rendered in its entirety (the cubeCamera
     * is placed at the origin).
     */
    fromScene(scene, sigma = 0, near = 0.1, far = 100) {
      _oldTarget = this._renderer.getRenderTarget();
      this._setSize(256);
      const cubeUVRenderTarget = this._allocateTargets();
      cubeUVRenderTarget.depthBuffer = true;
      this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);
      if (sigma > 0) {
        this._blur(cubeUVRenderTarget, 0, 0, sigma);
      }
      this._applyPMREM(cubeUVRenderTarget);
      this._cleanup(cubeUVRenderTarget);
      return cubeUVRenderTarget;
    }
    /**
     * Generates a PMREM from an equirectangular texture, which can be either LDR
     * or HDR. The ideal input image size is 1k (1024 x 512),
     * as this matches best with the 256 x 256 cubemap output.
     */
    fromEquirectangular(equirectangular, renderTarget = null) {
      return this._fromTexture(equirectangular, renderTarget);
    }
    /**
     * Generates a PMREM from an cubemap texture, which can be either LDR
     * or HDR. The ideal input cube size is 256 x 256,
     * as this matches best with the 256 x 256 cubemap output.
     */
    fromCubemap(cubemap, renderTarget = null) {
      return this._fromTexture(cubemap, renderTarget);
    }
    /**
     * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
     * your texture's network fetch for increased concurrency.
     */
    compileCubemapShader() {
      if (this._cubemapMaterial === null) {
        this._cubemapMaterial = _getCubemapMaterial();
        this._compileMaterial(this._cubemapMaterial);
      }
    }
    /**
     * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
     * your texture's network fetch for increased concurrency.
     */
    compileEquirectangularShader() {
      if (this._equirectMaterial === null) {
        this._equirectMaterial = _getEquirectMaterial();
        this._compileMaterial(this._equirectMaterial);
      }
    }
    /**
     * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
     * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
     * one of them will cause any others to also become unusable.
     */
    dispose() {
      this._dispose();
      if (this._cubemapMaterial !== null)
        this._cubemapMaterial.dispose();
      if (this._equirectMaterial !== null)
        this._equirectMaterial.dispose();
    }
    // private interface
    _setSize(cubeSize) {
      this._lodMax = Math.floor(Math.log2(cubeSize));
      this._cubeSize = Math.pow(2, this._lodMax);
    }
    _dispose() {
      if (this._blurMaterial !== null)
        this._blurMaterial.dispose();
      if (this._pingPongRenderTarget !== null)
        this._pingPongRenderTarget.dispose();
      for (let i = 0; i < this._lodPlanes.length; i++) {
        this._lodPlanes[i].dispose();
      }
    }
    _cleanup(outputTarget) {
      this._renderer.setRenderTarget(_oldTarget);
      outputTarget.scissorTest = false;
      _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
    }
    _fromTexture(texture, renderTarget) {
      if (texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping) {
        this._setSize(texture.image.length === 0 ? 16 : texture.image[0].width || texture.image[0].image.width);
      } else {
        this._setSize(texture.image.width / 4);
      }
      _oldTarget = this._renderer.getRenderTarget();
      const cubeUVRenderTarget = renderTarget || this._allocateTargets();
      this._textureToCubeUV(texture, cubeUVRenderTarget);
      this._applyPMREM(cubeUVRenderTarget);
      this._cleanup(cubeUVRenderTarget);
      return cubeUVRenderTarget;
    }
    _allocateTargets() {
      const width = 3 * Math.max(this._cubeSize, 16 * 7);
      const height = 4 * this._cubeSize;
      const params = {
        magFilter: LinearFilter,
        minFilter: LinearFilter,
        generateMipmaps: false,
        type: HalfFloatType,
        format: RGBAFormat,
        colorSpace: LinearSRGBColorSpace,
        depthBuffer: false
      };
      const cubeUVRenderTarget = _createRenderTarget(width, height, params);
      if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height) {
        if (this._pingPongRenderTarget !== null) {
          this._dispose();
        }
        this._pingPongRenderTarget = _createRenderTarget(width, height, params);
        const { _lodMax } = this;
        ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes(_lodMax));
        this._blurMaterial = _getBlurShader(_lodMax, width, height);
      }
      return cubeUVRenderTarget;
    }
    _compileMaterial(material) {
      const tmpMesh = new Mesh(this._lodPlanes[0], material);
      this._renderer.compile(tmpMesh, _flatCamera);
    }
    _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {
      const fov2 = 90;
      const aspect2 = 1;
      const cubeCamera = new PerspectiveCamera(fov2, aspect2, near, far);
      const upSign = [1, -1, 1, 1, 1, 1];
      const forwardSign = [1, 1, 1, -1, -1, -1];
      const renderer = this._renderer;
      const originalAutoClear = renderer.autoClear;
      const toneMapping = renderer.toneMapping;
      renderer.getClearColor(_clearColor);
      renderer.toneMapping = NoToneMapping;
      renderer.autoClear = false;
      const backgroundMaterial = new MeshBasicMaterial({
        name: "PMREM.Background",
        side: BackSide,
        depthWrite: false,
        depthTest: false
      });
      const backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);
      let useSolidColor = false;
      const background = scene.background;
      if (background) {
        if (background.isColor) {
          backgroundMaterial.color.copy(background);
          scene.background = null;
          useSolidColor = true;
        }
      } else {
        backgroundMaterial.color.copy(_clearColor);
        useSolidColor = true;
      }
      for (let i = 0; i < 6; i++) {
        const col = i % 3;
        if (col === 0) {
          cubeCamera.up.set(0, upSign[i], 0);
          cubeCamera.lookAt(forwardSign[i], 0, 0);
        } else if (col === 1) {
          cubeCamera.up.set(0, 0, upSign[i]);
          cubeCamera.lookAt(0, forwardSign[i], 0);
        } else {
          cubeCamera.up.set(0, upSign[i], 0);
          cubeCamera.lookAt(0, 0, forwardSign[i]);
        }
        const size = this._cubeSize;
        _setViewport(cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size);
        renderer.setRenderTarget(cubeUVRenderTarget);
        if (useSolidColor) {
          renderer.render(backgroundBox, cubeCamera);
        }
        renderer.render(scene, cubeCamera);
      }
      backgroundBox.geometry.dispose();
      backgroundBox.material.dispose();
      renderer.toneMapping = toneMapping;
      renderer.autoClear = originalAutoClear;
      scene.background = background;
    }
    _textureToCubeUV(texture, cubeUVRenderTarget) {
      const renderer = this._renderer;
      const isCubeTexture = texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping;
      if (isCubeTexture) {
        if (this._cubemapMaterial === null) {
          this._cubemapMaterial = _getCubemapMaterial();
        }
        this._cubemapMaterial.uniforms.flipEnvMap.value = texture.isRenderTargetTexture === false ? -1 : 1;
      } else {
        if (this._equirectMaterial === null) {
          this._equirectMaterial = _getEquirectMaterial();
        }
      }
      const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
      const mesh = new Mesh(this._lodPlanes[0], material);
      const uniforms = material.uniforms;
      uniforms["envMap"].value = texture;
      const size = this._cubeSize;
      _setViewport(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);
      renderer.setRenderTarget(cubeUVRenderTarget);
      renderer.render(mesh, _flatCamera);
    }
    _applyPMREM(cubeUVRenderTarget) {
      const renderer = this._renderer;
      const autoClear = renderer.autoClear;
      renderer.autoClear = false;
      for (let i = 1; i < this._lodPlanes.length; i++) {
        const sigma = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]);
        const poleAxis = _axisDirections[(i - 1) % _axisDirections.length];
        this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);
      }
      renderer.autoClear = autoClear;
    }
    /**
     * This is a two-pass Gaussian blur for a cubemap. Normally this is done
     * vertically and horizontally, but this breaks down on a cube. Here we apply
     * the blur latitudinally (around the poles), and then longitudinally (towards
     * the poles) to approximate the orthogonally-separable blur. It is least
     * accurate at the poles, but still does a decent job.
     */
    _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
      const pingPongRenderTarget = this._pingPongRenderTarget;
      this._halfBlur(
        cubeUVRenderTarget,
        pingPongRenderTarget,
        lodIn,
        lodOut,
        sigma,
        "latitudinal",
        poleAxis
      );
      this._halfBlur(
        pingPongRenderTarget,
        cubeUVRenderTarget,
        lodOut,
        lodOut,
        sigma,
        "longitudinal",
        poleAxis
      );
    }
    _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
      const renderer = this._renderer;
      const blurMaterial = this._blurMaterial;
      if (direction !== "latitudinal" && direction !== "longitudinal") {
        console.error(
          "blur direction must be either latitudinal or longitudinal!"
        );
      }
      const STANDARD_DEVIATIONS = 3;
      const blurMesh = new Mesh(this._lodPlanes[lodOut], blurMaterial);
      const blurUniforms = blurMaterial.uniforms;
      const pixels = this._sizeLods[lodIn] - 1;
      const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
      const sigmaPixels = sigmaRadians / radiansPerPixel;
      const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;
      if (samples > MAX_SAMPLES) {
        console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
      }
      const weights = [];
      let sum = 0;
      for (let i = 0; i < MAX_SAMPLES; ++i) {
        const x2 = i / sigmaPixels;
        const weight = Math.exp(-x2 * x2 / 2);
        weights.push(weight);
        if (i === 0) {
          sum += weight;
        } else if (i < samples) {
          sum += 2 * weight;
        }
      }
      for (let i = 0; i < weights.length; i++) {
        weights[i] = weights[i] / sum;
      }
      blurUniforms["envMap"].value = targetIn.texture;
      blurUniforms["samples"].value = samples;
      blurUniforms["weights"].value = weights;
      blurUniforms["latitudinal"].value = direction === "latitudinal";
      if (poleAxis) {
        blurUniforms["poleAxis"].value = poleAxis;
      }
      const { _lodMax } = this;
      blurUniforms["dTheta"].value = radiansPerPixel;
      blurUniforms["mipInt"].value = _lodMax - lodIn;
      const outputSize = this._sizeLods[lodOut];
      const x = 3 * outputSize * (lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0);
      const y = 4 * (this._cubeSize - outputSize);
      _setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);
      renderer.setRenderTarget(targetOut);
      renderer.render(blurMesh, _flatCamera);
    }
  };
  function _createPlanes(lodMax) {
    const lodPlanes = [];
    const sizeLods = [];
    const sigmas = [];
    let lod = lodMax;
    const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
    for (let i = 0; i < totalLods; i++) {
      const sizeLod = Math.pow(2, lod);
      sizeLods.push(sizeLod);
      let sigma = 1 / sizeLod;
      if (i > lodMax - LOD_MIN) {
        sigma = EXTRA_LOD_SIGMA[i - lodMax + LOD_MIN - 1];
      } else if (i === 0) {
        sigma = 0;
      }
      sigmas.push(sigma);
      const texelSize = 1 / (sizeLod - 2);
      const min = -texelSize;
      const max = 1 + texelSize;
      const uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];
      const cubeFaces = 6;
      const vertices = 6;
      const positionSize = 3;
      const uvSize = 2;
      const faceIndexSize = 1;
      const position = new Float32Array(positionSize * vertices * cubeFaces);
      const uv = new Float32Array(uvSize * vertices * cubeFaces);
      const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
      for (let face = 0; face < cubeFaces; face++) {
        const x = face % 3 * 2 / 3 - 1;
        const y = face > 2 ? 0 : -1;
        const coordinates = [
          x,
          y,
          0,
          x + 2 / 3,
          y,
          0,
          x + 2 / 3,
          y + 1,
          0,
          x,
          y,
          0,
          x + 2 / 3,
          y + 1,
          0,
          x,
          y + 1,
          0
        ];
        position.set(coordinates, positionSize * vertices * face);
        uv.set(uv1, uvSize * vertices * face);
        const fill = [face, face, face, face, face, face];
        faceIndex.set(fill, faceIndexSize * vertices * face);
      }
      const planes = new BufferGeometry();
      planes.setAttribute("position", new BufferAttribute(position, positionSize));
      planes.setAttribute("uv", new BufferAttribute(uv, uvSize));
      planes.setAttribute("faceIndex", new BufferAttribute(faceIndex, faceIndexSize));
      lodPlanes.push(planes);
      if (lod > LOD_MIN) {
        lod--;
      }
    }
    return { lodPlanes, sizeLods, sigmas };
  }
  function _createRenderTarget(width, height, params) {
    const cubeUVRenderTarget = new WebGLRenderTarget(width, height, params);
    cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
    cubeUVRenderTarget.texture.name = "PMREM.cubeUv";
    cubeUVRenderTarget.scissorTest = true;
    return cubeUVRenderTarget;
  }
  function _setViewport(target, x, y, width, height) {
    target.viewport.set(x, y, width, height);
    target.scissor.set(x, y, width, height);
  }
  function _getBlurShader(lodMax, width, height) {
    const weights = new Float32Array(MAX_SAMPLES);
    const poleAxis = new Vector3(0, 1, 0);
    const shaderMaterial = new ShaderMaterial({
      name: "SphericalGaussianBlur",
      defines: {
        "n": MAX_SAMPLES,
        "CUBEUV_TEXEL_WIDTH": 1 / width,
        "CUBEUV_TEXEL_HEIGHT": 1 / height,
        "CUBEUV_MAX_MIP": `${lodMax}.0`
      },
      uniforms: {
        "envMap": { value: null },
        "samples": { value: 1 },
        "weights": { value: weights },
        "latitudinal": { value: false },
        "dTheta": { value: 0 },
        "mipInt": { value: 0 },
        "poleAxis": { value: poleAxis }
      },
      vertexShader: _getCommonVertexShader(),
      fragmentShader: (
        /* glsl */
        `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
      ),
      blending: NoBlending,
      depthTest: false,
      depthWrite: false
    });
    return shaderMaterial;
  }
  function _getEquirectMaterial() {
    return new ShaderMaterial({
      name: "EquirectangularToCubeUV",
      uniforms: {
        "envMap": { value: null }
      },
      vertexShader: _getCommonVertexShader(),
      fragmentShader: (
        /* glsl */
        `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
      ),
      blending: NoBlending,
      depthTest: false,
      depthWrite: false
    });
  }
  function _getCubemapMaterial() {
    return new ShaderMaterial({
      name: "CubemapToCubeUV",
      uniforms: {
        "envMap": { value: null },
        "flipEnvMap": { value: -1 }
      },
      vertexShader: _getCommonVertexShader(),
      fragmentShader: (
        /* glsl */
        `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
      ),
      blending: NoBlending,
      depthTest: false,
      depthWrite: false
    });
  }
  function _getCommonVertexShader() {
    return (
      /* glsl */
      `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
    );
  }
  function WebGLCubeUVMaps(renderer) {
    let cubeUVmaps = /* @__PURE__ */ new WeakMap();
    let pmremGenerator = null;
    function get(texture) {
      if (texture && texture.isTexture) {
        const mapping = texture.mapping;
        const isEquirectMap = mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping;
        const isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;
        if (isEquirectMap || isCubeMap) {
          if (texture.isRenderTargetTexture && texture.needsPMREMUpdate === true) {
            texture.needsPMREMUpdate = false;
            let renderTarget = cubeUVmaps.get(texture);
            if (pmremGenerator === null)
              pmremGenerator = new PMREMGenerator(renderer);
            renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture, renderTarget) : pmremGenerator.fromCubemap(texture, renderTarget);
            cubeUVmaps.set(texture, renderTarget);
            return renderTarget.texture;
          } else {
            if (cubeUVmaps.has(texture)) {
              return cubeUVmaps.get(texture).texture;
            } else {
              const image = texture.image;
              if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {
                if (pmremGenerator === null)
                  pmremGenerator = new PMREMGenerator(renderer);
                const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);
                cubeUVmaps.set(texture, renderTarget);
                texture.addEventListener("dispose", onTextureDispose);
                return renderTarget.texture;
              } else {
                return null;
              }
            }
          }
        }
      }
      return texture;
    }
    function isCubeTextureComplete(image) {
      let count = 0;
      const length = 6;
      for (let i = 0; i < length; i++) {
        if (image[i] !== void 0)
          count++;
      }
      return count === length;
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      const cubemapUV = cubeUVmaps.get(texture);
      if (cubemapUV !== void 0) {
        cubeUVmaps.delete(texture);
        cubemapUV.dispose();
      }
    }
    function dispose() {
      cubeUVmaps = /* @__PURE__ */ new WeakMap();
      if (pmremGenerator !== null) {
        pmremGenerator.dispose();
        pmremGenerator = null;
      }
    }
    return {
      get,
      dispose
    };
  }
  function WebGLExtensions(gl) {
    const extensions = {};
    function getExtension(name) {
      if (extensions[name] !== void 0) {
        return extensions[name];
      }
      let extension;
      switch (name) {
        case "WEBGL_depth_texture":
          extension = gl.getExtension("WEBGL_depth_texture") || gl.getExtension("MOZ_WEBGL_depth_texture") || gl.getExtension("WEBKIT_WEBGL_depth_texture");
          break;
        case "EXT_texture_filter_anisotropic":
          extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
          break;
        case "WEBGL_compressed_texture_s3tc":
          extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
          break;
        case "WEBGL_compressed_texture_pvrtc":
          extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
          break;
        default:
          extension = gl.getExtension(name);
      }
      extensions[name] = extension;
      return extension;
    }
    return {
      has: function(name) {
        return getExtension(name) !== null;
      },
      init: function(capabilities) {
        if (capabilities.isWebGL2) {
          getExtension("EXT_color_buffer_float");
        } else {
          getExtension("WEBGL_depth_texture");
          getExtension("OES_texture_float");
          getExtension("OES_texture_half_float");
          getExtension("OES_texture_half_float_linear");
          getExtension("OES_standard_derivatives");
          getExtension("OES_element_index_uint");
          getExtension("OES_vertex_array_object");
          getExtension("ANGLE_instanced_arrays");
        }
        getExtension("OES_texture_float_linear");
        getExtension("EXT_color_buffer_half_float");
        getExtension("WEBGL_multisampled_render_to_texture");
      },
      get: function(name) {
        const extension = getExtension(name);
        if (extension === null) {
          console.warn("THREE.WebGLRenderer: " + name + " extension not supported.");
        }
        return extension;
      }
    };
  }
  function WebGLGeometries(gl, attributes, info, bindingStates) {
    const geometries = {};
    const wireframeAttributes = /* @__PURE__ */ new WeakMap();
    function onGeometryDispose(event) {
      const geometry = event.target;
      if (geometry.index !== null) {
        attributes.remove(geometry.index);
      }
      for (const name in geometry.attributes) {
        attributes.remove(geometry.attributes[name]);
      }
      for (const name in geometry.morphAttributes) {
        const array = geometry.morphAttributes[name];
        for (let i = 0, l = array.length; i < l; i++) {
          attributes.remove(array[i]);
        }
      }
      geometry.removeEventListener("dispose", onGeometryDispose);
      delete geometries[geometry.id];
      const attribute = wireframeAttributes.get(geometry);
      if (attribute) {
        attributes.remove(attribute);
        wireframeAttributes.delete(geometry);
      }
      bindingStates.releaseStatesOfGeometry(geometry);
      if (geometry.isInstancedBufferGeometry === true) {
        delete geometry._maxInstanceCount;
      }
      info.memory.geometries--;
    }
    function get(object, geometry) {
      if (geometries[geometry.id] === true)
        return geometry;
      geometry.addEventListener("dispose", onGeometryDispose);
      geometries[geometry.id] = true;
      info.memory.geometries++;
      return geometry;
    }
    function update(geometry) {
      const geometryAttributes = geometry.attributes;
      for (const name in geometryAttributes) {
        attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);
      }
      const morphAttributes = geometry.morphAttributes;
      for (const name in morphAttributes) {
        const array = morphAttributes[name];
        for (let i = 0, l = array.length; i < l; i++) {
          attributes.update(array[i], gl.ARRAY_BUFFER);
        }
      }
    }
    function updateWireframeAttribute(geometry) {
      const indices = [];
      const geometryIndex = geometry.index;
      const geometryPosition = geometry.attributes.position;
      let version = 0;
      if (geometryIndex !== null) {
        const array = geometryIndex.array;
        version = geometryIndex.version;
        for (let i = 0, l = array.length; i < l; i += 3) {
          const a = array[i + 0];
          const b = array[i + 1];
          const c = array[i + 2];
          indices.push(a, b, b, c, c, a);
        }
      } else {
        const array = geometryPosition.array;
        version = geometryPosition.version;
        for (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {
          const a = i + 0;
          const b = i + 1;
          const c = i + 2;
          indices.push(a, b, b, c, c, a);
        }
      }
      const attribute = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
      attribute.version = version;
      const previousAttribute = wireframeAttributes.get(geometry);
      if (previousAttribute)
        attributes.remove(previousAttribute);
      wireframeAttributes.set(geometry, attribute);
    }
    function getWireframeAttribute(geometry) {
      const currentAttribute = wireframeAttributes.get(geometry);
      if (currentAttribute) {
        const geometryIndex = geometry.index;
        if (geometryIndex !== null) {
          if (currentAttribute.version < geometryIndex.version) {
            updateWireframeAttribute(geometry);
          }
        }
      } else {
        updateWireframeAttribute(geometry);
      }
      return wireframeAttributes.get(geometry);
    }
    return {
      get,
      update,
      getWireframeAttribute
    };
  }
  function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    let mode;
    function setMode(value) {
      mode = value;
    }
    let type, bytesPerElement;
    function setIndex(value) {
      type = value.type;
      bytesPerElement = value.bytesPerElement;
    }
    function render(start, count) {
      gl.drawElements(mode, count, type, start * bytesPerElement);
      info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
      if (primcount === 0)
        return;
      let extension, methodName;
      if (isWebGL2) {
        extension = gl;
        methodName = "drawElementsInstanced";
      } else {
        extension = extensions.get("ANGLE_instanced_arrays");
        methodName = "drawElementsInstancedANGLE";
        if (extension === null) {
          console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
          return;
        }
      }
      extension[methodName](mode, count, type, start * bytesPerElement, primcount);
      info.update(count, mode, primcount);
    }
    this.setMode = setMode;
    this.setIndex = setIndex;
    this.render = render;
    this.renderInstances = renderInstances;
  }
  function WebGLInfo(gl) {
    const memory = {
      geometries: 0,
      textures: 0
    };
    const render = {
      frame: 0,
      calls: 0,
      triangles: 0,
      points: 0,
      lines: 0
    };
    function update(count, mode, instanceCount) {
      render.calls++;
      switch (mode) {
        case gl.TRIANGLES:
          render.triangles += instanceCount * (count / 3);
          break;
        case gl.LINES:
          render.lines += instanceCount * (count / 2);
          break;
        case gl.LINE_STRIP:
          render.lines += instanceCount * (count - 1);
          break;
        case gl.LINE_LOOP:
          render.lines += instanceCount * count;
          break;
        case gl.POINTS:
          render.points += instanceCount * count;
          break;
        default:
          console.error("THREE.WebGLInfo: Unknown draw mode:", mode);
          break;
      }
    }
    function reset() {
      render.calls = 0;
      render.triangles = 0;
      render.points = 0;
      render.lines = 0;
    }
    return {
      memory,
      render,
      programs: null,
      autoReset: true,
      reset,
      update
    };
  }
  function numericalSort(a, b) {
    return a[0] - b[0];
  }
  function absNumericalSort(a, b) {
    return Math.abs(b[1]) - Math.abs(a[1]);
  }
  function WebGLMorphtargets(gl, capabilities, textures) {
    const influencesList = {};
    const morphInfluences = new Float32Array(8);
    const morphTextures = /* @__PURE__ */ new WeakMap();
    const morph = new Vector4();
    const workInfluences = [];
    for (let i = 0; i < 8; i++) {
      workInfluences[i] = [i, 0];
    }
    function update(object, geometry, program) {
      const objectInfluences = object.morphTargetInfluences;
      if (capabilities.isWebGL2 === true) {
        const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
        const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
        let entry = morphTextures.get(geometry);
        if (entry === void 0 || entry.count !== morphTargetsCount) {
          let disposeTexture = function() {
            texture.dispose();
            morphTextures.delete(geometry);
            geometry.removeEventListener("dispose", disposeTexture);
          };
          if (entry !== void 0)
            entry.texture.dispose();
          const hasMorphPosition = geometry.morphAttributes.position !== void 0;
          const hasMorphNormals = geometry.morphAttributes.normal !== void 0;
          const hasMorphColors = geometry.morphAttributes.color !== void 0;
          const morphTargets = geometry.morphAttributes.position || [];
          const morphNormals = geometry.morphAttributes.normal || [];
          const morphColors = geometry.morphAttributes.color || [];
          let vertexDataCount = 0;
          if (hasMorphPosition === true)
            vertexDataCount = 1;
          if (hasMorphNormals === true)
            vertexDataCount = 2;
          if (hasMorphColors === true)
            vertexDataCount = 3;
          let width = geometry.attributes.position.count * vertexDataCount;
          let height = 1;
          if (width > capabilities.maxTextureSize) {
            height = Math.ceil(width / capabilities.maxTextureSize);
            width = capabilities.maxTextureSize;
          }
          const buffer = new Float32Array(width * height * 4 * morphTargetsCount);
          const texture = new DataArrayTexture(buffer, width, height, morphTargetsCount);
          texture.type = FloatType;
          texture.needsUpdate = true;
          const vertexDataStride = vertexDataCount * 4;
          for (let i = 0; i < morphTargetsCount; i++) {
            const morphTarget = morphTargets[i];
            const morphNormal = morphNormals[i];
            const morphColor = morphColors[i];
            const offset = width * height * 4 * i;
            for (let j = 0; j < morphTarget.count; j++) {
              const stride = j * vertexDataStride;
              if (hasMorphPosition === true) {
                morph.fromBufferAttribute(morphTarget, j);
                buffer[offset + stride + 0] = morph.x;
                buffer[offset + stride + 1] = morph.y;
                buffer[offset + stride + 2] = morph.z;
                buffer[offset + stride + 3] = 0;
              }
              if (hasMorphNormals === true) {
                morph.fromBufferAttribute(morphNormal, j);
                buffer[offset + stride + 4] = morph.x;
                buffer[offset + stride + 5] = morph.y;
                buffer[offset + stride + 6] = morph.z;
                buffer[offset + stride + 7] = 0;
              }
              if (hasMorphColors === true) {
                morph.fromBufferAttribute(morphColor, j);
                buffer[offset + stride + 8] = morph.x;
                buffer[offset + stride + 9] = morph.y;
                buffer[offset + stride + 10] = morph.z;
                buffer[offset + stride + 11] = morphColor.itemSize === 4 ? morph.w : 1;
              }
            }
          }
          entry = {
            count: morphTargetsCount,
            texture,
            size: new Vector2(width, height)
          };
          morphTextures.set(geometry, entry);
          geometry.addEventListener("dispose", disposeTexture);
        }
        let morphInfluencesSum = 0;
        for (let i = 0; i < objectInfluences.length; i++) {
          morphInfluencesSum += objectInfluences[i];
        }
        const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
        program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
        program.getUniforms().setValue(gl, "morphTargetInfluences", objectInfluences);
        program.getUniforms().setValue(gl, "morphTargetsTexture", entry.texture, textures);
        program.getUniforms().setValue(gl, "morphTargetsTextureSize", entry.size);
      } else {
        const length = objectInfluences === void 0 ? 0 : objectInfluences.length;
        let influences = influencesList[geometry.id];
        if (influences === void 0 || influences.length !== length) {
          influences = [];
          for (let i = 0; i < length; i++) {
            influences[i] = [i, 0];
          }
          influencesList[geometry.id] = influences;
        }
        for (let i = 0; i < length; i++) {
          const influence = influences[i];
          influence[0] = i;
          influence[1] = objectInfluences[i];
        }
        influences.sort(absNumericalSort);
        for (let i = 0; i < 8; i++) {
          if (i < length && influences[i][1]) {
            workInfluences[i][0] = influences[i][0];
            workInfluences[i][1] = influences[i][1];
          } else {
            workInfluences[i][0] = Number.MAX_SAFE_INTEGER;
            workInfluences[i][1] = 0;
          }
        }
        workInfluences.sort(numericalSort);
        const morphTargets = geometry.morphAttributes.position;
        const morphNormals = geometry.morphAttributes.normal;
        let morphInfluencesSum = 0;
        for (let i = 0; i < 8; i++) {
          const influence = workInfluences[i];
          const index = influence[0];
          const value = influence[1];
          if (index !== Number.MAX_SAFE_INTEGER && value) {
            if (morphTargets && geometry.getAttribute("morphTarget" + i) !== morphTargets[index]) {
              geometry.setAttribute("morphTarget" + i, morphTargets[index]);
            }
            if (morphNormals && geometry.getAttribute("morphNormal" + i) !== morphNormals[index]) {
              geometry.setAttribute("morphNormal" + i, morphNormals[index]);
            }
            morphInfluences[i] = value;
            morphInfluencesSum += value;
          } else {
            if (morphTargets && geometry.hasAttribute("morphTarget" + i) === true) {
              geometry.deleteAttribute("morphTarget" + i);
            }
            if (morphNormals && geometry.hasAttribute("morphNormal" + i) === true) {
              geometry.deleteAttribute("morphNormal" + i);
            }
            morphInfluences[i] = 0;
          }
        }
        const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
        program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
        program.getUniforms().setValue(gl, "morphTargetInfluences", morphInfluences);
      }
    }
    return {
      update
    };
  }
  function WebGLObjects(gl, geometries, attributes, info) {
    let updateMap = /* @__PURE__ */ new WeakMap();
    function update(object) {
      const frame = info.render.frame;
      const geometry = object.geometry;
      const buffergeometry = geometries.get(object, geometry);
      if (updateMap.get(buffergeometry) !== frame) {
        geometries.update(buffergeometry);
        updateMap.set(buffergeometry, frame);
      }
      if (object.isInstancedMesh) {
        if (object.hasEventListener("dispose", onInstancedMeshDispose) === false) {
          object.addEventListener("dispose", onInstancedMeshDispose);
        }
        if (updateMap.get(object) !== frame) {
          attributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);
          if (object.instanceColor !== null) {
            attributes.update(object.instanceColor, gl.ARRAY_BUFFER);
          }
          updateMap.set(object, frame);
        }
      }
      if (object.isSkinnedMesh) {
        const skeleton = object.skeleton;
        if (updateMap.get(skeleton) !== frame) {
          skeleton.update();
          updateMap.set(skeleton, frame);
        }
      }
      return buffergeometry;
    }
    function dispose() {
      updateMap = /* @__PURE__ */ new WeakMap();
    }
    function onInstancedMeshDispose(event) {
      const instancedMesh = event.target;
      instancedMesh.removeEventListener("dispose", onInstancedMeshDispose);
      attributes.remove(instancedMesh.instanceMatrix);
      if (instancedMesh.instanceColor !== null)
        attributes.remove(instancedMesh.instanceColor);
    }
    return {
      update,
      dispose
    };
  }
  var emptyTexture = /* @__PURE__ */ new Texture();
  var emptyArrayTexture = /* @__PURE__ */ new DataArrayTexture();
  var empty3dTexture = /* @__PURE__ */ new Data3DTexture();
  var emptyCubeTexture = /* @__PURE__ */ new CubeTexture();
  var arrayCacheF32 = [];
  var arrayCacheI32 = [];
  var mat4array = new Float32Array(16);
  var mat3array = new Float32Array(9);
  var mat2array = new Float32Array(4);
  function flatten(array, nBlocks, blockSize) {
    const firstElem = array[0];
    if (firstElem <= 0 || firstElem > 0)
      return array;
    const n = nBlocks * blockSize;
    let r = arrayCacheF32[n];
    if (r === void 0) {
      r = new Float32Array(n);
      arrayCacheF32[n] = r;
    }
    if (nBlocks !== 0) {
      firstElem.toArray(r, 0);
      for (let i = 1, offset = 0; i !== nBlocks; ++i) {
        offset += blockSize;
        array[i].toArray(r, offset);
      }
    }
    return r;
  }
  function arraysEqual(a, b) {
    if (a.length !== b.length)
      return false;
    for (let i = 0, l = a.length; i < l; i++) {
      if (a[i] !== b[i])
        return false;
    }
    return true;
  }
  function copyArray(a, b) {
    for (let i = 0, l = b.length; i < l; i++) {
      a[i] = b[i];
    }
  }
  function allocTexUnits(textures, n) {
    let r = arrayCacheI32[n];
    if (r === void 0) {
      r = new Int32Array(n);
      arrayCacheI32[n] = r;
    }
    for (let i = 0; i !== n; ++i) {
      r[i] = textures.allocateTextureUnit();
    }
    return r;
  }
  function setValueV1f(gl, v) {
    const cache = this.cache;
    if (cache[0] === v)
      return;
    gl.uniform1f(this.addr, v);
    cache[0] = v;
  }
  function setValueV2f(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y) {
        gl.uniform2f(this.addr, v.x, v.y);
        cache[0] = v.x;
        cache[1] = v.y;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform2fv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV3f(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
        gl.uniform3f(this.addr, v.x, v.y, v.z);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
      }
    } else if (v.r !== void 0) {
      if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
        gl.uniform3f(this.addr, v.r, v.g, v.b);
        cache[0] = v.r;
        cache[1] = v.g;
        cache[2] = v.b;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform3fv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV4f(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
        gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
        cache[3] = v.w;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform4fv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueM2(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === void 0) {
      if (arraysEqual(cache, v))
        return;
      gl.uniformMatrix2fv(this.addr, false, v);
      copyArray(cache, v);
    } else {
      if (arraysEqual(cache, elements))
        return;
      mat2array.set(elements);
      gl.uniformMatrix2fv(this.addr, false, mat2array);
      copyArray(cache, elements);
    }
  }
  function setValueM3(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === void 0) {
      if (arraysEqual(cache, v))
        return;
      gl.uniformMatrix3fv(this.addr, false, v);
      copyArray(cache, v);
    } else {
      if (arraysEqual(cache, elements))
        return;
      mat3array.set(elements);
      gl.uniformMatrix3fv(this.addr, false, mat3array);
      copyArray(cache, elements);
    }
  }
  function setValueM4(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === void 0) {
      if (arraysEqual(cache, v))
        return;
      gl.uniformMatrix4fv(this.addr, false, v);
      copyArray(cache, v);
    } else {
      if (arraysEqual(cache, elements))
        return;
      mat4array.set(elements);
      gl.uniformMatrix4fv(this.addr, false, mat4array);
      copyArray(cache, elements);
    }
  }
  function setValueV1i(gl, v) {
    const cache = this.cache;
    if (cache[0] === v)
      return;
    gl.uniform1i(this.addr, v);
    cache[0] = v;
  }
  function setValueV2i(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y) {
        gl.uniform2i(this.addr, v.x, v.y);
        cache[0] = v.x;
        cache[1] = v.y;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform2iv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV3i(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
        gl.uniform3i(this.addr, v.x, v.y, v.z);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform3iv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV4i(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
        gl.uniform4i(this.addr, v.x, v.y, v.z, v.w);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
        cache[3] = v.w;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform4iv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV1ui(gl, v) {
    const cache = this.cache;
    if (cache[0] === v)
      return;
    gl.uniform1ui(this.addr, v);
    cache[0] = v;
  }
  function setValueV2ui(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y) {
        gl.uniform2ui(this.addr, v.x, v.y);
        cache[0] = v.x;
        cache[1] = v.y;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform2uiv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV3ui(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
        gl.uniform3ui(this.addr, v.x, v.y, v.z);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform3uiv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueV4ui(gl, v) {
    const cache = this.cache;
    if (v.x !== void 0) {
      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
        gl.uniform4ui(this.addr, v.x, v.y, v.z, v.w);
        cache[0] = v.x;
        cache[1] = v.y;
        cache[2] = v.z;
        cache[3] = v.w;
      }
    } else {
      if (arraysEqual(cache, v))
        return;
      gl.uniform4uiv(this.addr, v);
      copyArray(cache, v);
    }
  }
  function setValueT1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.setTexture2D(v || emptyTexture, unit);
  }
  function setValueT3D1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.setTexture3D(v || empty3dTexture, unit);
  }
  function setValueT6(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.setTextureCube(v || emptyCubeTexture, unit);
  }
  function setValueT2DArray1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
      gl.uniform1i(this.addr, unit);
      cache[0] = unit;
    }
    textures.setTexture2DArray(v || emptyArrayTexture, unit);
  }
  function getSingularSetter(type) {
    switch (type) {
      case 5126:
        return setValueV1f;
      case 35664:
        return setValueV2f;
      case 35665:
        return setValueV3f;
      case 35666:
        return setValueV4f;
      case 35674:
        return setValueM2;
      case 35675:
        return setValueM3;
      case 35676:
        return setValueM4;
      case 5124:
      case 35670:
        return setValueV1i;
      case 35667:
      case 35671:
        return setValueV2i;
      case 35668:
      case 35672:
        return setValueV3i;
      case 35669:
      case 35673:
        return setValueV4i;
      case 5125:
        return setValueV1ui;
      case 36294:
        return setValueV2ui;
      case 36295:
        return setValueV3ui;
      case 36296:
        return setValueV4ui;
      case 35678:
      case 36198:
      case 36298:
      case 36306:
      case 35682:
        return setValueT1;
      case 35679:
      case 36299:
      case 36307:
        return setValueT3D1;
      case 35680:
      case 36300:
      case 36308:
      case 36293:
        return setValueT6;
      case 36289:
      case 36303:
      case 36311:
      case 36292:
        return setValueT2DArray1;
    }
  }
  function setValueV1fArray(gl, v) {
    gl.uniform1fv(this.addr, v);
  }
  function setValueV2fArray(gl, v) {
    const data = flatten(v, this.size, 2);
    gl.uniform2fv(this.addr, data);
  }
  function setValueV3fArray(gl, v) {
    const data = flatten(v, this.size, 3);
    gl.uniform3fv(this.addr, data);
  }
  function setValueV4fArray(gl, v) {
    const data = flatten(v, this.size, 4);
    gl.uniform4fv(this.addr, data);
  }
  function setValueM2Array(gl, v) {
    const data = flatten(v, this.size, 4);
    gl.uniformMatrix2fv(this.addr, false, data);
  }
  function setValueM3Array(gl, v) {
    const data = flatten(v, this.size, 9);
    gl.uniformMatrix3fv(this.addr, false, data);
  }
  function setValueM4Array(gl, v) {
    const data = flatten(v, this.size, 16);
    gl.uniformMatrix4fv(this.addr, false, data);
  }
  function setValueV1iArray(gl, v) {
    gl.uniform1iv(this.addr, v);
  }
  function setValueV2iArray(gl, v) {
    gl.uniform2iv(this.addr, v);
  }
  function setValueV3iArray(gl, v) {
    gl.uniform3iv(this.addr, v);
  }
  function setValueV4iArray(gl, v) {
    gl.uniform4iv(this.addr, v);
  }
  function setValueV1uiArray(gl, v) {
    gl.uniform1uiv(this.addr, v);
  }
  function setValueV2uiArray(gl, v) {
    gl.uniform2uiv(this.addr, v);
  }
  function setValueV3uiArray(gl, v) {
    gl.uniform3uiv(this.addr, v);
  }
  function setValueV4uiArray(gl, v) {
    gl.uniform4uiv(this.addr, v);
  }
  function setValueT1Array(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache, units)) {
      gl.uniform1iv(this.addr, units);
      copyArray(cache, units);
    }
    for (let i = 0; i !== n; ++i) {
      textures.setTexture2D(v[i] || emptyTexture, units[i]);
    }
  }
  function setValueT3DArray(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache, units)) {
      gl.uniform1iv(this.addr, units);
      copyArray(cache, units);
    }
    for (let i = 0; i !== n; ++i) {
      textures.setTexture3D(v[i] || empty3dTexture, units[i]);
    }
  }
  function setValueT6Array(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache, units)) {
      gl.uniform1iv(this.addr, units);
      copyArray(cache, units);
    }
    for (let i = 0; i !== n; ++i) {
      textures.setTextureCube(v[i] || emptyCubeTexture, units[i]);
    }
  }
  function setValueT2DArrayArray(gl, v, textures) {
    const cache = this.cache;
    const n = v.length;
    const units = allocTexUnits(textures, n);
    if (!arraysEqual(cache, units)) {
      gl.uniform1iv(this.addr, units);
      copyArray(cache, units);
    }
    for (let i = 0; i !== n; ++i) {
      textures.setTexture2DArray(v[i] || emptyArrayTexture, units[i]);
    }
  }
  function getPureArraySetter(type) {
    switch (type) {
      case 5126:
        return setValueV1fArray;
      case 35664:
        return setValueV2fArray;
      case 35665:
        return setValueV3fArray;
      case 35666:
        return setValueV4fArray;
      case 35674:
        return setValueM2Array;
      case 35675:
        return setValueM3Array;
      case 35676:
        return setValueM4Array;
      case 5124:
      case 35670:
        return setValueV1iArray;
      case 35667:
      case 35671:
        return setValueV2iArray;
      case 35668:
      case 35672:
        return setValueV3iArray;
      case 35669:
      case 35673:
        return setValueV4iArray;
      case 5125:
        return setValueV1uiArray;
      case 36294:
        return setValueV2uiArray;
      case 36295:
        return setValueV3uiArray;
      case 36296:
        return setValueV4uiArray;
      case 35678:
      case 36198:
      case 36298:
      case 36306:
      case 35682:
        return setValueT1Array;
      case 35679:
      case 36299:
      case 36307:
        return setValueT3DArray;
      case 35680:
      case 36300:
      case 36308:
      case 36293:
        return setValueT6Array;
      case 36289:
      case 36303:
      case 36311:
      case 36292:
        return setValueT2DArrayArray;
    }
  }
  var SingleUniform = class {
    constructor(id, activeInfo, addr) {
      this.id = id;
      this.addr = addr;
      this.cache = [];
      this.setValue = getSingularSetter(activeInfo.type);
    }
  };
  var PureArrayUniform = class {
    constructor(id, activeInfo, addr) {
      this.id = id;
      this.addr = addr;
      this.cache = [];
      this.size = activeInfo.size;
      this.setValue = getPureArraySetter(activeInfo.type);
    }
  };
  var StructuredUniform = class {
    constructor(id) {
      this.id = id;
      this.seq = [];
      this.map = {};
    }
    setValue(gl, value, textures) {
      const seq = this.seq;
      for (let i = 0, n = seq.length; i !== n; ++i) {
        const u = seq[i];
        u.setValue(gl, value[u.id], textures);
      }
    }
  };
  var RePathPart = /(\w+)(\])?(\[|\.)?/g;
  function addUniform(container, uniformObject) {
    container.seq.push(uniformObject);
    container.map[uniformObject.id] = uniformObject;
  }
  function parseUniform(activeInfo, addr, container) {
    const path = activeInfo.name, pathLength = path.length;
    RePathPart.lastIndex = 0;
    while (true) {
      const match = RePathPart.exec(path), matchEnd = RePathPart.lastIndex;
      let id = match[1];
      const idIsIndex = match[2] === "]", subscript = match[3];
      if (idIsIndex)
        id = id | 0;
      if (subscript === void 0 || subscript === "[" && matchEnd + 2 === pathLength) {
        addUniform(container, subscript === void 0 ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
        break;
      } else {
        const map = container.map;
        let next = map[id];
        if (next === void 0) {
          next = new StructuredUniform(id);
          addUniform(container, next);
        }
        container = next;
      }
    }
  }
  var WebGLUniforms = class {
    constructor(gl, program) {
      this.seq = [];
      this.map = {};
      const n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
      for (let i = 0; i < n; ++i) {
        const info = gl.getActiveUniform(program, i), addr = gl.getUniformLocation(program, info.name);
        parseUniform(info, addr, this);
      }
    }
    setValue(gl, name, value, textures) {
      const u = this.map[name];
      if (u !== void 0)
        u.setValue(gl, value, textures);
    }
    setOptional(gl, object, name) {
      const v = object[name];
      if (v !== void 0)
        this.setValue(gl, name, v);
    }
    static upload(gl, seq, values, textures) {
      for (let i = 0, n = seq.length; i !== n; ++i) {
        const u = seq[i], v = values[u.id];
        if (v.needsUpdate !== false) {
          u.setValue(gl, v.value, textures);
        }
      }
    }
    static seqWithValue(seq, values) {
      const r = [];
      for (let i = 0, n = seq.length; i !== n; ++i) {
        const u = seq[i];
        if (u.id in values)
          r.push(u);
      }
      return r;
    }
  };
  function WebGLShader(gl, type, string) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, string);
    gl.compileShader(shader);
    return shader;
  }
  var programIdCount = 0;
  function handleSource(string, errorLine) {
    const lines = string.split("\n");
    const lines2 = [];
    const from = Math.max(errorLine - 6, 0);
    const to = Math.min(errorLine + 6, lines.length);
    for (let i = from; i < to; i++) {
      const line = i + 1;
      lines2.push(`${line === errorLine ? ">" : " "} ${line}: ${lines[i]}`);
    }
    return lines2.join("\n");
  }
  function getEncodingComponents(colorSpace) {
    switch (colorSpace) {
      case LinearSRGBColorSpace:
        return ["Linear", "( value )"];
      case SRGBColorSpace:
        return ["sRGB", "( value )"];
      default:
        console.warn("THREE.WebGLProgram: Unsupported color space:", colorSpace);
        return ["Linear", "( value )"];
    }
  }
  function getShaderErrors(gl, shader, type) {
    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
    const errors = gl.getShaderInfoLog(shader).trim();
    if (status && errors === "")
      return "";
    const errorMatches = /ERROR: 0:(\d+)/.exec(errors);
    if (errorMatches) {
      const errorLine = parseInt(errorMatches[1]);
      return type.toUpperCase() + "\n\n" + errors + "\n\n" + handleSource(gl.getShaderSource(shader), errorLine);
    } else {
      return errors;
    }
  }
  function getTexelEncodingFunction(functionName, colorSpace) {
    const components = getEncodingComponents(colorSpace);
    return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[0] + components[1] + "; }";
  }
  function getToneMappingFunction(functionName, toneMapping) {
    let toneMappingName;
    switch (toneMapping) {
      case LinearToneMapping:
        toneMappingName = "Linear";
        break;
      case ReinhardToneMapping:
        toneMappingName = "Reinhard";
        break;
      case CineonToneMapping:
        toneMappingName = "OptimizedCineon";
        break;
      case ACESFilmicToneMapping:
        toneMappingName = "ACESFilmic";
        break;
      case CustomToneMapping:
        toneMappingName = "Custom";
        break;
      default:
        console.warn("THREE.WebGLProgram: Unsupported toneMapping:", toneMapping);
        toneMappingName = "Linear";
    }
    return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";
  }
  function generateExtensions(parameters) {
    const chunks = [
      parameters.extensionDerivatives || !!parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.normalMapTangentSpace || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
      (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
      parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
      (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission) && parameters.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
    ];
    return chunks.filter(filterEmptyLine).join("\n");
  }
  function generateDefines(defines) {
    const chunks = [];
    for (const name in defines) {
      const value = defines[name];
      if (value === false)
        continue;
      chunks.push("#define " + name + " " + value);
    }
    return chunks.join("\n");
  }
  function fetchAttributeLocations(gl, program) {
    const attributes = {};
    const n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
    for (let i = 0; i < n; i++) {
      const info = gl.getActiveAttrib(program, i);
      const name = info.name;
      let locationSize = 1;
      if (info.type === gl.FLOAT_MAT2)
        locationSize = 2;
      if (info.type === gl.FLOAT_MAT3)
        locationSize = 3;
      if (info.type === gl.FLOAT_MAT4)
        locationSize = 4;
      attributes[name] = {
        type: info.type,
        location: gl.getAttribLocation(program, name),
        locationSize
      };
    }
    return attributes;
  }
  function filterEmptyLine(string) {
    return string !== "";
  }
  function replaceLightNums(string, parameters) {
    const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;
    return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
  }
  function replaceClippingPlaneNums(string, parameters) {
    return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
  }
  var includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
  function resolveIncludes(string) {
    return string.replace(includePattern, includeReplacer);
  }
  var shaderChunkMap = /* @__PURE__ */ new Map([
    ["encodings_fragment", "colorspace_fragment"],
    // @deprecated, r154
    ["encodings_pars_fragment", "colorspace_pars_fragment"],
    // @deprecated, r154
    ["output_fragment", "opaque_fragment"]
    // @deprecated, r154
  ]);
  function includeReplacer(match, include) {
    let string = ShaderChunk[include];
    if (string === void 0) {
      const newInclude = shaderChunkMap.get(include);
      if (newInclude !== void 0) {
        string = ShaderChunk[newInclude];
        console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', include, newInclude);
      } else {
        throw new Error("Can not resolve #include <" + include + ">");
      }
    }
    return resolveIncludes(string);
  }
  var unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
  function unrollLoops(string) {
    return string.replace(unrollLoopPattern, loopReplacer);
  }
  function loopReplacer(match, start, end, snippet) {
    let string = "";
    for (let i = parseInt(start); i < parseInt(end); i++) {
      string += snippet.replace(/\[\s*i\s*\]/g, "[ " + i + " ]").replace(/UNROLLED_LOOP_INDEX/g, i);
    }
    return string;
  }
  function generatePrecision(parameters) {
    let precisionstring = "precision " + parameters.precision + " float;\nprecision " + parameters.precision + " int;";
    if (parameters.precision === "highp") {
      precisionstring += "\n#define HIGH_PRECISION";
    } else if (parameters.precision === "mediump") {
      precisionstring += "\n#define MEDIUM_PRECISION";
    } else if (parameters.precision === "lowp") {
      precisionstring += "\n#define LOW_PRECISION";
    }
    return precisionstring;
  }
  function generateShadowMapTypeDefine(parameters) {
    let shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
    if (parameters.shadowMapType === PCFShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
    } else if (parameters.shadowMapType === PCFSoftShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";
    } else if (parameters.shadowMapType === VSMShadowMap) {
      shadowMapTypeDefine = "SHADOWMAP_TYPE_VSM";
    }
    return shadowMapTypeDefine;
  }
  function generateEnvMapTypeDefine(parameters) {
    let envMapTypeDefine = "ENVMAP_TYPE_CUBE";
    if (parameters.envMap) {
      switch (parameters.envMapMode) {
        case CubeReflectionMapping:
        case CubeRefractionMapping:
          envMapTypeDefine = "ENVMAP_TYPE_CUBE";
          break;
        case CubeUVReflectionMapping:
          envMapTypeDefine = "ENVMAP_TYPE_CUBE_UV";
          break;
      }
    }
    return envMapTypeDefine;
  }
  function generateEnvMapModeDefine(parameters) {
    let envMapModeDefine = "ENVMAP_MODE_REFLECTION";
    if (parameters.envMap) {
      switch (parameters.envMapMode) {
        case CubeRefractionMapping:
          envMapModeDefine = "ENVMAP_MODE_REFRACTION";
          break;
      }
    }
    return envMapModeDefine;
  }
  function generateEnvMapBlendingDefine(parameters) {
    let envMapBlendingDefine = "ENVMAP_BLENDING_NONE";
    if (parameters.envMap) {
      switch (parameters.combine) {
        case MultiplyOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_MULTIPLY";
          break;
        case MixOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_MIX";
          break;
        case AddOperation:
          envMapBlendingDefine = "ENVMAP_BLENDING_ADD";
          break;
      }
    }
    return envMapBlendingDefine;
  }
  function generateCubeUVSize(parameters) {
    const imageHeight = parameters.envMapCubeUVHeight;
    if (imageHeight === null)
      return null;
    const maxMip = Math.log2(imageHeight) - 2;
    const texelHeight = 1 / imageHeight;
    const texelWidth = 1 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));
    return { texelWidth, texelHeight, maxMip };
  }
  function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
    const gl = renderer.getContext();
    const defines = parameters.defines;
    let vertexShader = parameters.vertexShader;
    let fragmentShader = parameters.fragmentShader;
    const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);
    const envMapTypeDefine = generateEnvMapTypeDefine(parameters);
    const envMapModeDefine = generateEnvMapModeDefine(parameters);
    const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);
    const envMapCubeUVSize = generateCubeUVSize(parameters);
    const customExtensions = parameters.isWebGL2 ? "" : generateExtensions(parameters);
    const customDefines = generateDefines(defines);
    const program = gl.createProgram();
    let prefixVertex, prefixFragment;
    let versionString = parameters.glslVersion ? "#version " + parameters.glslVersion + "\n" : "";
    if (parameters.isRawShaderMaterial) {
      prefixVertex = [
        "#define SHADER_TYPE " + parameters.shaderType,
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines
      ].filter(filterEmptyLine).join("\n");
      if (prefixVertex.length > 0) {
        prefixVertex += "\n";
      }
      prefixFragment = [
        customExtensions,
        "#define SHADER_TYPE " + parameters.shaderType,
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines
      ].filter(filterEmptyLine).join("\n");
      if (prefixFragment.length > 0) {
        prefixFragment += "\n";
      }
    } else {
      prefixVertex = [
        generatePrecision(parameters),
        "#define SHADER_TYPE " + parameters.shaderType,
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines,
        parameters.instancing ? "#define USE_INSTANCING" : "",
        parameters.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
        parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
        parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
        parameters.map ? "#define USE_MAP" : "",
        parameters.envMap ? "#define USE_ENVMAP" : "",
        parameters.envMap ? "#define " + envMapModeDefine : "",
        parameters.lightMap ? "#define USE_LIGHTMAP" : "",
        parameters.aoMap ? "#define USE_AOMAP" : "",
        parameters.bumpMap ? "#define USE_BUMPMAP" : "",
        parameters.normalMap ? "#define USE_NORMALMAP" : "",
        parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
        parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
        parameters.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
        parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        parameters.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
        parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
        parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
        parameters.specularMap ? "#define USE_SPECULARMAP" : "",
        parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
        parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
        parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
        parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
        parameters.alphaHash ? "#define USE_ALPHAHASH" : "",
        parameters.transmission ? "#define USE_TRANSMISSION" : "",
        parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
        parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
        parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
        //
        parameters.mapUv ? "#define MAP_UV " + parameters.mapUv : "",
        parameters.alphaMapUv ? "#define ALPHAMAP_UV " + parameters.alphaMapUv : "",
        parameters.lightMapUv ? "#define LIGHTMAP_UV " + parameters.lightMapUv : "",
        parameters.aoMapUv ? "#define AOMAP_UV " + parameters.aoMapUv : "",
        parameters.emissiveMapUv ? "#define EMISSIVEMAP_UV " + parameters.emissiveMapUv : "",
        parameters.bumpMapUv ? "#define BUMPMAP_UV " + parameters.bumpMapUv : "",
        parameters.normalMapUv ? "#define NORMALMAP_UV " + parameters.normalMapUv : "",
        parameters.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + parameters.displacementMapUv : "",
        parameters.metalnessMapUv ? "#define METALNESSMAP_UV " + parameters.metalnessMapUv : "",
        parameters.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + parameters.roughnessMapUv : "",
        parameters.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + parameters.anisotropyMapUv : "",
        parameters.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + parameters.clearcoatMapUv : "",
        parameters.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + parameters.clearcoatNormalMapUv : "",
        parameters.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + parameters.clearcoatRoughnessMapUv : "",
        parameters.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + parameters.iridescenceMapUv : "",
        parameters.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + parameters.iridescenceThicknessMapUv : "",
        parameters.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + parameters.sheenColorMapUv : "",
        parameters.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + parameters.sheenRoughnessMapUv : "",
        parameters.specularMapUv ? "#define SPECULARMAP_UV " + parameters.specularMapUv : "",
        parameters.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + parameters.specularColorMapUv : "",
        parameters.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + parameters.specularIntensityMapUv : "",
        parameters.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + parameters.transmissionMapUv : "",
        parameters.thicknessMapUv ? "#define THICKNESSMAP_UV " + parameters.thicknessMapUv : "",
        //
        parameters.vertexTangents && parameters.flatShading === false ? "#define USE_TANGENT" : "",
        parameters.vertexColors ? "#define USE_COLOR" : "",
        parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
        parameters.vertexUv1s ? "#define USE_UV1" : "",
        parameters.vertexUv2s ? "#define USE_UV2" : "",
        parameters.vertexUv3s ? "#define USE_UV3" : "",
        parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
        parameters.flatShading ? "#define FLAT_SHADED" : "",
        parameters.skinning ? "#define USE_SKINNING" : "",
        parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
        parameters.morphNormals && parameters.flatShading === false ? "#define USE_MORPHNORMALS" : "",
        parameters.morphColors && parameters.isWebGL2 ? "#define USE_MORPHCOLORS" : "",
        parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "",
        parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + parameters.morphTextureStride : "",
        parameters.morphTargetsCount > 0 && parameters.isWebGL2 ? "#define MORPHTARGETS_COUNT " + parameters.morphTargetsCount : "",
        parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
        parameters.flipSided ? "#define FLIP_SIDED" : "",
        parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
        parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
        parameters.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
        parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
        "uniform mat4 modelMatrix;",
        "uniform mat4 modelViewMatrix;",
        "uniform mat4 projectionMatrix;",
        "uniform mat4 viewMatrix;",
        "uniform mat3 normalMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        "#ifdef USE_INSTANCING",
        "	attribute mat4 instanceMatrix;",
        "#endif",
        "#ifdef USE_INSTANCING_COLOR",
        "	attribute vec3 instanceColor;",
        "#endif",
        "attribute vec3 position;",
        "attribute vec3 normal;",
        "attribute vec2 uv;",
        "#ifdef USE_UV1",
        "	attribute vec2 uv1;",
        "#endif",
        "#ifdef USE_UV2",
        "	attribute vec2 uv2;",
        "#endif",
        "#ifdef USE_UV3",
        "	attribute vec2 uv3;",
        "#endif",
        "#ifdef USE_TANGENT",
        "	attribute vec4 tangent;",
        "#endif",
        "#if defined( USE_COLOR_ALPHA )",
        "	attribute vec4 color;",
        "#elif defined( USE_COLOR )",
        "	attribute vec3 color;",
        "#endif",
        "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
        "	attribute vec3 morphTarget0;",
        "	attribute vec3 morphTarget1;",
        "	attribute vec3 morphTarget2;",
        "	attribute vec3 morphTarget3;",
        "	#ifdef USE_MORPHNORMALS",
        "		attribute vec3 morphNormal0;",
        "		attribute vec3 morphNormal1;",
        "		attribute vec3 morphNormal2;",
        "		attribute vec3 morphNormal3;",
        "	#else",
        "		attribute vec3 morphTarget4;",
        "		attribute vec3 morphTarget5;",
        "		attribute vec3 morphTarget6;",
        "		attribute vec3 morphTarget7;",
        "	#endif",
        "#endif",
        "#ifdef USE_SKINNING",
        "	attribute vec4 skinIndex;",
        "	attribute vec4 skinWeight;",
        "#endif",
        "\n"
      ].filter(filterEmptyLine).join("\n");
      prefixFragment = [
        customExtensions,
        generatePrecision(parameters),
        "#define SHADER_TYPE " + parameters.shaderType,
        "#define SHADER_NAME " + parameters.shaderName,
        customDefines,
        parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
        parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
        parameters.map ? "#define USE_MAP" : "",
        parameters.matcap ? "#define USE_MATCAP" : "",
        parameters.envMap ? "#define USE_ENVMAP" : "",
        parameters.envMap ? "#define " + envMapTypeDefine : "",
        parameters.envMap ? "#define " + envMapModeDefine : "",
        parameters.envMap ? "#define " + envMapBlendingDefine : "",
        envMapCubeUVSize ? "#define CUBEUV_TEXEL_WIDTH " + envMapCubeUVSize.texelWidth : "",
        envMapCubeUVSize ? "#define CUBEUV_TEXEL_HEIGHT " + envMapCubeUVSize.texelHeight : "",
        envMapCubeUVSize ? "#define CUBEUV_MAX_MIP " + envMapCubeUVSize.maxMip + ".0" : "",
        parameters.lightMap ? "#define USE_LIGHTMAP" : "",
        parameters.aoMap ? "#define USE_AOMAP" : "",
        parameters.bumpMap ? "#define USE_BUMPMAP" : "",
        parameters.normalMap ? "#define USE_NORMALMAP" : "",
        parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
        parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
        parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
        parameters.anisotropy ? "#define USE_ANISOTROPY" : "",
        parameters.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
        parameters.clearcoat ? "#define USE_CLEARCOAT" : "",
        parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
        parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
        parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
        parameters.iridescence ? "#define USE_IRIDESCENCE" : "",
        parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
        parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
        parameters.specularMap ? "#define USE_SPECULARMAP" : "",
        parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
        parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
        parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
        parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
        parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
        parameters.alphaTest ? "#define USE_ALPHATEST" : "",
        parameters.alphaHash ? "#define USE_ALPHAHASH" : "",
        parameters.sheen ? "#define USE_SHEEN" : "",
        parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
        parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
        parameters.transmission ? "#define USE_TRANSMISSION" : "",
        parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
        parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
        parameters.vertexTangents && parameters.flatShading === false ? "#define USE_TANGENT" : "",
        parameters.vertexColors || parameters.instancingColor ? "#define USE_COLOR" : "",
        parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
        parameters.vertexUv1s ? "#define USE_UV1" : "",
        parameters.vertexUv2s ? "#define USE_UV2" : "",
        parameters.vertexUv3s ? "#define USE_UV3" : "",
        parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
        parameters.gradientMap ? "#define USE_GRADIENTMAP" : "",
        parameters.flatShading ? "#define FLAT_SHADED" : "",
        parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
        parameters.flipSided ? "#define FLIP_SIDED" : "",
        parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
        parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
        parameters.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
        parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
        "uniform mat4 viewMatrix;",
        "uniform vec3 cameraPosition;",
        "uniform bool isOrthographic;",
        parameters.toneMapping !== NoToneMapping ? "#define TONE_MAPPING" : "",
        parameters.toneMapping !== NoToneMapping ? ShaderChunk["tonemapping_pars_fragment"] : "",
        // this code is required here because it is used by the toneMapping() function defined below
        parameters.toneMapping !== NoToneMapping ? getToneMappingFunction("toneMapping", parameters.toneMapping) : "",
        parameters.dithering ? "#define DITHERING" : "",
        parameters.opaque ? "#define OPAQUE" : "",
        ShaderChunk["colorspace_pars_fragment"],
        // this code is required here because it is used by the various encoding/decoding function defined below
        getTexelEncodingFunction("linearToOutputTexel", parameters.outputColorSpace),
        parameters.useDepthPacking ? "#define DEPTH_PACKING " + parameters.depthPacking : "",
        "\n"
      ].filter(filterEmptyLine).join("\n");
    }
    vertexShader = resolveIncludes(vertexShader);
    vertexShader = replaceLightNums(vertexShader, parameters);
    vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
    fragmentShader = resolveIncludes(fragmentShader);
    fragmentShader = replaceLightNums(fragmentShader, parameters);
    fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
    vertexShader = unrollLoops(vertexShader);
    fragmentShader = unrollLoops(fragmentShader);
    if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {
      versionString = "#version 300 es\n";
      prefixVertex = [
        "precision mediump sampler2DArray;",
        "#define attribute in",
        "#define varying out",
        "#define texture2D texture"
      ].join("\n") + "\n" + prefixVertex;
      prefixFragment = [
        "#define varying in",
        parameters.glslVersion === GLSL3 ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
        parameters.glslVersion === GLSL3 ? "" : "#define gl_FragColor pc_fragColor",
        "#define gl_FragDepthEXT gl_FragDepth",
        "#define texture2D texture",
        "#define textureCube texture",
        "#define texture2DProj textureProj",
        "#define texture2DLodEXT textureLod",
        "#define texture2DProjLodEXT textureProjLod",
        "#define textureCubeLodEXT textureLod",
        "#define texture2DGradEXT textureGrad",
        "#define texture2DProjGradEXT textureProjGrad",
        "#define textureCubeGradEXT textureGrad"
      ].join("\n") + "\n" + prefixFragment;
    }
    const vertexGlsl = versionString + prefixVertex + vertexShader;
    const fragmentGlsl = versionString + prefixFragment + fragmentShader;
    const glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);
    const glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);
    gl.attachShader(program, glVertexShader);
    gl.attachShader(program, glFragmentShader);
    if (parameters.index0AttributeName !== void 0) {
      gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
    } else if (parameters.morphTargets === true) {
      gl.bindAttribLocation(program, 0, "position");
    }
    gl.linkProgram(program);
    if (renderer.debug.checkShaderErrors) {
      const programLog = gl.getProgramInfoLog(program).trim();
      const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
      const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
      let runnable = true;
      let haveDiagnostics = true;
      if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
        runnable = false;
        if (typeof renderer.debug.onShaderError === "function") {
          renderer.debug.onShaderError(gl, program, glVertexShader, glFragmentShader);
        } else {
          const vertexErrors = getShaderErrors(gl, glVertexShader, "vertex");
          const fragmentErrors = getShaderErrors(gl, glFragmentShader, "fragment");
          console.error(
            "THREE.WebGLProgram: Shader Error " + gl.getError() + " - VALIDATE_STATUS " + gl.getProgramParameter(program, gl.VALIDATE_STATUS) + "\n\nProgram Info Log: " + programLog + "\n" + vertexErrors + "\n" + fragmentErrors
          );
        }
      } else if (programLog !== "") {
        console.warn("THREE.WebGLProgram: Program Info Log:", programLog);
      } else if (vertexLog === "" || fragmentLog === "") {
        haveDiagnostics = false;
      }
      if (haveDiagnostics) {
        this.diagnostics = {
          runnable,
          programLog,
          vertexShader: {
            log: vertexLog,
            prefix: prefixVertex
          },
          fragmentShader: {
            log: fragmentLog,
            prefix: prefixFragment
          }
        };
      }
    }
    gl.deleteShader(glVertexShader);
    gl.deleteShader(glFragmentShader);
    let cachedUniforms;
    this.getUniforms = function() {
      if (cachedUniforms === void 0) {
        cachedUniforms = new WebGLUniforms(gl, program);
      }
      return cachedUniforms;
    };
    let cachedAttributes;
    this.getAttributes = function() {
      if (cachedAttributes === void 0) {
        cachedAttributes = fetchAttributeLocations(gl, program);
      }
      return cachedAttributes;
    };
    this.destroy = function() {
      bindingStates.releaseStatesOfProgram(this);
      gl.deleteProgram(program);
      this.program = void 0;
    };
    this.type = parameters.shaderType;
    this.name = parameters.shaderName;
    this.id = programIdCount++;
    this.cacheKey = cacheKey;
    this.usedTimes = 1;
    this.program = program;
    this.vertexShader = glVertexShader;
    this.fragmentShader = glFragmentShader;
    return this;
  }
  var _id = 0;
  var WebGLShaderCache = class {
    constructor() {
      this.shaderCache = /* @__PURE__ */ new Map();
      this.materialCache = /* @__PURE__ */ new Map();
    }
    update(material) {
      const vertexShader = material.vertexShader;
      const fragmentShader = material.fragmentShader;
      const vertexShaderStage = this._getShaderStage(vertexShader);
      const fragmentShaderStage = this._getShaderStage(fragmentShader);
      const materialShaders = this._getShaderCacheForMaterial(material);
      if (materialShaders.has(vertexShaderStage) === false) {
        materialShaders.add(vertexShaderStage);
        vertexShaderStage.usedTimes++;
      }
      if (materialShaders.has(fragmentShaderStage) === false) {
        materialShaders.add(fragmentShaderStage);
        fragmentShaderStage.usedTimes++;
      }
      return this;
    }
    remove(material) {
      const materialShaders = this.materialCache.get(material);
      for (const shaderStage of materialShaders) {
        shaderStage.usedTimes--;
        if (shaderStage.usedTimes === 0)
          this.shaderCache.delete(shaderStage.code);
      }
      this.materialCache.delete(material);
      return this;
    }
    getVertexShaderID(material) {
      return this._getShaderStage(material.vertexShader).id;
    }
    getFragmentShaderID(material) {
      return this._getShaderStage(material.fragmentShader).id;
    }
    dispose() {
      this.shaderCache.clear();
      this.materialCache.clear();
    }
    _getShaderCacheForMaterial(material) {
      const cache = this.materialCache;
      let set = cache.get(material);
      if (set === void 0) {
        set = /* @__PURE__ */ new Set();
        cache.set(material, set);
      }
      return set;
    }
    _getShaderStage(code) {
      const cache = this.shaderCache;
      let stage = cache.get(code);
      if (stage === void 0) {
        stage = new WebGLShaderStage(code);
        cache.set(code, stage);
      }
      return stage;
    }
  };
  var WebGLShaderStage = class {
    constructor(code) {
      this.id = _id++;
      this.code = code;
      this.usedTimes = 0;
    }
  };
  function WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {
    const _programLayers = new Layers();
    const _customShaders = new WebGLShaderCache();
    const programs = [];
    const IS_WEBGL2 = capabilities.isWebGL2;
    const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
    const SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;
    let precision = capabilities.precision;
    const shaderIDs = {
      MeshDepthMaterial: "depth",
      MeshDistanceMaterial: "distanceRGBA",
      MeshNormalMaterial: "normal",
      MeshBasicMaterial: "basic",
      MeshLambertMaterial: "lambert",
      MeshPhongMaterial: "phong",
      MeshToonMaterial: "toon",
      MeshStandardMaterial: "physical",
      MeshPhysicalMaterial: "physical",
      MeshMatcapMaterial: "matcap",
      LineBasicMaterial: "basic",
      LineDashedMaterial: "dashed",
      PointsMaterial: "points",
      ShadowMaterial: "shadow",
      SpriteMaterial: "sprite"
    };
    function getChannel(value) {
      if (value === 0)
        return "uv";
      return `uv${value}`;
    }
    function getParameters(material, lights, shadows, scene, object) {
      const fog = scene.fog;
      const geometry = object.geometry;
      const environment = material.isMeshStandardMaterial ? scene.environment : null;
      const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
      const envMapCubeUVHeight = !!envMap && envMap.mapping === CubeUVReflectionMapping ? envMap.image.height : null;
      const shaderID = shaderIDs[material.type];
      if (material.precision !== null) {
        precision = capabilities.getMaxPrecision(material.precision);
        if (precision !== material.precision) {
          console.warn("THREE.WebGLProgram.getParameters:", material.precision, "not supported, using", precision, "instead.");
        }
      }
      const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
      const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
      let morphTextureStride = 0;
      if (geometry.morphAttributes.position !== void 0)
        morphTextureStride = 1;
      if (geometry.morphAttributes.normal !== void 0)
        morphTextureStride = 2;
      if (geometry.morphAttributes.color !== void 0)
        morphTextureStride = 3;
      let vertexShader, fragmentShader;
      let customVertexShaderID, customFragmentShaderID;
      if (shaderID) {
        const shader = ShaderLib[shaderID];
        vertexShader = shader.vertexShader;
        fragmentShader = shader.fragmentShader;
      } else {
        vertexShader = material.vertexShader;
        fragmentShader = material.fragmentShader;
        _customShaders.update(material);
        customVertexShaderID = _customShaders.getVertexShaderID(material);
        customFragmentShaderID = _customShaders.getFragmentShaderID(material);
      }
      const currentRenderTarget = renderer.getRenderTarget();
      const IS_INSTANCEDMESH = object.isInstancedMesh === true;
      const HAS_MAP = !!material.map;
      const HAS_MATCAP = !!material.matcap;
      const HAS_ENVMAP = !!envMap;
      const HAS_AOMAP = !!material.aoMap;
      const HAS_LIGHTMAP = !!material.lightMap;
      const HAS_BUMPMAP = !!material.bumpMap;
      const HAS_NORMALMAP = !!material.normalMap;
      const HAS_DISPLACEMENTMAP = !!material.displacementMap;
      const HAS_EMISSIVEMAP = !!material.emissiveMap;
      const HAS_METALNESSMAP = !!material.metalnessMap;
      const HAS_ROUGHNESSMAP = !!material.roughnessMap;
      const HAS_ANISOTROPY = material.anisotropy > 0;
      const HAS_CLEARCOAT = material.clearcoat > 0;
      const HAS_IRIDESCENCE = material.iridescence > 0;
      const HAS_SHEEN = material.sheen > 0;
      const HAS_TRANSMISSION = material.transmission > 0;
      const HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !!material.anisotropyMap;
      const HAS_CLEARCOATMAP = HAS_CLEARCOAT && !!material.clearcoatMap;
      const HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !!material.clearcoatNormalMap;
      const HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !!material.clearcoatRoughnessMap;
      const HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !!material.iridescenceMap;
      const HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !!material.iridescenceThicknessMap;
      const HAS_SHEEN_COLORMAP = HAS_SHEEN && !!material.sheenColorMap;
      const HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !!material.sheenRoughnessMap;
      const HAS_SPECULARMAP = !!material.specularMap;
      const HAS_SPECULAR_COLORMAP = !!material.specularColorMap;
      const HAS_SPECULAR_INTENSITYMAP = !!material.specularIntensityMap;
      const HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !!material.transmissionMap;
      const HAS_THICKNESSMAP = HAS_TRANSMISSION && !!material.thicknessMap;
      const HAS_GRADIENTMAP = !!material.gradientMap;
      const HAS_ALPHAMAP = !!material.alphaMap;
      const HAS_ALPHATEST = material.alphaTest > 0;
      const HAS_ALPHAHASH = !!material.alphaHash;
      const HAS_EXTENSIONS = !!material.extensions;
      const HAS_ATTRIBUTE_UV1 = !!geometry.attributes.uv1;
      const HAS_ATTRIBUTE_UV2 = !!geometry.attributes.uv2;
      const HAS_ATTRIBUTE_UV3 = !!geometry.attributes.uv3;
      const parameters = {
        isWebGL2: IS_WEBGL2,
        shaderID,
        shaderType: material.type,
        shaderName: material.name,
        vertexShader,
        fragmentShader,
        defines: material.defines,
        customVertexShaderID,
        customFragmentShaderID,
        isRawShaderMaterial: material.isRawShaderMaterial === true,
        glslVersion: material.glslVersion,
        precision,
        instancing: IS_INSTANCEDMESH,
        instancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,
        supportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,
        outputColorSpace: currentRenderTarget === null ? renderer.outputColorSpace : currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace,
        map: HAS_MAP,
        matcap: HAS_MATCAP,
        envMap: HAS_ENVMAP,
        envMapMode: HAS_ENVMAP && envMap.mapping,
        envMapCubeUVHeight,
        aoMap: HAS_AOMAP,
        lightMap: HAS_LIGHTMAP,
        bumpMap: HAS_BUMPMAP,
        normalMap: HAS_NORMALMAP,
        displacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,
        emissiveMap: HAS_EMISSIVEMAP,
        normalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === ObjectSpaceNormalMap,
        normalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === TangentSpaceNormalMap,
        metalnessMap: HAS_METALNESSMAP,
        roughnessMap: HAS_ROUGHNESSMAP,
        anisotropy: HAS_ANISOTROPY,
        anisotropyMap: HAS_ANISOTROPYMAP,
        clearcoat: HAS_CLEARCOAT,
        clearcoatMap: HAS_CLEARCOATMAP,
        clearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,
        clearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,
        iridescence: HAS_IRIDESCENCE,
        iridescenceMap: HAS_IRIDESCENCEMAP,
        iridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,
        sheen: HAS_SHEEN,
        sheenColorMap: HAS_SHEEN_COLORMAP,
        sheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,
        specularMap: HAS_SPECULARMAP,
        specularColorMap: HAS_SPECULAR_COLORMAP,
        specularIntensityMap: HAS_SPECULAR_INTENSITYMAP,
        transmission: HAS_TRANSMISSION,
        transmissionMap: HAS_TRANSMISSIONMAP,
        thicknessMap: HAS_THICKNESSMAP,
        gradientMap: HAS_GRADIENTMAP,
        opaque: material.transparent === false && material.blending === NormalBlending,
        alphaMap: HAS_ALPHAMAP,
        alphaTest: HAS_ALPHATEST,
        alphaHash: HAS_ALPHAHASH,
        combine: material.combine,
        //
        mapUv: HAS_MAP && getChannel(material.map.channel),
        aoMapUv: HAS_AOMAP && getChannel(material.aoMap.channel),
        lightMapUv: HAS_LIGHTMAP && getChannel(material.lightMap.channel),
        bumpMapUv: HAS_BUMPMAP && getChannel(material.bumpMap.channel),
        normalMapUv: HAS_NORMALMAP && getChannel(material.normalMap.channel),
        displacementMapUv: HAS_DISPLACEMENTMAP && getChannel(material.displacementMap.channel),
        emissiveMapUv: HAS_EMISSIVEMAP && getChannel(material.emissiveMap.channel),
        metalnessMapUv: HAS_METALNESSMAP && getChannel(material.metalnessMap.channel),
        roughnessMapUv: HAS_ROUGHNESSMAP && getChannel(material.roughnessMap.channel),
        anisotropyMapUv: HAS_ANISOTROPYMAP && getChannel(material.anisotropyMap.channel),
        clearcoatMapUv: HAS_CLEARCOATMAP && getChannel(material.clearcoatMap.channel),
        clearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel(material.clearcoatNormalMap.channel),
        clearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel(material.clearcoatRoughnessMap.channel),
        iridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel(material.iridescenceMap.channel),
        iridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel(material.iridescenceThicknessMap.channel),
        sheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel(material.sheenColorMap.channel),
        sheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel(material.sheenRoughnessMap.channel),
        specularMapUv: HAS_SPECULARMAP && getChannel(material.specularMap.channel),
        specularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel(material.specularColorMap.channel),
        specularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel(material.specularIntensityMap.channel),
        transmissionMapUv: HAS_TRANSMISSIONMAP && getChannel(material.transmissionMap.channel),
        thicknessMapUv: HAS_THICKNESSMAP && getChannel(material.thicknessMap.channel),
        alphaMapUv: HAS_ALPHAMAP && getChannel(material.alphaMap.channel),
        //
        vertexTangents: !!geometry.attributes.tangent && (HAS_NORMALMAP || HAS_ANISOTROPY),
        vertexColors: material.vertexColors,
        vertexAlphas: material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4,
        vertexUv1s: HAS_ATTRIBUTE_UV1,
        vertexUv2s: HAS_ATTRIBUTE_UV2,
        vertexUv3s: HAS_ATTRIBUTE_UV3,
        pointsUvs: object.isPoints === true && !!geometry.attributes.uv && (HAS_MAP || HAS_ALPHAMAP),
        fog: !!fog,
        useFog: material.fog === true,
        fogExp2: fog && fog.isFogExp2,
        flatShading: material.flatShading === true,
        sizeAttenuation: material.sizeAttenuation === true,
        logarithmicDepthBuffer,
        skinning: object.isSkinnedMesh === true,
        morphTargets: geometry.morphAttributes.position !== void 0,
        morphNormals: geometry.morphAttributes.normal !== void 0,
        morphColors: geometry.morphAttributes.color !== void 0,
        morphTargetsCount,
        morphTextureStride,
        numDirLights: lights.directional.length,
        numPointLights: lights.point.length,
        numSpotLights: lights.spot.length,
        numSpotLightMaps: lights.spotLightMap.length,
        numRectAreaLights: lights.rectArea.length,
        numHemiLights: lights.hemi.length,
        numDirLightShadows: lights.directionalShadowMap.length,
        numPointLightShadows: lights.pointShadowMap.length,
        numSpotLightShadows: lights.spotShadowMap.length,
        numSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,
        numClippingPlanes: clipping.numPlanes,
        numClipIntersection: clipping.numIntersection,
        dithering: material.dithering,
        shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
        shadowMapType: renderer.shadowMap.type,
        toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
        useLegacyLights: renderer.useLegacyLights,
        premultipliedAlpha: material.premultipliedAlpha,
        doubleSided: material.side === DoubleSide,
        flipSided: material.side === BackSide,
        useDepthPacking: material.depthPacking >= 0,
        depthPacking: material.depthPacking || 0,
        index0AttributeName: material.index0AttributeName,
        extensionDerivatives: HAS_EXTENSIONS && material.extensions.derivatives === true,
        extensionFragDepth: HAS_EXTENSIONS && material.extensions.fragDepth === true,
        extensionDrawBuffers: HAS_EXTENSIONS && material.extensions.drawBuffers === true,
        extensionShaderTextureLOD: HAS_EXTENSIONS && material.extensions.shaderTextureLOD === true,
        rendererExtensionFragDepth: IS_WEBGL2 || extensions.has("EXT_frag_depth"),
        rendererExtensionDrawBuffers: IS_WEBGL2 || extensions.has("WEBGL_draw_buffers"),
        rendererExtensionShaderTextureLod: IS_WEBGL2 || extensions.has("EXT_shader_texture_lod"),
        customProgramCacheKey: material.customProgramCacheKey()
      };
      return parameters;
    }
    function getProgramCacheKey(parameters) {
      const array = [];
      if (parameters.shaderID) {
        array.push(parameters.shaderID);
      } else {
        array.push(parameters.customVertexShaderID);
        array.push(parameters.customFragmentShaderID);
      }
      if (parameters.defines !== void 0) {
        for (const name in parameters.defines) {
          array.push(name);
          array.push(parameters.defines[name]);
        }
      }
      if (parameters.isRawShaderMaterial === false) {
        getProgramCacheKeyParameters(array, parameters);
        getProgramCacheKeyBooleans(array, parameters);
        array.push(renderer.outputColorSpace);
      }
      array.push(parameters.customProgramCacheKey);
      return array.join();
    }
    function getProgramCacheKeyParameters(array, parameters) {
      array.push(parameters.precision);
      array.push(parameters.outputColorSpace);
      array.push(parameters.envMapMode);
      array.push(parameters.envMapCubeUVHeight);
      array.push(parameters.mapUv);
      array.push(parameters.alphaMapUv);
      array.push(parameters.lightMapUv);
      array.push(parameters.aoMapUv);
      array.push(parameters.bumpMapUv);
      array.push(parameters.normalMapUv);
      array.push(parameters.displacementMapUv);
      array.push(parameters.emissiveMapUv);
      array.push(parameters.metalnessMapUv);
      array.push(parameters.roughnessMapUv);
      array.push(parameters.anisotropyMapUv);
      array.push(parameters.clearcoatMapUv);
      array.push(parameters.clearcoatNormalMapUv);
      array.push(parameters.clearcoatRoughnessMapUv);
      array.push(parameters.iridescenceMapUv);
      array.push(parameters.iridescenceThicknessMapUv);
      array.push(parameters.sheenColorMapUv);
      array.push(parameters.sheenRoughnessMapUv);
      array.push(parameters.specularMapUv);
      array.push(parameters.specularColorMapUv);
      array.push(parameters.specularIntensityMapUv);
      array.push(parameters.transmissionMapUv);
      array.push(parameters.thicknessMapUv);
      array.push(parameters.combine);
      array.push(parameters.fogExp2);
      array.push(parameters.sizeAttenuation);
      array.push(parameters.morphTargetsCount);
      array.push(parameters.morphAttributeCount);
      array.push(parameters.numDirLights);
      array.push(parameters.numPointLights);
      array.push(parameters.numSpotLights);
      array.push(parameters.numSpotLightMaps);
      array.push(parameters.numHemiLights);
      array.push(parameters.numRectAreaLights);
      array.push(parameters.numDirLightShadows);
      array.push(parameters.numPointLightShadows);
      array.push(parameters.numSpotLightShadows);
      array.push(parameters.numSpotLightShadowsWithMaps);
      array.push(parameters.shadowMapType);
      array.push(parameters.toneMapping);
      array.push(parameters.numClippingPlanes);
      array.push(parameters.numClipIntersection);
      array.push(parameters.depthPacking);
    }
    function getProgramCacheKeyBooleans(array, parameters) {
      _programLayers.disableAll();
      if (parameters.isWebGL2)
        _programLayers.enable(0);
      if (parameters.supportsVertexTextures)
        _programLayers.enable(1);
      if (parameters.instancing)
        _programLayers.enable(2);
      if (parameters.instancingColor)
        _programLayers.enable(3);
      if (parameters.matcap)
        _programLayers.enable(4);
      if (parameters.envMap)
        _programLayers.enable(5);
      if (parameters.normalMapObjectSpace)
        _programLayers.enable(6);
      if (parameters.normalMapTangentSpace)
        _programLayers.enable(7);
      if (parameters.clearcoat)
        _programLayers.enable(8);
      if (parameters.iridescence)
        _programLayers.enable(9);
      if (parameters.alphaTest)
        _programLayers.enable(10);
      if (parameters.vertexColors)
        _programLayers.enable(11);
      if (parameters.vertexAlphas)
        _programLayers.enable(12);
      if (parameters.vertexUv1s)
        _programLayers.enable(13);
      if (parameters.vertexUv2s)
        _programLayers.enable(14);
      if (parameters.vertexUv3s)
        _programLayers.enable(15);
      if (parameters.vertexTangents)
        _programLayers.enable(16);
      if (parameters.anisotropy)
        _programLayers.enable(17);
      array.push(_programLayers.mask);
      _programLayers.disableAll();
      if (parameters.fog)
        _programLayers.enable(0);
      if (parameters.useFog)
        _programLayers.enable(1);
      if (parameters.flatShading)
        _programLayers.enable(2);
      if (parameters.logarithmicDepthBuffer)
        _programLayers.enable(3);
      if (parameters.skinning)
        _programLayers.enable(4);
      if (parameters.morphTargets)
        _programLayers.enable(5);
      if (parameters.morphNormals)
        _programLayers.enable(6);
      if (parameters.morphColors)
        _programLayers.enable(7);
      if (parameters.premultipliedAlpha)
        _programLayers.enable(8);
      if (parameters.shadowMapEnabled)
        _programLayers.enable(9);
      if (parameters.useLegacyLights)
        _programLayers.enable(10);
      if (parameters.doubleSided)
        _programLayers.enable(11);
      if (parameters.flipSided)
        _programLayers.enable(12);
      if (parameters.useDepthPacking)
        _programLayers.enable(13);
      if (parameters.dithering)
        _programLayers.enable(14);
      if (parameters.transmission)
        _programLayers.enable(15);
      if (parameters.sheen)
        _programLayers.enable(16);
      if (parameters.opaque)
        _programLayers.enable(17);
      if (parameters.pointsUvs)
        _programLayers.enable(18);
      array.push(_programLayers.mask);
    }
    function getUniforms(material) {
      const shaderID = shaderIDs[material.type];
      let uniforms;
      if (shaderID) {
        const shader = ShaderLib[shaderID];
        uniforms = UniformsUtils.clone(shader.uniforms);
      } else {
        uniforms = material.uniforms;
      }
      return uniforms;
    }
    function acquireProgram(parameters, cacheKey) {
      let program;
      for (let p = 0, pl = programs.length; p < pl; p++) {
        const preexistingProgram = programs[p];
        if (preexistingProgram.cacheKey === cacheKey) {
          program = preexistingProgram;
          ++program.usedTimes;
          break;
        }
      }
      if (program === void 0) {
        program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);
        programs.push(program);
      }
      return program;
    }
    function releaseProgram(program) {
      if (--program.usedTimes === 0) {
        const i = programs.indexOf(program);
        programs[i] = programs[programs.length - 1];
        programs.pop();
        program.destroy();
      }
    }
    function releaseShaderCache(material) {
      _customShaders.remove(material);
    }
    function dispose() {
      _customShaders.dispose();
    }
    return {
      getParameters,
      getProgramCacheKey,
      getUniforms,
      acquireProgram,
      releaseProgram,
      releaseShaderCache,
      // Exposed for resource monitoring & error feedback via renderer.info:
      programs,
      dispose
    };
  }
  function WebGLProperties() {
    let properties = /* @__PURE__ */ new WeakMap();
    function get(object) {
      let map = properties.get(object);
      if (map === void 0) {
        map = {};
        properties.set(object, map);
      }
      return map;
    }
    function remove(object) {
      properties.delete(object);
    }
    function update(object, key, value) {
      properties.get(object)[key] = value;
    }
    function dispose() {
      properties = /* @__PURE__ */ new WeakMap();
    }
    return {
      get,
      remove,
      update,
      dispose
    };
  }
  function painterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) {
      return a.groupOrder - b.groupOrder;
    } else if (a.renderOrder !== b.renderOrder) {
      return a.renderOrder - b.renderOrder;
    } else if (a.material.id !== b.material.id) {
      return a.material.id - b.material.id;
    } else if (a.z !== b.z) {
      return a.z - b.z;
    } else {
      return a.id - b.id;
    }
  }
  function reversePainterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) {
      return a.groupOrder - b.groupOrder;
    } else if (a.renderOrder !== b.renderOrder) {
      return a.renderOrder - b.renderOrder;
    } else if (a.z !== b.z) {
      return b.z - a.z;
    } else {
      return a.id - b.id;
    }
  }
  function WebGLRenderList() {
    const renderItems = [];
    let renderItemsIndex = 0;
    const opaque = [];
    const transmissive = [];
    const transparent = [];
    function init() {
      renderItemsIndex = 0;
      opaque.length = 0;
      transmissive.length = 0;
      transparent.length = 0;
    }
    function getNextRenderItem(object, geometry, material, groupOrder, z2, group) {
      let renderItem = renderItems[renderItemsIndex];
      if (renderItem === void 0) {
        renderItem = {
          id: object.id,
          object,
          geometry,
          material,
          groupOrder,
          renderOrder: object.renderOrder,
          z: z2,
          group
        };
        renderItems[renderItemsIndex] = renderItem;
      } else {
        renderItem.id = object.id;
        renderItem.object = object;
        renderItem.geometry = geometry;
        renderItem.material = material;
        renderItem.groupOrder = groupOrder;
        renderItem.renderOrder = object.renderOrder;
        renderItem.z = z2;
        renderItem.group = group;
      }
      renderItemsIndex++;
      return renderItem;
    }
    function push(object, geometry, material, groupOrder, z2, group) {
      const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z2, group);
      if (material.transmission > 0) {
        transmissive.push(renderItem);
      } else if (material.transparent === true) {
        transparent.push(renderItem);
      } else {
        opaque.push(renderItem);
      }
    }
    function unshift(object, geometry, material, groupOrder, z2, group) {
      const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z2, group);
      if (material.transmission > 0) {
        transmissive.unshift(renderItem);
      } else if (material.transparent === true) {
        transparent.unshift(renderItem);
      } else {
        opaque.unshift(renderItem);
      }
    }
    function sort(customOpaqueSort, customTransparentSort) {
      if (opaque.length > 1)
        opaque.sort(customOpaqueSort || painterSortStable);
      if (transmissive.length > 1)
        transmissive.sort(customTransparentSort || reversePainterSortStable);
      if (transparent.length > 1)
        transparent.sort(customTransparentSort || reversePainterSortStable);
    }
    function finish() {
      for (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {
        const renderItem = renderItems[i];
        if (renderItem.id === null)
          break;
        renderItem.id = null;
        renderItem.object = null;
        renderItem.geometry = null;
        renderItem.material = null;
        renderItem.group = null;
      }
    }
    return {
      opaque,
      transmissive,
      transparent,
      init,
      push,
      unshift,
      finish,
      sort
    };
  }
  function WebGLRenderLists() {
    let lists = /* @__PURE__ */ new WeakMap();
    function get(scene, renderCallDepth) {
      const listArray = lists.get(scene);
      let list;
      if (listArray === void 0) {
        list = new WebGLRenderList();
        lists.set(scene, [list]);
      } else {
        if (renderCallDepth >= listArray.length) {
          list = new WebGLRenderList();
          listArray.push(list);
        } else {
          list = listArray[renderCallDepth];
        }
      }
      return list;
    }
    function dispose() {
      lists = /* @__PURE__ */ new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  function UniformsCache() {
    const lights = {};
    return {
      get: function(light) {
        if (lights[light.id] !== void 0) {
          return lights[light.id];
        }
        let uniforms;
        switch (light.type) {
          case "DirectionalLight":
            uniforms = {
              direction: new Vector3(),
              color: new Color()
            };
            break;
          case "SpotLight":
            uniforms = {
              position: new Vector3(),
              direction: new Vector3(),
              color: new Color(),
              distance: 0,
              coneCos: 0,
              penumbraCos: 0,
              decay: 0
            };
            break;
          case "PointLight":
            uniforms = {
              position: new Vector3(),
              color: new Color(),
              distance: 0,
              decay: 0
            };
            break;
          case "HemisphereLight":
            uniforms = {
              direction: new Vector3(),
              skyColor: new Color(),
              groundColor: new Color()
            };
            break;
          case "RectAreaLight":
            uniforms = {
              color: new Color(),
              position: new Vector3(),
              halfWidth: new Vector3(),
              halfHeight: new Vector3()
            };
            break;
        }
        lights[light.id] = uniforms;
        return uniforms;
      }
    };
  }
  function ShadowUniformsCache() {
    const lights = {};
    return {
      get: function(light) {
        if (lights[light.id] !== void 0) {
          return lights[light.id];
        }
        let uniforms;
        switch (light.type) {
          case "DirectionalLight":
            uniforms = {
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2()
            };
            break;
          case "SpotLight":
            uniforms = {
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2()
            };
            break;
          case "PointLight":
            uniforms = {
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new Vector2(),
              shadowCameraNear: 1,
              shadowCameraFar: 1e3
            };
            break;
        }
        lights[light.id] = uniforms;
        return uniforms;
      }
    };
  }
  var nextVersion = 0;
  function shadowCastingAndTexturingLightsFirst(lightA, lightB) {
    return (lightB.castShadow ? 2 : 0) - (lightA.castShadow ? 2 : 0) + (lightB.map ? 1 : 0) - (lightA.map ? 1 : 0);
  }
  function WebGLLights(extensions, capabilities) {
    const cache = new UniformsCache();
    const shadowCache = ShadowUniformsCache();
    const state = {
      version: 0,
      hash: {
        directionalLength: -1,
        pointLength: -1,
        spotLength: -1,
        rectAreaLength: -1,
        hemiLength: -1,
        numDirectionalShadows: -1,
        numPointShadows: -1,
        numSpotShadows: -1,
        numSpotMaps: -1
      },
      ambient: [0, 0, 0],
      probe: [],
      directional: [],
      directionalShadow: [],
      directionalShadowMap: [],
      directionalShadowMatrix: [],
      spot: [],
      spotLightMap: [],
      spotShadow: [],
      spotShadowMap: [],
      spotLightMatrix: [],
      rectArea: [],
      rectAreaLTC1: null,
      rectAreaLTC2: null,
      point: [],
      pointShadow: [],
      pointShadowMap: [],
      pointShadowMatrix: [],
      hemi: [],
      numSpotLightShadowsWithMaps: 0
    };
    for (let i = 0; i < 9; i++)
      state.probe.push(new Vector3());
    const vector3 = new Vector3();
    const matrix4 = new Matrix4();
    const matrix42 = new Matrix4();
    function setup(lights, useLegacyLights) {
      let r = 0, g = 0, b = 0;
      for (let i = 0; i < 9; i++)
        state.probe[i].set(0, 0, 0);
      let directionalLength = 0;
      let pointLength = 0;
      let spotLength = 0;
      let rectAreaLength = 0;
      let hemiLength = 0;
      let numDirectionalShadows = 0;
      let numPointShadows = 0;
      let numSpotShadows = 0;
      let numSpotMaps = 0;
      let numSpotShadowsWithMaps = 0;
      lights.sort(shadowCastingAndTexturingLightsFirst);
      const scaleFactor = useLegacyLights === true ? Math.PI : 1;
      for (let i = 0, l = lights.length; i < l; i++) {
        const light = lights[i];
        const color = light.color;
        const intensity = light.intensity;
        const distance = light.distance;
        const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
        if (light.isAmbientLight) {
          r += color.r * intensity * scaleFactor;
          g += color.g * intensity * scaleFactor;
          b += color.b * intensity * scaleFactor;
        } else if (light.isLightProbe) {
          for (let j = 0; j < 9; j++) {
            state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);
          }
        } else if (light.isDirectionalLight) {
          const uniforms = cache.get(light);
          uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
          if (light.castShadow) {
            const shadow = light.shadow;
            const shadowUniforms = shadowCache.get(light);
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            state.directionalShadow[directionalLength] = shadowUniforms;
            state.directionalShadowMap[directionalLength] = shadowMap;
            state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
            numDirectionalShadows++;
          }
          state.directional[directionalLength] = uniforms;
          directionalLength++;
        } else if (light.isSpotLight) {
          const uniforms = cache.get(light);
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.color.copy(color).multiplyScalar(intensity * scaleFactor);
          uniforms.distance = distance;
          uniforms.coneCos = Math.cos(light.angle);
          uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
          uniforms.decay = light.decay;
          state.spot[spotLength] = uniforms;
          const shadow = light.shadow;
          if (light.map) {
            state.spotLightMap[numSpotMaps] = light.map;
            numSpotMaps++;
            shadow.updateMatrices(light);
            if (light.castShadow)
              numSpotShadowsWithMaps++;
          }
          state.spotLightMatrix[spotLength] = shadow.matrix;
          if (light.castShadow) {
            const shadowUniforms = shadowCache.get(light);
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            state.spotShadow[spotLength] = shadowUniforms;
            state.spotShadowMap[spotLength] = shadowMap;
            numSpotShadows++;
          }
          spotLength++;
        } else if (light.isRectAreaLight) {
          const uniforms = cache.get(light);
          uniforms.color.copy(color).multiplyScalar(intensity);
          uniforms.halfWidth.set(light.width * 0.5, 0, 0);
          uniforms.halfHeight.set(0, light.height * 0.5, 0);
          state.rectArea[rectAreaLength] = uniforms;
          rectAreaLength++;
        } else if (light.isPointLight) {
          const uniforms = cache.get(light);
          uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
          uniforms.distance = light.distance;
          uniforms.decay = light.decay;
          if (light.castShadow) {
            const shadow = light.shadow;
            const shadowUniforms = shadowCache.get(light);
            shadowUniforms.shadowBias = shadow.bias;
            shadowUniforms.shadowNormalBias = shadow.normalBias;
            shadowUniforms.shadowRadius = shadow.radius;
            shadowUniforms.shadowMapSize = shadow.mapSize;
            shadowUniforms.shadowCameraNear = shadow.camera.near;
            shadowUniforms.shadowCameraFar = shadow.camera.far;
            state.pointShadow[pointLength] = shadowUniforms;
            state.pointShadowMap[pointLength] = shadowMap;
            state.pointShadowMatrix[pointLength] = light.shadow.matrix;
            numPointShadows++;
          }
          state.point[pointLength] = uniforms;
          pointLength++;
        } else if (light.isHemisphereLight) {
          const uniforms = cache.get(light);
          uniforms.skyColor.copy(light.color).multiplyScalar(intensity * scaleFactor);
          uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity * scaleFactor);
          state.hemi[hemiLength] = uniforms;
          hemiLength++;
        }
      }
      if (rectAreaLength > 0) {
        if (capabilities.isWebGL2) {
          state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
          state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
        } else {
          if (extensions.has("OES_texture_float_linear") === true) {
            state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
            state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
          } else if (extensions.has("OES_texture_half_float_linear") === true) {
            state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
            state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
          } else {
            console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.");
          }
        }
      }
      state.ambient[0] = r;
      state.ambient[1] = g;
      state.ambient[2] = b;
      const hash = state.hash;
      if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows || hash.numSpotMaps !== numSpotMaps) {
        state.directional.length = directionalLength;
        state.spot.length = spotLength;
        state.rectArea.length = rectAreaLength;
        state.point.length = pointLength;
        state.hemi.length = hemiLength;
        state.directionalShadow.length = numDirectionalShadows;
        state.directionalShadowMap.length = numDirectionalShadows;
        state.pointShadow.length = numPointShadows;
        state.pointShadowMap.length = numPointShadows;
        state.spotShadow.length = numSpotShadows;
        state.spotShadowMap.length = numSpotShadows;
        state.directionalShadowMatrix.length = numDirectionalShadows;
        state.pointShadowMatrix.length = numPointShadows;
        state.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;
        state.spotLightMap.length = numSpotMaps;
        state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;
        hash.directionalLength = directionalLength;
        hash.pointLength = pointLength;
        hash.spotLength = spotLength;
        hash.rectAreaLength = rectAreaLength;
        hash.hemiLength = hemiLength;
        hash.numDirectionalShadows = numDirectionalShadows;
        hash.numPointShadows = numPointShadows;
        hash.numSpotShadows = numSpotShadows;
        hash.numSpotMaps = numSpotMaps;
        state.version = nextVersion++;
      }
    }
    function setupView(lights, camera) {
      let directionalLength = 0;
      let pointLength = 0;
      let spotLength = 0;
      let rectAreaLength = 0;
      let hemiLength = 0;
      const viewMatrix = camera.matrixWorldInverse;
      for (let i = 0, l = lights.length; i < l; i++) {
        const light = lights[i];
        if (light.isDirectionalLight) {
          const uniforms = state.directional[directionalLength];
          uniforms.direction.setFromMatrixPosition(light.matrixWorld);
          vector3.setFromMatrixPosition(light.target.matrixWorld);
          uniforms.direction.sub(vector3);
          uniforms.direction.transformDirection(viewMatrix);
          directionalLength++;
        } else if (light.isSpotLight) {
          const uniforms = state.spot[spotLength];
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          uniforms.direction.setFromMatrixPosition(light.matrixWorld);
          vector3.setFromMatrixPosition(light.target.matrixWorld);
          uniforms.direction.sub(vector3);
          uniforms.direction.transformDirection(viewMatrix);
          spotLength++;
        } else if (light.isRectAreaLight) {
          const uniforms = state.rectArea[rectAreaLength];
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          matrix42.identity();
          matrix4.copy(light.matrixWorld);
          matrix4.premultiply(viewMatrix);
          matrix42.extractRotation(matrix4);
          uniforms.halfWidth.set(light.width * 0.5, 0, 0);
          uniforms.halfHeight.set(0, light.height * 0.5, 0);
          uniforms.halfWidth.applyMatrix4(matrix42);
          uniforms.halfHeight.applyMatrix4(matrix42);
          rectAreaLength++;
        } else if (light.isPointLight) {
          const uniforms = state.point[pointLength];
          uniforms.position.setFromMatrixPosition(light.matrixWorld);
          uniforms.position.applyMatrix4(viewMatrix);
          pointLength++;
        } else if (light.isHemisphereLight) {
          const uniforms = state.hemi[hemiLength];
          uniforms.direction.setFromMatrixPosition(light.matrixWorld);
          uniforms.direction.transformDirection(viewMatrix);
          hemiLength++;
        }
      }
    }
    return {
      setup,
      setupView,
      state
    };
  }
  function WebGLRenderState(extensions, capabilities) {
    const lights = new WebGLLights(extensions, capabilities);
    const lightsArray = [];
    const shadowsArray = [];
    function init() {
      lightsArray.length = 0;
      shadowsArray.length = 0;
    }
    function pushLight(light) {
      lightsArray.push(light);
    }
    function pushShadow(shadowLight) {
      shadowsArray.push(shadowLight);
    }
    function setupLights(useLegacyLights) {
      lights.setup(lightsArray, useLegacyLights);
    }
    function setupLightsView(camera) {
      lights.setupView(lightsArray, camera);
    }
    const state = {
      lightsArray,
      shadowsArray,
      lights
    };
    return {
      init,
      state,
      setupLights,
      setupLightsView,
      pushLight,
      pushShadow
    };
  }
  function WebGLRenderStates(extensions, capabilities) {
    let renderStates = /* @__PURE__ */ new WeakMap();
    function get(scene, renderCallDepth = 0) {
      const renderStateArray = renderStates.get(scene);
      let renderState;
      if (renderStateArray === void 0) {
        renderState = new WebGLRenderState(extensions, capabilities);
        renderStates.set(scene, [renderState]);
      } else {
        if (renderCallDepth >= renderStateArray.length) {
          renderState = new WebGLRenderState(extensions, capabilities);
          renderStateArray.push(renderState);
        } else {
          renderState = renderStateArray[renderCallDepth];
        }
      }
      return renderState;
    }
    function dispose() {
      renderStates = /* @__PURE__ */ new WeakMap();
    }
    return {
      get,
      dispose
    };
  }
  var MeshDepthMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.isMeshDepthMaterial = true;
      this.type = "MeshDepthMaterial";
      this.depthPacking = BasicDepthPacking;
      this.map = null;
      this.alphaMap = null;
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.wireframe = false;
      this.wireframeLinewidth = 1;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.depthPacking = source.depthPacking;
      this.map = source.map;
      this.alphaMap = source.alphaMap;
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      this.wireframe = source.wireframe;
      this.wireframeLinewidth = source.wireframeLinewidth;
      return this;
    }
  };
  var MeshDistanceMaterial = class extends Material {
    constructor(parameters) {
      super();
      this.isMeshDistanceMaterial = true;
      this.type = "MeshDistanceMaterial";
      this.map = null;
      this.alphaMap = null;
      this.displacementMap = null;
      this.displacementScale = 1;
      this.displacementBias = 0;
      this.setValues(parameters);
    }
    copy(source) {
      super.copy(source);
      this.map = source.map;
      this.alphaMap = source.alphaMap;
      this.displacementMap = source.displacementMap;
      this.displacementScale = source.displacementScale;
      this.displacementBias = source.displacementBias;
      return this;
    }
  };
  var vertex = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
  var fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
  function WebGLShadowMap(_renderer, _objects, _capabilities) {
    let _frustum = new Frustum();
    const _shadowMapSize = new Vector2(), _viewportSize = new Vector2(), _viewport = new Vector4(), _depthMaterial = new MeshDepthMaterial({ depthPacking: RGBADepthPacking }), _distanceMaterial = new MeshDistanceMaterial(), _materialCache = {}, _maxTextureSize = _capabilities.maxTextureSize;
    const shadowSide = { [FrontSide]: BackSide, [BackSide]: FrontSide, [DoubleSide]: DoubleSide };
    const shadowMaterialVertical = new ShaderMaterial({
      defines: {
        VSM_SAMPLES: 8
      },
      uniforms: {
        shadow_pass: { value: null },
        resolution: { value: new Vector2() },
        radius: { value: 4 }
      },
      vertexShader: vertex,
      fragmentShader: fragment
    });
    const shadowMaterialHorizontal = shadowMaterialVertical.clone();
    shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
    const fullScreenTri = new BufferGeometry();
    fullScreenTri.setAttribute(
      "position",
      new BufferAttribute(
        new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
        3
      )
    );
    const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);
    const scope = this;
    this.enabled = false;
    this.autoUpdate = true;
    this.needsUpdate = false;
    this.type = PCFShadowMap;
    let _previousType = this.type;
    this.render = function(lights, scene, camera) {
      if (scope.enabled === false)
        return;
      if (scope.autoUpdate === false && scope.needsUpdate === false)
        return;
      if (lights.length === 0)
        return;
      const currentRenderTarget = _renderer.getRenderTarget();
      const activeCubeFace = _renderer.getActiveCubeFace();
      const activeMipmapLevel = _renderer.getActiveMipmapLevel();
      const _state = _renderer.state;
      _state.setBlending(NoBlending);
      _state.buffers.color.setClear(1, 1, 1, 1);
      _state.buffers.depth.setTest(true);
      _state.setScissorTest(false);
      const toVSM = _previousType !== VSMShadowMap && this.type === VSMShadowMap;
      const fromVSM = _previousType === VSMShadowMap && this.type !== VSMShadowMap;
      for (let i = 0, il = lights.length; i < il; i++) {
        const light = lights[i];
        const shadow = light.shadow;
        if (shadow === void 0) {
          console.warn("THREE.WebGLShadowMap:", light, "has no shadow.");
          continue;
        }
        if (shadow.autoUpdate === false && shadow.needsUpdate === false)
          continue;
        _shadowMapSize.copy(shadow.mapSize);
        const shadowFrameExtents = shadow.getFrameExtents();
        _shadowMapSize.multiply(shadowFrameExtents);
        _viewportSize.copy(shadow.mapSize);
        if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
          if (_shadowMapSize.x > _maxTextureSize) {
            _viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
            _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
            shadow.mapSize.x = _viewportSize.x;
          }
          if (_shadowMapSize.y > _maxTextureSize) {
            _viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
            _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
            shadow.mapSize.y = _viewportSize.y;
          }
        }
        if (shadow.map === null || toVSM === true || fromVSM === true) {
          const pars = this.type !== VSMShadowMap ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};
          if (shadow.map !== null) {
            shadow.map.dispose();
          }
          shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
          shadow.map.texture.name = light.name + ".shadowMap";
          shadow.camera.updateProjectionMatrix();
        }
        _renderer.setRenderTarget(shadow.map);
        _renderer.clear();
        const viewportCount = shadow.getViewportCount();
        for (let vp = 0; vp < viewportCount; vp++) {
          const viewport = shadow.getViewport(vp);
          _viewport.set(
            _viewportSize.x * viewport.x,
            _viewportSize.y * viewport.y,
            _viewportSize.x * viewport.z,
            _viewportSize.y * viewport.w
          );
          _state.viewport(_viewport);
          shadow.updateMatrices(light, vp);
          _frustum = shadow.getFrustum();
          renderObject(scene, camera, shadow.camera, light, this.type);
        }
        if (shadow.isPointLightShadow !== true && this.type === VSMShadowMap) {
          VSMPass(shadow, camera);
        }
        shadow.needsUpdate = false;
      }
      _previousType = this.type;
      scope.needsUpdate = false;
      _renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
    };
    function VSMPass(shadow, camera) {
      const geometry = _objects.update(fullScreenMesh);
      if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {
        shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
        shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
        shadowMaterialVertical.needsUpdate = true;
        shadowMaterialHorizontal.needsUpdate = true;
      }
      if (shadow.mapPass === null) {
        shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y);
      }
      shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
      shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
      shadowMaterialVertical.uniforms.radius.value = shadow.radius;
      _renderer.setRenderTarget(shadow.mapPass);
      _renderer.clear();
      _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
      shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
      shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
      shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
      _renderer.setRenderTarget(shadow.map);
      _renderer.clear();
      _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
    }
    function getDepthMaterial(object, material, light, type) {
      let result = null;
      const customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;
      if (customMaterial !== void 0) {
        result = customMaterial;
      } else {
        result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;
        if (_renderer.localClippingEnabled && material.clipShadows === true && Array.isArray(material.clippingPlanes) && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0 || material.map && material.alphaTest > 0) {
          const keyA = result.uuid, keyB = material.uuid;
          let materialsForVariant = _materialCache[keyA];
          if (materialsForVariant === void 0) {
            materialsForVariant = {};
            _materialCache[keyA] = materialsForVariant;
          }
          let cachedMaterial = materialsForVariant[keyB];
          if (cachedMaterial === void 0) {
            cachedMaterial = result.clone();
            materialsForVariant[keyB] = cachedMaterial;
          }
          result = cachedMaterial;
        }
      }
      result.visible = material.visible;
      result.wireframe = material.wireframe;
      if (type === VSMShadowMap) {
        result.side = material.shadowSide !== null ? material.shadowSide : material.side;
      } else {
        result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
      }
      result.alphaMap = material.alphaMap;
      result.alphaTest = material.alphaTest;
      result.map = material.map;
      result.clipShadows = material.clipShadows;
      result.clippingPlanes = material.clippingPlanes;
      result.clipIntersection = material.clipIntersection;
      result.displacementMap = material.displacementMap;
      result.displacementScale = material.displacementScale;
      result.displacementBias = material.displacementBias;
      result.wireframeLinewidth = material.wireframeLinewidth;
      result.linewidth = material.linewidth;
      if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
        const materialProperties = _renderer.properties.get(result);
        materialProperties.light = light;
      }
      return result;
    }
    function renderObject(object, camera, shadowCamera, light, type) {
      if (object.visible === false)
        return;
      const visible = object.layers.test(camera.layers);
      if (visible && (object.isMesh || object.isLine || object.isPoints)) {
        if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
          object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
          const geometry = _objects.update(object);
          const material = object.material;
          if (Array.isArray(material)) {
            const groups = geometry.groups;
            for (let k = 0, kl = groups.length; k < kl; k++) {
              const group = groups[k];
              const groupMaterial = material[group.materialIndex];
              if (groupMaterial && groupMaterial.visible) {
                const depthMaterial = getDepthMaterial(object, groupMaterial, light, type);
                _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
              }
            }
          } else if (material.visible) {
            const depthMaterial = getDepthMaterial(object, material, light, type);
            _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
          }
        }
      }
      const children = object.children;
      for (let i = 0, l = children.length; i < l; i++) {
        renderObject(children[i], camera, shadowCamera, light, type);
      }
    }
  }
  function WebGLState(gl, extensions, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    function ColorBuffer() {
      let locked = false;
      const color = new Vector4();
      let currentColorMask = null;
      const currentColorClear = new Vector4(0, 0, 0, 0);
      return {
        setMask: function(colorMask) {
          if (currentColorMask !== colorMask && !locked) {
            gl.colorMask(colorMask, colorMask, colorMask, colorMask);
            currentColorMask = colorMask;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(r, g, b, a, premultipliedAlpha) {
          if (premultipliedAlpha === true) {
            r *= a;
            g *= a;
            b *= a;
          }
          color.set(r, g, b, a);
          if (currentColorClear.equals(color) === false) {
            gl.clearColor(r, g, b, a);
            currentColorClear.copy(color);
          }
        },
        reset: function() {
          locked = false;
          currentColorMask = null;
          currentColorClear.set(-1, 0, 0, 0);
        }
      };
    }
    function DepthBuffer() {
      let locked = false;
      let currentDepthMask = null;
      let currentDepthFunc = null;
      let currentDepthClear = null;
      return {
        setTest: function(depthTest) {
          if (depthTest) {
            enable(gl.DEPTH_TEST);
          } else {
            disable(gl.DEPTH_TEST);
          }
        },
        setMask: function(depthMask) {
          if (currentDepthMask !== depthMask && !locked) {
            gl.depthMask(depthMask);
            currentDepthMask = depthMask;
          }
        },
        setFunc: function(depthFunc) {
          if (currentDepthFunc !== depthFunc) {
            switch (depthFunc) {
              case NeverDepth:
                gl.depthFunc(gl.NEVER);
                break;
              case AlwaysDepth:
                gl.depthFunc(gl.ALWAYS);
                break;
              case LessDepth:
                gl.depthFunc(gl.LESS);
                break;
              case LessEqualDepth:
                gl.depthFunc(gl.LEQUAL);
                break;
              case EqualDepth:
                gl.depthFunc(gl.EQUAL);
                break;
              case GreaterEqualDepth:
                gl.depthFunc(gl.GEQUAL);
                break;
              case GreaterDepth:
                gl.depthFunc(gl.GREATER);
                break;
              case NotEqualDepth:
                gl.depthFunc(gl.NOTEQUAL);
                break;
              default:
                gl.depthFunc(gl.LEQUAL);
            }
            currentDepthFunc = depthFunc;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(depth) {
          if (currentDepthClear !== depth) {
            gl.clearDepth(depth);
            currentDepthClear = depth;
          }
        },
        reset: function() {
          locked = false;
          currentDepthMask = null;
          currentDepthFunc = null;
          currentDepthClear = null;
        }
      };
    }
    function StencilBuffer() {
      let locked = false;
      let currentStencilMask = null;
      let currentStencilFunc = null;
      let currentStencilRef = null;
      let currentStencilFuncMask = null;
      let currentStencilFail = null;
      let currentStencilZFail = null;
      let currentStencilZPass = null;
      let currentStencilClear = null;
      return {
        setTest: function(stencilTest) {
          if (!locked) {
            if (stencilTest) {
              enable(gl.STENCIL_TEST);
            } else {
              disable(gl.STENCIL_TEST);
            }
          }
        },
        setMask: function(stencilMask) {
          if (currentStencilMask !== stencilMask && !locked) {
            gl.stencilMask(stencilMask);
            currentStencilMask = stencilMask;
          }
        },
        setFunc: function(stencilFunc, stencilRef, stencilMask) {
          if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
            gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
            currentStencilFunc = stencilFunc;
            currentStencilRef = stencilRef;
            currentStencilFuncMask = stencilMask;
          }
        },
        setOp: function(stencilFail, stencilZFail, stencilZPass) {
          if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
            gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
            currentStencilFail = stencilFail;
            currentStencilZFail = stencilZFail;
            currentStencilZPass = stencilZPass;
          }
        },
        setLocked: function(lock) {
          locked = lock;
        },
        setClear: function(stencil) {
          if (currentStencilClear !== stencil) {
            gl.clearStencil(stencil);
            currentStencilClear = stencil;
          }
        },
        reset: function() {
          locked = false;
          currentStencilMask = null;
          currentStencilFunc = null;
          currentStencilRef = null;
          currentStencilFuncMask = null;
          currentStencilFail = null;
          currentStencilZFail = null;
          currentStencilZPass = null;
          currentStencilClear = null;
        }
      };
    }
    const colorBuffer = new ColorBuffer();
    const depthBuffer = new DepthBuffer();
    const stencilBuffer = new StencilBuffer();
    const uboBindings = /* @__PURE__ */ new WeakMap();
    const uboProgramMap = /* @__PURE__ */ new WeakMap();
    let enabledCapabilities = {};
    let currentBoundFramebuffers = {};
    let currentDrawbuffers = /* @__PURE__ */ new WeakMap();
    let defaultDrawbuffers = [];
    let currentProgram = null;
    let currentBlendingEnabled = false;
    let currentBlending = null;
    let currentBlendEquation = null;
    let currentBlendSrc = null;
    let currentBlendDst = null;
    let currentBlendEquationAlpha = null;
    let currentBlendSrcAlpha = null;
    let currentBlendDstAlpha = null;
    let currentPremultipledAlpha = false;
    let currentFlipSided = null;
    let currentCullFace = null;
    let currentLineWidth = null;
    let currentPolygonOffsetFactor = null;
    let currentPolygonOffsetUnits = null;
    const maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
    let lineWidthAvailable = false;
    let version = 0;
    const glVersion = gl.getParameter(gl.VERSION);
    if (glVersion.indexOf("WebGL") !== -1) {
      version = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
      lineWidthAvailable = version >= 1;
    } else if (glVersion.indexOf("OpenGL ES") !== -1) {
      version = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
      lineWidthAvailable = version >= 2;
    }
    let currentTextureSlot = null;
    let currentBoundTextures = {};
    const scissorParam = gl.getParameter(gl.SCISSOR_BOX);
    const viewportParam = gl.getParameter(gl.VIEWPORT);
    const currentScissor = new Vector4().fromArray(scissorParam);
    const currentViewport = new Vector4().fromArray(viewportParam);
    function createTexture(type, target, count, dimensions) {
      const data = new Uint8Array(4);
      const texture = gl.createTexture();
      gl.bindTexture(type, texture);
      gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
      gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      for (let i = 0; i < count; i++) {
        if (isWebGL2 && (type === gl.TEXTURE_3D || type === gl.TEXTURE_2D_ARRAY)) {
          gl.texImage3D(target, 0, gl.RGBA, 1, 1, dimensions, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
        } else {
          gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
        }
      }
      return texture;
    }
    const emptyTextures = {};
    emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);
    emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6);
    if (isWebGL2) {
      emptyTextures[gl.TEXTURE_2D_ARRAY] = createTexture(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_2D_ARRAY, 1, 1);
      emptyTextures[gl.TEXTURE_3D] = createTexture(gl.TEXTURE_3D, gl.TEXTURE_3D, 1, 1);
    }
    colorBuffer.setClear(0, 0, 0, 1);
    depthBuffer.setClear(1);
    stencilBuffer.setClear(0);
    enable(gl.DEPTH_TEST);
    depthBuffer.setFunc(LessEqualDepth);
    setFlipSided(false);
    setCullFace(CullFaceBack);
    enable(gl.CULL_FACE);
    setBlending(NoBlending);
    function enable(id) {
      if (enabledCapabilities[id] !== true) {
        gl.enable(id);
        enabledCapabilities[id] = true;
      }
    }
    function disable(id) {
      if (enabledCapabilities[id] !== false) {
        gl.disable(id);
        enabledCapabilities[id] = false;
      }
    }
    function bindFramebuffer(target, framebuffer) {
      if (currentBoundFramebuffers[target] !== framebuffer) {
        gl.bindFramebuffer(target, framebuffer);
        currentBoundFramebuffers[target] = framebuffer;
        if (isWebGL2) {
          if (target === gl.DRAW_FRAMEBUFFER) {
            currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;
          }
          if (target === gl.FRAMEBUFFER) {
            currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;
          }
        }
        return true;
      }
      return false;
    }
    function drawBuffers(renderTarget, framebuffer) {
      let drawBuffers2 = defaultDrawbuffers;
      let needsUpdate = false;
      if (renderTarget) {
        drawBuffers2 = currentDrawbuffers.get(framebuffer);
        if (drawBuffers2 === void 0) {
          drawBuffers2 = [];
          currentDrawbuffers.set(framebuffer, drawBuffers2);
        }
        if (renderTarget.isWebGLMultipleRenderTargets) {
          const textures = renderTarget.texture;
          if (drawBuffers2.length !== textures.length || drawBuffers2[0] !== gl.COLOR_ATTACHMENT0) {
            for (let i = 0, il = textures.length; i < il; i++) {
              drawBuffers2[i] = gl.COLOR_ATTACHMENT0 + i;
            }
            drawBuffers2.length = textures.length;
            needsUpdate = true;
          }
        } else {
          if (drawBuffers2[0] !== gl.COLOR_ATTACHMENT0) {
            drawBuffers2[0] = gl.COLOR_ATTACHMENT0;
            needsUpdate = true;
          }
        }
      } else {
        if (drawBuffers2[0] !== gl.BACK) {
          drawBuffers2[0] = gl.BACK;
          needsUpdate = true;
        }
      }
      if (needsUpdate) {
        if (capabilities.isWebGL2) {
          gl.drawBuffers(drawBuffers2);
        } else {
          extensions.get("WEBGL_draw_buffers").drawBuffersWEBGL(drawBuffers2);
        }
      }
    }
    function useProgram(program) {
      if (currentProgram !== program) {
        gl.useProgram(program);
        currentProgram = program;
        return true;
      }
      return false;
    }
    const equationToGL = {
      [AddEquation]: gl.FUNC_ADD,
      [SubtractEquation]: gl.FUNC_SUBTRACT,
      [ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT
    };
    if (isWebGL2) {
      equationToGL[MinEquation] = gl.MIN;
      equationToGL[MaxEquation] = gl.MAX;
    } else {
      const extension = extensions.get("EXT_blend_minmax");
      if (extension !== null) {
        equationToGL[MinEquation] = extension.MIN_EXT;
        equationToGL[MaxEquation] = extension.MAX_EXT;
      }
    }
    const factorToGL = {
      [ZeroFactor]: gl.ZERO,
      [OneFactor]: gl.ONE,
      [SrcColorFactor]: gl.SRC_COLOR,
      [SrcAlphaFactor]: gl.SRC_ALPHA,
      [SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,
      [DstColorFactor]: gl.DST_COLOR,
      [DstAlphaFactor]: gl.DST_ALPHA,
      [OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,
      [OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,
      [OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,
      [OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA
    };
    function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
      if (blending === NoBlending) {
        if (currentBlendingEnabled === true) {
          disable(gl.BLEND);
          currentBlendingEnabled = false;
        }
        return;
      }
      if (currentBlendingEnabled === false) {
        enable(gl.BLEND);
        currentBlendingEnabled = true;
      }
      if (blending !== CustomBlending) {
        if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
          if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
            gl.blendEquation(gl.FUNC_ADD);
            currentBlendEquation = AddEquation;
            currentBlendEquationAlpha = AddEquation;
          }
          if (premultipliedAlpha) {
            switch (blending) {
              case NormalBlending:
                gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                break;
              case AdditiveBlending:
                gl.blendFunc(gl.ONE, gl.ONE);
                break;
              case SubtractiveBlending:
                gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
                break;
              case MultiplyBlending:
                gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);
                break;
              default:
                console.error("THREE.WebGLState: Invalid blending: ", blending);
                break;
            }
          } else {
            switch (blending) {
              case NormalBlending:
                gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                break;
              case AdditiveBlending:
                gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
                break;
              case SubtractiveBlending:
                gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
                break;
              case MultiplyBlending:
                gl.blendFunc(gl.ZERO, gl.SRC_COLOR);
                break;
              default:
                console.error("THREE.WebGLState: Invalid blending: ", blending);
                break;
            }
          }
          currentBlendSrc = null;
          currentBlendDst = null;
          currentBlendSrcAlpha = null;
          currentBlendDstAlpha = null;
          currentBlending = blending;
          currentPremultipledAlpha = premultipliedAlpha;
        }
        return;
      }
      blendEquationAlpha = blendEquationAlpha || blendEquation;
      blendSrcAlpha = blendSrcAlpha || blendSrc;
      blendDstAlpha = blendDstAlpha || blendDst;
      if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
        gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
        currentBlendEquation = blendEquation;
        currentBlendEquationAlpha = blendEquationAlpha;
      }
      if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
        gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
        currentBlendSrc = blendSrc;
        currentBlendDst = blendDst;
        currentBlendSrcAlpha = blendSrcAlpha;
        currentBlendDstAlpha = blendDstAlpha;
      }
      currentBlending = blending;
      currentPremultipledAlpha = false;
    }
    function setMaterial(material, frontFaceCW) {
      material.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);
      let flipSided = material.side === BackSide;
      if (frontFaceCW)
        flipSided = !flipSided;
      setFlipSided(flipSided);
      material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
      depthBuffer.setFunc(material.depthFunc);
      depthBuffer.setTest(material.depthTest);
      depthBuffer.setMask(material.depthWrite);
      colorBuffer.setMask(material.colorWrite);
      const stencilWrite = material.stencilWrite;
      stencilBuffer.setTest(stencilWrite);
      if (stencilWrite) {
        stencilBuffer.setMask(material.stencilWriteMask);
        stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
        stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
      }
      setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
      material.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
    }
    function setFlipSided(flipSided) {
      if (currentFlipSided !== flipSided) {
        if (flipSided) {
          gl.frontFace(gl.CW);
        } else {
          gl.frontFace(gl.CCW);
        }
        currentFlipSided = flipSided;
      }
    }
    function setCullFace(cullFace) {
      if (cullFace !== CullFaceNone) {
        enable(gl.CULL_FACE);
        if (cullFace !== currentCullFace) {
          if (cullFace === CullFaceBack) {
            gl.cullFace(gl.BACK);
          } else if (cullFace === CullFaceFront) {
            gl.cullFace(gl.FRONT);
          } else {
            gl.cullFace(gl.FRONT_AND_BACK);
          }
        }
      } else {
        disable(gl.CULL_FACE);
      }
      currentCullFace = cullFace;
    }
    function setLineWidth(width) {
      if (width !== currentLineWidth) {
        if (lineWidthAvailable)
          gl.lineWidth(width);
        currentLineWidth = width;
      }
    }
    function setPolygonOffset(polygonOffset, factor, units) {
      if (polygonOffset) {
        enable(gl.POLYGON_OFFSET_FILL);
        if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
          gl.polygonOffset(factor, units);
          currentPolygonOffsetFactor = factor;
          currentPolygonOffsetUnits = units;
        }
      } else {
        disable(gl.POLYGON_OFFSET_FILL);
      }
    }
    function setScissorTest(scissorTest) {
      if (scissorTest) {
        enable(gl.SCISSOR_TEST);
      } else {
        disable(gl.SCISSOR_TEST);
      }
    }
    function activeTexture(webglSlot) {
      if (webglSlot === void 0)
        webglSlot = gl.TEXTURE0 + maxTextures - 1;
      if (currentTextureSlot !== webglSlot) {
        gl.activeTexture(webglSlot);
        currentTextureSlot = webglSlot;
      }
    }
    function bindTexture(webglType, webglTexture, webglSlot) {
      if (webglSlot === void 0) {
        if (currentTextureSlot === null) {
          webglSlot = gl.TEXTURE0 + maxTextures - 1;
        } else {
          webglSlot = currentTextureSlot;
        }
      }
      let boundTexture = currentBoundTextures[webglSlot];
      if (boundTexture === void 0) {
        boundTexture = { type: void 0, texture: void 0 };
        currentBoundTextures[webglSlot] = boundTexture;
      }
      if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
        if (currentTextureSlot !== webglSlot) {
          gl.activeTexture(webglSlot);
          currentTextureSlot = webglSlot;
        }
        gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
        boundTexture.type = webglType;
        boundTexture.texture = webglTexture;
      }
    }
    function unbindTexture() {
      const boundTexture = currentBoundTextures[currentTextureSlot];
      if (boundTexture !== void 0 && boundTexture.type !== void 0) {
        gl.bindTexture(boundTexture.type, null);
        boundTexture.type = void 0;
        boundTexture.texture = void 0;
      }
    }
    function compressedTexImage2D() {
      try {
        gl.compressedTexImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function compressedTexImage3D() {
      try {
        gl.compressedTexImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texSubImage2D() {
      try {
        gl.texSubImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texSubImage3D() {
      try {
        gl.texSubImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function compressedTexSubImage2D() {
      try {
        gl.compressedTexSubImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function compressedTexSubImage3D() {
      try {
        gl.compressedTexSubImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texStorage2D() {
      try {
        gl.texStorage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texStorage3D() {
      try {
        gl.texStorage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texImage2D() {
      try {
        gl.texImage2D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function texImage3D() {
      try {
        gl.texImage3D.apply(gl, arguments);
      } catch (error) {
        console.error("THREE.WebGLState:", error);
      }
    }
    function scissor(scissor2) {
      if (currentScissor.equals(scissor2) === false) {
        gl.scissor(scissor2.x, scissor2.y, scissor2.z, scissor2.w);
        currentScissor.copy(scissor2);
      }
    }
    function viewport(viewport2) {
      if (currentViewport.equals(viewport2) === false) {
        gl.viewport(viewport2.x, viewport2.y, viewport2.z, viewport2.w);
        currentViewport.copy(viewport2);
      }
    }
    function updateUBOMapping(uniformsGroup, program) {
      let mapping = uboProgramMap.get(program);
      if (mapping === void 0) {
        mapping = /* @__PURE__ */ new WeakMap();
        uboProgramMap.set(program, mapping);
      }
      let blockIndex = mapping.get(uniformsGroup);
      if (blockIndex === void 0) {
        blockIndex = gl.getUniformBlockIndex(program, uniformsGroup.name);
        mapping.set(uniformsGroup, blockIndex);
      }
    }
    function uniformBlockBinding(uniformsGroup, program) {
      const mapping = uboProgramMap.get(program);
      const blockIndex = mapping.get(uniformsGroup);
      if (uboBindings.get(program) !== blockIndex) {
        gl.uniformBlockBinding(program, blockIndex, uniformsGroup.__bindingPointIndex);
        uboBindings.set(program, blockIndex);
      }
    }
    function reset() {
      gl.disable(gl.BLEND);
      gl.disable(gl.CULL_FACE);
      gl.disable(gl.DEPTH_TEST);
      gl.disable(gl.POLYGON_OFFSET_FILL);
      gl.disable(gl.SCISSOR_TEST);
      gl.disable(gl.STENCIL_TEST);
      gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
      gl.blendEquation(gl.FUNC_ADD);
      gl.blendFunc(gl.ONE, gl.ZERO);
      gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);
      gl.colorMask(true, true, true, true);
      gl.clearColor(0, 0, 0, 0);
      gl.depthMask(true);
      gl.depthFunc(gl.LESS);
      gl.clearDepth(1);
      gl.stencilMask(4294967295);
      gl.stencilFunc(gl.ALWAYS, 0, 4294967295);
      gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
      gl.clearStencil(0);
      gl.cullFace(gl.BACK);
      gl.frontFace(gl.CCW);
      gl.polygonOffset(0, 0);
      gl.activeTexture(gl.TEXTURE0);
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      if (isWebGL2 === true) {
        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
      }
      gl.useProgram(null);
      gl.lineWidth(1);
      gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
      enabledCapabilities = {};
      currentTextureSlot = null;
      currentBoundTextures = {};
      currentBoundFramebuffers = {};
      currentDrawbuffers = /* @__PURE__ */ new WeakMap();
      defaultDrawbuffers = [];
      currentProgram = null;
      currentBlendingEnabled = false;
      currentBlending = null;
      currentBlendEquation = null;
      currentBlendSrc = null;
      currentBlendDst = null;
      currentBlendEquationAlpha = null;
      currentBlendSrcAlpha = null;
      currentBlendDstAlpha = null;
      currentPremultipledAlpha = false;
      currentFlipSided = null;
      currentCullFace = null;
      currentLineWidth = null;
      currentPolygonOffsetFactor = null;
      currentPolygonOffsetUnits = null;
      currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);
      currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);
      colorBuffer.reset();
      depthBuffer.reset();
      stencilBuffer.reset();
    }
    return {
      buffers: {
        color: colorBuffer,
        depth: depthBuffer,
        stencil: stencilBuffer
      },
      enable,
      disable,
      bindFramebuffer,
      drawBuffers,
      useProgram,
      setBlending,
      setMaterial,
      setFlipSided,
      setCullFace,
      setLineWidth,
      setPolygonOffset,
      setScissorTest,
      activeTexture,
      bindTexture,
      unbindTexture,
      compressedTexImage2D,
      compressedTexImage3D,
      texImage2D,
      texImage3D,
      updateUBOMapping,
      uniformBlockBinding,
      texStorage2D,
      texStorage3D,
      texSubImage2D,
      texSubImage3D,
      compressedTexSubImage2D,
      compressedTexSubImage3D,
      scissor,
      viewport,
      reset
    };
  }
  function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
    const isWebGL2 = capabilities.isWebGL2;
    const maxTextures = capabilities.maxTextures;
    const maxCubemapSize = capabilities.maxCubemapSize;
    const maxTextureSize = capabilities.maxTextureSize;
    const maxSamples = capabilities.maxSamples;
    const multisampledRTTExt = extensions.has("WEBGL_multisampled_render_to_texture") ? extensions.get("WEBGL_multisampled_render_to_texture") : null;
    const supportsInvalidateFramebuffer = typeof navigator === "undefined" ? false : /OculusBrowser/g.test(navigator.userAgent);
    const _videoTextures = /* @__PURE__ */ new WeakMap();
    let _canvas2;
    const _sources = /* @__PURE__ */ new WeakMap();
    let useOffscreenCanvas = false;
    try {
      useOffscreenCanvas = typeof OffscreenCanvas !== "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
    } catch (err) {
    }
    function createCanvas(width, height) {
      return useOffscreenCanvas ? (
        // eslint-disable-next-line compat/compat
        new OffscreenCanvas(width, height)
      ) : createElementNS("canvas");
    }
    function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
      let scale = 1;
      if (image.width > maxSize || image.height > maxSize) {
        scale = maxSize / Math.max(image.width, image.height);
      }
      if (scale < 1 || needsPowerOfTwo === true) {
        if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
          const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;
          const width = floor(scale * image.width);
          const height = floor(scale * image.height);
          if (_canvas2 === void 0)
            _canvas2 = createCanvas(width, height);
          const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas2;
          canvas.width = width;
          canvas.height = height;
          const context = canvas.getContext("2d");
          context.drawImage(image, 0, 0, width, height);
          console.warn("THREE.WebGLRenderer: Texture has been resized from (" + image.width + "x" + image.height + ") to (" + width + "x" + height + ").");
          return canvas;
        } else {
          if ("data" in image) {
            console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + image.width + "x" + image.height + ").");
          }
          return image;
        }
      }
      return image;
    }
    function isPowerOfTwo$1(image) {
      return isPowerOfTwo(image.width) && isPowerOfTwo(image.height);
    }
    function textureNeedsPowerOfTwo(texture) {
      if (isWebGL2)
        return false;
      return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
    }
    function textureNeedsGenerateMipmaps(texture, supportsMips) {
      return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
    }
    function generateMipmap(target) {
      _gl.generateMipmap(target);
    }
    function getInternalFormat(internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false) {
      if (isWebGL2 === false)
        return glFormat;
      if (internalFormatName !== null) {
        if (_gl[internalFormatName] !== void 0)
          return _gl[internalFormatName];
        console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
      }
      let internalFormat = glFormat;
      if (glFormat === _gl.RED) {
        if (glType === _gl.FLOAT)
          internalFormat = _gl.R32F;
        if (glType === _gl.HALF_FLOAT)
          internalFormat = _gl.R16F;
        if (glType === _gl.UNSIGNED_BYTE)
          internalFormat = _gl.R8;
      }
      if (glFormat === _gl.RG) {
        if (glType === _gl.FLOAT)
          internalFormat = _gl.RG32F;
        if (glType === _gl.HALF_FLOAT)
          internalFormat = _gl.RG16F;
        if (glType === _gl.UNSIGNED_BYTE)
          internalFormat = _gl.RG8;
      }
      if (glFormat === _gl.RGBA) {
        if (glType === _gl.FLOAT)
          internalFormat = _gl.RGBA32F;
        if (glType === _gl.HALF_FLOAT)
          internalFormat = _gl.RGBA16F;
        if (glType === _gl.UNSIGNED_BYTE)
          internalFormat = colorSpace === SRGBColorSpace && forceLinearTransfer === false ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;
        if (glType === _gl.UNSIGNED_SHORT_4_4_4_4)
          internalFormat = _gl.RGBA4;
        if (glType === _gl.UNSIGNED_SHORT_5_5_5_1)
          internalFormat = _gl.RGB5_A1;
      }
      if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RG16F || internalFormat === _gl.RG32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {
        extensions.get("EXT_color_buffer_float");
      }
      return internalFormat;
    }
    function getMipLevels(texture, image, supportsMips) {
      if (textureNeedsGenerateMipmaps(texture, supportsMips) === true || texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
        return Math.log2(Math.max(image.width, image.height)) + 1;
      } else if (texture.mipmaps !== void 0 && texture.mipmaps.length > 0) {
        return texture.mipmaps.length;
      } else if (texture.isCompressedTexture && Array.isArray(texture.image)) {
        return image.mipmaps.length;
      } else {
        return 1;
      }
    }
    function filterFallback(f) {
      if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {
        return _gl.NEAREST;
      }
      return _gl.LINEAR;
    }
    function onTextureDispose(event) {
      const texture = event.target;
      texture.removeEventListener("dispose", onTextureDispose);
      deallocateTexture(texture);
      if (texture.isVideoTexture) {
        _videoTextures.delete(texture);
      }
    }
    function onRenderTargetDispose(event) {
      const renderTarget = event.target;
      renderTarget.removeEventListener("dispose", onRenderTargetDispose);
      deallocateRenderTarget(renderTarget);
    }
    function deallocateTexture(texture) {
      const textureProperties = properties.get(texture);
      if (textureProperties.__webglInit === void 0)
        return;
      const source = texture.source;
      const webglTextures = _sources.get(source);
      if (webglTextures) {
        const webglTexture = webglTextures[textureProperties.__cacheKey];
        webglTexture.usedTimes--;
        if (webglTexture.usedTimes === 0) {
          deleteTexture(texture);
        }
        if (Object.keys(webglTextures).length === 0) {
          _sources.delete(source);
        }
      }
      properties.remove(texture);
    }
    function deleteTexture(texture) {
      const textureProperties = properties.get(texture);
      _gl.deleteTexture(textureProperties.__webglTexture);
      const source = texture.source;
      const webglTextures = _sources.get(source);
      delete webglTextures[textureProperties.__cacheKey];
      info.memory.textures--;
    }
    function deallocateRenderTarget(renderTarget) {
      const texture = renderTarget.texture;
      const renderTargetProperties = properties.get(renderTarget);
      const textureProperties = properties.get(texture);
      if (textureProperties.__webglTexture !== void 0) {
        _gl.deleteTexture(textureProperties.__webglTexture);
        info.memory.textures--;
      }
      if (renderTarget.depthTexture) {
        renderTarget.depthTexture.dispose();
      }
      if (renderTarget.isWebGLCubeRenderTarget) {
        for (let i = 0; i < 6; i++) {
          _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);
          if (renderTargetProperties.__webglDepthbuffer)
            _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
        }
      } else {
        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
        if (renderTargetProperties.__webglDepthbuffer)
          _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
        if (renderTargetProperties.__webglMultisampledFramebuffer)
          _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
        if (renderTargetProperties.__webglColorRenderbuffer) {
          for (let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i++) {
            if (renderTargetProperties.__webglColorRenderbuffer[i])
              _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer[i]);
          }
        }
        if (renderTargetProperties.__webglDepthRenderbuffer)
          _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
      }
      if (renderTarget.isWebGLMultipleRenderTargets) {
        for (let i = 0, il = texture.length; i < il; i++) {
          const attachmentProperties = properties.get(texture[i]);
          if (attachmentProperties.__webglTexture) {
            _gl.deleteTexture(attachmentProperties.__webglTexture);
            info.memory.textures--;
          }
          properties.remove(texture[i]);
        }
      }
      properties.remove(texture);
      properties.remove(renderTarget);
    }
    let textureUnits = 0;
    function resetTextureUnits() {
      textureUnits = 0;
    }
    function allocateTextureUnit() {
      const textureUnit = textureUnits;
      if (textureUnit >= maxTextures) {
        console.warn("THREE.WebGLTextures: Trying to use " + textureUnit + " texture units while this GPU supports only " + maxTextures);
      }
      textureUnits += 1;
      return textureUnit;
    }
    function getTextureCacheKey(texture) {
      const array = [];
      array.push(texture.wrapS);
      array.push(texture.wrapT);
      array.push(texture.wrapR || 0);
      array.push(texture.magFilter);
      array.push(texture.minFilter);
      array.push(texture.anisotropy);
      array.push(texture.internalFormat);
      array.push(texture.format);
      array.push(texture.type);
      array.push(texture.generateMipmaps);
      array.push(texture.premultiplyAlpha);
      array.push(texture.flipY);
      array.push(texture.unpackAlignment);
      array.push(texture.colorSpace);
      return array.join();
    }
    function setTexture2D(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.isVideoTexture)
        updateVideoTexture(texture);
      if (texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version) {
        const image = texture.image;
        if (image === null) {
          console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
        } else if (image.complete === false) {
          console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
        } else {
          uploadTexture(textureProperties, texture, slot);
          return;
        }
      }
      state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    function setTexture2DArray(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
      state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    function setTexture3D(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
      state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    function setTextureCube(texture, slot) {
      const textureProperties = properties.get(texture);
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        uploadCubeTexture(textureProperties, texture, slot);
        return;
      }
      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    }
    const wrappingToGL = {
      [RepeatWrapping]: _gl.REPEAT,
      [ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,
      [MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT
    };
    const filterToGL = {
      [NearestFilter]: _gl.NEAREST,
      [NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,
      [NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,
      [LinearFilter]: _gl.LINEAR,
      [LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,
      [LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR
    };
    const compareToGL = {
      [NeverCompare]: _gl.NEVER,
      [AlwaysCompare]: _gl.ALWAYS,
      [LessCompare]: _gl.LESS,
      [LessEqualCompare]: _gl.LEQUAL,
      [EqualCompare]: _gl.EQUAL,
      [GreaterEqualCompare]: _gl.GEQUAL,
      [GreaterCompare]: _gl.GREATER,
      [NotEqualCompare]: _gl.NOTEQUAL
    };
    function setTextureParameters(textureType, texture, supportsMips) {
      if (supportsMips) {
        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);
        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);
        if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
          _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);
        }
        _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);
        _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);
      } else {
        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);
        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);
        if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
          _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);
        }
        if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {
          console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.");
        }
        _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));
        _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));
        if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
          console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.");
        }
      }
      if (texture.compareFunction) {
        _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE);
        _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[texture.compareFunction]);
      }
      if (extensions.has("EXT_texture_filter_anisotropic") === true) {
        const extension = extensions.get("EXT_texture_filter_anisotropic");
        if (texture.magFilter === NearestFilter)
          return;
        if (texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter)
          return;
        if (texture.type === FloatType && extensions.has("OES_texture_float_linear") === false)
          return;
        if (isWebGL2 === false && (texture.type === HalfFloatType && extensions.has("OES_texture_half_float_linear") === false))
          return;
        if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
          _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
          properties.get(texture).__currentAnisotropy = texture.anisotropy;
        }
      }
    }
    function initTexture(textureProperties, texture) {
      let forceUpload = false;
      if (textureProperties.__webglInit === void 0) {
        textureProperties.__webglInit = true;
        texture.addEventListener("dispose", onTextureDispose);
      }
      const source = texture.source;
      let webglTextures = _sources.get(source);
      if (webglTextures === void 0) {
        webglTextures = {};
        _sources.set(source, webglTextures);
      }
      const textureCacheKey = getTextureCacheKey(texture);
      if (textureCacheKey !== textureProperties.__cacheKey) {
        if (webglTextures[textureCacheKey] === void 0) {
          webglTextures[textureCacheKey] = {
            texture: _gl.createTexture(),
            usedTimes: 0
          };
          info.memory.textures++;
          forceUpload = true;
        }
        webglTextures[textureCacheKey].usedTimes++;
        const webglTexture = webglTextures[textureProperties.__cacheKey];
        if (webglTexture !== void 0) {
          webglTextures[textureProperties.__cacheKey].usedTimes--;
          if (webglTexture.usedTimes === 0) {
            deleteTexture(texture);
          }
        }
        textureProperties.__cacheKey = textureCacheKey;
        textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;
      }
      return forceUpload;
    }
    function uploadTexture(textureProperties, texture, slot) {
      let textureType = _gl.TEXTURE_2D;
      if (texture.isDataArrayTexture || texture.isCompressedArrayTexture)
        textureType = _gl.TEXTURE_2D_ARRAY;
      if (texture.isData3DTexture)
        textureType = _gl.TEXTURE_3D;
      const forceUpload = initTexture(textureProperties, texture);
      const source = texture.source;
      state.bindTexture(textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
      const sourceProperties = properties.get(source);
      if (source.version !== sourceProperties.__version || forceUpload === true) {
        state.activeTexture(_gl.TEXTURE0 + slot);
        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
        _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
        _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
        _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);
        const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;
        let image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
        image = verifyColorSpace(texture, image);
        const supportsMips = isPowerOfTwo$1(image) || isWebGL2, glFormat = utils.convert(texture.format, texture.colorSpace);
        let glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
        setTextureParameters(textureType, texture, supportsMips);
        let mipmap;
        const mipmaps = texture.mipmaps;
        const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
        const allocateMemory = sourceProperties.__version === void 0 || forceUpload === true;
        const levels = getMipLevels(texture, image, supportsMips);
        if (texture.isDepthTexture) {
          glInternalFormat = _gl.DEPTH_COMPONENT;
          if (isWebGL2) {
            if (texture.type === FloatType) {
              glInternalFormat = _gl.DEPTH_COMPONENT32F;
            } else if (texture.type === UnsignedIntType) {
              glInternalFormat = _gl.DEPTH_COMPONENT24;
            } else if (texture.type === UnsignedInt248Type) {
              glInternalFormat = _gl.DEPTH24_STENCIL8;
            } else {
              glInternalFormat = _gl.DEPTH_COMPONENT16;
            }
          } else {
            if (texture.type === FloatType) {
              console.error("WebGLRenderer: Floating point depth texture requires WebGL2.");
            }
          }
          if (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {
            if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {
              console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");
              texture.type = UnsignedIntType;
              glType = utils.convert(texture.type);
            }
          }
          if (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {
            glInternalFormat = _gl.DEPTH_STENCIL;
            if (texture.type !== UnsignedInt248Type) {
              console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");
              texture.type = UnsignedInt248Type;
              glType = utils.convert(texture.type);
            }
          }
          if (allocateMemory) {
            if (useTexStorage) {
              state.texStorage2D(_gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height);
            } else {
              state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
            }
          }
        } else if (texture.isDataTexture) {
          if (mipmaps.length > 0 && supportsMips) {
            if (useTexStorage && allocateMemory) {
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
            }
            for (let i = 0, il = mipmaps.length; i < il; i++) {
              mipmap = mipmaps[i];
              if (useTexStorage) {
                state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
              } else {
                state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
              }
            }
            texture.generateMipmaps = false;
          } else {
            if (useTexStorage) {
              if (allocateMemory) {
                state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
              }
              state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);
            } else {
              state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
            }
          }
        } else if (texture.isCompressedTexture) {
          if (texture.isCompressedArrayTexture) {
            if (useTexStorage && allocateMemory) {
              state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height, image.depth);
            }
            for (let i = 0, il = mipmaps.length; i < il; i++) {
              mipmap = mipmaps[i];
              if (texture.format !== RGBAFormat) {
                if (glFormat !== null) {
                  if (useTexStorage) {
                    state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0);
                  } else {
                    state.compressedTexImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0);
                  }
                } else {
                  console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
                }
              } else {
                if (useTexStorage) {
                  state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data);
                } else {
                  state.texImage3D(_gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data);
                }
              }
            }
          } else {
            if (useTexStorage && allocateMemory) {
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
            }
            for (let i = 0, il = mipmaps.length; i < il; i++) {
              mipmap = mipmaps[i];
              if (texture.format !== RGBAFormat) {
                if (glFormat !== null) {
                  if (useTexStorage) {
                    state.compressedTexSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                  } else {
                    state.compressedTexImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                  }
                } else {
                  console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
                }
              } else {
                if (useTexStorage) {
                  state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                } else {
                  state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                }
              }
            }
          }
        } else if (texture.isDataArrayTexture) {
          if (useTexStorage) {
            if (allocateMemory) {
              state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth);
            }
            state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
          } else {
            state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
          }
        } else if (texture.isData3DTexture) {
          if (useTexStorage) {
            if (allocateMemory) {
              state.texStorage3D(_gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth);
            }
            state.texSubImage3D(_gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
          } else {
            state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
          }
        } else if (texture.isFramebufferTexture) {
          if (allocateMemory) {
            if (useTexStorage) {
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
            } else {
              let width = image.width, height = image.height;
              for (let i = 0; i < levels; i++) {
                state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null);
                width >>= 1;
                height >>= 1;
              }
            }
          }
        } else {
          if (mipmaps.length > 0 && supportsMips) {
            if (useTexStorage && allocateMemory) {
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
            }
            for (let i = 0, il = mipmaps.length; i < il; i++) {
              mipmap = mipmaps[i];
              if (useTexStorage) {
                state.texSubImage2D(_gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap);
              } else {
                state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);
              }
            }
            texture.generateMipmaps = false;
          } else {
            if (useTexStorage) {
              if (allocateMemory) {
                state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
              }
              state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image);
            } else {
              state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);
            }
          }
        }
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
          generateMipmap(textureType);
        }
        sourceProperties.__version = source.version;
        if (texture.onUpdate)
          texture.onUpdate(texture);
      }
      textureProperties.__version = texture.version;
    }
    function uploadCubeTexture(textureProperties, texture, slot) {
      if (texture.image.length !== 6)
        return;
      const forceUpload = initTexture(textureProperties, texture);
      const source = texture.source;
      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
      const sourceProperties = properties.get(source);
      if (source.version !== sourceProperties.__version || forceUpload === true) {
        state.activeTexture(_gl.TEXTURE0 + slot);
        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);
        _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);
        _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);
        _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);
        const isCompressed = texture.isCompressedTexture || texture.image[0].isCompressedTexture;
        const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
        const cubeImage = [];
        for (let i = 0; i < 6; i++) {
          if (!isCompressed && !isDataTexture) {
            cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);
          } else {
            cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];
          }
          cubeImage[i] = verifyColorSpace(texture, cubeImage[i]);
        }
        const image = cubeImage[0], supportsMips = isPowerOfTwo$1(image) || isWebGL2, glFormat = utils.convert(texture.format, texture.colorSpace), glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
        const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
        const allocateMemory = sourceProperties.__version === void 0 || forceUpload === true;
        let levels = getMipLevels(texture, image, supportsMips);
        setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);
        let mipmaps;
        if (isCompressed) {
          if (useTexStorage && allocateMemory) {
            state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height);
          }
          for (let i = 0; i < 6; i++) {
            mipmaps = cubeImage[i].mipmaps;
            for (let j = 0; j < mipmaps.length; j++) {
              const mipmap = mipmaps[j];
              if (texture.format !== RGBAFormat) {
                if (glFormat !== null) {
                  if (useTexStorage) {
                    state.compressedTexSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                  } else {
                    state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                  }
                } else {
                  console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");
                }
              } else {
                if (useTexStorage) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                } else {
                  state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                }
              }
            }
          }
        } else {
          mipmaps = texture.mipmaps;
          if (useTexStorage && allocateMemory) {
            if (mipmaps.length > 0)
              levels++;
            state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, cubeImage[0].width, cubeImage[0].height);
          }
          for (let i = 0; i < 6; i++) {
            if (isDataTexture) {
              if (useTexStorage) {
                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[i].width, cubeImage[i].height, glFormat, glType, cubeImage[i].data);
              } else {
                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);
              }
              for (let j = 0; j < mipmaps.length; j++) {
                const mipmap = mipmaps[j];
                const mipmapImage = mipmap.image[i].image;
                if (useTexStorage) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);
                } else {
                  state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
                }
              }
            } else {
              if (useTexStorage) {
                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[i]);
              } else {
                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);
              }
              for (let j = 0; j < mipmaps.length; j++) {
                const mipmap = mipmaps[j];
                if (useTexStorage) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[i]);
                } else {
                  state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);
                }
              }
            }
          }
        }
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
          generateMipmap(_gl.TEXTURE_CUBE_MAP);
        }
        sourceProperties.__version = source.version;
        if (texture.onUpdate)
          texture.onUpdate(texture);
      }
      textureProperties.__version = texture.version;
    }
    function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {
      const glFormat = utils.convert(texture.format, texture.colorSpace);
      const glType = utils.convert(texture.type);
      const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
      const renderTargetProperties = properties.get(renderTarget);
      if (!renderTargetProperties.__hasExternalTextures) {
        if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {
          state.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);
        } else {
          state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
        }
      }
      state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
      if (useMultisampledRTT(renderTarget)) {
        multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0, getRenderTargetSamples(renderTarget));
      } else if (textureTarget === _gl.TEXTURE_2D || textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z) {
        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture).__webglTexture, 0);
      }
      state.bindFramebuffer(_gl.FRAMEBUFFER, null);
    }
    function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
      _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
      if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
        let glInternalFormat = _gl.DEPTH_COMPONENT16;
        if (isMultisample || useMultisampledRTT(renderTarget)) {
          const depthTexture = renderTarget.depthTexture;
          if (depthTexture && depthTexture.isDepthTexture) {
            if (depthTexture.type === FloatType) {
              glInternalFormat = _gl.DEPTH_COMPONENT32F;
            } else if (depthTexture.type === UnsignedIntType) {
              glInternalFormat = _gl.DEPTH_COMPONENT24;
            }
          }
          const samples = getRenderTargetSamples(renderTarget);
          if (useMultisampledRTT(renderTarget)) {
            multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          } else {
            _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          }
        } else {
          _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
        }
        _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
      } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
        const samples = getRenderTargetSamples(renderTarget);
        if (isMultisample && useMultisampledRTT(renderTarget) === false) {
          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);
        } else if (useMultisampledRTT(renderTarget)) {
          multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);
        } else {
          _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);
        }
        _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);
      } else {
        const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];
        for (let i = 0; i < textures.length; i++) {
          const texture = textures[i];
          const glFormat = utils.convert(texture.format, texture.colorSpace);
          const glType = utils.convert(texture.type);
          const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.colorSpace);
          const samples = getRenderTargetSamples(renderTarget);
          if (isMultisample && useMultisampledRTT(renderTarget) === false) {
            _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          } else if (useMultisampledRTT(renderTarget)) {
            multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          } else {
            _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
          }
        }
      }
      _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
    }
    function setupDepthTexture(framebuffer, renderTarget) {
      const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
      if (isCube)
        throw new Error("Depth Texture with cube render targets is not supported");
      state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
      if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
        throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
      }
      if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
        renderTarget.depthTexture.image.width = renderTarget.width;
        renderTarget.depthTexture.image.height = renderTarget.height;
        renderTarget.depthTexture.needsUpdate = true;
      }
      setTexture2D(renderTarget.depthTexture, 0);
      const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
      const samples = getRenderTargetSamples(renderTarget);
      if (renderTarget.depthTexture.format === DepthFormat) {
        if (useMultisampledRTT(renderTarget)) {
          multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
        } else {
          _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
        }
      } else if (renderTarget.depthTexture.format === DepthStencilFormat) {
        if (useMultisampledRTT(renderTarget)) {
          multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
        } else {
          _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
        }
      } else {
        throw new Error("Unknown depthTexture format");
      }
    }
    function setupDepthRenderbuffer(renderTarget) {
      const renderTargetProperties = properties.get(renderTarget);
      const isCube = renderTarget.isWebGLCubeRenderTarget === true;
      if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {
        if (isCube)
          throw new Error("target.depthTexture not supported in Cube render targets");
        setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
      } else {
        if (isCube) {
          renderTargetProperties.__webglDepthbuffer = [];
          for (let i = 0; i < 6; i++) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);
            renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);
          }
        } else {
          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
          renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
        }
      }
      state.bindFramebuffer(_gl.FRAMEBUFFER, null);
    }
    function rebindTextures(renderTarget, colorTexture, depthTexture) {
      const renderTargetProperties = properties.get(renderTarget);
      if (colorTexture !== void 0) {
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D);
      }
      if (depthTexture !== void 0) {
        setupDepthRenderbuffer(renderTarget);
      }
    }
    function setupRenderTarget(renderTarget) {
      const texture = renderTarget.texture;
      const renderTargetProperties = properties.get(renderTarget);
      const textureProperties = properties.get(texture);
      renderTarget.addEventListener("dispose", onRenderTargetDispose);
      if (renderTarget.isWebGLMultipleRenderTargets !== true) {
        if (textureProperties.__webglTexture === void 0) {
          textureProperties.__webglTexture = _gl.createTexture();
        }
        textureProperties.__version = texture.version;
        info.memory.textures++;
      }
      const isCube = renderTarget.isWebGLCubeRenderTarget === true;
      const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
      const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
      if (isCube) {
        renderTargetProperties.__webglFramebuffer = [];
        for (let i = 0; i < 6; i++) {
          renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
        }
      } else {
        renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
        if (isMultipleRenderTargets) {
          if (capabilities.drawBuffers) {
            const textures = renderTarget.texture;
            for (let i = 0, il = textures.length; i < il; i++) {
              const attachmentProperties = properties.get(textures[i]);
              if (attachmentProperties.__webglTexture === void 0) {
                attachmentProperties.__webglTexture = _gl.createTexture();
                info.memory.textures++;
              }
            }
          } else {
            console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
          }
        }
        if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
          const textures = isMultipleRenderTargets ? texture : [texture];
          renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
          renderTargetProperties.__webglColorRenderbuffer = [];
          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
          for (let i = 0; i < textures.length; i++) {
            const texture2 = textures[i];
            renderTargetProperties.__webglColorRenderbuffer[i] = _gl.createRenderbuffer();
            _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
            const glFormat = utils.convert(texture2.format, texture2.colorSpace);
            const glType = utils.convert(texture2.type);
            const glInternalFormat = getInternalFormat(texture2.internalFormat, glFormat, glType, texture2.colorSpace, renderTarget.isXRRenderTarget === true);
            const samples = getRenderTargetSamples(renderTarget);
            _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
          }
          _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
          if (renderTarget.depthBuffer) {
            renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
          }
          state.bindFramebuffer(_gl.FRAMEBUFFER, null);
        }
      }
      if (isCube) {
        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);
        setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);
        for (let i = 0; i < 6; i++) {
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);
        }
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
          generateMipmap(_gl.TEXTURE_CUBE_MAP);
        }
        state.unbindTexture();
      } else if (isMultipleRenderTargets) {
        const textures = renderTarget.texture;
        for (let i = 0, il = textures.length; i < il; i++) {
          const attachment = textures[i];
          const attachmentProperties = properties.get(attachment);
          state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);
          setTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D);
          if (textureNeedsGenerateMipmaps(attachment, supportsMips)) {
            generateMipmap(_gl.TEXTURE_2D);
          }
        }
        state.unbindTexture();
      } else {
        let glTextureType = _gl.TEXTURE_2D;
        if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {
          if (isWebGL2) {
            glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;
          } else {
            console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.");
          }
        }
        state.bindTexture(glTextureType, textureProperties.__webglTexture);
        setTextureParameters(glTextureType, texture, supportsMips);
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType);
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
          generateMipmap(glTextureType);
        }
        state.unbindTexture();
      }
      if (renderTarget.depthBuffer) {
        setupDepthRenderbuffer(renderTarget);
      }
    }
    function updateRenderTargetMipmap(renderTarget) {
      const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
      const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [renderTarget.texture];
      for (let i = 0, il = textures.length; i < il; i++) {
        const texture = textures[i];
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
          const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
          const webglTexture = properties.get(texture).__webglTexture;
          state.bindTexture(target, webglTexture);
          generateMipmap(target);
          state.unbindTexture();
        }
      }
    }
    function updateMultisampleRenderTarget(renderTarget) {
      if (isWebGL2 && renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
        const textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [renderTarget.texture];
        const width = renderTarget.width;
        const height = renderTarget.height;
        let mask = _gl.COLOR_BUFFER_BIT;
        const invalidationArray = [];
        const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
        const renderTargetProperties = properties.get(renderTarget);
        const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
        if (isMultipleRenderTargets) {
          for (let i = 0; i < textures.length; i++) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null);
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0);
          }
        }
        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
        for (let i = 0; i < textures.length; i++) {
          invalidationArray.push(_gl.COLOR_ATTACHMENT0 + i);
          if (renderTarget.depthBuffer) {
            invalidationArray.push(depthStyle);
          }
          const ignoreDepthValues = renderTargetProperties.__ignoreDepthValues !== void 0 ? renderTargetProperties.__ignoreDepthValues : false;
          if (ignoreDepthValues === false) {
            if (renderTarget.depthBuffer)
              mask |= _gl.DEPTH_BUFFER_BIT;
            if (renderTarget.stencilBuffer)
              mask |= _gl.STENCIL_BUFFER_BIT;
          }
          if (isMultipleRenderTargets) {
            _gl.framebufferRenderbuffer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
          }
          if (ignoreDepthValues === true) {
            _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, [depthStyle]);
            _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, [depthStyle]);
          }
          if (isMultipleRenderTargets) {
            const webglTexture = properties.get(textures[i]).__webglTexture;
            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0);
          }
          _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);
          if (supportsInvalidateFramebuffer) {
            _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, invalidationArray);
          }
        }
        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);
        if (isMultipleRenderTargets) {
          for (let i = 0; i < textures.length; i++) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i]);
            const webglTexture = properties.get(textures[i]).__webglTexture;
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0);
          }
        }
        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
      }
    }
    function getRenderTargetSamples(renderTarget) {
      return Math.min(maxSamples, renderTarget.samples);
    }
    function useMultisampledRTT(renderTarget) {
      const renderTargetProperties = properties.get(renderTarget);
      return isWebGL2 && renderTarget.samples > 0 && extensions.has("WEBGL_multisampled_render_to_texture") === true && renderTargetProperties.__useRenderToTexture !== false;
    }
    function updateVideoTexture(texture) {
      const frame = info.render.frame;
      if (_videoTextures.get(texture) !== frame) {
        _videoTextures.set(texture, frame);
        texture.update();
      }
    }
    function verifyColorSpace(texture, image) {
      const colorSpace = texture.colorSpace;
      const format = texture.format;
      const type = texture.type;
      if (texture.isCompressedTexture === true || texture.format === _SRGBAFormat)
        return image;
      if (colorSpace !== LinearSRGBColorSpace && colorSpace !== NoColorSpace) {
        if (colorSpace === SRGBColorSpace) {
          if (isWebGL2 === false) {
            if (extensions.has("EXT_sRGB") === true && format === RGBAFormat) {
              texture.format = _SRGBAFormat;
              texture.minFilter = LinearFilter;
              texture.generateMipmaps = false;
            } else {
              image = ImageUtils.sRGBToLinear(image);
            }
          } else {
            if (format !== RGBAFormat || type !== UnsignedByteType) {
              console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.");
            }
          }
        } else {
          console.error("THREE.WebGLTextures: Unsupported texture color space:", colorSpace);
        }
      }
      return image;
    }
    this.allocateTextureUnit = allocateTextureUnit;
    this.resetTextureUnits = resetTextureUnits;
    this.setTexture2D = setTexture2D;
    this.setTexture2DArray = setTexture2DArray;
    this.setTexture3D = setTexture3D;
    this.setTextureCube = setTextureCube;
    this.rebindTextures = rebindTextures;
    this.setupRenderTarget = setupRenderTarget;
    this.updateRenderTargetMipmap = updateRenderTargetMipmap;
    this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
    this.setupDepthRenderbuffer = setupDepthRenderbuffer;
    this.setupFrameBufferTexture = setupFrameBufferTexture;
    this.useMultisampledRTT = useMultisampledRTT;
  }
  function WebGLUtils(gl, extensions, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    function convert(p, colorSpace = NoColorSpace) {
      let extension;
      if (p === UnsignedByteType)
        return gl.UNSIGNED_BYTE;
      if (p === UnsignedShort4444Type)
        return gl.UNSIGNED_SHORT_4_4_4_4;
      if (p === UnsignedShort5551Type)
        return gl.UNSIGNED_SHORT_5_5_5_1;
      if (p === ByteType)
        return gl.BYTE;
      if (p === ShortType)
        return gl.SHORT;
      if (p === UnsignedShortType)
        return gl.UNSIGNED_SHORT;
      if (p === IntType)
        return gl.INT;
      if (p === UnsignedIntType)
        return gl.UNSIGNED_INT;
      if (p === FloatType)
        return gl.FLOAT;
      if (p === HalfFloatType) {
        if (isWebGL2)
          return gl.HALF_FLOAT;
        extension = extensions.get("OES_texture_half_float");
        if (extension !== null) {
          return extension.HALF_FLOAT_OES;
        } else {
          return null;
        }
      }
      if (p === AlphaFormat)
        return gl.ALPHA;
      if (p === RGBAFormat)
        return gl.RGBA;
      if (p === LuminanceFormat)
        return gl.LUMINANCE;
      if (p === LuminanceAlphaFormat)
        return gl.LUMINANCE_ALPHA;
      if (p === DepthFormat)
        return gl.DEPTH_COMPONENT;
      if (p === DepthStencilFormat)
        return gl.DEPTH_STENCIL;
      if (p === _SRGBAFormat) {
        extension = extensions.get("EXT_sRGB");
        if (extension !== null) {
          return extension.SRGB_ALPHA_EXT;
        } else {
          return null;
        }
      }
      if (p === RedFormat)
        return gl.RED;
      if (p === RedIntegerFormat)
        return gl.RED_INTEGER;
      if (p === RGFormat)
        return gl.RG;
      if (p === RGIntegerFormat)
        return gl.RG_INTEGER;
      if (p === RGBAIntegerFormat)
        return gl.RGBA_INTEGER;
      if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
        if (colorSpace === SRGBColorSpace) {
          extension = extensions.get("WEBGL_compressed_texture_s3tc_srgb");
          if (extension !== null) {
            if (p === RGB_S3TC_DXT1_Format)
              return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT1_Format)
              return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT3_Format)
              return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
            if (p === RGBA_S3TC_DXT5_Format)
              return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
          } else {
            return null;
          }
        } else {
          extension = extensions.get("WEBGL_compressed_texture_s3tc");
          if (extension !== null) {
            if (p === RGB_S3TC_DXT1_Format)
              return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT1_Format)
              return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
            if (p === RGBA_S3TC_DXT3_Format)
              return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
            if (p === RGBA_S3TC_DXT5_Format)
              return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
          } else {
            return null;
          }
        }
      }
      if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
        extension = extensions.get("WEBGL_compressed_texture_pvrtc");
        if (extension !== null) {
          if (p === RGB_PVRTC_4BPPV1_Format)
            return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
          if (p === RGB_PVRTC_2BPPV1_Format)
            return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
          if (p === RGBA_PVRTC_4BPPV1_Format)
            return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
          if (p === RGBA_PVRTC_2BPPV1_Format)
            return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
        } else {
          return null;
        }
      }
      if (p === RGB_ETC1_Format) {
        extension = extensions.get("WEBGL_compressed_texture_etc1");
        if (extension !== null) {
          return extension.COMPRESSED_RGB_ETC1_WEBGL;
        } else {
          return null;
        }
      }
      if (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {
        extension = extensions.get("WEBGL_compressed_texture_etc");
        if (extension !== null) {
          if (p === RGB_ETC2_Format)
            return colorSpace === SRGBColorSpace ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
          if (p === RGBA_ETC2_EAC_Format)
            return colorSpace === SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
        } else {
          return null;
        }
      }
      if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format) {
        extension = extensions.get("WEBGL_compressed_texture_astc");
        if (extension !== null) {
          if (p === RGBA_ASTC_4x4_Format)
            return colorSpace === SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
          if (p === RGBA_ASTC_5x4_Format)
            return colorSpace === SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
          if (p === RGBA_ASTC_5x5_Format)
            return colorSpace === SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
          if (p === RGBA_ASTC_6x5_Format)
            return colorSpace === SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
          if (p === RGBA_ASTC_6x6_Format)
            return colorSpace === SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
          if (p === RGBA_ASTC_8x5_Format)
            return colorSpace === SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
          if (p === RGBA_ASTC_8x6_Format)
            return colorSpace === SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
          if (p === RGBA_ASTC_8x8_Format)
            return colorSpace === SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
          if (p === RGBA_ASTC_10x5_Format)
            return colorSpace === SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
          if (p === RGBA_ASTC_10x6_Format)
            return colorSpace === SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
          if (p === RGBA_ASTC_10x8_Format)
            return colorSpace === SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
          if (p === RGBA_ASTC_10x10_Format)
            return colorSpace === SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
          if (p === RGBA_ASTC_12x10_Format)
            return colorSpace === SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
          if (p === RGBA_ASTC_12x12_Format)
            return colorSpace === SRGBColorSpace ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;
        } else {
          return null;
        }
      }
      if (p === RGBA_BPTC_Format) {
        extension = extensions.get("EXT_texture_compression_bptc");
        if (extension !== null) {
          if (p === RGBA_BPTC_Format)
            return colorSpace === SRGBColorSpace ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
        } else {
          return null;
        }
      }
      if (p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format) {
        extension = extensions.get("EXT_texture_compression_rgtc");
        if (extension !== null) {
          if (p === RGBA_BPTC_Format)
            return extension.COMPRESSED_RED_RGTC1_EXT;
          if (p === SIGNED_RED_RGTC1_Format)
            return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
          if (p === RED_GREEN_RGTC2_Format)
            return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
          if (p === SIGNED_RED_GREEN_RGTC2_Format)
            return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
        } else {
          return null;
        }
      }
      if (p === UnsignedInt248Type) {
        if (isWebGL2)
          return gl.UNSIGNED_INT_24_8;
        extension = extensions.get("WEBGL_depth_texture");
        if (extension !== null) {
          return extension.UNSIGNED_INT_24_8_WEBGL;
        } else {
          return null;
        }
      }
      return gl[p] !== void 0 ? gl[p] : null;
    }
    return { convert };
  }
  var ArrayCamera = class extends PerspectiveCamera {
    constructor(array = []) {
      super();
      this.isArrayCamera = true;
      this.cameras = array;
    }
  };
  var Group = class extends Object3D {
    constructor() {
      super();
      this.isGroup = true;
      this.type = "Group";
    }
  };
  var _moveEvent = { type: "move" };
  var WebXRController = class {
    constructor() {
      this._targetRay = null;
      this._grip = null;
      this._hand = null;
    }
    getHandSpace() {
      if (this._hand === null) {
        this._hand = new Group();
        this._hand.matrixAutoUpdate = false;
        this._hand.visible = false;
        this._hand.joints = {};
        this._hand.inputState = { pinching: false };
      }
      return this._hand;
    }
    getTargetRaySpace() {
      if (this._targetRay === null) {
        this._targetRay = new Group();
        this._targetRay.matrixAutoUpdate = false;
        this._targetRay.visible = false;
        this._targetRay.hasLinearVelocity = false;
        this._targetRay.linearVelocity = new Vector3();
        this._targetRay.hasAngularVelocity = false;
        this._targetRay.angularVelocity = new Vector3();
      }
      return this._targetRay;
    }
    getGripSpace() {
      if (this._grip === null) {
        this._grip = new Group();
        this._grip.matrixAutoUpdate = false;
        this._grip.visible = false;
        this._grip.hasLinearVelocity = false;
        this._grip.linearVelocity = new Vector3();
        this._grip.hasAngularVelocity = false;
        this._grip.angularVelocity = new Vector3();
      }
      return this._grip;
    }
    dispatchEvent(event) {
      if (this._targetRay !== null) {
        this._targetRay.dispatchEvent(event);
      }
      if (this._grip !== null) {
        this._grip.dispatchEvent(event);
      }
      if (this._hand !== null) {
        this._hand.dispatchEvent(event);
      }
      return this;
    }
    connect(inputSource) {
      if (inputSource && inputSource.hand) {
        const hand = this._hand;
        if (hand) {
          for (const inputjoint of inputSource.hand.values()) {
            this._getHandJoint(hand, inputjoint);
          }
        }
      }
      this.dispatchEvent({ type: "connected", data: inputSource });
      return this;
    }
    disconnect(inputSource) {
      this.dispatchEvent({ type: "disconnected", data: inputSource });
      if (this._targetRay !== null) {
        this._targetRay.visible = false;
      }
      if (this._grip !== null) {
        this._grip.visible = false;
      }
      if (this._hand !== null) {
        this._hand.visible = false;
      }
      return this;
    }
    update(inputSource, frame, referenceSpace) {
      let inputPose = null;
      let gripPose = null;
      let handPose = null;
      const targetRay = this._targetRay;
      const grip = this._grip;
      const hand = this._hand;
      if (inputSource && frame.session.visibilityState !== "visible-blurred") {
        if (hand && inputSource.hand) {
          handPose = true;
          for (const inputjoint of inputSource.hand.values()) {
            const jointPose = frame.getJointPose(inputjoint, referenceSpace);
            const joint = this._getHandJoint(hand, inputjoint);
            if (jointPose !== null) {
              joint.matrix.fromArray(jointPose.transform.matrix);
              joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
              joint.matrixWorldNeedsUpdate = true;
              joint.jointRadius = jointPose.radius;
            }
            joint.visible = jointPose !== null;
          }
          const indexTip = hand.joints["index-finger-tip"];
          const thumbTip = hand.joints["thumb-tip"];
          const distance = indexTip.position.distanceTo(thumbTip.position);
          const distanceToPinch = 0.02;
          const threshold = 5e-3;
          if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
            hand.inputState.pinching = false;
            this.dispatchEvent({
              type: "pinchend",
              handedness: inputSource.handedness,
              target: this
            });
          } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
            hand.inputState.pinching = true;
            this.dispatchEvent({
              type: "pinchstart",
              handedness: inputSource.handedness,
              target: this
            });
          }
        } else {
          if (grip !== null && inputSource.gripSpace) {
            gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
            if (gripPose !== null) {
              grip.matrix.fromArray(gripPose.transform.matrix);
              grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
              grip.matrixWorldNeedsUpdate = true;
              if (gripPose.linearVelocity) {
                grip.hasLinearVelocity = true;
                grip.linearVelocity.copy(gripPose.linearVelocity);
              } else {
                grip.hasLinearVelocity = false;
              }
              if (gripPose.angularVelocity) {
                grip.hasAngularVelocity = true;
                grip.angularVelocity.copy(gripPose.angularVelocity);
              } else {
                grip.hasAngularVelocity = false;
              }
            }
          }
        }
        if (targetRay !== null) {
          inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
          if (inputPose === null && gripPose !== null) {
            inputPose = gripPose;
          }
          if (inputPose !== null) {
            targetRay.matrix.fromArray(inputPose.transform.matrix);
            targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
            targetRay.matrixWorldNeedsUpdate = true;
            if (inputPose.linearVelocity) {
              targetRay.hasLinearVelocity = true;
              targetRay.linearVelocity.copy(inputPose.linearVelocity);
            } else {
              targetRay.hasLinearVelocity = false;
            }
            if (inputPose.angularVelocity) {
              targetRay.hasAngularVelocity = true;
              targetRay.angularVelocity.copy(inputPose.angularVelocity);
            } else {
              targetRay.hasAngularVelocity = false;
            }
            this.dispatchEvent(_moveEvent);
          }
        }
      }
      if (targetRay !== null) {
        targetRay.visible = inputPose !== null;
      }
      if (grip !== null) {
        grip.visible = gripPose !== null;
      }
      if (hand !== null) {
        hand.visible = handPose !== null;
      }
      return this;
    }
    // private method
    _getHandJoint(hand, inputjoint) {
      if (hand.joints[inputjoint.jointName] === void 0) {
        const joint = new Group();
        joint.matrixAutoUpdate = false;
        joint.visible = false;
        hand.joints[inputjoint.jointName] = joint;
        hand.add(joint);
      }
      return hand.joints[inputjoint.jointName];
    }
  };
  var DepthTexture = class extends Texture {
    constructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {
      format = format !== void 0 ? format : DepthFormat;
      if (format !== DepthFormat && format !== DepthStencilFormat) {
        throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
      }
      if (type === void 0 && format === DepthFormat)
        type = UnsignedIntType;
      if (type === void 0 && format === DepthStencilFormat)
        type = UnsignedInt248Type;
      super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
      this.isDepthTexture = true;
      this.image = { width, height };
      this.magFilter = magFilter !== void 0 ? magFilter : NearestFilter;
      this.minFilter = minFilter !== void 0 ? minFilter : NearestFilter;
      this.flipY = false;
      this.generateMipmaps = false;
      this.compareFunction = null;
    }
    copy(source) {
      super.copy(source);
      this.compareFunction = source.compareFunction;
      return this;
    }
    toJSON(meta) {
      const data = super.toJSON(meta);
      if (this.compareFunction !== null)
        data.compareFunction = this.compareFunction;
      return data;
    }
  };
  var WebXRManager = class extends EventDispatcher {
    constructor(renderer, gl) {
      super();
      const scope = this;
      let session = null;
      let framebufferScaleFactor = 1;
      let referenceSpace = null;
      let referenceSpaceType = "local-floor";
      let foveation = 1;
      let customReferenceSpace = null;
      let pose = null;
      let glBinding = null;
      let glProjLayer = null;
      let glBaseLayer = null;
      let xrFrame = null;
      const attributes = gl.getContextAttributes();
      let initialRenderTarget = null;
      let newRenderTarget = null;
      const controllers = [];
      const controllerInputSources = [];
      const cameraL = new PerspectiveCamera();
      cameraL.layers.enable(1);
      cameraL.viewport = new Vector4();
      const cameraR = new PerspectiveCamera();
      cameraR.layers.enable(2);
      cameraR.viewport = new Vector4();
      const cameras = [cameraL, cameraR];
      const cameraXR = new ArrayCamera();
      cameraXR.layers.enable(1);
      cameraXR.layers.enable(2);
      let _currentDepthNear = null;
      let _currentDepthFar = null;
      this.cameraAutoUpdate = true;
      this.enabled = false;
      this.isPresenting = false;
      this.getController = function(index) {
        let controller = controllers[index];
        if (controller === void 0) {
          controller = new WebXRController();
          controllers[index] = controller;
        }
        return controller.getTargetRaySpace();
      };
      this.getControllerGrip = function(index) {
        let controller = controllers[index];
        if (controller === void 0) {
          controller = new WebXRController();
          controllers[index] = controller;
        }
        return controller.getGripSpace();
      };
      this.getHand = function(index) {
        let controller = controllers[index];
        if (controller === void 0) {
          controller = new WebXRController();
          controllers[index] = controller;
        }
        return controller.getHandSpace();
      };
      function onSessionEvent(event) {
        const controllerIndex = controllerInputSources.indexOf(event.inputSource);
        if (controllerIndex === -1) {
          return;
        }
        const controller = controllers[controllerIndex];
        if (controller !== void 0) {
          controller.update(event.inputSource, event.frame, customReferenceSpace || referenceSpace);
          controller.dispatchEvent({ type: event.type, data: event.inputSource });
        }
      }
      function onSessionEnd() {
        session.removeEventListener("select", onSessionEvent);
        session.removeEventListener("selectstart", onSessionEvent);
        session.removeEventListener("selectend", onSessionEvent);
        session.removeEventListener("squeeze", onSessionEvent);
        session.removeEventListener("squeezestart", onSessionEvent);
        session.removeEventListener("squeezeend", onSessionEvent);
        session.removeEventListener("end", onSessionEnd);
        session.removeEventListener("inputsourceschange", onInputSourcesChange);
        for (let i = 0; i < controllers.length; i++) {
          const inputSource = controllerInputSources[i];
          if (inputSource === null)
            continue;
          controllerInputSources[i] = null;
          controllers[i].disconnect(inputSource);
        }
        _currentDepthNear = null;
        _currentDepthFar = null;
        renderer.setRenderTarget(initialRenderTarget);
        glBaseLayer = null;
        glProjLayer = null;
        glBinding = null;
        session = null;
        newRenderTarget = null;
        animation.stop();
        scope.isPresenting = false;
        scope.dispatchEvent({ type: "sessionend" });
      }
      this.setFramebufferScaleFactor = function(value) {
        framebufferScaleFactor = value;
        if (scope.isPresenting === true) {
          console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
        }
      };
      this.setReferenceSpaceType = function(value) {
        referenceSpaceType = value;
        if (scope.isPresenting === true) {
          console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
        }
      };
      this.getReferenceSpace = function() {
        return customReferenceSpace || referenceSpace;
      };
      this.setReferenceSpace = function(space) {
        customReferenceSpace = space;
      };
      this.getBaseLayer = function() {
        return glProjLayer !== null ? glProjLayer : glBaseLayer;
      };
      this.getBinding = function() {
        return glBinding;
      };
      this.getFrame = function() {
        return xrFrame;
      };
      this.getSession = function() {
        return session;
      };
      this.setSession = async function(value) {
        session = value;
        if (session !== null) {
          initialRenderTarget = renderer.getRenderTarget();
          session.addEventListener("select", onSessionEvent);
          session.addEventListener("selectstart", onSessionEvent);
          session.addEventListener("selectend", onSessionEvent);
          session.addEventListener("squeeze", onSessionEvent);
          session.addEventListener("squeezestart", onSessionEvent);
          session.addEventListener("squeezeend", onSessionEvent);
          session.addEventListener("end", onSessionEnd);
          session.addEventListener("inputsourceschange", onInputSourcesChange);
          if (attributes.xrCompatible !== true) {
            await gl.makeXRCompatible();
          }
          if (session.renderState.layers === void 0 || renderer.capabilities.isWebGL2 === false) {
            const layerInit = {
              antialias: session.renderState.layers === void 0 ? attributes.antialias : true,
              alpha: true,
              depth: attributes.depth,
              stencil: attributes.stencil,
              framebufferScaleFactor
            };
            glBaseLayer = new XRWebGLLayer(session, gl, layerInit);
            session.updateRenderState({ baseLayer: glBaseLayer });
            newRenderTarget = new WebGLRenderTarget(
              glBaseLayer.framebufferWidth,
              glBaseLayer.framebufferHeight,
              {
                format: RGBAFormat,
                type: UnsignedByteType,
                colorSpace: renderer.outputColorSpace,
                stencilBuffer: attributes.stencil
              }
            );
          } else {
            let depthFormat = null;
            let depthType = null;
            let glDepthFormat = null;
            if (attributes.depth) {
              glDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
              depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
              depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;
            }
            const projectionlayerInit = {
              colorFormat: gl.RGBA8,
              depthFormat: glDepthFormat,
              scaleFactor: framebufferScaleFactor
            };
            glBinding = new XRWebGLBinding(session, gl);
            glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);
            session.updateRenderState({ layers: [glProjLayer] });
            newRenderTarget = new WebGLRenderTarget(
              glProjLayer.textureWidth,
              glProjLayer.textureHeight,
              {
                format: RGBAFormat,
                type: UnsignedByteType,
                depthTexture: new DepthTexture(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, void 0, void 0, void 0, void 0, void 0, void 0, depthFormat),
                stencilBuffer: attributes.stencil,
                colorSpace: renderer.outputColorSpace,
                samples: attributes.antialias ? 4 : 0
              }
            );
            const renderTargetProperties = renderer.properties.get(newRenderTarget);
            renderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;
          }
          newRenderTarget.isXRRenderTarget = true;
          this.setFoveation(foveation);
          customReferenceSpace = null;
          referenceSpace = await session.requestReferenceSpace(referenceSpaceType);
          animation.setContext(session);
          animation.start();
          scope.isPresenting = true;
          scope.dispatchEvent({ type: "sessionstart" });
        }
      };
      this.getEnvironmentBlendMode = function() {
        if (session !== null) {
          return session.environmentBlendMode;
        }
      };
      function onInputSourcesChange(event) {
        for (let i = 0; i < event.removed.length; i++) {
          const inputSource = event.removed[i];
          const index = controllerInputSources.indexOf(inputSource);
          if (index >= 0) {
            controllerInputSources[index] = null;
            controllers[index].disconnect(inputSource);
          }
        }
        for (let i = 0; i < event.added.length; i++) {
          const inputSource = event.added[i];
          let controllerIndex = controllerInputSources.indexOf(inputSource);
          if (controllerIndex === -1) {
            for (let i2 = 0; i2 < controllers.length; i2++) {
              if (i2 >= controllerInputSources.length) {
                controllerInputSources.push(inputSource);
                controllerIndex = i2;
                break;
              } else if (controllerInputSources[i2] === null) {
                controllerInputSources[i2] = inputSource;
                controllerIndex = i2;
                break;
              }
            }
            if (controllerIndex === -1)
              break;
          }
          const controller = controllers[controllerIndex];
          if (controller) {
            controller.connect(inputSource);
          }
        }
      }
      const cameraLPos = new Vector3();
      const cameraRPos = new Vector3();
      function setProjectionFromUnion(camera, cameraL2, cameraR2) {
        cameraLPos.setFromMatrixPosition(cameraL2.matrixWorld);
        cameraRPos.setFromMatrixPosition(cameraR2.matrixWorld);
        const ipd = cameraLPos.distanceTo(cameraRPos);
        const projL = cameraL2.projectionMatrix.elements;
        const projR = cameraR2.projectionMatrix.elements;
        const near = projL[14] / (projL[10] - 1);
        const far = projL[14] / (projL[10] + 1);
        const topFov = (projL[9] + 1) / projL[5];
        const bottomFov = (projL[9] - 1) / projL[5];
        const leftFov = (projL[8] - 1) / projL[0];
        const rightFov = (projR[8] + 1) / projR[0];
        const left = near * leftFov;
        const right = near * rightFov;
        const zOffset = ipd / (-leftFov + rightFov);
        const xOffset = zOffset * -leftFov;
        cameraL2.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
        camera.translateX(xOffset);
        camera.translateZ(zOffset);
        camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
        camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
        const near2 = near + zOffset;
        const far2 = far + zOffset;
        const left2 = left - xOffset;
        const right2 = right + (ipd - xOffset);
        const top2 = topFov * far / far2 * near2;
        const bottom2 = bottomFov * far / far2 * near2;
        camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
        camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();
      }
      function updateCamera(camera, parent) {
        if (parent === null) {
          camera.matrixWorld.copy(camera.matrix);
        } else {
          camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
        }
        camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
      }
      this.updateCamera = function(camera) {
        if (session === null)
          return;
        cameraXR.near = cameraR.near = cameraL.near = camera.near;
        cameraXR.far = cameraR.far = cameraL.far = camera.far;
        if (_currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far) {
          session.updateRenderState({
            depthNear: cameraXR.near,
            depthFar: cameraXR.far
          });
          _currentDepthNear = cameraXR.near;
          _currentDepthFar = cameraXR.far;
        }
        const parent = camera.parent;
        const cameras2 = cameraXR.cameras;
        updateCamera(cameraXR, parent);
        for (let i = 0; i < cameras2.length; i++) {
          updateCamera(cameras2[i], parent);
        }
        if (cameras2.length === 2) {
          setProjectionFromUnion(cameraXR, cameraL, cameraR);
        } else {
          cameraXR.projectionMatrix.copy(cameraL.projectionMatrix);
        }
        updateUserCamera(camera, cameraXR, parent);
      };
      function updateUserCamera(camera, cameraXR2, parent) {
        if (parent === null) {
          camera.matrix.copy(cameraXR2.matrixWorld);
        } else {
          camera.matrix.copy(parent.matrixWorld);
          camera.matrix.invert();
          camera.matrix.multiply(cameraXR2.matrixWorld);
        }
        camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
        camera.updateMatrixWorld(true);
        const children = camera.children;
        for (let i = 0, l = children.length; i < l; i++) {
          children[i].updateMatrixWorld(true);
        }
        camera.projectionMatrix.copy(cameraXR2.projectionMatrix);
        camera.projectionMatrixInverse.copy(cameraXR2.projectionMatrixInverse);
        if (camera.isPerspectiveCamera) {
          camera.fov = RAD2DEG * 2 * Math.atan(1 / camera.projectionMatrix.elements[5]);
          camera.zoom = 1;
        }
      }
      this.getCamera = function() {
        return cameraXR;
      };
      this.getFoveation = function() {
        if (glProjLayer === null && glBaseLayer === null) {
          return void 0;
        }
        return foveation;
      };
      this.setFoveation = function(value) {
        foveation = value;
        if (glProjLayer !== null) {
          glProjLayer.fixedFoveation = value;
        }
        if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== void 0) {
          glBaseLayer.fixedFoveation = value;
        }
      };
      let onAnimationFrameCallback = null;
      function onAnimationFrame(time, frame) {
        pose = frame.getViewerPose(customReferenceSpace || referenceSpace);
        xrFrame = frame;
        if (pose !== null) {
          const views = pose.views;
          if (glBaseLayer !== null) {
            renderer.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);
            renderer.setRenderTarget(newRenderTarget);
          }
          let cameraXRNeedsUpdate = false;
          if (views.length !== cameraXR.cameras.length) {
            cameraXR.cameras.length = 0;
            cameraXRNeedsUpdate = true;
          }
          for (let i = 0; i < views.length; i++) {
            const view = views[i];
            let viewport = null;
            if (glBaseLayer !== null) {
              viewport = glBaseLayer.getViewport(view);
            } else {
              const glSubImage = glBinding.getViewSubImage(glProjLayer, view);
              viewport = glSubImage.viewport;
              if (i === 0) {
                renderer.setRenderTargetTextures(
                  newRenderTarget,
                  glSubImage.colorTexture,
                  glProjLayer.ignoreDepthValues ? void 0 : glSubImage.depthStencilTexture
                );
                renderer.setRenderTarget(newRenderTarget);
              }
            }
            let camera = cameras[i];
            if (camera === void 0) {
              camera = new PerspectiveCamera();
              camera.layers.enable(i);
              camera.viewport = new Vector4();
              cameras[i] = camera;
            }
            camera.matrix.fromArray(view.transform.matrix);
            camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);
            camera.projectionMatrix.fromArray(view.projectionMatrix);
            camera.projectionMatrixInverse.copy(camera.projectionMatrix).invert();
            camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
            if (i === 0) {
              cameraXR.matrix.copy(camera.matrix);
              cameraXR.matrix.decompose(cameraXR.position, cameraXR.quaternion, cameraXR.scale);
            }
            if (cameraXRNeedsUpdate === true) {
              cameraXR.cameras.push(camera);
            }
          }
        }
        for (let i = 0; i < controllers.length; i++) {
          const inputSource = controllerInputSources[i];
          const controller = controllers[i];
          if (inputSource !== null && controller !== void 0) {
            controller.update(inputSource, frame, customReferenceSpace || referenceSpace);
          }
        }
        if (onAnimationFrameCallback)
          onAnimationFrameCallback(time, frame);
        if (frame.detectedPlanes) {
          scope.dispatchEvent({ type: "planesdetected", data: frame });
        }
        xrFrame = null;
      }
      const animation = new WebGLAnimation();
      animation.setAnimationLoop(onAnimationFrame);
      this.setAnimationLoop = function(callback) {
        onAnimationFrameCallback = callback;
      };
      this.dispose = function() {
      };
    }
  };
  function WebGLMaterials(renderer, properties) {
    function refreshTransformUniform(map, uniform) {
      if (map.matrixAutoUpdate === true) {
        map.updateMatrix();
      }
      uniform.value.copy(map.matrix);
    }
    function refreshFogUniforms(uniforms, fog) {
      fog.color.getRGB(uniforms.fogColor.value, getUnlitUniformColorSpace(renderer));
      if (fog.isFog) {
        uniforms.fogNear.value = fog.near;
        uniforms.fogFar.value = fog.far;
      } else if (fog.isFogExp2) {
        uniforms.fogDensity.value = fog.density;
      }
    }
    function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {
      if (material.isMeshBasicMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isMeshLambertMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isMeshToonMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsToon(uniforms, material);
      } else if (material.isMeshPhongMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsPhong(uniforms, material);
      } else if (material.isMeshStandardMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsStandard(uniforms, material);
        if (material.isMeshPhysicalMaterial) {
          refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);
        }
      } else if (material.isMeshMatcapMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsMatcap(uniforms, material);
      } else if (material.isMeshDepthMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isMeshDistanceMaterial) {
        refreshUniformsCommon(uniforms, material);
        refreshUniformsDistance(uniforms, material);
      } else if (material.isMeshNormalMaterial) {
        refreshUniformsCommon(uniforms, material);
      } else if (material.isLineBasicMaterial) {
        refreshUniformsLine(uniforms, material);
        if (material.isLineDashedMaterial) {
          refreshUniformsDash(uniforms, material);
        }
      } else if (material.isPointsMaterial) {
        refreshUniformsPoints(uniforms, material, pixelRatio, height);
      } else if (material.isSpriteMaterial) {
        refreshUniformsSprites(uniforms, material);
      } else if (material.isShadowMaterial) {
        uniforms.color.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
      } else if (material.isShaderMaterial) {
        material.uniformsNeedUpdate = false;
      }
    }
    function refreshUniformsCommon(uniforms, material) {
      uniforms.opacity.value = material.opacity;
      if (material.color) {
        uniforms.diffuse.value.copy(material.color);
      }
      if (material.emissive) {
        uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
      }
      if (material.map) {
        uniforms.map.value = material.map;
        refreshTransformUniform(material.map, uniforms.mapTransform);
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
        refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
      }
      if (material.bumpMap) {
        uniforms.bumpMap.value = material.bumpMap;
        refreshTransformUniform(material.bumpMap, uniforms.bumpMapTransform);
        uniforms.bumpScale.value = material.bumpScale;
        if (material.side === BackSide) {
          uniforms.bumpScale.value *= -1;
        }
      }
      if (material.normalMap) {
        uniforms.normalMap.value = material.normalMap;
        refreshTransformUniform(material.normalMap, uniforms.normalMapTransform);
        uniforms.normalScale.value.copy(material.normalScale);
        if (material.side === BackSide) {
          uniforms.normalScale.value.negate();
        }
      }
      if (material.displacementMap) {
        uniforms.displacementMap.value = material.displacementMap;
        refreshTransformUniform(material.displacementMap, uniforms.displacementMapTransform);
        uniforms.displacementScale.value = material.displacementScale;
        uniforms.displacementBias.value = material.displacementBias;
      }
      if (material.emissiveMap) {
        uniforms.emissiveMap.value = material.emissiveMap;
        refreshTransformUniform(material.emissiveMap, uniforms.emissiveMapTransform);
      }
      if (material.specularMap) {
        uniforms.specularMap.value = material.specularMap;
        refreshTransformUniform(material.specularMap, uniforms.specularMapTransform);
      }
      if (material.alphaTest > 0) {
        uniforms.alphaTest.value = material.alphaTest;
      }
      const envMap = properties.get(material).envMap;
      if (envMap) {
        uniforms.envMap.value = envMap;
        uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
        uniforms.reflectivity.value = material.reflectivity;
        uniforms.ior.value = material.ior;
        uniforms.refractionRatio.value = material.refractionRatio;
      }
      if (material.lightMap) {
        uniforms.lightMap.value = material.lightMap;
        const scaleFactor = renderer.useLegacyLights === true ? Math.PI : 1;
        uniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;
        refreshTransformUniform(material.lightMap, uniforms.lightMapTransform);
      }
      if (material.aoMap) {
        uniforms.aoMap.value = material.aoMap;
        uniforms.aoMapIntensity.value = material.aoMapIntensity;
        refreshTransformUniform(material.aoMap, uniforms.aoMapTransform);
      }
    }
    function refreshUniformsLine(uniforms, material) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
      if (material.map) {
        uniforms.map.value = material.map;
        refreshTransformUniform(material.map, uniforms.mapTransform);
      }
    }
    function refreshUniformsDash(uniforms, material) {
      uniforms.dashSize.value = material.dashSize;
      uniforms.totalSize.value = material.dashSize + material.gapSize;
      uniforms.scale.value = material.scale;
    }
    function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
      uniforms.size.value = material.size * pixelRatio;
      uniforms.scale.value = height * 0.5;
      if (material.map) {
        uniforms.map.value = material.map;
        refreshTransformUniform(material.map, uniforms.uvTransform);
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
        refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
      }
      if (material.alphaTest > 0) {
        uniforms.alphaTest.value = material.alphaTest;
      }
    }
    function refreshUniformsSprites(uniforms, material) {
      uniforms.diffuse.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
      uniforms.rotation.value = material.rotation;
      if (material.map) {
        uniforms.map.value = material.map;
        refreshTransformUniform(material.map, uniforms.mapTransform);
      }
      if (material.alphaMap) {
        uniforms.alphaMap.value = material.alphaMap;
        refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
      }
      if (material.alphaTest > 0) {
        uniforms.alphaTest.value = material.alphaTest;
      }
    }
    function refreshUniformsPhong(uniforms, material) {
      uniforms.specular.value.copy(material.specular);
      uniforms.shininess.value = Math.max(material.shininess, 1e-4);
    }
    function refreshUniformsToon(uniforms, material) {
      if (material.gradientMap) {
        uniforms.gradientMap.value = material.gradientMap;
      }
    }
    function refreshUniformsStandard(uniforms, material) {
      uniforms.metalness.value = material.metalness;
      if (material.metalnessMap) {
        uniforms.metalnessMap.value = material.metalnessMap;
        refreshTransformUniform(material.metalnessMap, uniforms.metalnessMapTransform);
      }
      uniforms.roughness.value = material.roughness;
      if (material.roughnessMap) {
        uniforms.roughnessMap.value = material.roughnessMap;
        refreshTransformUniform(material.roughnessMap, uniforms.roughnessMapTransform);
      }
      const envMap = properties.get(material).envMap;
      if (envMap) {
        uniforms.envMapIntensity.value = material.envMapIntensity;
      }
    }
    function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {
      uniforms.ior.value = material.ior;
      if (material.sheen > 0) {
        uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);
        uniforms.sheenRoughness.value = material.sheenRoughness;
        if (material.sheenColorMap) {
          uniforms.sheenColorMap.value = material.sheenColorMap;
          refreshTransformUniform(material.sheenColorMap, uniforms.sheenColorMapTransform);
        }
        if (material.sheenRoughnessMap) {
          uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
          refreshTransformUniform(material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform);
        }
      }
      if (material.clearcoat > 0) {
        uniforms.clearcoat.value = material.clearcoat;
        uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
        if (material.clearcoatMap) {
          uniforms.clearcoatMap.value = material.clearcoatMap;
          refreshTransformUniform(material.clearcoatMap, uniforms.clearcoatMapTransform);
        }
        if (material.clearcoatRoughnessMap) {
          uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
          refreshTransformUniform(material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform);
        }
        if (material.clearcoatNormalMap) {
          uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
          refreshTransformUniform(material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform);
          uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
          if (material.side === BackSide) {
            uniforms.clearcoatNormalScale.value.negate();
          }
        }
      }
      if (material.iridescence > 0) {
        uniforms.iridescence.value = material.iridescence;
        uniforms.iridescenceIOR.value = material.iridescenceIOR;
        uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[0];
        uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[1];
        if (material.iridescenceMap) {
          uniforms.iridescenceMap.value = material.iridescenceMap;
          refreshTransformUniform(material.iridescenceMap, uniforms.iridescenceMapTransform);
        }
        if (material.iridescenceThicknessMap) {
          uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;
          refreshTransformUniform(material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform);
        }
      }
      if (material.transmission > 0) {
        uniforms.transmission.value = material.transmission;
        uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
        uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);
        if (material.transmissionMap) {
          uniforms.transmissionMap.value = material.transmissionMap;
          refreshTransformUniform(material.transmissionMap, uniforms.transmissionMapTransform);
        }
        uniforms.thickness.value = material.thickness;
        if (material.thicknessMap) {
          uniforms.thicknessMap.value = material.thicknessMap;
          refreshTransformUniform(material.thicknessMap, uniforms.thicknessMapTransform);
        }
        uniforms.attenuationDistance.value = material.attenuationDistance;
        uniforms.attenuationColor.value.copy(material.attenuationColor);
      }
      if (material.anisotropy > 0) {
        uniforms.anisotropyVector.value.set(material.anisotropy * Math.cos(material.anisotropyRotation), material.anisotropy * Math.sin(material.anisotropyRotation));
        if (material.anisotropyMap) {
          uniforms.anisotropyMap.value = material.anisotropyMap;
          refreshTransformUniform(material.anisotropyMap, uniforms.anisotropyMapTransform);
        }
      }
      uniforms.specularIntensity.value = material.specularIntensity;
      uniforms.specularColor.value.copy(material.specularColor);
      if (material.specularColorMap) {
        uniforms.specularColorMap.value = material.specularColorMap;
        refreshTransformUniform(material.specularColorMap, uniforms.specularColorMapTransform);
      }
      if (material.specularIntensityMap) {
        uniforms.specularIntensityMap.value = material.specularIntensityMap;
        refreshTransformUniform(material.specularIntensityMap, uniforms.specularIntensityMapTransform);
      }
    }
    function refreshUniformsMatcap(uniforms, material) {
      if (material.matcap) {
        uniforms.matcap.value = material.matcap;
      }
    }
    function refreshUniformsDistance(uniforms, material) {
      const light = properties.get(material).light;
      uniforms.referencePosition.value.setFromMatrixPosition(light.matrixWorld);
      uniforms.nearDistance.value = light.shadow.camera.near;
      uniforms.farDistance.value = light.shadow.camera.far;
    }
    return {
      refreshFogUniforms,
      refreshMaterialUniforms
    };
  }
  function WebGLUniformsGroups(gl, info, capabilities, state) {
    let buffers = {};
    let updateList = {};
    let allocatedBindingPoints = [];
    const maxBindingPoints = capabilities.isWebGL2 ? gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS) : 0;
    function bind(uniformsGroup, program) {
      const webglProgram = program.program;
      state.uniformBlockBinding(uniformsGroup, webglProgram);
    }
    function update(uniformsGroup, program) {
      let buffer = buffers[uniformsGroup.id];
      if (buffer === void 0) {
        prepareUniformsGroup(uniformsGroup);
        buffer = createBuffer(uniformsGroup);
        buffers[uniformsGroup.id] = buffer;
        uniformsGroup.addEventListener("dispose", onUniformsGroupsDispose);
      }
      const webglProgram = program.program;
      state.updateUBOMapping(uniformsGroup, webglProgram);
      const frame = info.render.frame;
      if (updateList[uniformsGroup.id] !== frame) {
        updateBufferData(uniformsGroup);
        updateList[uniformsGroup.id] = frame;
      }
    }
    function createBuffer(uniformsGroup) {
      const bindingPointIndex = allocateBindingPointIndex();
      uniformsGroup.__bindingPointIndex = bindingPointIndex;
      const buffer = gl.createBuffer();
      const size = uniformsGroup.__size;
      const usage = uniformsGroup.usage;
      gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
      gl.bufferData(gl.UNIFORM_BUFFER, size, usage);
      gl.bindBuffer(gl.UNIFORM_BUFFER, null);
      gl.bindBufferBase(gl.UNIFORM_BUFFER, bindingPointIndex, buffer);
      return buffer;
    }
    function allocateBindingPointIndex() {
      for (let i = 0; i < maxBindingPoints; i++) {
        if (allocatedBindingPoints.indexOf(i) === -1) {
          allocatedBindingPoints.push(i);
          return i;
        }
      }
      console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");
      return 0;
    }
    function updateBufferData(uniformsGroup) {
      const buffer = buffers[uniformsGroup.id];
      const uniforms = uniformsGroup.uniforms;
      const cache = uniformsGroup.__cache;
      gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
      for (let i = 0, il = uniforms.length; i < il; i++) {
        const uniform = uniforms[i];
        if (hasUniformChanged(uniform, i, cache) === true) {
          const offset = uniform.__offset;
          const values = Array.isArray(uniform.value) ? uniform.value : [uniform.value];
          let arrayOffset = 0;
          for (let i2 = 0; i2 < values.length; i2++) {
            const value = values[i2];
            const info2 = getUniformSize(value);
            if (typeof value === "number") {
              uniform.__data[0] = value;
              gl.bufferSubData(gl.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data);
            } else if (value.isMatrix3) {
              uniform.__data[0] = value.elements[0];
              uniform.__data[1] = value.elements[1];
              uniform.__data[2] = value.elements[2];
              uniform.__data[3] = value.elements[0];
              uniform.__data[4] = value.elements[3];
              uniform.__data[5] = value.elements[4];
              uniform.__data[6] = value.elements[5];
              uniform.__data[7] = value.elements[0];
              uniform.__data[8] = value.elements[6];
              uniform.__data[9] = value.elements[7];
              uniform.__data[10] = value.elements[8];
              uniform.__data[11] = value.elements[0];
            } else {
              value.toArray(uniform.__data, arrayOffset);
              arrayOffset += info2.storage / Float32Array.BYTES_PER_ELEMENT;
            }
          }
          gl.bufferSubData(gl.UNIFORM_BUFFER, offset, uniform.__data);
        }
      }
      gl.bindBuffer(gl.UNIFORM_BUFFER, null);
    }
    function hasUniformChanged(uniform, index, cache) {
      const value = uniform.value;
      if (cache[index] === void 0) {
        if (typeof value === "number") {
          cache[index] = value;
        } else {
          const values = Array.isArray(value) ? value : [value];
          const tempValues = [];
          for (let i = 0; i < values.length; i++) {
            tempValues.push(values[i].clone());
          }
          cache[index] = tempValues;
        }
        return true;
      } else {
        if (typeof value === "number") {
          if (cache[index] !== value) {
            cache[index] = value;
            return true;
          }
        } else {
          const cachedObjects = Array.isArray(cache[index]) ? cache[index] : [cache[index]];
          const values = Array.isArray(value) ? value : [value];
          for (let i = 0; i < cachedObjects.length; i++) {
            const cachedObject = cachedObjects[i];
            if (cachedObject.equals(values[i]) === false) {
              cachedObject.copy(values[i]);
              return true;
            }
          }
        }
      }
      return false;
    }
    function prepareUniformsGroup(uniformsGroup) {
      const uniforms = uniformsGroup.uniforms;
      let offset = 0;
      const chunkSize = 16;
      let chunkOffset = 0;
      for (let i = 0, l = uniforms.length; i < l; i++) {
        const uniform = uniforms[i];
        const infos = {
          boundary: 0,
          // bytes
          storage: 0
          // bytes
        };
        const values = Array.isArray(uniform.value) ? uniform.value : [uniform.value];
        for (let j = 0, jl = values.length; j < jl; j++) {
          const value = values[j];
          const info2 = getUniformSize(value);
          infos.boundary += info2.boundary;
          infos.storage += info2.storage;
        }
        uniform.__data = new Float32Array(infos.storage / Float32Array.BYTES_PER_ELEMENT);
        uniform.__offset = offset;
        if (i > 0) {
          chunkOffset = offset % chunkSize;
          const remainingSizeInChunk = chunkSize - chunkOffset;
          if (chunkOffset !== 0 && remainingSizeInChunk - infos.boundary < 0) {
            offset += chunkSize - chunkOffset;
            uniform.__offset = offset;
          }
        }
        offset += infos.storage;
      }
      chunkOffset = offset % chunkSize;
      if (chunkOffset > 0)
        offset += chunkSize - chunkOffset;
      uniformsGroup.__size = offset;
      uniformsGroup.__cache = {};
      return this;
    }
    function getUniformSize(value) {
      const info2 = {
        boundary: 0,
        // bytes
        storage: 0
        // bytes
      };
      if (typeof value === "number") {
        info2.boundary = 4;
        info2.storage = 4;
      } else if (value.isVector2) {
        info2.boundary = 8;
        info2.storage = 8;
      } else if (value.isVector3 || value.isColor) {
        info2.boundary = 16;
        info2.storage = 12;
      } else if (value.isVector4) {
        info2.boundary = 16;
        info2.storage = 16;
      } else if (value.isMatrix3) {
        info2.boundary = 48;
        info2.storage = 48;
      } else if (value.isMatrix4) {
        info2.boundary = 64;
        info2.storage = 64;
      } else if (value.isTexture) {
        console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.");
      } else {
        console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", value);
      }
      return info2;
    }
    function onUniformsGroupsDispose(event) {
      const uniformsGroup = event.target;
      uniformsGroup.removeEventListener("dispose", onUniformsGroupsDispose);
      const index = allocatedBindingPoints.indexOf(uniformsGroup.__bindingPointIndex);
      allocatedBindingPoints.splice(index, 1);
      gl.deleteBuffer(buffers[uniformsGroup.id]);
      delete buffers[uniformsGroup.id];
      delete updateList[uniformsGroup.id];
    }
    function dispose() {
      for (const id in buffers) {
        gl.deleteBuffer(buffers[id]);
      }
      allocatedBindingPoints = [];
      buffers = {};
      updateList = {};
    }
    return {
      bind,
      update,
      dispose
    };
  }
  function createCanvasElement() {
    const canvas = createElementNS("canvas");
    canvas.style.display = "block";
    return canvas;
  }
  var WebGLRenderer = class {
    constructor(parameters = {}) {
      const {
        canvas = createCanvasElement(),
        context = null,
        depth = true,
        stencil = true,
        alpha = false,
        antialias = false,
        premultipliedAlpha = true,
        preserveDrawingBuffer = false,
        powerPreference = "default",
        failIfMajorPerformanceCaveat = false
      } = parameters;
      this.isWebGLRenderer = true;
      let _alpha;
      if (context !== null) {
        _alpha = context.getContextAttributes().alpha;
      } else {
        _alpha = alpha;
      }
      const uintClearColor = new Uint32Array(4);
      const intClearColor = new Int32Array(4);
      let currentRenderList = null;
      let currentRenderState = null;
      const renderListStack = [];
      const renderStateStack = [];
      this.domElement = canvas;
      this.debug = {
        /**
         * Enables error checking and reporting when shader programs are being compiled
         * @type {boolean}
         */
        checkShaderErrors: true,
        /**
         * Callback for custom error reporting.
         * @type {?Function}
         */
        onShaderError: null
      };
      this.autoClear = true;
      this.autoClearColor = true;
      this.autoClearDepth = true;
      this.autoClearStencil = true;
      this.sortObjects = true;
      this.clippingPlanes = [];
      this.localClippingEnabled = false;
      this.outputColorSpace = SRGBColorSpace;
      this.useLegacyLights = true;
      this.toneMapping = NoToneMapping;
      this.toneMappingExposure = 1;
      const _this = this;
      let _isContextLost = false;
      let _currentActiveCubeFace = 0;
      let _currentActiveMipmapLevel = 0;
      let _currentRenderTarget = null;
      let _currentMaterialId = -1;
      let _currentCamera = null;
      const _currentViewport = new Vector4();
      const _currentScissor = new Vector4();
      let _currentScissorTest = null;
      const _currentClearColor = new Color(0);
      let _currentClearAlpha = 0;
      let _width = canvas.width;
      let _height = canvas.height;
      let _pixelRatio = 1;
      let _opaqueSort = null;
      let _transparentSort = null;
      const _viewport = new Vector4(0, 0, _width, _height);
      const _scissor = new Vector4(0, 0, _width, _height);
      let _scissorTest = false;
      const _frustum = new Frustum();
      let _clippingEnabled = false;
      let _localClippingEnabled = false;
      let _transmissionRenderTarget = null;
      const _projScreenMatrix = new Matrix4();
      const _vector22 = new Vector2();
      const _vector3 = new Vector3();
      const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };
      function getTargetPixelRatio() {
        return _currentRenderTarget === null ? _pixelRatio : 1;
      }
      let _gl = context;
      function getContext(contextNames, contextAttributes) {
        for (let i = 0; i < contextNames.length; i++) {
          const contextName = contextNames[i];
          const context2 = canvas.getContext(contextName, contextAttributes);
          if (context2 !== null)
            return context2;
        }
        return null;
      }
      try {
        const contextAttributes = {
          alpha: true,
          depth,
          stencil,
          antialias,
          premultipliedAlpha,
          preserveDrawingBuffer,
          powerPreference,
          failIfMajorPerformanceCaveat
        };
        if ("setAttribute" in canvas)
          canvas.setAttribute("data-engine", `three.js r${REVISION}`);
        canvas.addEventListener("webglcontextlost", onContextLost, false);
        canvas.addEventListener("webglcontextrestored", onContextRestore, false);
        canvas.addEventListener("webglcontextcreationerror", onContextCreationError, false);
        if (_gl === null) {
          const contextNames = ["webgl2", "webgl", "experimental-webgl"];
          if (_this.isWebGL1Renderer === true) {
            contextNames.shift();
          }
          _gl = getContext(contextNames, contextAttributes);
          if (_gl === null) {
            if (getContext(contextNames)) {
              throw new Error("Error creating WebGL context with your selected attributes.");
            } else {
              throw new Error("Error creating WebGL context.");
            }
          }
        }
        if (typeof WebGLRenderingContext !== "undefined" && _gl instanceof WebGLRenderingContext) {
          console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163.");
        }
        if (_gl.getShaderPrecisionFormat === void 0) {
          _gl.getShaderPrecisionFormat = function() {
            return { "rangeMin": 1, "rangeMax": 1, "precision": 1 };
          };
        }
      } catch (error) {
        console.error("THREE.WebGLRenderer: " + error.message);
        throw error;
      }
      let extensions, capabilities, state, info;
      let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
      let programCache, materials, renderLists, renderStates, clipping, shadowMap;
      let background, morphtargets, bufferRenderer, indexedBufferRenderer;
      let utils, bindingStates, uniformsGroups;
      function initGLContext() {
        extensions = new WebGLExtensions(_gl);
        capabilities = new WebGLCapabilities(_gl, extensions, parameters);
        extensions.init(capabilities);
        utils = new WebGLUtils(_gl, extensions, capabilities);
        state = new WebGLState(_gl, extensions, capabilities);
        info = new WebGLInfo(_gl);
        properties = new WebGLProperties();
        textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
        cubemaps = new WebGLCubeMaps(_this);
        cubeuvmaps = new WebGLCubeUVMaps(_this);
        attributes = new WebGLAttributes(_gl, capabilities);
        bindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);
        geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);
        objects = new WebGLObjects(_gl, geometries, attributes, info);
        morphtargets = new WebGLMorphtargets(_gl, capabilities, textures);
        clipping = new WebGLClipping(properties);
        programCache = new WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);
        materials = new WebGLMaterials(_this, properties);
        renderLists = new WebGLRenderLists();
        renderStates = new WebGLRenderStates(extensions, capabilities);
        background = new WebGLBackground(_this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha);
        shadowMap = new WebGLShadowMap(_this, objects, capabilities);
        uniformsGroups = new WebGLUniformsGroups(_gl, info, capabilities, state);
        bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);
        indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);
        info.programs = programCache.programs;
        _this.capabilities = capabilities;
        _this.extensions = extensions;
        _this.properties = properties;
        _this.renderLists = renderLists;
        _this.shadowMap = shadowMap;
        _this.state = state;
        _this.info = info;
      }
      initGLContext();
      const xr = new WebXRManager(_this, _gl);
      this.xr = xr;
      this.getContext = function() {
        return _gl;
      };
      this.getContextAttributes = function() {
        return _gl.getContextAttributes();
      };
      this.forceContextLoss = function() {
        const extension = extensions.get("WEBGL_lose_context");
        if (extension)
          extension.loseContext();
      };
      this.forceContextRestore = function() {
        const extension = extensions.get("WEBGL_lose_context");
        if (extension)
          extension.restoreContext();
      };
      this.getPixelRatio = function() {
        return _pixelRatio;
      };
      this.setPixelRatio = function(value) {
        if (value === void 0)
          return;
        _pixelRatio = value;
        this.setSize(_width, _height, false);
      };
      this.getSize = function(target) {
        return target.set(_width, _height);
      };
      this.setSize = function(width, height, updateStyle = true) {
        if (xr.isPresenting) {
          console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
          return;
        }
        _width = width;
        _height = height;
        canvas.width = Math.floor(width * _pixelRatio);
        canvas.height = Math.floor(height * _pixelRatio);
        if (updateStyle === true) {
          canvas.style.width = width + "px";
          canvas.style.height = height + "px";
        }
        this.setViewport(0, 0, width, height);
      };
      this.getDrawingBufferSize = function(target) {
        return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
      };
      this.setDrawingBufferSize = function(width, height, pixelRatio) {
        _width = width;
        _height = height;
        _pixelRatio = pixelRatio;
        canvas.width = Math.floor(width * pixelRatio);
        canvas.height = Math.floor(height * pixelRatio);
        this.setViewport(0, 0, width, height);
      };
      this.getCurrentViewport = function(target) {
        return target.copy(_currentViewport);
      };
      this.getViewport = function(target) {
        return target.copy(_viewport);
      };
      this.setViewport = function(x, y, width, height) {
        if (x.isVector4) {
          _viewport.set(x.x, x.y, x.z, x.w);
        } else {
          _viewport.set(x, y, width, height);
        }
        state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
      };
      this.getScissor = function(target) {
        return target.copy(_scissor);
      };
      this.setScissor = function(x, y, width, height) {
        if (x.isVector4) {
          _scissor.set(x.x, x.y, x.z, x.w);
        } else {
          _scissor.set(x, y, width, height);
        }
        state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
      };
      this.getScissorTest = function() {
        return _scissorTest;
      };
      this.setScissorTest = function(boolean) {
        state.setScissorTest(_scissorTest = boolean);
      };
      this.setOpaqueSort = function(method) {
        _opaqueSort = method;
      };
      this.setTransparentSort = function(method) {
        _transparentSort = method;
      };
      this.getClearColor = function(target) {
        return target.copy(background.getClearColor());
      };
      this.setClearColor = function() {
        background.setClearColor.apply(background, arguments);
      };
      this.getClearAlpha = function() {
        return background.getClearAlpha();
      };
      this.setClearAlpha = function() {
        background.setClearAlpha.apply(background, arguments);
      };
      this.clear = function(color = true, depth2 = true, stencil2 = true) {
        let bits = 0;
        if (color) {
          let isIntegerFormat = false;
          if (_currentRenderTarget !== null) {
            const targetFormat = _currentRenderTarget.texture.format;
            isIntegerFormat = targetFormat === RGBAIntegerFormat || targetFormat === RGIntegerFormat || targetFormat === RedIntegerFormat;
          }
          if (isIntegerFormat) {
            const targetType = _currentRenderTarget.texture.type;
            const isUnsignedType = targetType === UnsignedByteType || targetType === UnsignedIntType || targetType === UnsignedShortType || targetType === UnsignedInt248Type || targetType === UnsignedShort4444Type || targetType === UnsignedShort5551Type;
            const clearColor = background.getClearColor();
            const a = background.getClearAlpha();
            const r = clearColor.r;
            const g = clearColor.g;
            const b = clearColor.b;
            if (isUnsignedType) {
              uintClearColor[0] = r;
              uintClearColor[1] = g;
              uintClearColor[2] = b;
              uintClearColor[3] = a;
              _gl.clearBufferuiv(_gl.COLOR, 0, uintClearColor);
            } else {
              intClearColor[0] = r;
              intClearColor[1] = g;
              intClearColor[2] = b;
              intClearColor[3] = a;
              _gl.clearBufferiv(_gl.COLOR, 0, intClearColor);
            }
          } else {
            bits |= _gl.COLOR_BUFFER_BIT;
          }
        }
        if (depth2)
          bits |= _gl.DEPTH_BUFFER_BIT;
        if (stencil2)
          bits |= _gl.STENCIL_BUFFER_BIT;
        _gl.clear(bits);
      };
      this.clearColor = function() {
        this.clear(true, false, false);
      };
      this.clearDepth = function() {
        this.clear(false, true, false);
      };
      this.clearStencil = function() {
        this.clear(false, false, true);
      };
      this.dispose = function() {
        canvas.removeEventListener("webglcontextlost", onContextLost, false);
        canvas.removeEventListener("webglcontextrestored", onContextRestore, false);
        canvas.removeEventListener("webglcontextcreationerror", onContextCreationError, false);
        renderLists.dispose();
        renderStates.dispose();
        properties.dispose();
        cubemaps.dispose();
        cubeuvmaps.dispose();
        objects.dispose();
        bindingStates.dispose();
        uniformsGroups.dispose();
        programCache.dispose();
        xr.dispose();
        xr.removeEventListener("sessionstart", onXRSessionStart);
        xr.removeEventListener("sessionend", onXRSessionEnd);
        if (_transmissionRenderTarget) {
          _transmissionRenderTarget.dispose();
          _transmissionRenderTarget = null;
        }
        animation.stop();
      };
      function onContextLost(event) {
        event.preventDefault();
        console.log("THREE.WebGLRenderer: Context Lost.");
        _isContextLost = true;
      }
      function onContextRestore() {
        console.log("THREE.WebGLRenderer: Context Restored.");
        _isContextLost = false;
        const infoAutoReset = info.autoReset;
        const shadowMapEnabled = shadowMap.enabled;
        const shadowMapAutoUpdate = shadowMap.autoUpdate;
        const shadowMapNeedsUpdate = shadowMap.needsUpdate;
        const shadowMapType = shadowMap.type;
        initGLContext();
        info.autoReset = infoAutoReset;
        shadowMap.enabled = shadowMapEnabled;
        shadowMap.autoUpdate = shadowMapAutoUpdate;
        shadowMap.needsUpdate = shadowMapNeedsUpdate;
        shadowMap.type = shadowMapType;
      }
      function onContextCreationError(event) {
        console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", event.statusMessage);
      }
      function onMaterialDispose(event) {
        const material = event.target;
        material.removeEventListener("dispose", onMaterialDispose);
        deallocateMaterial(material);
      }
      function deallocateMaterial(material) {
        releaseMaterialProgramReferences(material);
        properties.remove(material);
      }
      function releaseMaterialProgramReferences(material) {
        const programs = properties.get(material).programs;
        if (programs !== void 0) {
          programs.forEach(function(program) {
            programCache.releaseProgram(program);
          });
          if (material.isShaderMaterial) {
            programCache.releaseShaderCache(material);
          }
        }
      }
      this.renderBufferDirect = function(camera, scene, geometry, material, object, group) {
        if (scene === null)
          scene = _emptyScene;
        const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
        const program = setProgram(camera, scene, geometry, material, object);
        state.setMaterial(material, frontFaceCW);
        let index = geometry.index;
        let rangeFactor = 1;
        if (material.wireframe === true) {
          index = geometries.getWireframeAttribute(geometry);
          rangeFactor = 2;
        }
        const drawRange = geometry.drawRange;
        const position = geometry.attributes.position;
        let drawStart = drawRange.start * rangeFactor;
        let drawEnd = (drawRange.start + drawRange.count) * rangeFactor;
        if (group !== null) {
          drawStart = Math.max(drawStart, group.start * rangeFactor);
          drawEnd = Math.min(drawEnd, (group.start + group.count) * rangeFactor);
        }
        if (index !== null) {
          drawStart = Math.max(drawStart, 0);
          drawEnd = Math.min(drawEnd, index.count);
        } else if (position !== void 0 && position !== null) {
          drawStart = Math.max(drawStart, 0);
          drawEnd = Math.min(drawEnd, position.count);
        }
        const drawCount = drawEnd - drawStart;
        if (drawCount < 0 || drawCount === Infinity)
          return;
        bindingStates.setup(object, material, program, geometry, index);
        let attribute;
        let renderer = bufferRenderer;
        if (index !== null) {
          attribute = attributes.get(index);
          renderer = indexedBufferRenderer;
          renderer.setIndex(attribute);
        }
        if (object.isMesh) {
          if (material.wireframe === true) {
            state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
            renderer.setMode(_gl.LINES);
          } else {
            renderer.setMode(_gl.TRIANGLES);
          }
        } else if (object.isLine) {
          let lineWidth = material.linewidth;
          if (lineWidth === void 0)
            lineWidth = 1;
          state.setLineWidth(lineWidth * getTargetPixelRatio());
          if (object.isLineSegments) {
            renderer.setMode(_gl.LINES);
          } else if (object.isLineLoop) {
            renderer.setMode(_gl.LINE_LOOP);
          } else {
            renderer.setMode(_gl.LINE_STRIP);
          }
        } else if (object.isPoints) {
          renderer.setMode(_gl.POINTS);
        } else if (object.isSprite) {
          renderer.setMode(_gl.TRIANGLES);
        }
        if (object.isInstancedMesh) {
          renderer.renderInstances(drawStart, drawCount, object.count);
        } else if (geometry.isInstancedBufferGeometry) {
          const maxInstanceCount = geometry._maxInstanceCount !== void 0 ? geometry._maxInstanceCount : Infinity;
          const instanceCount = Math.min(geometry.instanceCount, maxInstanceCount);
          renderer.renderInstances(drawStart, drawCount, instanceCount);
        } else {
          renderer.render(drawStart, drawCount);
        }
      };
      this.compile = function(scene, camera) {
        function prepare(material, scene2, object) {
          if (material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false) {
            material.side = BackSide;
            material.needsUpdate = true;
            getProgram(material, scene2, object);
            material.side = FrontSide;
            material.needsUpdate = true;
            getProgram(material, scene2, object);
            material.side = DoubleSide;
          } else {
            getProgram(material, scene2, object);
          }
        }
        currentRenderState = renderStates.get(scene);
        currentRenderState.init();
        renderStateStack.push(currentRenderState);
        scene.traverseVisible(function(object) {
          if (object.isLight && object.layers.test(camera.layers)) {
            currentRenderState.pushLight(object);
            if (object.castShadow) {
              currentRenderState.pushShadow(object);
            }
          }
        });
        currentRenderState.setupLights(_this.useLegacyLights);
        scene.traverse(function(object) {
          const material = object.material;
          if (material) {
            if (Array.isArray(material)) {
              for (let i = 0; i < material.length; i++) {
                const material2 = material[i];
                prepare(material2, scene, object);
              }
            } else {
              prepare(material, scene, object);
            }
          }
        });
        renderStateStack.pop();
        currentRenderState = null;
      };
      let onAnimationFrameCallback = null;
      function onAnimationFrame(time) {
        if (onAnimationFrameCallback)
          onAnimationFrameCallback(time);
      }
      function onXRSessionStart() {
        animation.stop();
      }
      function onXRSessionEnd() {
        animation.start();
      }
      const animation = new WebGLAnimation();
      animation.setAnimationLoop(onAnimationFrame);
      if (typeof self !== "undefined")
        animation.setContext(self);
      this.setAnimationLoop = function(callback) {
        onAnimationFrameCallback = callback;
        xr.setAnimationLoop(callback);
        callback === null ? animation.stop() : animation.start();
      };
      xr.addEventListener("sessionstart", onXRSessionStart);
      xr.addEventListener("sessionend", onXRSessionEnd);
      this.render = function(scene, camera) {
        if (camera !== void 0 && camera.isCamera !== true) {
          console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
          return;
        }
        if (_isContextLost === true)
          return;
        if (scene.matrixWorldAutoUpdate === true)
          scene.updateMatrixWorld();
        if (camera.parent === null && camera.matrixWorldAutoUpdate === true)
          camera.updateMatrixWorld();
        if (xr.enabled === true && xr.isPresenting === true) {
          if (xr.cameraAutoUpdate === true)
            xr.updateCamera(camera);
          camera = xr.getCamera();
        }
        if (scene.isScene === true)
          scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);
        currentRenderState = renderStates.get(scene, renderStateStack.length);
        currentRenderState.init();
        renderStateStack.push(currentRenderState);
        _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
        _frustum.setFromProjectionMatrix(_projScreenMatrix);
        _localClippingEnabled = this.localClippingEnabled;
        _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled);
        currentRenderList = renderLists.get(scene, renderListStack.length);
        currentRenderList.init();
        renderListStack.push(currentRenderList);
        projectObject(scene, camera, 0, _this.sortObjects);
        currentRenderList.finish();
        if (_this.sortObjects === true) {
          currentRenderList.sort(_opaqueSort, _transparentSort);
        }
        this.info.render.frame++;
        if (_clippingEnabled === true)
          clipping.beginShadows();
        const shadowsArray = currentRenderState.state.shadowsArray;
        shadowMap.render(shadowsArray, scene, camera);
        if (_clippingEnabled === true)
          clipping.endShadows();
        if (this.info.autoReset === true)
          this.info.reset();
        background.render(currentRenderList, scene);
        currentRenderState.setupLights(_this.useLegacyLights);
        if (camera.isArrayCamera) {
          const cameras = camera.cameras;
          for (let i = 0, l = cameras.length; i < l; i++) {
            const camera2 = cameras[i];
            renderScene(currentRenderList, scene, camera2, camera2.viewport);
          }
        } else {
          renderScene(currentRenderList, scene, camera);
        }
        if (_currentRenderTarget !== null) {
          textures.updateMultisampleRenderTarget(_currentRenderTarget);
          textures.updateRenderTargetMipmap(_currentRenderTarget);
        }
        if (scene.isScene === true)
          scene.onAfterRender(_this, scene, camera);
        bindingStates.resetDefaultState();
        _currentMaterialId = -1;
        _currentCamera = null;
        renderStateStack.pop();
        if (renderStateStack.length > 0) {
          currentRenderState = renderStateStack[renderStateStack.length - 1];
        } else {
          currentRenderState = null;
        }
        renderListStack.pop();
        if (renderListStack.length > 0) {
          currentRenderList = renderListStack[renderListStack.length - 1];
        } else {
          currentRenderList = null;
        }
      };
      function projectObject(object, camera, groupOrder, sortObjects) {
        if (object.visible === false)
          return;
        const visible = object.layers.test(camera.layers);
        if (visible) {
          if (object.isGroup) {
            groupOrder = object.renderOrder;
          } else if (object.isLOD) {
            if (object.autoUpdate === true)
              object.update(camera);
          } else if (object.isLight) {
            currentRenderState.pushLight(object);
            if (object.castShadow) {
              currentRenderState.pushShadow(object);
            }
          } else if (object.isSprite) {
            if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
              if (sortObjects) {
                _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
              }
              const geometry = objects.update(object);
              const material = object.material;
              if (material.visible) {
                currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
              }
            }
          } else if (object.isMesh || object.isLine || object.isPoints) {
            if (!object.frustumCulled || _frustum.intersectsObject(object)) {
              const geometry = objects.update(object);
              const material = object.material;
              if (sortObjects) {
                if (object.boundingSphere !== void 0) {
                  if (object.boundingSphere === null)
                    object.computeBoundingSphere();
                  _vector3.copy(object.boundingSphere.center);
                } else {
                  if (geometry.boundingSphere === null)
                    geometry.computeBoundingSphere();
                  _vector3.copy(geometry.boundingSphere.center);
                }
                _vector3.applyMatrix4(object.matrixWorld).applyMatrix4(_projScreenMatrix);
              }
              if (Array.isArray(material)) {
                const groups = geometry.groups;
                for (let i = 0, l = groups.length; i < l; i++) {
                  const group = groups[i];
                  const groupMaterial = material[group.materialIndex];
                  if (groupMaterial && groupMaterial.visible) {
                    currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);
                  }
                }
              } else if (material.visible) {
                currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
              }
            }
          }
        }
        const children = object.children;
        for (let i = 0, l = children.length; i < l; i++) {
          projectObject(children[i], camera, groupOrder, sortObjects);
        }
      }
      function renderScene(currentRenderList2, scene, camera, viewport) {
        const opaqueObjects = currentRenderList2.opaque;
        const transmissiveObjects = currentRenderList2.transmissive;
        const transparentObjects = currentRenderList2.transparent;
        currentRenderState.setupLightsView(camera);
        if (_clippingEnabled === true)
          clipping.setGlobalState(_this.clippingPlanes, camera);
        if (transmissiveObjects.length > 0)
          renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera);
        if (viewport)
          state.viewport(_currentViewport.copy(viewport));
        if (opaqueObjects.length > 0)
          renderObjects(opaqueObjects, scene, camera);
        if (transmissiveObjects.length > 0)
          renderObjects(transmissiveObjects, scene, camera);
        if (transparentObjects.length > 0)
          renderObjects(transparentObjects, scene, camera);
        state.buffers.depth.setTest(true);
        state.buffers.depth.setMask(true);
        state.buffers.color.setMask(true);
        state.setPolygonOffset(false);
      }
      function renderTransmissionPass(opaqueObjects, transmissiveObjects, scene, camera) {
        const isWebGL2 = capabilities.isWebGL2;
        if (_transmissionRenderTarget === null) {
          _transmissionRenderTarget = new WebGLRenderTarget(1, 1, {
            generateMipmaps: true,
            type: extensions.has("EXT_color_buffer_half_float") ? HalfFloatType : UnsignedByteType,
            minFilter: LinearMipmapLinearFilter,
            samples: isWebGL2 ? 4 : 0
          });
        }
        _this.getDrawingBufferSize(_vector22);
        if (isWebGL2) {
          _transmissionRenderTarget.setSize(_vector22.x, _vector22.y);
        } else {
          _transmissionRenderTarget.setSize(floorPowerOfTwo(_vector22.x), floorPowerOfTwo(_vector22.y));
        }
        const currentRenderTarget = _this.getRenderTarget();
        _this.setRenderTarget(_transmissionRenderTarget);
        _this.getClearColor(_currentClearColor);
        _currentClearAlpha = _this.getClearAlpha();
        if (_currentClearAlpha < 1)
          _this.setClearColor(16777215, 0.5);
        _this.clear();
        const currentToneMapping = _this.toneMapping;
        _this.toneMapping = NoToneMapping;
        renderObjects(opaqueObjects, scene, camera);
        textures.updateMultisampleRenderTarget(_transmissionRenderTarget);
        textures.updateRenderTargetMipmap(_transmissionRenderTarget);
        let renderTargetNeedsUpdate = false;
        for (let i = 0, l = transmissiveObjects.length; i < l; i++) {
          const renderItem = transmissiveObjects[i];
          const object = renderItem.object;
          const geometry = renderItem.geometry;
          const material = renderItem.material;
          const group = renderItem.group;
          if (material.side === DoubleSide && object.layers.test(camera.layers)) {
            const currentSide = material.side;
            material.side = BackSide;
            material.needsUpdate = true;
            renderObject(object, scene, camera, geometry, material, group);
            material.side = currentSide;
            material.needsUpdate = true;
            renderTargetNeedsUpdate = true;
          }
        }
        if (renderTargetNeedsUpdate === true) {
          textures.updateMultisampleRenderTarget(_transmissionRenderTarget);
          textures.updateRenderTargetMipmap(_transmissionRenderTarget);
        }
        _this.setRenderTarget(currentRenderTarget);
        _this.setClearColor(_currentClearColor, _currentClearAlpha);
        _this.toneMapping = currentToneMapping;
      }
      function renderObjects(renderList, scene, camera) {
        const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
        for (let i = 0, l = renderList.length; i < l; i++) {
          const renderItem = renderList[i];
          const object = renderItem.object;
          const geometry = renderItem.geometry;
          const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
          const group = renderItem.group;
          if (object.layers.test(camera.layers)) {
            renderObject(object, scene, camera, geometry, material, group);
          }
        }
      }
      function renderObject(object, scene, camera, geometry, material, group) {
        object.onBeforeRender(_this, scene, camera, geometry, material, group);
        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
        object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
        material.onBeforeRender(_this, scene, camera, geometry, object, group);
        if (material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false) {
          material.side = BackSide;
          material.needsUpdate = true;
          _this.renderBufferDirect(camera, scene, geometry, material, object, group);
          material.side = FrontSide;
          material.needsUpdate = true;
          _this.renderBufferDirect(camera, scene, geometry, material, object, group);
          material.side = DoubleSide;
        } else {
          _this.renderBufferDirect(camera, scene, geometry, material, object, group);
        }
        object.onAfterRender(_this, scene, camera, geometry, material, group);
      }
      function getProgram(material, scene, object) {
        if (scene.isScene !== true)
          scene = _emptyScene;
        const materialProperties = properties.get(material);
        const lights = currentRenderState.state.lights;
        const shadowsArray = currentRenderState.state.shadowsArray;
        const lightsStateVersion = lights.state.version;
        const parameters2 = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
        const programCacheKey = programCache.getProgramCacheKey(parameters2);
        let programs = materialProperties.programs;
        materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
        materialProperties.fog = scene.fog;
        materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);
        if (programs === void 0) {
          material.addEventListener("dispose", onMaterialDispose);
          programs = /* @__PURE__ */ new Map();
          materialProperties.programs = programs;
        }
        let program = programs.get(programCacheKey);
        if (program !== void 0) {
          if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
            updateCommonMaterialProperties(material, parameters2);
            return program;
          }
        } else {
          parameters2.uniforms = programCache.getUniforms(material);
          material.onBuild(object, parameters2, _this);
          material.onBeforeCompile(parameters2, _this);
          program = programCache.acquireProgram(parameters2, programCacheKey);
          programs.set(programCacheKey, program);
          materialProperties.uniforms = parameters2.uniforms;
        }
        const uniforms = materialProperties.uniforms;
        if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
          uniforms.clippingPlanes = clipping.uniform;
        }
        updateCommonMaterialProperties(material, parameters2);
        materialProperties.needsLights = materialNeedsLights(material);
        materialProperties.lightsStateVersion = lightsStateVersion;
        if (materialProperties.needsLights) {
          uniforms.ambientLightColor.value = lights.state.ambient;
          uniforms.lightProbe.value = lights.state.probe;
          uniforms.directionalLights.value = lights.state.directional;
          uniforms.directionalLightShadows.value = lights.state.directionalShadow;
          uniforms.spotLights.value = lights.state.spot;
          uniforms.spotLightShadows.value = lights.state.spotShadow;
          uniforms.rectAreaLights.value = lights.state.rectArea;
          uniforms.ltc_1.value = lights.state.rectAreaLTC1;
          uniforms.ltc_2.value = lights.state.rectAreaLTC2;
          uniforms.pointLights.value = lights.state.point;
          uniforms.pointLightShadows.value = lights.state.pointShadow;
          uniforms.hemisphereLights.value = lights.state.hemi;
          uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
          uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
          uniforms.spotShadowMap.value = lights.state.spotShadowMap;
          uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;
          uniforms.spotLightMap.value = lights.state.spotLightMap;
          uniforms.pointShadowMap.value = lights.state.pointShadowMap;
          uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
        }
        const progUniforms = program.getUniforms();
        const uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
        materialProperties.currentProgram = program;
        materialProperties.uniformsList = uniformsList;
        return program;
      }
      function updateCommonMaterialProperties(material, parameters2) {
        const materialProperties = properties.get(material);
        materialProperties.outputColorSpace = parameters2.outputColorSpace;
        materialProperties.instancing = parameters2.instancing;
        materialProperties.skinning = parameters2.skinning;
        materialProperties.morphTargets = parameters2.morphTargets;
        materialProperties.morphNormals = parameters2.morphNormals;
        materialProperties.morphColors = parameters2.morphColors;
        materialProperties.morphTargetsCount = parameters2.morphTargetsCount;
        materialProperties.numClippingPlanes = parameters2.numClippingPlanes;
        materialProperties.numIntersection = parameters2.numClipIntersection;
        materialProperties.vertexAlphas = parameters2.vertexAlphas;
        materialProperties.vertexTangents = parameters2.vertexTangents;
        materialProperties.toneMapping = parameters2.toneMapping;
      }
      function setProgram(camera, scene, geometry, material, object) {
        if (scene.isScene !== true)
          scene = _emptyScene;
        textures.resetTextureUnits();
        const fog = scene.fog;
        const environment = material.isMeshStandardMaterial ? scene.environment : null;
        const colorSpace = _currentRenderTarget === null ? _this.outputColorSpace : _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace;
        const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
        const vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;
        const vertexTangents = !!geometry.attributes.tangent && (!!material.normalMap || material.anisotropy > 0);
        const morphTargets = !!geometry.morphAttributes.position;
        const morphNormals = !!geometry.morphAttributes.normal;
        const morphColors = !!geometry.morphAttributes.color;
        const toneMapping = material.toneMapped ? _this.toneMapping : NoToneMapping;
        const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
        const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
        const materialProperties = properties.get(material);
        const lights = currentRenderState.state.lights;
        if (_clippingEnabled === true) {
          if (_localClippingEnabled === true || camera !== _currentCamera) {
            const useCache = camera === _currentCamera && material.id === _currentMaterialId;
            clipping.setState(material, camera, useCache);
          }
        }
        let needsProgramChange = false;
        if (material.version === materialProperties.__version) {
          if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {
            needsProgramChange = true;
          } else if (materialProperties.outputColorSpace !== colorSpace) {
            needsProgramChange = true;
          } else if (object.isInstancedMesh && materialProperties.instancing === false) {
            needsProgramChange = true;
          } else if (!object.isInstancedMesh && materialProperties.instancing === true) {
            needsProgramChange = true;
          } else if (object.isSkinnedMesh && materialProperties.skinning === false) {
            needsProgramChange = true;
          } else if (!object.isSkinnedMesh && materialProperties.skinning === true) {
            needsProgramChange = true;
          } else if (materialProperties.envMap !== envMap) {
            needsProgramChange = true;
          } else if (material.fog === true && materialProperties.fog !== fog) {
            needsProgramChange = true;
          } else if (materialProperties.numClippingPlanes !== void 0 && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {
            needsProgramChange = true;
          } else if (materialProperties.vertexAlphas !== vertexAlphas) {
            needsProgramChange = true;
          } else if (materialProperties.vertexTangents !== vertexTangents) {
            needsProgramChange = true;
          } else if (materialProperties.morphTargets !== morphTargets) {
            needsProgramChange = true;
          } else if (materialProperties.morphNormals !== morphNormals) {
            needsProgramChange = true;
          } else if (materialProperties.morphColors !== morphColors) {
            needsProgramChange = true;
          } else if (materialProperties.toneMapping !== toneMapping) {
            needsProgramChange = true;
          } else if (capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount) {
            needsProgramChange = true;
          }
        } else {
          needsProgramChange = true;
          materialProperties.__version = material.version;
        }
        let program = materialProperties.currentProgram;
        if (needsProgramChange === true) {
          program = getProgram(material, scene, object);
        }
        let refreshProgram = false;
        let refreshMaterial = false;
        let refreshLights = false;
        const p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
        if (state.useProgram(program.program)) {
          refreshProgram = true;
          refreshMaterial = true;
          refreshLights = true;
        }
        if (material.id !== _currentMaterialId) {
          _currentMaterialId = material.id;
          refreshMaterial = true;
        }
        if (refreshProgram || _currentCamera !== camera) {
          p_uniforms.setValue(_gl, "projectionMatrix", camera.projectionMatrix);
          if (capabilities.logarithmicDepthBuffer) {
            p_uniforms.setValue(
              _gl,
              "logDepthBufFC",
              2 / (Math.log(camera.far + 1) / Math.LN2)
            );
          }
          if (_currentCamera !== camera) {
            _currentCamera = camera;
            refreshMaterial = true;
            refreshLights = true;
          }
          if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {
            const uCamPos = p_uniforms.map.cameraPosition;
            if (uCamPos !== void 0) {
              uCamPos.setValue(
                _gl,
                _vector3.setFromMatrixPosition(camera.matrixWorld)
              );
            }
          }
          if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {
            p_uniforms.setValue(_gl, "isOrthographic", camera.isOrthographicCamera === true);
          }
          if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || object.isSkinnedMesh) {
            p_uniforms.setValue(_gl, "viewMatrix", camera.matrixWorldInverse);
          }
        }
        if (object.isSkinnedMesh) {
          p_uniforms.setOptional(_gl, object, "bindMatrix");
          p_uniforms.setOptional(_gl, object, "bindMatrixInverse");
          const skeleton = object.skeleton;
          if (skeleton) {
            if (capabilities.floatVertexTextures) {
              if (skeleton.boneTexture === null)
                skeleton.computeBoneTexture();
              p_uniforms.setValue(_gl, "boneTexture", skeleton.boneTexture, textures);
              p_uniforms.setValue(_gl, "boneTextureSize", skeleton.boneTextureSize);
            } else {
              console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.");
            }
          }
        }
        const morphAttributes = geometry.morphAttributes;
        if (morphAttributes.position !== void 0 || morphAttributes.normal !== void 0 || morphAttributes.color !== void 0 && capabilities.isWebGL2 === true) {
          morphtargets.update(object, geometry, program);
        }
        if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
          materialProperties.receiveShadow = object.receiveShadow;
          p_uniforms.setValue(_gl, "receiveShadow", object.receiveShadow);
        }
        if (material.isMeshGouraudMaterial && material.envMap !== null) {
          m_uniforms.envMap.value = envMap;
          m_uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
        }
        if (refreshMaterial) {
          p_uniforms.setValue(_gl, "toneMappingExposure", _this.toneMappingExposure);
          if (materialProperties.needsLights) {
            markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
          }
          if (fog && material.fog === true) {
            materials.refreshFogUniforms(m_uniforms, fog);
          }
          materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);
          WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
        }
        if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
          WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
          material.uniformsNeedUpdate = false;
        }
        if (material.isSpriteMaterial) {
          p_uniforms.setValue(_gl, "center", object.center);
        }
        p_uniforms.setValue(_gl, "modelViewMatrix", object.modelViewMatrix);
        p_uniforms.setValue(_gl, "normalMatrix", object.normalMatrix);
        p_uniforms.setValue(_gl, "modelMatrix", object.matrixWorld);
        if (material.isShaderMaterial || material.isRawShaderMaterial) {
          const groups = material.uniformsGroups;
          for (let i = 0, l = groups.length; i < l; i++) {
            if (capabilities.isWebGL2) {
              const group = groups[i];
              uniformsGroups.update(group, program);
              uniformsGroups.bind(group, program);
            } else {
              console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.");
            }
          }
        }
        return program;
      }
      function markUniformsLightsNeedsUpdate(uniforms, value) {
        uniforms.ambientLightColor.needsUpdate = value;
        uniforms.lightProbe.needsUpdate = value;
        uniforms.directionalLights.needsUpdate = value;
        uniforms.directionalLightShadows.needsUpdate = value;
        uniforms.pointLights.needsUpdate = value;
        uniforms.pointLightShadows.needsUpdate = value;
        uniforms.spotLights.needsUpdate = value;
        uniforms.spotLightShadows.needsUpdate = value;
        uniforms.rectAreaLights.needsUpdate = value;
        uniforms.hemisphereLights.needsUpdate = value;
      }
      function materialNeedsLights(material) {
        return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
      }
      this.getActiveCubeFace = function() {
        return _currentActiveCubeFace;
      };
      this.getActiveMipmapLevel = function() {
        return _currentActiveMipmapLevel;
      };
      this.getRenderTarget = function() {
        return _currentRenderTarget;
      };
      this.setRenderTargetTextures = function(renderTarget, colorTexture, depthTexture) {
        properties.get(renderTarget.texture).__webglTexture = colorTexture;
        properties.get(renderTarget.depthTexture).__webglTexture = depthTexture;
        const renderTargetProperties = properties.get(renderTarget);
        renderTargetProperties.__hasExternalTextures = true;
        if (renderTargetProperties.__hasExternalTextures) {
          renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === void 0;
          if (!renderTargetProperties.__autoAllocateDepthBuffer) {
            if (extensions.has("WEBGL_multisampled_render_to_texture") === true) {
              console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided");
              renderTargetProperties.__useRenderToTexture = false;
            }
          }
        }
      };
      this.setRenderTargetFramebuffer = function(renderTarget, defaultFramebuffer) {
        const renderTargetProperties = properties.get(renderTarget);
        renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
        renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === void 0;
      };
      this.setRenderTarget = function(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
        _currentRenderTarget = renderTarget;
        _currentActiveCubeFace = activeCubeFace;
        _currentActiveMipmapLevel = activeMipmapLevel;
        let useDefaultFramebuffer = true;
        let framebuffer = null;
        let isCube = false;
        let isRenderTarget3D = false;
        if (renderTarget) {
          const renderTargetProperties = properties.get(renderTarget);
          if (renderTargetProperties.__useDefaultFramebuffer !== void 0) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, null);
            useDefaultFramebuffer = false;
          } else if (renderTargetProperties.__webglFramebuffer === void 0) {
            textures.setupRenderTarget(renderTarget);
          } else if (renderTargetProperties.__hasExternalTextures) {
            textures.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);
          }
          const texture = renderTarget.texture;
          if (texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture) {
            isRenderTarget3D = true;
          }
          const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
          if (renderTarget.isWebGLCubeRenderTarget) {
            framebuffer = __webglFramebuffer[activeCubeFace];
            isCube = true;
          } else if (capabilities.isWebGL2 && renderTarget.samples > 0 && textures.useMultisampledRTT(renderTarget) === false) {
            framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
          } else {
            framebuffer = __webglFramebuffer;
          }
          _currentViewport.copy(renderTarget.viewport);
          _currentScissor.copy(renderTarget.scissor);
          _currentScissorTest = renderTarget.scissorTest;
        } else {
          _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
          _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
          _currentScissorTest = _scissorTest;
        }
        const framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
        if (framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer) {
          state.drawBuffers(renderTarget, framebuffer);
        }
        state.viewport(_currentViewport);
        state.scissor(_currentScissor);
        state.setScissorTest(_currentScissorTest);
        if (isCube) {
          const textureProperties = properties.get(renderTarget.texture);
          _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
        } else if (isRenderTarget3D) {
          const textureProperties = properties.get(renderTarget.texture);
          const layer = activeCubeFace || 0;
          _gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);
        }
        _currentMaterialId = -1;
      };
      this.readRenderTargetPixels = function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
        if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
          console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
          return;
        }
        let framebuffer = properties.get(renderTarget).__webglFramebuffer;
        if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== void 0) {
          framebuffer = framebuffer[activeCubeFaceIndex];
        }
        if (framebuffer) {
          state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
          try {
            const texture = renderTarget.texture;
            const textureFormat = texture.format;
            const textureType = texture.type;
            if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {
              console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
              return;
            }
            const halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has("EXT_color_buffer_half_float") || capabilities.isWebGL2 && extensions.has("EXT_color_buffer_float"));
            if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
            !(textureType === FloatType && (capabilities.isWebGL2 || extensions.has("OES_texture_float") || extensions.has("WEBGL_color_buffer_float"))) && // Chrome Mac >= 52 and Firefox
            !halfFloatSupportedByExt) {
              console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
              return;
            }
            if (x >= 0 && x <= renderTarget.width - width && (y >= 0 && y <= renderTarget.height - height)) {
              _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
            }
          } finally {
            const framebuffer2 = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
            state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer2);
          }
        }
      };
      this.copyFramebufferToTexture = function(position, texture, level = 0) {
        const levelScale = Math.pow(2, -level);
        const width = Math.floor(texture.image.width * levelScale);
        const height = Math.floor(texture.image.height * levelScale);
        textures.setTexture2D(texture, 0);
        _gl.copyTexSubImage2D(_gl.TEXTURE_2D, level, 0, 0, position.x, position.y, width, height);
        state.unbindTexture();
      };
      this.copyTextureToTexture = function(position, srcTexture, dstTexture, level = 0) {
        const width = srcTexture.image.width;
        const height = srcTexture.image.height;
        const glFormat = utils.convert(dstTexture.format);
        const glType = utils.convert(dstTexture.type);
        textures.setTexture2D(dstTexture, 0);
        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
        _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
        _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
        if (srcTexture.isDataTexture) {
          _gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);
        } else {
          if (srcTexture.isCompressedTexture) {
            _gl.compressedTexSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);
          } else {
            _gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image);
          }
        }
        if (level === 0 && dstTexture.generateMipmaps)
          _gl.generateMipmap(_gl.TEXTURE_2D);
        state.unbindTexture();
      };
      this.copyTextureToTexture3D = function(sourceBox, position, srcTexture, dstTexture, level = 0) {
        if (_this.isWebGL1Renderer) {
          console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
          return;
        }
        const width = sourceBox.max.x - sourceBox.min.x + 1;
        const height = sourceBox.max.y - sourceBox.min.y + 1;
        const depth2 = sourceBox.max.z - sourceBox.min.z + 1;
        const glFormat = utils.convert(dstTexture.format);
        const glType = utils.convert(dstTexture.type);
        let glTarget;
        if (dstTexture.isData3DTexture) {
          textures.setTexture3D(dstTexture, 0);
          glTarget = _gl.TEXTURE_3D;
        } else if (dstTexture.isDataArrayTexture) {
          textures.setTexture2DArray(dstTexture, 0);
          glTarget = _gl.TEXTURE_2D_ARRAY;
        } else {
          console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
          return;
        }
        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
        _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
        _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
        const unpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);
        const unpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);
        const unpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);
        const unpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);
        const unpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);
        const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[0] : srcTexture.image;
        _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);
        _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);
        _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, sourceBox.min.x);
        _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, sourceBox.min.y);
        _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, sourceBox.min.z);
        if (srcTexture.isDataTexture || srcTexture.isData3DTexture) {
          _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth2, glFormat, glType, image.data);
        } else {
          if (srcTexture.isCompressedArrayTexture) {
            console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.");
            _gl.compressedTexSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth2, glFormat, image.data);
          } else {
            _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth2, glFormat, glType, image);
          }
        }
        _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, unpackRowLen);
        _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);
        _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);
        _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);
        _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages);
        if (level === 0 && dstTexture.generateMipmaps)
          _gl.generateMipmap(glTarget);
        state.unbindTexture();
      };
      this.initTexture = function(texture) {
        if (texture.isCubeTexture) {
          textures.setTextureCube(texture, 0);
        } else if (texture.isData3DTexture) {
          textures.setTexture3D(texture, 0);
        } else if (texture.isDataArrayTexture || texture.isCompressedArrayTexture) {
          textures.setTexture2DArray(texture, 0);
        } else {
          textures.setTexture2D(texture, 0);
        }
        state.unbindTexture();
      };
      this.resetState = function() {
        _currentActiveCubeFace = 0;
        _currentActiveMipmapLevel = 0;
        _currentRenderTarget = null;
        state.reset();
        bindingStates.reset();
      };
      if (typeof __THREE_DEVTOOLS__ !== "undefined") {
        __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
      }
    }
    get coordinateSystem() {
      return WebGLCoordinateSystem;
    }
    get physicallyCorrectLights() {
      console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.");
      return !this.useLegacyLights;
    }
    set physicallyCorrectLights(value) {
      console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.");
      this.useLegacyLights = !value;
    }
    get outputEncoding() {
      console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.");
      return this.outputColorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;
    }
    set outputEncoding(encoding) {
      console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.");
      this.outputColorSpace = encoding === sRGBEncoding ? SRGBColorSpace : LinearSRGBColorSpace;
    }
  };
  var WebGL1Renderer = class extends WebGLRenderer {
  };
  WebGL1Renderer.prototype.isWebGL1Renderer = true;
  function arraySlice(array, from, to) {
    if (isTypedArray(array)) {
      return new array.constructor(array.subarray(from, to !== void 0 ? to : array.length));
    }
    return array.slice(from, to);
  }
  function convertArray(array, type, forceClone) {
    if (!array || // let 'undefined' and 'null' pass
    !forceClone && array.constructor === type)
      return array;
    if (typeof type.BYTES_PER_ELEMENT === "number") {
      return new type(array);
    }
    return Array.prototype.slice.call(array);
  }
  function isTypedArray(object) {
    return ArrayBuffer.isView(object) && !(object instanceof DataView);
  }
  var Interpolant = class {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      this.parameterPositions = parameterPositions;
      this._cachedIndex = 0;
      this.resultBuffer = resultBuffer !== void 0 ? resultBuffer : new sampleValues.constructor(sampleSize);
      this.sampleValues = sampleValues;
      this.valueSize = sampleSize;
      this.settings = null;
      this.DefaultSettings_ = {};
    }
    evaluate(t) {
      const pp = this.parameterPositions;
      let i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
      validate_interval: {
        seek: {
          let right;
          linear_scan: {
            forward_scan:
              if (!(t < t1)) {
                for (let giveUpAt = i1 + 2; ; ) {
                  if (t1 === void 0) {
                    if (t < t0)
                      break forward_scan;
                    i1 = pp.length;
                    this._cachedIndex = i1;
                    return this.copySampleValue_(i1 - 1);
                  }
                  if (i1 === giveUpAt)
                    break;
                  t0 = t1;
                  t1 = pp[++i1];
                  if (t < t1) {
                    break seek;
                  }
                }
                right = pp.length;
                break linear_scan;
              }
            if (!(t >= t0)) {
              const t1global = pp[1];
              if (t < t1global) {
                i1 = 2;
                t0 = t1global;
              }
              for (let giveUpAt = i1 - 2; ; ) {
                if (t0 === void 0) {
                  this._cachedIndex = 0;
                  return this.copySampleValue_(0);
                }
                if (i1 === giveUpAt)
                  break;
                t1 = t0;
                t0 = pp[--i1 - 1];
                if (t >= t0) {
                  break seek;
                }
              }
              right = i1;
              i1 = 0;
              break linear_scan;
            }
            break validate_interval;
          }
          while (i1 < right) {
            const mid = i1 + right >>> 1;
            if (t < pp[mid]) {
              right = mid;
            } else {
              i1 = mid + 1;
            }
          }
          t1 = pp[i1];
          t0 = pp[i1 - 1];
          if (t0 === void 0) {
            this._cachedIndex = 0;
            return this.copySampleValue_(0);
          }
          if (t1 === void 0) {
            i1 = pp.length;
            this._cachedIndex = i1;
            return this.copySampleValue_(i1 - 1);
          }
        }
        this._cachedIndex = i1;
        this.intervalChanged_(i1, t0, t1);
      }
      return this.interpolate_(i1, t0, t, t1);
    }
    getSettings_() {
      return this.settings || this.DefaultSettings_;
    }
    copySampleValue_(index) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride;
      for (let i = 0; i !== stride; ++i) {
        result[i] = values[offset + i];
      }
      return result;
    }
    // Template methods for derived classes:
    interpolate_() {
      throw new Error("call to abstract method");
    }
    intervalChanged_() {
    }
  };
  var CubicInterpolant = class extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
      this._weightPrev = -0;
      this._offsetPrev = -0;
      this._weightNext = -0;
      this._offsetNext = -0;
      this.DefaultSettings_ = {
        endingStart: ZeroCurvatureEnding,
        endingEnd: ZeroCurvatureEnding
      };
    }
    intervalChanged_(i1, t0, t1) {
      const pp = this.parameterPositions;
      let iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
      if (tPrev === void 0) {
        switch (this.getSettings_().endingStart) {
          case ZeroSlopeEnding:
            iPrev = i1;
            tPrev = 2 * t0 - t1;
            break;
          case WrapAroundEnding:
            iPrev = pp.length - 2;
            tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
            break;
          default:
            iPrev = i1;
            tPrev = t1;
        }
      }
      if (tNext === void 0) {
        switch (this.getSettings_().endingEnd) {
          case ZeroSlopeEnding:
            iNext = i1;
            tNext = 2 * t1 - t0;
            break;
          case WrapAroundEnding:
            iNext = 1;
            tNext = t1 + pp[1] - pp[0];
            break;
          default:
            iNext = i1 - 1;
            tNext = t0;
        }
      }
      const halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
      this._weightPrev = halfDt / (t0 - tPrev);
      this._weightNext = halfDt / (tNext - t1);
      this._offsetPrev = iPrev * stride;
      this._offsetNext = iNext * stride;
    }
    interpolate_(i1, t0, t, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p = (t - t0) / (t1 - t0), pp = p * p, ppp = pp * p;
      const sP = -wP * ppp + 2 * wP * pp - wP * p;
      const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
      const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
      const sN = wN * ppp - wN * pp;
      for (let i = 0; i !== stride; ++i) {
        result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
      }
      return result;
    }
  };
  var LinearInterpolant = class extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1, t0, t, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t - t0) / (t1 - t0), weight0 = 1 - weight1;
      for (let i = 0; i !== stride; ++i) {
        result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
      }
      return result;
    }
  };
  var DiscreteInterpolant = class extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1) {
      return this.copySampleValue_(i1 - 1);
    }
  };
  var KeyframeTrack = class {
    constructor(name, times, values, interpolation) {
      if (name === void 0)
        throw new Error("THREE.KeyframeTrack: track name is undefined");
      if (times === void 0 || times.length === 0)
        throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name);
      this.name = name;
      this.times = convertArray(times, this.TimeBufferType);
      this.values = convertArray(values, this.ValueBufferType);
      this.setInterpolation(interpolation || this.DefaultInterpolation);
    }
    // Serialization (in static context, because of constructor invocation
    // and automatic invocation of .toJSON):
    static toJSON(track) {
      const trackType = track.constructor;
      let json;
      if (trackType.toJSON !== this.toJSON) {
        json = trackType.toJSON(track);
      } else {
        json = {
          "name": track.name,
          "times": convertArray(track.times, Array),
          "values": convertArray(track.values, Array)
        };
        const interpolation = track.getInterpolation();
        if (interpolation !== track.DefaultInterpolation) {
          json.interpolation = interpolation;
        }
      }
      json.type = track.ValueTypeName;
      return json;
    }
    InterpolantFactoryMethodDiscrete(result) {
      return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
    }
    InterpolantFactoryMethodLinear(result) {
      return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
    }
    InterpolantFactoryMethodSmooth(result) {
      return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
    }
    setInterpolation(interpolation) {
      let factoryMethod;
      switch (interpolation) {
        case InterpolateDiscrete:
          factoryMethod = this.InterpolantFactoryMethodDiscrete;
          break;
        case InterpolateLinear:
          factoryMethod = this.InterpolantFactoryMethodLinear;
          break;
        case InterpolateSmooth:
          factoryMethod = this.InterpolantFactoryMethodSmooth;
          break;
      }
      if (factoryMethod === void 0) {
        const message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
        if (this.createInterpolant === void 0) {
          if (interpolation !== this.DefaultInterpolation) {
            this.setInterpolation(this.DefaultInterpolation);
          } else {
            throw new Error(message);
          }
        }
        console.warn("THREE.KeyframeTrack:", message);
        return this;
      }
      this.createInterpolant = factoryMethod;
      return this;
    }
    getInterpolation() {
      switch (this.createInterpolant) {
        case this.InterpolantFactoryMethodDiscrete:
          return InterpolateDiscrete;
        case this.InterpolantFactoryMethodLinear:
          return InterpolateLinear;
        case this.InterpolantFactoryMethodSmooth:
          return InterpolateSmooth;
      }
    }
    getValueSize() {
      return this.values.length / this.times.length;
    }
    // move all keyframes either forwards or backwards in time
    shift(timeOffset) {
      if (timeOffset !== 0) {
        const times = this.times;
        for (let i = 0, n = times.length; i !== n; ++i) {
          times[i] += timeOffset;
        }
      }
      return this;
    }
    // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
    scale(timeScale) {
      if (timeScale !== 1) {
        const times = this.times;
        for (let i = 0, n = times.length; i !== n; ++i) {
          times[i] *= timeScale;
        }
      }
      return this;
    }
    // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
    // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
    trim(startTime, endTime) {
      const times = this.times, nKeys = times.length;
      let from = 0, to = nKeys - 1;
      while (from !== nKeys && times[from] < startTime) {
        ++from;
      }
      while (to !== -1 && times[to] > endTime) {
        --to;
      }
      ++to;
      if (from !== 0 || to !== nKeys) {
        if (from >= to) {
          to = Math.max(to, 1);
          from = to - 1;
        }
        const stride = this.getValueSize();
        this.times = arraySlice(times, from, to);
        this.values = arraySlice(this.values, from * stride, to * stride);
      }
      return this;
    }
    // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
    validate() {
      let valid = true;
      const valueSize = this.getValueSize();
      if (valueSize - Math.floor(valueSize) !== 0) {
        console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
        valid = false;
      }
      const times = this.times, values = this.values, nKeys = times.length;
      if (nKeys === 0) {
        console.error("THREE.KeyframeTrack: Track is empty.", this);
        valid = false;
      }
      let prevTime = null;
      for (let i = 0; i !== nKeys; i++) {
        const currTime = times[i];
        if (typeof currTime === "number" && isNaN(currTime)) {
          console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i, currTime);
          valid = false;
          break;
        }
        if (prevTime !== null && prevTime > currTime) {
          console.error("THREE.KeyframeTrack: Out of order keys.", this, i, currTime, prevTime);
          valid = false;
          break;
        }
        prevTime = currTime;
      }
      if (values !== void 0) {
        if (isTypedArray(values)) {
          for (let i = 0, n = values.length; i !== n; ++i) {
            const value = values[i];
            if (isNaN(value)) {
              console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i, value);
              valid = false;
              break;
            }
          }
        }
      }
      return valid;
    }
    // removes equivalent sequential keys as common in morph target sequences
    // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
    optimize() {
      const times = arraySlice(this.times), values = arraySlice(this.values), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === InterpolateSmooth, lastIndex = times.length - 1;
      let writeIndex = 1;
      for (let i = 1; i < lastIndex; ++i) {
        let keep = false;
        const time = times[i];
        const timeNext = times[i + 1];
        if (time !== timeNext && (i !== 1 || time !== times[0])) {
          if (!smoothInterpolation) {
            const offset = i * stride, offsetP = offset - stride, offsetN = offset + stride;
            for (let j = 0; j !== stride; ++j) {
              const value = values[offset + j];
              if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
                keep = true;
                break;
              }
            }
          } else {
            keep = true;
          }
        }
        if (keep) {
          if (i !== writeIndex) {
            times[writeIndex] = times[i];
            const readOffset = i * stride, writeOffset = writeIndex * stride;
            for (let j = 0; j !== stride; ++j) {
              values[writeOffset + j] = values[readOffset + j];
            }
          }
          ++writeIndex;
        }
      }
      if (lastIndex > 0) {
        times[writeIndex] = times[lastIndex];
        for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {
          values[writeOffset + j] = values[readOffset + j];
        }
        ++writeIndex;
      }
      if (writeIndex !== times.length) {
        this.times = arraySlice(times, 0, writeIndex);
        this.values = arraySlice(values, 0, writeIndex * stride);
      } else {
        this.times = times;
        this.values = values;
      }
      return this;
    }
    clone() {
      const times = arraySlice(this.times, 0);
      const values = arraySlice(this.values, 0);
      const TypedKeyframeTrack = this.constructor;
      const track = new TypedKeyframeTrack(this.name, times, values);
      track.createInterpolant = this.createInterpolant;
      return track;
    }
  };
  KeyframeTrack.prototype.TimeBufferType = Float32Array;
  KeyframeTrack.prototype.ValueBufferType = Float32Array;
  KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
  var BooleanKeyframeTrack = class extends KeyframeTrack {
  };
  BooleanKeyframeTrack.prototype.ValueTypeName = "bool";
  BooleanKeyframeTrack.prototype.ValueBufferType = Array;
  BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
  BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
  BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
  var ColorKeyframeTrack = class extends KeyframeTrack {
  };
  ColorKeyframeTrack.prototype.ValueTypeName = "color";
  var NumberKeyframeTrack = class extends KeyframeTrack {
  };
  NumberKeyframeTrack.prototype.ValueTypeName = "number";
  var QuaternionLinearInterpolant = class extends Interpolant {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
      super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1, t0, t, t1) {
      const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t - t0) / (t1 - t0);
      let offset = i1 * stride;
      for (let end = offset + stride; offset !== end; offset += 4) {
        Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
      }
      return result;
    }
  };
  var QuaternionKeyframeTrack = class extends KeyframeTrack {
    InterpolantFactoryMethodLinear(result) {
      return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
    }
  };
  QuaternionKeyframeTrack.prototype.ValueTypeName = "quaternion";
  QuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
  QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
  var StringKeyframeTrack = class extends KeyframeTrack {
  };
  StringKeyframeTrack.prototype.ValueTypeName = "string";
  StringKeyframeTrack.prototype.ValueBufferType = Array;
  StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
  StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
  StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
  var VectorKeyframeTrack = class extends KeyframeTrack {
  };
  VectorKeyframeTrack.prototype.ValueTypeName = "vector";
  var LoadingManager = class {
    constructor(onLoad, onProgress, onError) {
      const scope = this;
      let isLoading = false;
      let itemsLoaded = 0;
      let itemsTotal = 0;
      let urlModifier = void 0;
      const handlers = [];
      this.onStart = void 0;
      this.onLoad = onLoad;
      this.onProgress = onProgress;
      this.onError = onError;
      this.itemStart = function(url) {
        itemsTotal++;
        if (isLoading === false) {
          if (scope.onStart !== void 0) {
            scope.onStart(url, itemsLoaded, itemsTotal);
          }
        }
        isLoading = true;
      };
      this.itemEnd = function(url) {
        itemsLoaded++;
        if (scope.onProgress !== void 0) {
          scope.onProgress(url, itemsLoaded, itemsTotal);
        }
        if (itemsLoaded === itemsTotal) {
          isLoading = false;
          if (scope.onLoad !== void 0) {
            scope.onLoad();
          }
        }
      };
      this.itemError = function(url) {
        if (scope.onError !== void 0) {
          scope.onError(url);
        }
      };
      this.resolveURL = function(url) {
        if (urlModifier) {
          return urlModifier(url);
        }
        return url;
      };
      this.setURLModifier = function(transform) {
        urlModifier = transform;
        return this;
      };
      this.addHandler = function(regex, loader) {
        handlers.push(regex, loader);
        return this;
      };
      this.removeHandler = function(regex) {
        const index = handlers.indexOf(regex);
        if (index !== -1) {
          handlers.splice(index, 2);
        }
        return this;
      };
      this.getHandler = function(file) {
        for (let i = 0, l = handlers.length; i < l; i += 2) {
          const regex = handlers[i];
          const loader = handlers[i + 1];
          if (regex.global)
            regex.lastIndex = 0;
          if (regex.test(file)) {
            return loader;
          }
        }
        return null;
      };
    }
  };
  var DefaultLoadingManager = /* @__PURE__ */ new LoadingManager();
  var Loader = class {
    constructor(manager) {
      this.manager = manager !== void 0 ? manager : DefaultLoadingManager;
      this.crossOrigin = "anonymous";
      this.withCredentials = false;
      this.path = "";
      this.resourcePath = "";
      this.requestHeader = {};
    }
    load() {
    }
    loadAsync(url, onProgress) {
      const scope = this;
      return new Promise(function(resolve, reject) {
        scope.load(url, resolve, onProgress, reject);
      });
    }
    parse() {
    }
    setCrossOrigin(crossOrigin) {
      this.crossOrigin = crossOrigin;
      return this;
    }
    setWithCredentials(value) {
      this.withCredentials = value;
      return this;
    }
    setPath(path) {
      this.path = path;
      return this;
    }
    setResourcePath(resourcePath) {
      this.resourcePath = resourcePath;
      return this;
    }
    setRequestHeader(requestHeader) {
      this.requestHeader = requestHeader;
      return this;
    }
  };
  Loader.DEFAULT_MATERIAL_NAME = "__DEFAULT";
  var _RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
  var _reservedRe = new RegExp("[" + _RESERVED_CHARS_RE + "]", "g");
  var _wordChar = "[^" + _RESERVED_CHARS_RE + "]";
  var _wordCharOrDot = "[^" + _RESERVED_CHARS_RE.replace("\\.", "") + "]";
  var _directoryRe = /* @__PURE__ */ /((?:WC+[\/:])*)/.source.replace("WC", _wordChar);
  var _nodeRe = /* @__PURE__ */ /(WCOD+)?/.source.replace("WCOD", _wordCharOrDot);
  var _objectRe = /* @__PURE__ */ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", _wordChar);
  var _propertyRe = /* @__PURE__ */ /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", _wordChar);
  var _trackRe = new RegExp(
    "^" + _directoryRe + _nodeRe + _objectRe + _propertyRe + "$"
  );
  var _supportedObjectNames = ["material", "materials", "bones", "map"];
  var Composite = class {
    constructor(targetGroup, path, optionalParsedPath) {
      const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
      this._targetGroup = targetGroup;
      this._bindings = targetGroup.subscribe_(path, parsedPath);
    }
    getValue(array, offset) {
      this.bind();
      const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
      if (binding !== void 0)
        binding.getValue(array, offset);
    }
    setValue(array, offset) {
      const bindings = this._bindings;
      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
        bindings[i].setValue(array, offset);
      }
    }
    bind() {
      const bindings = this._bindings;
      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
        bindings[i].bind();
      }
    }
    unbind() {
      const bindings = this._bindings;
      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
        bindings[i].unbind();
      }
    }
  };
  var PropertyBinding = class _PropertyBinding {
    constructor(rootNode, path, parsedPath) {
      this.path = path;
      this.parsedPath = parsedPath || _PropertyBinding.parseTrackName(path);
      this.node = _PropertyBinding.findNode(rootNode, this.parsedPath.nodeName);
      this.rootNode = rootNode;
      this.getValue = this._getValue_unbound;
      this.setValue = this._setValue_unbound;
    }
    static create(root, path, parsedPath) {
      if (!(root && root.isAnimationObjectGroup)) {
        return new _PropertyBinding(root, path, parsedPath);
      } else {
        return new _PropertyBinding.Composite(root, path, parsedPath);
      }
    }
    /**
     * Replaces spaces with underscores and removes unsupported characters from
     * node names, to ensure compatibility with parseTrackName().
     *
     * @param {string} name Node name to be sanitized.
     * @return {string}
     */
    static sanitizeNodeName(name) {
      return name.replace(/\s/g, "_").replace(_reservedRe, "");
    }
    static parseTrackName(trackName) {
      const matches = _trackRe.exec(trackName);
      if (matches === null) {
        throw new Error("PropertyBinding: Cannot parse trackName: " + trackName);
      }
      const results = {
        // directoryName: matches[ 1 ], // (tschw) currently unused
        nodeName: matches[2],
        objectName: matches[3],
        objectIndex: matches[4],
        propertyName: matches[5],
        // required
        propertyIndex: matches[6]
      };
      const lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
      if (lastDot !== void 0 && lastDot !== -1) {
        const objectName = results.nodeName.substring(lastDot + 1);
        if (_supportedObjectNames.indexOf(objectName) !== -1) {
          results.nodeName = results.nodeName.substring(0, lastDot);
          results.objectName = objectName;
        }
      }
      if (results.propertyName === null || results.propertyName.length === 0) {
        throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName);
      }
      return results;
    }
    static findNode(root, nodeName) {
      if (nodeName === void 0 || nodeName === "" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
        return root;
      }
      if (root.skeleton) {
        const bone = root.skeleton.getBoneByName(nodeName);
        if (bone !== void 0) {
          return bone;
        }
      }
      if (root.children) {
        const searchNodeSubtree = function(children) {
          for (let i = 0; i < children.length; i++) {
            const childNode = children[i];
            if (childNode.name === nodeName || childNode.uuid === nodeName) {
              return childNode;
            }
            const result = searchNodeSubtree(childNode.children);
            if (result)
              return result;
          }
          return null;
        };
        const subTreeNode = searchNodeSubtree(root.children);
        if (subTreeNode) {
          return subTreeNode;
        }
      }
      return null;
    }
    // these are used to "bind" a nonexistent property
    _getValue_unavailable() {
    }
    _setValue_unavailable() {
    }
    // Getters
    _getValue_direct(buffer, offset) {
      buffer[offset] = this.targetObject[this.propertyName];
    }
    _getValue_array(buffer, offset) {
      const source = this.resolvedProperty;
      for (let i = 0, n = source.length; i !== n; ++i) {
        buffer[offset++] = source[i];
      }
    }
    _getValue_arrayElement(buffer, offset) {
      buffer[offset] = this.resolvedProperty[this.propertyIndex];
    }
    _getValue_toArray(buffer, offset) {
      this.resolvedProperty.toArray(buffer, offset);
    }
    // Direct
    _setValue_direct(buffer, offset) {
      this.targetObject[this.propertyName] = buffer[offset];
    }
    _setValue_direct_setNeedsUpdate(buffer, offset) {
      this.targetObject[this.propertyName] = buffer[offset];
      this.targetObject.needsUpdate = true;
    }
    _setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
      this.targetObject[this.propertyName] = buffer[offset];
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // EntireArray
    _setValue_array(buffer, offset) {
      const dest = this.resolvedProperty;
      for (let i = 0, n = dest.length; i !== n; ++i) {
        dest[i] = buffer[offset++];
      }
    }
    _setValue_array_setNeedsUpdate(buffer, offset) {
      const dest = this.resolvedProperty;
      for (let i = 0, n = dest.length; i !== n; ++i) {
        dest[i] = buffer[offset++];
      }
      this.targetObject.needsUpdate = true;
    }
    _setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
      const dest = this.resolvedProperty;
      for (let i = 0, n = dest.length; i !== n; ++i) {
        dest[i] = buffer[offset++];
      }
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // ArrayElement
    _setValue_arrayElement(buffer, offset) {
      this.resolvedProperty[this.propertyIndex] = buffer[offset];
    }
    _setValue_arrayElement_setNeedsUpdate(buffer, offset) {
      this.resolvedProperty[this.propertyIndex] = buffer[offset];
      this.targetObject.needsUpdate = true;
    }
    _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
      this.resolvedProperty[this.propertyIndex] = buffer[offset];
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // HasToFromArray
    _setValue_fromArray(buffer, offset) {
      this.resolvedProperty.fromArray(buffer, offset);
    }
    _setValue_fromArray_setNeedsUpdate(buffer, offset) {
      this.resolvedProperty.fromArray(buffer, offset);
      this.targetObject.needsUpdate = true;
    }
    _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
      this.resolvedProperty.fromArray(buffer, offset);
      this.targetObject.matrixWorldNeedsUpdate = true;
    }
    _getValue_unbound(targetArray, offset) {
      this.bind();
      this.getValue(targetArray, offset);
    }
    _setValue_unbound(sourceArray, offset) {
      this.bind();
      this.setValue(sourceArray, offset);
    }
    // create getter / setter pair for a property in the scene graph
    bind() {
      let targetObject = this.node;
      const parsedPath = this.parsedPath;
      const objectName = parsedPath.objectName;
      const propertyName = parsedPath.propertyName;
      let propertyIndex = parsedPath.propertyIndex;
      if (!targetObject) {
        targetObject = _PropertyBinding.findNode(this.rootNode, parsedPath.nodeName);
        this.node = targetObject;
      }
      this.getValue = this._getValue_unavailable;
      this.setValue = this._setValue_unavailable;
      if (!targetObject) {
        console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
        return;
      }
      if (objectName) {
        let objectIndex = parsedPath.objectIndex;
        switch (objectName) {
          case "materials":
            if (!targetObject.material) {
              console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              return;
            }
            if (!targetObject.material.materials) {
              console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
              return;
            }
            targetObject = targetObject.material.materials;
            break;
          case "bones":
            if (!targetObject.skeleton) {
              console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
              return;
            }
            targetObject = targetObject.skeleton.bones;
            for (let i = 0; i < targetObject.length; i++) {
              if (targetObject[i].name === objectIndex) {
                objectIndex = i;
                break;
              }
            }
            break;
          case "map":
            if ("map" in targetObject) {
              targetObject = targetObject.map;
              break;
            }
            if (!targetObject.material) {
              console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
              return;
            }
            if (!targetObject.material.map) {
              console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
              return;
            }
            targetObject = targetObject.material.map;
            break;
          default:
            if (targetObject[objectName] === void 0) {
              console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
              return;
            }
            targetObject = targetObject[objectName];
        }
        if (objectIndex !== void 0) {
          if (targetObject[objectIndex] === void 0) {
            console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
            return;
          }
          targetObject = targetObject[objectIndex];
        }
      }
      const nodeProperty = targetObject[propertyName];
      if (nodeProperty === void 0) {
        const nodeName = parsedPath.nodeName;
        console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName + " but it wasn't found.", targetObject);
        return;
      }
      let versioning = this.Versioning.None;
      this.targetObject = targetObject;
      if (targetObject.needsUpdate !== void 0) {
        versioning = this.Versioning.NeedsUpdate;
      } else if (targetObject.matrixWorldNeedsUpdate !== void 0) {
        versioning = this.Versioning.MatrixWorldNeedsUpdate;
      }
      let bindingType = this.BindingType.Direct;
      if (propertyIndex !== void 0) {
        if (propertyName === "morphTargetInfluences") {
          if (!targetObject.geometry) {
            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
            return;
          }
          if (!targetObject.geometry.morphAttributes) {
            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
            return;
          }
          if (targetObject.morphTargetDictionary[propertyIndex] !== void 0) {
            propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
          }
        }
        bindingType = this.BindingType.ArrayElement;
        this.resolvedProperty = nodeProperty;
        this.propertyIndex = propertyIndex;
      } else if (nodeProperty.fromArray !== void 0 && nodeProperty.toArray !== void 0) {
        bindingType = this.BindingType.HasFromToArray;
        this.resolvedProperty = nodeProperty;
      } else if (Array.isArray(nodeProperty)) {
        bindingType = this.BindingType.EntireArray;
        this.resolvedProperty = nodeProperty;
      } else {
        this.propertyName = propertyName;
      }
      this.getValue = this.GetterByBindingType[bindingType];
      this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
    }
    unbind() {
      this.node = null;
      this.getValue = this._getValue_unbound;
      this.setValue = this._setValue_unbound;
    }
  };
  PropertyBinding.Composite = Composite;
  PropertyBinding.prototype.BindingType = {
    Direct: 0,
    EntireArray: 1,
    ArrayElement: 2,
    HasFromToArray: 3
  };
  PropertyBinding.prototype.Versioning = {
    None: 0,
    NeedsUpdate: 1,
    MatrixWorldNeedsUpdate: 2
  };
  PropertyBinding.prototype.GetterByBindingType = [
    PropertyBinding.prototype._getValue_direct,
    PropertyBinding.prototype._getValue_array,
    PropertyBinding.prototype._getValue_arrayElement,
    PropertyBinding.prototype._getValue_toArray
  ];
  PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [
    [
      // Direct
      PropertyBinding.prototype._setValue_direct,
      PropertyBinding.prototype._setValue_direct_setNeedsUpdate,
      PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate
    ],
    [
      // EntireArray
      PropertyBinding.prototype._setValue_array,
      PropertyBinding.prototype._setValue_array_setNeedsUpdate,
      PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate
    ],
    [
      // ArrayElement
      PropertyBinding.prototype._setValue_arrayElement,
      PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,
      PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
    ],
    [
      // HasToFromArray
      PropertyBinding.prototype._setValue_fromArray,
      PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,
      PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
    ]
  ];
  var _controlInterpolantsResultBuffer = new Float32Array(1);
  if (typeof __THREE_DEVTOOLS__ !== "undefined") {
    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
      revision: REVISION
    } }));
  }
  if (typeof window !== "undefined") {
    if (window.__THREE__) {
      console.warn("WARNING: Multiple instances of Three.js being imported.");
    } else {
      window.__THREE__ = REVISION;
    }
  }

  // src/core/xml/bcf/root/bcf.version.ts
  var import_xmlbuilder2 = __toESM(require_xmlbuilder2_min(), 1);

  // src/core/xml/xml.ts
  var XMLCreator = class {
    /**
     * Creates a XML document string.
     *
     * For example:
     * ```xml
     * <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
     * <Version xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" VersionId="3.0" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/buildingSMART/BCF-XML/release_3_0/Schemas/version.xsd"/>
     * ```
     */
    create(_e) {
      throw new Error("Method not implemented.");
    }
  };
  var xml_default = XMLCreator;

  // src/core/xml/bcf/constants.ts
  var ENCODING = "UTF-8";
  var SCHEMA_LOCATION = "https://raw.githubusercontent.com/buildingSMART/BCF-XML/release_3_0/Schemas/version.xsd";
  var XML_WRITER_OPTIONS = { prettyPrint: true };

  // src/core/xml/bcf/root/bcf.version.ts
  var BCFVersionFactory_XML = class extends xml_default {
    /**
     * Example XML:
     * ```xml
     * <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
     * <Version xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" VersionId="3.0" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/buildingSMART/BCF-XML/release_3_0/Schemas/version.xsd"/>
     * ```
     */
    create() {
      const root = (0, import_xmlbuilder2.create)({ version: "1.0", encoding: ENCODING, standalone: true }).ele("Version").att("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance").att("VersionId", "3.0").att("xsi:noNamespaceSchemaLocation", SCHEMA_LOCATION);
      const bcfVersion = root.end(XML_WRITER_OPTIONS);
      return bcfVersion;
    }
  };
  var bcf_version_default = BCFVersionFactory_XML;

  // src/core/xml/bcf/topic/markup.ts
  var import_xmlbuilder22 = __toESM(require_xmlbuilder2_min(), 1);

  // src/core/xml/bcf/topic/topic.ts
  var Topic_XML = class extends xml_default {
  };
  var topic_default = Topic_XML;

  // src/core/xml/bcf/topic/markup.ts
  var MarkupFactory_XML = class extends topic_default {
    create(e) {
      const doc = (0, import_xmlbuilder22.create)({ version: "1.0", encoding: "UTF-8", standalone: true }).ele("Markup", {
        "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
        "xsi:noNamespaceSchemaLocation": "https://raw.githubusercontent.com/buildingSMART/BCF-XML/release_3_0/Schemas/markup.xsd"
      }).ele("Header").ele("Files").ele("File", { IfcProject: "16ptFjkWnCdh4kqFvB0NRX", IsExternal: "true" }).ele("Filename").txt("0001").up().ele("Date").txt("2023-07-03T21:00:35+02:00").up().up().up().up().ele("Topic", {
        Guid: e.topicGuid,
        TopicType: "Error",
        TopicStatus: "Open"
      }).ele("ReferenceLinks").up().ele("Title").txt(e.title).up().ele("Index").txt(`${e.index}`).up().ele("Labels").up().ele("CreationDate").txt(e.creationDate).up().ele("CreationAuthor").txt(e.creationAuthor).up().ele("ModifiedDate").txt(e.creationDate).up().ele("ModifiedAuthor").txt(e.creationAuthor).up().ele("AssignedTo").up().ele("Description").txt(e.description ?? "").up().ele("DocumentReferences").up().ele("RelatedTopics").up().ele("Comments").up().ele("Viewpoints").ele("ViewPoint", { Guid: e.viewpointGuid }).ele("Viewpoint").txt(`${e.viewpointGuid}.bcfv`).up().ele("Snapshot").txt(`${e.viewpointGuid}.png`).up().ele("Index").txt(`${e.index ?? 0}`).up().up().up().up();
      const markup = doc.end(XML_WRITER_OPTIONS);
      return markup;
    }
  };
  var markup_default = MarkupFactory_XML;

  // src/core/xml/bcf/topic/viewpoint.ts
  var import_xmlbuilder23 = __toESM(require_xmlbuilder2_min(), 1);
  var ViewpointFactory_XML = class extends topic_default {
    create(e) {
      const root = (0, import_xmlbuilder23.create)({ version: "1.0", encoding: "UTF-8", standalone: true }).ele("VisualizationInfo").att("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance").att("Guid", e.viewpointGuid).att(
        "xsi:noNamespaceSchemaLocation",
        "https://raw.githubusercontent.com/buildingSMART/BCF-XML/release_3_0/Schemas/visinfo.xsd"
      );
      const components = root.ele("Components");
      components.ele("Selection");
      const visibility = components.ele("Visibility");
      visibility.att("DefaultVisibility", "true");
      visibility.ele("ViewSetupHints").att("SpacesVisible", "false").att("SpaceBoundariesVisible", "false").att("OpeningsVisible", "false");
      visibility.ele("Exceptions");
      const coloring = components.ele("Coloring");
      const color = coloring.ele("Color").att("Color", "FF00FF00");
      const colorComponents = color.ele("Components");
      const component = colorComponents.ele("Component").att("IfcGuid", "1Ryb8XgUj3gebyYvJGdU2O");
      component.ele("OriginatingSystem").txt("Autodesk Revit 2023 (ENU)");
      component.ele("AuthoringToolId").txt("350815");
      const perspectiveCamera = root.ele("PerspectiveCamera");
      const cameraViewPoint = perspectiveCamera.ele("CameraViewPoint");
      cameraViewPoint.ele("X").txt(`${e.cameraViewPoint[0]}`);
      cameraViewPoint.ele("Y").txt(`${e.cameraViewPoint[1]}`);
      cameraViewPoint.ele("Z").txt(`${e.cameraViewPoint[2]}`);
      const cameraDirection = perspectiveCamera.ele("CameraDirection");
      cameraDirection.ele("X").txt(`${e.cameraDirection[0]}`);
      cameraDirection.ele("Y").txt(`${e.cameraDirection[1]}`);
      cameraDirection.ele("Z").txt(`${e.cameraDirection[2]}`);
      const cameraUpVector = perspectiveCamera.ele("CameraUpVector");
      cameraUpVector.ele("X").txt(`${e.cameraUpVector[0]}`);
      cameraUpVector.ele("Y").txt(`${e.cameraUpVector[1]}`);
      cameraUpVector.ele("Z").txt(`${e.cameraUpVector[2]}`);
      perspectiveCamera.ele("FieldOfView").txt(`${e.fieldOfView}`);
      perspectiveCamera.ele("AspectRatio").txt(`${e.aspectRatio}`);
      root.ele("Bitmaps");
      const viewpoint = root.end({ prettyPrint: true });
      return viewpoint;
    }
  };
  var viewpoint_default = ViewpointFactory_XML;

  // node_modules/zod/lib/index.mjs
  var util;
  (function(util2) {
    util2.assertEqual = (val) => val;
    function assertIs(_arg) {
    }
    util2.assertIs = assertIs;
    function assertNever(_x2) {
      throw new Error();
    }
    util2.assertNever = assertNever;
    util2.arrayToEnum = (items) => {
      const obj = {};
      for (const item of items) {
        obj[item] = item;
      }
      return obj;
    };
    util2.getValidEnumValues = (obj) => {
      const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
      const filtered = {};
      for (const k of validKeys) {
        filtered[k] = obj[k];
      }
      return util2.objectValues(filtered);
    };
    util2.objectValues = (obj) => {
      return util2.objectKeys(obj).map(function(e) {
        return obj[e];
      });
    };
    util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
      const keys = [];
      for (const key in object) {
        if (Object.prototype.hasOwnProperty.call(object, key)) {
          keys.push(key);
        }
      }
      return keys;
    };
    util2.find = (arr, checker) => {
      for (const item of arr) {
        if (checker(item))
          return item;
      }
      return void 0;
    };
    util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
      return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
    }
    util2.joinValues = joinValues;
    util2.jsonStringifyReplacer = (_, value) => {
      if (typeof value === "bigint") {
        return value.toString();
      }
      return value;
    };
  })(util || (util = {}));
  var objectUtil;
  (function(objectUtil2) {
    objectUtil2.mergeShapes = (first, second) => {
      return {
        ...first,
        ...second
        // second overwrites first
      };
    };
  })(objectUtil || (objectUtil = {}));
  var ZodParsedType = util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set"
  ]);
  var getParsedType = (data) => {
    const t = typeof data;
    switch (t) {
      case "undefined":
        return ZodParsedType.undefined;
      case "string":
        return ZodParsedType.string;
      case "number":
        return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
      case "boolean":
        return ZodParsedType.boolean;
      case "function":
        return ZodParsedType.function;
      case "bigint":
        return ZodParsedType.bigint;
      case "symbol":
        return ZodParsedType.symbol;
      case "object":
        if (Array.isArray(data)) {
          return ZodParsedType.array;
        }
        if (data === null) {
          return ZodParsedType.null;
        }
        if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
          return ZodParsedType.promise;
        }
        if (typeof Map !== "undefined" && data instanceof Map) {
          return ZodParsedType.map;
        }
        if (typeof Set !== "undefined" && data instanceof Set) {
          return ZodParsedType.set;
        }
        if (typeof Date !== "undefined" && data instanceof Date) {
          return ZodParsedType.date;
        }
        return ZodParsedType.object;
      default:
        return ZodParsedType.unknown;
    }
  };
  var ZodIssueCode = util.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
    "not_finite"
  ]);
  var quotelessJson = (obj) => {
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
  };
  var ZodError = class extends Error {
    constructor(issues) {
      super();
      this.issues = [];
      this.addIssue = (sub) => {
        this.issues = [...this.issues, sub];
      };
      this.addIssues = (subs = []) => {
        this.issues = [...this.issues, ...subs];
      };
      const actualProto = new.target.prototype;
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(this, actualProto);
      } else {
        this.__proto__ = actualProto;
      }
      this.name = "ZodError";
      this.issues = issues;
    }
    get errors() {
      return this.issues;
    }
    format(_mapper) {
      const mapper = _mapper || function(issue) {
        return issue.message;
      };
      const fieldErrors = { _errors: [] };
      const processError = (error) => {
        for (const issue of error.issues) {
          if (issue.code === "invalid_union") {
            issue.unionErrors.map(processError);
          } else if (issue.code === "invalid_return_type") {
            processError(issue.returnTypeError);
          } else if (issue.code === "invalid_arguments") {
            processError(issue.argumentsError);
          } else if (issue.path.length === 0) {
            fieldErrors._errors.push(mapper(issue));
          } else {
            let curr = fieldErrors;
            let i = 0;
            while (i < issue.path.length) {
              const el = issue.path[i];
              const terminal = i === issue.path.length - 1;
              if (!terminal) {
                curr[el] = curr[el] || { _errors: [] };
              } else {
                curr[el] = curr[el] || { _errors: [] };
                curr[el]._errors.push(mapper(issue));
              }
              curr = curr[el];
              i++;
            }
          }
        }
      };
      processError(this);
      return fieldErrors;
    }
    toString() {
      return this.message;
    }
    get message() {
      return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
      return this.issues.length === 0;
    }
    flatten(mapper = (issue) => issue.message) {
      const fieldErrors = {};
      const formErrors = [];
      for (const sub of this.issues) {
        if (sub.path.length > 0) {
          fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
          fieldErrors[sub.path[0]].push(mapper(sub));
        } else {
          formErrors.push(mapper(sub));
        }
      }
      return { formErrors, fieldErrors };
    }
    get formErrors() {
      return this.flatten();
    }
  };
  ZodError.create = (issues) => {
    const error = new ZodError(issues);
    return error;
  };
  var errorMap = (issue, _ctx) => {
    let message;
    switch (issue.code) {
      case ZodIssueCode.invalid_type:
        if (issue.received === ZodParsedType.undefined) {
          message = "Required";
        } else {
          message = `Expected ${issue.expected}, received ${issue.received}`;
        }
        break;
      case ZodIssueCode.invalid_literal:
        message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
        break;
      case ZodIssueCode.unrecognized_keys:
        message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
        break;
      case ZodIssueCode.invalid_union:
        message = `Invalid input`;
        break;
      case ZodIssueCode.invalid_union_discriminator:
        message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
        break;
      case ZodIssueCode.invalid_enum_value:
        message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
        break;
      case ZodIssueCode.invalid_arguments:
        message = `Invalid function arguments`;
        break;
      case ZodIssueCode.invalid_return_type:
        message = `Invalid function return type`;
        break;
      case ZodIssueCode.invalid_date:
        message = `Invalid date`;
        break;
      case ZodIssueCode.invalid_string:
        if (typeof issue.validation === "object") {
          if ("includes" in issue.validation) {
            message = `Invalid input: must include "${issue.validation.includes}"`;
            if (typeof issue.validation.position === "number") {
              message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
            }
          } else if ("startsWith" in issue.validation) {
            message = `Invalid input: must start with "${issue.validation.startsWith}"`;
          } else if ("endsWith" in issue.validation) {
            message = `Invalid input: must end with "${issue.validation.endsWith}"`;
          } else {
            util.assertNever(issue.validation);
          }
        } else if (issue.validation !== "regex") {
          message = `Invalid ${issue.validation}`;
        } else {
          message = "Invalid";
        }
        break;
      case ZodIssueCode.too_small:
        if (issue.type === "array")
          message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
        else if (issue.type === "string")
          message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
        else if (issue.type === "number")
          message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
        else if (issue.type === "date")
          message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
        else
          message = "Invalid input";
        break;
      case ZodIssueCode.too_big:
        if (issue.type === "array")
          message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
        else if (issue.type === "string")
          message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
        else if (issue.type === "number")
          message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
        else if (issue.type === "bigint")
          message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
        else if (issue.type === "date")
          message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
        else
          message = "Invalid input";
        break;
      case ZodIssueCode.custom:
        message = `Invalid input`;
        break;
      case ZodIssueCode.invalid_intersection_types:
        message = `Intersection results could not be merged`;
        break;
      case ZodIssueCode.not_multiple_of:
        message = `Number must be a multiple of ${issue.multipleOf}`;
        break;
      case ZodIssueCode.not_finite:
        message = "Number must be finite";
        break;
      default:
        message = _ctx.defaultError;
        util.assertNever(issue);
    }
    return { message };
  };
  var overrideErrorMap = errorMap;
  function setErrorMap(map) {
    overrideErrorMap = map;
  }
  function getErrorMap() {
    return overrideErrorMap;
  }
  var makeIssue = (params) => {
    const { data, path, errorMaps, issueData } = params;
    const fullPath = [...path, ...issueData.path || []];
    const fullIssue = {
      ...issueData,
      path: fullPath
    };
    let errorMessage = "";
    const maps = errorMaps.filter((m) => !!m).slice().reverse();
    for (const map of maps) {
      errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
    }
    return {
      ...issueData,
      path: fullPath,
      message: issueData.message || errorMessage
    };
  };
  var EMPTY_PATH = [];
  function addIssueToContext(ctx, issueData) {
    const issue = makeIssue({
      issueData,
      data: ctx.data,
      path: ctx.path,
      errorMaps: [
        ctx.common.contextualErrorMap,
        ctx.schemaErrorMap,
        getErrorMap(),
        errorMap
        // then global default map
      ].filter((x) => !!x)
    });
    ctx.common.issues.push(issue);
  }
  var ParseStatus = class _ParseStatus {
    constructor() {
      this.value = "valid";
    }
    dirty() {
      if (this.value === "valid")
        this.value = "dirty";
    }
    abort() {
      if (this.value !== "aborted")
        this.value = "aborted";
    }
    static mergeArray(status, results) {
      const arrayValue = [];
      for (const s of results) {
        if (s.status === "aborted")
          return INVALID;
        if (s.status === "dirty")
          status.dirty();
        arrayValue.push(s.value);
      }
      return { status: status.value, value: arrayValue };
    }
    static async mergeObjectAsync(status, pairs) {
      const syncPairs = [];
      for (const pair of pairs) {
        syncPairs.push({
          key: await pair.key,
          value: await pair.value
        });
      }
      return _ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
      const finalObject = {};
      for (const pair of pairs) {
        const { key, value } = pair;
        if (key.status === "aborted")
          return INVALID;
        if (value.status === "aborted")
          return INVALID;
        if (key.status === "dirty")
          status.dirty();
        if (value.status === "dirty")
          status.dirty();
        if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
          finalObject[key.value] = value.value;
        }
      }
      return { status: status.value, value: finalObject };
    }
  };
  var INVALID = Object.freeze({
    status: "aborted"
  });
  var DIRTY = (value) => ({ status: "dirty", value });
  var OK = (value) => ({ status: "valid", value });
  var isAborted = (x) => x.status === "aborted";
  var isDirty = (x) => x.status === "dirty";
  var isValid = (x) => x.status === "valid";
  var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
  var errorUtil;
  (function(errorUtil2) {
    errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
    errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
  })(errorUtil || (errorUtil = {}));
  var ParseInputLazyPath = class {
    constructor(parent, value, path, key) {
      this._cachedPath = [];
      this.parent = parent;
      this.data = value;
      this._path = path;
      this._key = key;
    }
    get path() {
      if (!this._cachedPath.length) {
        if (this._key instanceof Array) {
          this._cachedPath.push(...this._path, ...this._key);
        } else {
          this._cachedPath.push(...this._path, this._key);
        }
      }
      return this._cachedPath;
    }
  };
  var handleResult = (ctx, result) => {
    if (isValid(result)) {
      return { success: true, data: result.value };
    } else {
      if (!ctx.common.issues.length) {
        throw new Error("Validation failed but no issues detected.");
      }
      return {
        success: false,
        get error() {
          if (this._error)
            return this._error;
          const error = new ZodError(ctx.common.issues);
          this._error = error;
          return this._error;
        }
      };
    }
  };
  function processCreateParams(params) {
    if (!params)
      return {};
    const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
    if (errorMap2 && (invalid_type_error || required_error)) {
      throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    }
    if (errorMap2)
      return { errorMap: errorMap2, description };
    const customMap = (iss, ctx) => {
      if (iss.code !== "invalid_type")
        return { message: ctx.defaultError };
      if (typeof ctx.data === "undefined") {
        return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
      }
      return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
    };
    return { errorMap: customMap, description };
  }
  var ZodType = class {
    constructor(def) {
      this.spa = this.safeParseAsync;
      this._def = def;
      this.parse = this.parse.bind(this);
      this.safeParse = this.safeParse.bind(this);
      this.parseAsync = this.parseAsync.bind(this);
      this.safeParseAsync = this.safeParseAsync.bind(this);
      this.spa = this.spa.bind(this);
      this.refine = this.refine.bind(this);
      this.refinement = this.refinement.bind(this);
      this.superRefine = this.superRefine.bind(this);
      this.optional = this.optional.bind(this);
      this.nullable = this.nullable.bind(this);
      this.nullish = this.nullish.bind(this);
      this.array = this.array.bind(this);
      this.promise = this.promise.bind(this);
      this.or = this.or.bind(this);
      this.and = this.and.bind(this);
      this.transform = this.transform.bind(this);
      this.brand = this.brand.bind(this);
      this.default = this.default.bind(this);
      this.catch = this.catch.bind(this);
      this.describe = this.describe.bind(this);
      this.pipe = this.pipe.bind(this);
      this.readonly = this.readonly.bind(this);
      this.isNullable = this.isNullable.bind(this);
      this.isOptional = this.isOptional.bind(this);
    }
    get description() {
      return this._def.description;
    }
    _getType(input) {
      return getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
      return ctx || {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      };
    }
    _processInputParams(input) {
      return {
        status: new ParseStatus(),
        ctx: {
          common: input.parent.common,
          data: input.data,
          parsedType: getParsedType(input.data),
          schemaErrorMap: this._def.errorMap,
          path: input.path,
          parent: input.parent
        }
      };
    }
    _parseSync(input) {
      const result = this._parse(input);
      if (isAsync(result)) {
        throw new Error("Synchronous parse encountered promise.");
      }
      return result;
    }
    _parseAsync(input) {
      const result = this._parse(input);
      return Promise.resolve(result);
    }
    parse(data, params) {
      const result = this.safeParse(data, params);
      if (result.success)
        return result.data;
      throw result.error;
    }
    safeParse(data, params) {
      var _a;
      const ctx = {
        common: {
          issues: [],
          async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
          contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
        },
        path: (params === null || params === void 0 ? void 0 : params.path) || [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data,
        parsedType: getParsedType(data)
      };
      const result = this._parseSync({ data, path: ctx.path, parent: ctx });
      return handleResult(ctx, result);
    }
    async parseAsync(data, params) {
      const result = await this.safeParseAsync(data, params);
      if (result.success)
        return result.data;
      throw result.error;
    }
    async safeParseAsync(data, params) {
      const ctx = {
        common: {
          issues: [],
          contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
          async: true
        },
        path: (params === null || params === void 0 ? void 0 : params.path) || [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data,
        parsedType: getParsedType(data)
      };
      const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
      const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
      return handleResult(ctx, result);
    }
    refine(check, message) {
      const getIssueProperties = (val) => {
        if (typeof message === "string" || typeof message === "undefined") {
          return { message };
        } else if (typeof message === "function") {
          return message(val);
        } else {
          return message;
        }
      };
      return this._refinement((val, ctx) => {
        const result = check(val);
        const setError = () => ctx.addIssue({
          code: ZodIssueCode.custom,
          ...getIssueProperties(val)
        });
        if (typeof Promise !== "undefined" && result instanceof Promise) {
          return result.then((data) => {
            if (!data) {
              setError();
              return false;
            } else {
              return true;
            }
          });
        }
        if (!result) {
          setError();
          return false;
        } else {
          return true;
        }
      });
    }
    refinement(check, refinementData) {
      return this._refinement((val, ctx) => {
        if (!check(val)) {
          ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
          return false;
        } else {
          return true;
        }
      });
    }
    _refinement(refinement) {
      return new ZodEffects({
        schema: this,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect: { type: "refinement", refinement }
      });
    }
    superRefine(refinement) {
      return this._refinement(refinement);
    }
    optional() {
      return ZodOptional.create(this, this._def);
    }
    nullable() {
      return ZodNullable.create(this, this._def);
    }
    nullish() {
      return this.nullable().optional();
    }
    array() {
      return ZodArray.create(this, this._def);
    }
    promise() {
      return ZodPromise.create(this, this._def);
    }
    or(option) {
      return ZodUnion.create([this, option], this._def);
    }
    and(incoming) {
      return ZodIntersection.create(this, incoming, this._def);
    }
    transform(transform) {
      return new ZodEffects({
        ...processCreateParams(this._def),
        schema: this,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect: { type: "transform", transform }
      });
    }
    default(def) {
      const defaultValueFunc = typeof def === "function" ? def : () => def;
      return new ZodDefault({
        ...processCreateParams(this._def),
        innerType: this,
        defaultValue: defaultValueFunc,
        typeName: ZodFirstPartyTypeKind.ZodDefault
      });
    }
    brand() {
      return new ZodBranded({
        typeName: ZodFirstPartyTypeKind.ZodBranded,
        type: this,
        ...processCreateParams(this._def)
      });
    }
    catch(def) {
      const catchValueFunc = typeof def === "function" ? def : () => def;
      return new ZodCatch({
        ...processCreateParams(this._def),
        innerType: this,
        catchValue: catchValueFunc,
        typeName: ZodFirstPartyTypeKind.ZodCatch
      });
    }
    describe(description) {
      const This = this.constructor;
      return new This({
        ...this._def,
        description
      });
    }
    pipe(target) {
      return ZodPipeline.create(this, target);
    }
    readonly() {
      return ZodReadonly.create(this);
    }
    isOptional() {
      return this.safeParse(void 0).success;
    }
    isNullable() {
      return this.safeParse(null).success;
    }
  };
  var cuidRegex = /^c[^\s-]{8,}$/i;
  var cuid2Regex = /^[a-z][a-z0-9]*$/;
  var ulidRegex = /[0-9A-HJKMNP-TV-Z]{26}/;
  var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
  var emailRegex = /^([A-Z0-9_+-]+\.?)*[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
  var emojiRegex = /^(\p{Extended_Pictographic}|\p{Emoji_Component})+$/u;
  var ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
  var ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
  var datetimeRegex = (args) => {
    if (args.precision) {
      if (args.offset) {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
      } else {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
      }
    } else if (args.precision === 0) {
      if (args.offset) {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
      } else {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
      }
    } else {
      if (args.offset) {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
      } else {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
      }
    }
  };
  function isValidIP(ip, version) {
    if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
      return true;
    }
    if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
      return true;
    }
    return false;
  }
  var ZodString = class _ZodString extends ZodType {
    constructor() {
      super(...arguments);
      this._regex = (regex, validation, message) => this.refinement((data) => regex.test(data), {
        validation,
        code: ZodIssueCode.invalid_string,
        ...errorUtil.errToObj(message)
      });
      this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));
      this.trim = () => new _ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: "trim" }]
      });
      this.toLowerCase = () => new _ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: "toLowerCase" }]
      });
      this.toUpperCase = () => new _ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: "toUpperCase" }]
      });
    }
    _parse(input) {
      if (this._def.coerce) {
        input.data = String(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.string) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(
          ctx2,
          {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.string,
            received: ctx2.parsedType
          }
          //
        );
        return INVALID;
      }
      const status = new ParseStatus();
      let ctx = void 0;
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          if (input.data.length < check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          if (input.data.length > check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "length") {
          const tooBig = input.data.length > check.value;
          const tooSmall = input.data.length < check.value;
          if (tooBig || tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            if (tooBig) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: "string",
                inclusive: true,
                exact: true,
                message: check.message
              });
            } else if (tooSmall) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: "string",
                inclusive: true,
                exact: true,
                message: check.message
              });
            }
            status.dirty();
          }
        } else if (check.kind === "email") {
          if (!emailRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "email",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "emoji") {
          if (!emojiRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "emoji",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "uuid") {
          if (!uuidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "uuid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cuid") {
          if (!cuidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "cuid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cuid2") {
          if (!cuid2Regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "cuid2",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "ulid") {
          if (!ulidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "ulid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "url") {
          try {
            new URL(input.data);
          } catch (_a) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "url",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "regex") {
          check.regex.lastIndex = 0;
          const testResult = check.regex.test(input.data);
          if (!testResult) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "regex",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "trim") {
          input.data = input.data.trim();
        } else if (check.kind === "includes") {
          if (!input.data.includes(check.value, check.position)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { includes: check.value, position: check.position },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "toLowerCase") {
          input.data = input.data.toLowerCase();
        } else if (check.kind === "toUpperCase") {
          input.data = input.data.toUpperCase();
        } else if (check.kind === "startsWith") {
          if (!input.data.startsWith(check.value)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { startsWith: check.value },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "endsWith") {
          if (!input.data.endsWith(check.value)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { endsWith: check.value },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "datetime") {
          const regex = datetimeRegex(check);
          if (!regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: "datetime",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "ip") {
          if (!isValidIP(input.data, check.version)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "ip",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    _addCheck(check) {
      return new _ZodString({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    email(message) {
      return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
    }
    url(message) {
      return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
    }
    emoji(message) {
      return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
    }
    uuid(message) {
      return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
    }
    cuid(message) {
      return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
    }
    cuid2(message) {
      return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
    }
    ulid(message) {
      return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
    }
    ip(options) {
      return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
    }
    datetime(options) {
      var _a;
      if (typeof options === "string") {
        return this._addCheck({
          kind: "datetime",
          precision: null,
          offset: false,
          message: options
        });
      }
      return this._addCheck({
        kind: "datetime",
        precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
        offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
        ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
      });
    }
    regex(regex, message) {
      return this._addCheck({
        kind: "regex",
        regex,
        ...errorUtil.errToObj(message)
      });
    }
    includes(value, options) {
      return this._addCheck({
        kind: "includes",
        value,
        position: options === null || options === void 0 ? void 0 : options.position,
        ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
      });
    }
    startsWith(value, message) {
      return this._addCheck({
        kind: "startsWith",
        value,
        ...errorUtil.errToObj(message)
      });
    }
    endsWith(value, message) {
      return this._addCheck({
        kind: "endsWith",
        value,
        ...errorUtil.errToObj(message)
      });
    }
    min(minLength, message) {
      return this._addCheck({
        kind: "min",
        value: minLength,
        ...errorUtil.errToObj(message)
      });
    }
    max(maxLength, message) {
      return this._addCheck({
        kind: "max",
        value: maxLength,
        ...errorUtil.errToObj(message)
      });
    }
    length(len, message) {
      return this._addCheck({
        kind: "length",
        value: len,
        ...errorUtil.errToObj(message)
      });
    }
    get isDatetime() {
      return !!this._def.checks.find((ch) => ch.kind === "datetime");
    }
    get isEmail() {
      return !!this._def.checks.find((ch) => ch.kind === "email");
    }
    get isURL() {
      return !!this._def.checks.find((ch) => ch.kind === "url");
    }
    get isEmoji() {
      return !!this._def.checks.find((ch) => ch.kind === "emoji");
    }
    get isUUID() {
      return !!this._def.checks.find((ch) => ch.kind === "uuid");
    }
    get isCUID() {
      return !!this._def.checks.find((ch) => ch.kind === "cuid");
    }
    get isCUID2() {
      return !!this._def.checks.find((ch) => ch.kind === "cuid2");
    }
    get isULID() {
      return !!this._def.checks.find((ch) => ch.kind === "ulid");
    }
    get isIP() {
      return !!this._def.checks.find((ch) => ch.kind === "ip");
    }
    get minLength() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min;
    }
    get maxLength() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max;
    }
  };
  ZodString.create = (params) => {
    var _a;
    return new ZodString({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodString,
      coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
      ...processCreateParams(params)
    });
  };
  function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return valInt % stepInt / Math.pow(10, decCount);
  }
  var ZodNumber = class _ZodNumber extends ZodType {
    constructor() {
      super(...arguments);
      this.min = this.gte;
      this.max = this.lte;
      this.step = this.multipleOf;
    }
    _parse(input) {
      if (this._def.coerce) {
        input.data = Number(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.number) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.number,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      let ctx = void 0;
      const status = new ParseStatus();
      for (const check of this._def.checks) {
        if (check.kind === "int") {
          if (!util.isInteger(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: "integer",
              received: "float",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "min") {
          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
          if (tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "number",
              inclusive: check.inclusive,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
          if (tooBig) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "number",
              inclusive: check.inclusive,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "multipleOf") {
          if (floatSafeRemainder(input.data, check.value) !== 0) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_multiple_of,
              multipleOf: check.value,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "finite") {
          if (!Number.isFinite(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_finite,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    gte(value, message) {
      return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
      return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
      return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
      return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
      return new _ZodNumber({
        ...this._def,
        checks: [
          ...this._def.checks,
          {
            kind,
            value,
            inclusive,
            message: errorUtil.toString(message)
          }
        ]
      });
    }
    _addCheck(check) {
      return new _ZodNumber({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    int(message) {
      return this._addCheck({
        kind: "int",
        message: errorUtil.toString(message)
      });
    }
    positive(message) {
      return this._addCheck({
        kind: "min",
        value: 0,
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    negative(message) {
      return this._addCheck({
        kind: "max",
        value: 0,
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    nonpositive(message) {
      return this._addCheck({
        kind: "max",
        value: 0,
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    nonnegative(message) {
      return this._addCheck({
        kind: "min",
        value: 0,
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    multipleOf(value, message) {
      return this._addCheck({
        kind: "multipleOf",
        value,
        message: errorUtil.toString(message)
      });
    }
    finite(message) {
      return this._addCheck({
        kind: "finite",
        message: errorUtil.toString(message)
      });
    }
    safe(message) {
      return this._addCheck({
        kind: "min",
        inclusive: true,
        value: Number.MIN_SAFE_INTEGER,
        message: errorUtil.toString(message)
      })._addCheck({
        kind: "max",
        inclusive: true,
        value: Number.MAX_SAFE_INTEGER,
        message: errorUtil.toString(message)
      });
    }
    get minValue() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min;
    }
    get maxValue() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max;
    }
    get isInt() {
      return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
    }
    get isFinite() {
      let max = null, min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
          return true;
        } else if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        } else if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return Number.isFinite(min) && Number.isFinite(max);
    }
  };
  ZodNumber.create = (params) => {
    return new ZodNumber({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodNumber,
      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
      ...processCreateParams(params)
    });
  };
  var ZodBigInt = class _ZodBigInt extends ZodType {
    constructor() {
      super(...arguments);
      this.min = this.gte;
      this.max = this.lte;
    }
    _parse(input) {
      if (this._def.coerce) {
        input.data = BigInt(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.bigint) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.bigint,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      let ctx = void 0;
      const status = new ParseStatus();
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
          if (tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              type: "bigint",
              minimum: check.value,
              inclusive: check.inclusive,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
          if (tooBig) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              type: "bigint",
              maximum: check.value,
              inclusive: check.inclusive,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "multipleOf") {
          if (input.data % check.value !== BigInt(0)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_multiple_of,
              multipleOf: check.value,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    gte(value, message) {
      return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
      return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
      return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
      return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
      return new _ZodBigInt({
        ...this._def,
        checks: [
          ...this._def.checks,
          {
            kind,
            value,
            inclusive,
            message: errorUtil.toString(message)
          }
        ]
      });
    }
    _addCheck(check) {
      return new _ZodBigInt({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    positive(message) {
      return this._addCheck({
        kind: "min",
        value: BigInt(0),
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    negative(message) {
      return this._addCheck({
        kind: "max",
        value: BigInt(0),
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    nonpositive(message) {
      return this._addCheck({
        kind: "max",
        value: BigInt(0),
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    nonnegative(message) {
      return this._addCheck({
        kind: "min",
        value: BigInt(0),
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    multipleOf(value, message) {
      return this._addCheck({
        kind: "multipleOf",
        value,
        message: errorUtil.toString(message)
      });
    }
    get minValue() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min;
    }
    get maxValue() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max;
    }
  };
  ZodBigInt.create = (params) => {
    var _a;
    return new ZodBigInt({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodBigInt,
      coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
      ...processCreateParams(params)
    });
  };
  var ZodBoolean = class extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = Boolean(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.boolean) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.boolean,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodBoolean.create = (params) => {
    return new ZodBoolean({
      typeName: ZodFirstPartyTypeKind.ZodBoolean,
      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
      ...processCreateParams(params)
    });
  };
  var ZodDate = class _ZodDate extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = new Date(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.date) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.date,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      if (isNaN(input.data.getTime())) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_date
        });
        return INVALID;
      }
      const status = new ParseStatus();
      let ctx = void 0;
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          if (input.data.getTime() < check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              message: check.message,
              inclusive: true,
              exact: false,
              minimum: check.value,
              type: "date"
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          if (input.data.getTime() > check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              message: check.message,
              inclusive: true,
              exact: false,
              maximum: check.value,
              type: "date"
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return {
        status: status.value,
        value: new Date(input.data.getTime())
      };
    }
    _addCheck(check) {
      return new _ZodDate({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    min(minDate, message) {
      return this._addCheck({
        kind: "min",
        value: minDate.getTime(),
        message: errorUtil.toString(message)
      });
    }
    max(maxDate, message) {
      return this._addCheck({
        kind: "max",
        value: maxDate.getTime(),
        message: errorUtil.toString(message)
      });
    }
    get minDate() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min != null ? new Date(min) : null;
    }
    get maxDate() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max != null ? new Date(max) : null;
    }
  };
  ZodDate.create = (params) => {
    return new ZodDate({
      checks: [],
      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
      typeName: ZodFirstPartyTypeKind.ZodDate,
      ...processCreateParams(params)
    });
  };
  var ZodSymbol = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.symbol) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.symbol,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodSymbol.create = (params) => {
    return new ZodSymbol({
      typeName: ZodFirstPartyTypeKind.ZodSymbol,
      ...processCreateParams(params)
    });
  };
  var ZodUndefined = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.undefined) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.undefined,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodUndefined.create = (params) => {
    return new ZodUndefined({
      typeName: ZodFirstPartyTypeKind.ZodUndefined,
      ...processCreateParams(params)
    });
  };
  var ZodNull = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.null) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.null,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodNull.create = (params) => {
    return new ZodNull({
      typeName: ZodFirstPartyTypeKind.ZodNull,
      ...processCreateParams(params)
    });
  };
  var ZodAny = class extends ZodType {
    constructor() {
      super(...arguments);
      this._any = true;
    }
    _parse(input) {
      return OK(input.data);
    }
  };
  ZodAny.create = (params) => {
    return new ZodAny({
      typeName: ZodFirstPartyTypeKind.ZodAny,
      ...processCreateParams(params)
    });
  };
  var ZodUnknown = class extends ZodType {
    constructor() {
      super(...arguments);
      this._unknown = true;
    }
    _parse(input) {
      return OK(input.data);
    }
  };
  ZodUnknown.create = (params) => {
    return new ZodUnknown({
      typeName: ZodFirstPartyTypeKind.ZodUnknown,
      ...processCreateParams(params)
    });
  };
  var ZodNever = class extends ZodType {
    _parse(input) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.never,
        received: ctx.parsedType
      });
      return INVALID;
    }
  };
  ZodNever.create = (params) => {
    return new ZodNever({
      typeName: ZodFirstPartyTypeKind.ZodNever,
      ...processCreateParams(params)
    });
  };
  var ZodVoid = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.undefined) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.void,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodVoid.create = (params) => {
    return new ZodVoid({
      typeName: ZodFirstPartyTypeKind.ZodVoid,
      ...processCreateParams(params)
    });
  };
  var ZodArray = class _ZodArray extends ZodType {
    _parse(input) {
      const { ctx, status } = this._processInputParams(input);
      const def = this._def;
      if (ctx.parsedType !== ZodParsedType.array) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.array,
          received: ctx.parsedType
        });
        return INVALID;
      }
      if (def.exactLength !== null) {
        const tooBig = ctx.data.length > def.exactLength.value;
        const tooSmall = ctx.data.length < def.exactLength.value;
        if (tooBig || tooSmall) {
          addIssueToContext(ctx, {
            code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
            minimum: tooSmall ? def.exactLength.value : void 0,
            maximum: tooBig ? def.exactLength.value : void 0,
            type: "array",
            inclusive: true,
            exact: true,
            message: def.exactLength.message
          });
          status.dirty();
        }
      }
      if (def.minLength !== null) {
        if (ctx.data.length < def.minLength.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: def.minLength.value,
            type: "array",
            inclusive: true,
            exact: false,
            message: def.minLength.message
          });
          status.dirty();
        }
      }
      if (def.maxLength !== null) {
        if (ctx.data.length > def.maxLength.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: def.maxLength.value,
            type: "array",
            inclusive: true,
            exact: false,
            message: def.maxLength.message
          });
          status.dirty();
        }
      }
      if (ctx.common.async) {
        return Promise.all([...ctx.data].map((item, i) => {
          return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        })).then((result2) => {
          return ParseStatus.mergeArray(status, result2);
        });
      }
      const result = [...ctx.data].map((item, i) => {
        return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
      });
      return ParseStatus.mergeArray(status, result);
    }
    get element() {
      return this._def.type;
    }
    min(minLength, message) {
      return new _ZodArray({
        ...this._def,
        minLength: { value: minLength, message: errorUtil.toString(message) }
      });
    }
    max(maxLength, message) {
      return new _ZodArray({
        ...this._def,
        maxLength: { value: maxLength, message: errorUtil.toString(message) }
      });
    }
    length(len, message) {
      return new _ZodArray({
        ...this._def,
        exactLength: { value: len, message: errorUtil.toString(message) }
      });
    }
    nonempty(message) {
      return this.min(1, message);
    }
  };
  ZodArray.create = (schema, params) => {
    return new ZodArray({
      type: schema,
      minLength: null,
      maxLength: null,
      exactLength: null,
      typeName: ZodFirstPartyTypeKind.ZodArray,
      ...processCreateParams(params)
    });
  };
  function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
      const newShape = {};
      for (const key in schema.shape) {
        const fieldSchema = schema.shape[key];
        newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
      }
      return new ZodObject({
        ...schema._def,
        shape: () => newShape
      });
    } else if (schema instanceof ZodArray) {
      return new ZodArray({
        ...schema._def,
        type: deepPartialify(schema.element)
      });
    } else if (schema instanceof ZodOptional) {
      return ZodOptional.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodNullable) {
      return ZodNullable.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodTuple) {
      return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
    } else {
      return schema;
    }
  }
  var ZodObject = class _ZodObject extends ZodType {
    constructor() {
      super(...arguments);
      this._cached = null;
      this.nonstrict = this.passthrough;
      this.augment = this.extend;
    }
    _getCached() {
      if (this._cached !== null)
        return this._cached;
      const shape = this._def.shape();
      const keys = util.objectKeys(shape);
      return this._cached = { shape, keys };
    }
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.object) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      const { status, ctx } = this._processInputParams(input);
      const { shape, keys: shapeKeys } = this._getCached();
      const extraKeys = [];
      if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
        for (const key in ctx.data) {
          if (!shapeKeys.includes(key)) {
            extraKeys.push(key);
          }
        }
      }
      const pairs = [];
      for (const key of shapeKeys) {
        const keyValidator = shape[key];
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
          alwaysSet: key in ctx.data
        });
      }
      if (this._def.catchall instanceof ZodNever) {
        const unknownKeys = this._def.unknownKeys;
        if (unknownKeys === "passthrough") {
          for (const key of extraKeys) {
            pairs.push({
              key: { status: "valid", value: key },
              value: { status: "valid", value: ctx.data[key] }
            });
          }
        } else if (unknownKeys === "strict") {
          if (extraKeys.length > 0) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.unrecognized_keys,
              keys: extraKeys
            });
            status.dirty();
          }
        } else if (unknownKeys === "strip")
          ;
        else {
          throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
        }
      } else {
        const catchall = this._def.catchall;
        for (const key of extraKeys) {
          const value = ctx.data[key];
          pairs.push({
            key: { status: "valid", value: key },
            value: catchall._parse(
              new ParseInputLazyPath(ctx, value, ctx.path, key)
              //, ctx.child(key), value, getParsedType(value)
            ),
            alwaysSet: key in ctx.data
          });
        }
      }
      if (ctx.common.async) {
        return Promise.resolve().then(async () => {
          const syncPairs = [];
          for (const pair of pairs) {
            const key = await pair.key;
            syncPairs.push({
              key,
              value: await pair.value,
              alwaysSet: pair.alwaysSet
            });
          }
          return syncPairs;
        }).then((syncPairs) => {
          return ParseStatus.mergeObjectSync(status, syncPairs);
        });
      } else {
        return ParseStatus.mergeObjectSync(status, pairs);
      }
    }
    get shape() {
      return this._def.shape();
    }
    strict(message) {
      errorUtil.errToObj;
      return new _ZodObject({
        ...this._def,
        unknownKeys: "strict",
        ...message !== void 0 ? {
          errorMap: (issue, ctx) => {
            var _a, _b, _c, _d;
            const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
            if (issue.code === "unrecognized_keys")
              return {
                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
              };
            return {
              message: defaultError
            };
          }
        } : {}
      });
    }
    strip() {
      return new _ZodObject({
        ...this._def,
        unknownKeys: "strip"
      });
    }
    passthrough() {
      return new _ZodObject({
        ...this._def,
        unknownKeys: "passthrough"
      });
    }
    // const AugmentFactory =
    //   <Def extends ZodObjectDef>(def: Def) =>
    //   <Augmentation extends ZodRawShape>(
    //     augmentation: Augmentation
    //   ): ZodObject<
    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
    //     Def["unknownKeys"],
    //     Def["catchall"]
    //   > => {
    //     return new ZodObject({
    //       ...def,
    //       shape: () => ({
    //         ...def.shape(),
    //         ...augmentation,
    //       }),
    //     }) as any;
    //   };
    extend(augmentation) {
      return new _ZodObject({
        ...this._def,
        shape: () => ({
          ...this._def.shape(),
          ...augmentation
        })
      });
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */
    merge(merging) {
      const merged = new _ZodObject({
        unknownKeys: merging._def.unknownKeys,
        catchall: merging._def.catchall,
        shape: () => ({
          ...this._def.shape(),
          ...merging._def.shape()
        }),
        typeName: ZodFirstPartyTypeKind.ZodObject
      });
      return merged;
    }
    // merge<
    //   Incoming extends AnyZodObject,
    //   Augmentation extends Incoming["shape"],
    //   NewOutput extends {
    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
    //       ? Augmentation[k]["_output"]
    //       : k extends keyof Output
    //       ? Output[k]
    //       : never;
    //   },
    //   NewInput extends {
    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
    //       ? Augmentation[k]["_input"]
    //       : k extends keyof Input
    //       ? Input[k]
    //       : never;
    //   }
    // >(
    //   merging: Incoming
    // ): ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"],
    //   NewOutput,
    //   NewInput
    // > {
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    setKey(key, schema) {
      return this.augment({ [key]: schema });
    }
    // merge<Incoming extends AnyZodObject>(
    //   merging: Incoming
    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
    // ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"]
    // > {
    //   // const mergedShape = objectUtil.mergeShapes(
    //   //   this._def.shape(),
    //   //   merging._def.shape()
    //   // );
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    catchall(index) {
      return new _ZodObject({
        ...this._def,
        catchall: index
      });
    }
    pick(mask) {
      const shape = {};
      util.objectKeys(mask).forEach((key) => {
        if (mask[key] && this.shape[key]) {
          shape[key] = this.shape[key];
        }
      });
      return new _ZodObject({
        ...this._def,
        shape: () => shape
      });
    }
    omit(mask) {
      const shape = {};
      util.objectKeys(this.shape).forEach((key) => {
        if (!mask[key]) {
          shape[key] = this.shape[key];
        }
      });
      return new _ZodObject({
        ...this._def,
        shape: () => shape
      });
    }
    /**
     * @deprecated
     */
    deepPartial() {
      return deepPartialify(this);
    }
    partial(mask) {
      const newShape = {};
      util.objectKeys(this.shape).forEach((key) => {
        const fieldSchema = this.shape[key];
        if (mask && !mask[key]) {
          newShape[key] = fieldSchema;
        } else {
          newShape[key] = fieldSchema.optional();
        }
      });
      return new _ZodObject({
        ...this._def,
        shape: () => newShape
      });
    }
    required(mask) {
      const newShape = {};
      util.objectKeys(this.shape).forEach((key) => {
        if (mask && !mask[key]) {
          newShape[key] = this.shape[key];
        } else {
          const fieldSchema = this.shape[key];
          let newField = fieldSchema;
          while (newField instanceof ZodOptional) {
            newField = newField._def.innerType;
          }
          newShape[key] = newField;
        }
      });
      return new _ZodObject({
        ...this._def,
        shape: () => newShape
      });
    }
    keyof() {
      return createZodEnum(util.objectKeys(this.shape));
    }
  };
  ZodObject.create = (shape, params) => {
    return new ZodObject({
      shape: () => shape,
      unknownKeys: "strip",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  ZodObject.strictCreate = (shape, params) => {
    return new ZodObject({
      shape: () => shape,
      unknownKeys: "strict",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  ZodObject.lazycreate = (shape, params) => {
    return new ZodObject({
      shape,
      unknownKeys: "strip",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  var ZodUnion = class extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const options = this._def.options;
      function handleResults(results) {
        for (const result of results) {
          if (result.result.status === "valid") {
            return result.result;
          }
        }
        for (const result of results) {
          if (result.result.status === "dirty") {
            ctx.common.issues.push(...result.ctx.common.issues);
            return result.result;
          }
        }
        const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union,
          unionErrors
        });
        return INVALID;
      }
      if (ctx.common.async) {
        return Promise.all(options.map(async (option) => {
          const childCtx = {
            ...ctx,
            common: {
              ...ctx.common,
              issues: []
            },
            parent: null
          };
          return {
            result: await option._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            }),
            ctx: childCtx
          };
        })).then(handleResults);
      } else {
        let dirty = void 0;
        const issues = [];
        for (const option of options) {
          const childCtx = {
            ...ctx,
            common: {
              ...ctx.common,
              issues: []
            },
            parent: null
          };
          const result = option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          });
          if (result.status === "valid") {
            return result;
          } else if (result.status === "dirty" && !dirty) {
            dirty = { result, ctx: childCtx };
          }
          if (childCtx.common.issues.length) {
            issues.push(childCtx.common.issues);
          }
        }
        if (dirty) {
          ctx.common.issues.push(...dirty.ctx.common.issues);
          return dirty.result;
        }
        const unionErrors = issues.map((issues2) => new ZodError(issues2));
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union,
          unionErrors
        });
        return INVALID;
      }
    }
    get options() {
      return this._def.options;
    }
  };
  ZodUnion.create = (types, params) => {
    return new ZodUnion({
      options: types,
      typeName: ZodFirstPartyTypeKind.ZodUnion,
      ...processCreateParams(params)
    });
  };
  var getDiscriminator = (type) => {
    if (type instanceof ZodLazy) {
      return getDiscriminator(type.schema);
    } else if (type instanceof ZodEffects) {
      return getDiscriminator(type.innerType());
    } else if (type instanceof ZodLiteral) {
      return [type.value];
    } else if (type instanceof ZodEnum) {
      return type.options;
    } else if (type instanceof ZodNativeEnum) {
      return Object.keys(type.enum);
    } else if (type instanceof ZodDefault) {
      return getDiscriminator(type._def.innerType);
    } else if (type instanceof ZodUndefined) {
      return [void 0];
    } else if (type instanceof ZodNull) {
      return [null];
    } else {
      return null;
    }
  };
  var ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.object) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const discriminator = this.discriminator;
      const discriminatorValue = ctx.data[discriminator];
      const option = this.optionsMap.get(discriminatorValue);
      if (!option) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union_discriminator,
          options: Array.from(this.optionsMap.keys()),
          path: [discriminator]
        });
        return INVALID;
      }
      if (ctx.common.async) {
        return option._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
      } else {
        return option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
      }
    }
    get discriminator() {
      return this._def.discriminator;
    }
    get options() {
      return this._def.options;
    }
    get optionsMap() {
      return this._def.optionsMap;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */
    static create(discriminator, options, params) {
      const optionsMap = /* @__PURE__ */ new Map();
      for (const type of options) {
        const discriminatorValues = getDiscriminator(type.shape[discriminator]);
        if (!discriminatorValues) {
          throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
        }
        for (const value of discriminatorValues) {
          if (optionsMap.has(value)) {
            throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
          }
          optionsMap.set(value, type);
        }
      }
      return new _ZodDiscriminatedUnion({
        typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
        discriminator,
        options,
        optionsMap,
        ...processCreateParams(params)
      });
    }
  };
  function mergeValues(a, b) {
    const aType = getParsedType(a);
    const bType = getParsedType(b);
    if (a === b) {
      return { valid: true, data: a };
    } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
      const bKeys = util.objectKeys(b);
      const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
      const newObj = { ...a, ...b };
      for (const key of sharedKeys) {
        const sharedValue = mergeValues(a[key], b[key]);
        if (!sharedValue.valid) {
          return { valid: false };
        }
        newObj[key] = sharedValue.data;
      }
      return { valid: true, data: newObj };
    } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
      if (a.length !== b.length) {
        return { valid: false };
      }
      const newArray = [];
      for (let index = 0; index < a.length; index++) {
        const itemA = a[index];
        const itemB = b[index];
        const sharedValue = mergeValues(itemA, itemB);
        if (!sharedValue.valid) {
          return { valid: false };
        }
        newArray.push(sharedValue.data);
      }
      return { valid: true, data: newArray };
    } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
      return { valid: true, data: a };
    } else {
      return { valid: false };
    }
  }
  var ZodIntersection = class extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      const handleParsed = (parsedLeft, parsedRight) => {
        if (isAborted(parsedLeft) || isAborted(parsedRight)) {
          return INVALID;
        }
        const merged = mergeValues(parsedLeft.value, parsedRight.value);
        if (!merged.valid) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_intersection_types
          });
          return INVALID;
        }
        if (isDirty(parsedLeft) || isDirty(parsedRight)) {
          status.dirty();
        }
        return { status: status.value, value: merged.data };
      };
      if (ctx.common.async) {
        return Promise.all([
          this._def.left._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }),
          this._def.right._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          })
        ]).then(([left, right]) => handleParsed(left, right));
      } else {
        return handleParsed(this._def.left._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }), this._def.right._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }));
      }
    }
  };
  ZodIntersection.create = (left, right, params) => {
    return new ZodIntersection({
      left,
      right,
      typeName: ZodFirstPartyTypeKind.ZodIntersection,
      ...processCreateParams(params)
    });
  };
  var ZodTuple = class _ZodTuple extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.array) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.array,
          received: ctx.parsedType
        });
        return INVALID;
      }
      if (ctx.data.length < this._def.items.length) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: this._def.items.length,
          inclusive: true,
          exact: false,
          type: "array"
        });
        return INVALID;
      }
      const rest = this._def.rest;
      if (!rest && ctx.data.length > this._def.items.length) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: this._def.items.length,
          inclusive: true,
          exact: false,
          type: "array"
        });
        status.dirty();
      }
      const items = [...ctx.data].map((item, itemIndex) => {
        const schema = this._def.items[itemIndex] || this._def.rest;
        if (!schema)
          return null;
        return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
      }).filter((x) => !!x);
      if (ctx.common.async) {
        return Promise.all(items).then((results) => {
          return ParseStatus.mergeArray(status, results);
        });
      } else {
        return ParseStatus.mergeArray(status, items);
      }
    }
    get items() {
      return this._def.items;
    }
    rest(rest) {
      return new _ZodTuple({
        ...this._def,
        rest
      });
    }
  };
  ZodTuple.create = (schemas, params) => {
    if (!Array.isArray(schemas)) {
      throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    }
    return new ZodTuple({
      items: schemas,
      typeName: ZodFirstPartyTypeKind.ZodTuple,
      rest: null,
      ...processCreateParams(params)
    });
  };
  var ZodRecord = class _ZodRecord extends ZodType {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.object) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const pairs = [];
      const keyType = this._def.keyType;
      const valueType = this._def.valueType;
      for (const key in ctx.data) {
        pairs.push({
          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
          value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))
        });
      }
      if (ctx.common.async) {
        return ParseStatus.mergeObjectAsync(status, pairs);
      } else {
        return ParseStatus.mergeObjectSync(status, pairs);
      }
    }
    get element() {
      return this._def.valueType;
    }
    static create(first, second, third) {
      if (second instanceof ZodType) {
        return new _ZodRecord({
          keyType: first,
          valueType: second,
          typeName: ZodFirstPartyTypeKind.ZodRecord,
          ...processCreateParams(third)
        });
      }
      return new _ZodRecord({
        keyType: ZodString.create(),
        valueType: first,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(second)
      });
    }
  };
  var ZodMap = class extends ZodType {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.map) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.map,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const keyType = this._def.keyType;
      const valueType = this._def.valueType;
      const pairs = [...ctx.data.entries()].map(([key, value], index) => {
        return {
          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
          value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
        };
      });
      if (ctx.common.async) {
        const finalMap = /* @__PURE__ */ new Map();
        return Promise.resolve().then(async () => {
          for (const pair of pairs) {
            const key = await pair.key;
            const value = await pair.value;
            if (key.status === "aborted" || value.status === "aborted") {
              return INVALID;
            }
            if (key.status === "dirty" || value.status === "dirty") {
              status.dirty();
            }
            finalMap.set(key.value, value.value);
          }
          return { status: status.value, value: finalMap };
        });
      } else {
        const finalMap = /* @__PURE__ */ new Map();
        for (const pair of pairs) {
          const key = pair.key;
          const value = pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      }
    }
  };
  ZodMap.create = (keyType, valueType, params) => {
    return new ZodMap({
      valueType,
      keyType,
      typeName: ZodFirstPartyTypeKind.ZodMap,
      ...processCreateParams(params)
    });
  };
  var ZodSet = class _ZodSet extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.set) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.set,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const def = this._def;
      if (def.minSize !== null) {
        if (ctx.data.size < def.minSize.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: def.minSize.value,
            type: "set",
            inclusive: true,
            exact: false,
            message: def.minSize.message
          });
          status.dirty();
        }
      }
      if (def.maxSize !== null) {
        if (ctx.data.size > def.maxSize.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: def.maxSize.value,
            type: "set",
            inclusive: true,
            exact: false,
            message: def.maxSize.message
          });
          status.dirty();
        }
      }
      const valueType = this._def.valueType;
      function finalizeSet(elements2) {
        const parsedSet = /* @__PURE__ */ new Set();
        for (const element of elements2) {
          if (element.status === "aborted")
            return INVALID;
          if (element.status === "dirty")
            status.dirty();
          parsedSet.add(element.value);
        }
        return { status: status.value, value: parsedSet };
      }
      const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
      if (ctx.common.async) {
        return Promise.all(elements).then((elements2) => finalizeSet(elements2));
      } else {
        return finalizeSet(elements);
      }
    }
    min(minSize, message) {
      return new _ZodSet({
        ...this._def,
        minSize: { value: minSize, message: errorUtil.toString(message) }
      });
    }
    max(maxSize, message) {
      return new _ZodSet({
        ...this._def,
        maxSize: { value: maxSize, message: errorUtil.toString(message) }
      });
    }
    size(size, message) {
      return this.min(size, message).max(size, message);
    }
    nonempty(message) {
      return this.min(1, message);
    }
  };
  ZodSet.create = (valueType, params) => {
    return new ZodSet({
      valueType,
      minSize: null,
      maxSize: null,
      typeName: ZodFirstPartyTypeKind.ZodSet,
      ...processCreateParams(params)
    });
  };
  var ZodFunction = class _ZodFunction extends ZodType {
    constructor() {
      super(...arguments);
      this.validate = this.implement;
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.function) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.function,
          received: ctx.parsedType
        });
        return INVALID;
      }
      function makeArgsIssue(args, error) {
        return makeIssue({
          data: args,
          path: ctx.path,
          errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap
          ].filter((x) => !!x),
          issueData: {
            code: ZodIssueCode.invalid_arguments,
            argumentsError: error
          }
        });
      }
      function makeReturnsIssue(returns, error) {
        return makeIssue({
          data: returns,
          path: ctx.path,
          errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap
          ].filter((x) => !!x),
          issueData: {
            code: ZodIssueCode.invalid_return_type,
            returnTypeError: error
          }
        });
      }
      const params = { errorMap: ctx.common.contextualErrorMap };
      const fn = ctx.data;
      if (this._def.returns instanceof ZodPromise) {
        const me = this;
        return OK(async function(...args) {
          const error = new ZodError([]);
          const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
            error.addIssue(makeArgsIssue(args, e));
            throw error;
          });
          const result = await Reflect.apply(fn, this, parsedArgs);
          const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
            error.addIssue(makeReturnsIssue(result, e));
            throw error;
          });
          return parsedReturns;
        });
      } else {
        const me = this;
        return OK(function(...args) {
          const parsedArgs = me._def.args.safeParse(args, params);
          if (!parsedArgs.success) {
            throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
          }
          const result = Reflect.apply(fn, this, parsedArgs.data);
          const parsedReturns = me._def.returns.safeParse(result, params);
          if (!parsedReturns.success) {
            throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
          }
          return parsedReturns.data;
        });
      }
    }
    parameters() {
      return this._def.args;
    }
    returnType() {
      return this._def.returns;
    }
    args(...items) {
      return new _ZodFunction({
        ...this._def,
        args: ZodTuple.create(items).rest(ZodUnknown.create())
      });
    }
    returns(returnType) {
      return new _ZodFunction({
        ...this._def,
        returns: returnType
      });
    }
    implement(func) {
      const validatedFunc = this.parse(func);
      return validatedFunc;
    }
    strictImplement(func) {
      const validatedFunc = this.parse(func);
      return validatedFunc;
    }
    static create(args, returns, params) {
      return new _ZodFunction({
        args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
        returns: returns || ZodUnknown.create(),
        typeName: ZodFirstPartyTypeKind.ZodFunction,
        ...processCreateParams(params)
      });
    }
  };
  var ZodLazy = class extends ZodType {
    get schema() {
      return this._def.getter();
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const lazySchema = this._def.getter();
      return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
    }
  };
  ZodLazy.create = (getter, params) => {
    return new ZodLazy({
      getter,
      typeName: ZodFirstPartyTypeKind.ZodLazy,
      ...processCreateParams(params)
    });
  };
  var ZodLiteral = class extends ZodType {
    _parse(input) {
      if (input.data !== this._def.value) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_literal,
          expected: this._def.value
        });
        return INVALID;
      }
      return { status: "valid", value: input.data };
    }
    get value() {
      return this._def.value;
    }
  };
  ZodLiteral.create = (value, params) => {
    return new ZodLiteral({
      value,
      typeName: ZodFirstPartyTypeKind.ZodLiteral,
      ...processCreateParams(params)
    });
  };
  function createZodEnum(values, params) {
    return new ZodEnum({
      values,
      typeName: ZodFirstPartyTypeKind.ZodEnum,
      ...processCreateParams(params)
    });
  }
  var ZodEnum = class _ZodEnum extends ZodType {
    _parse(input) {
      if (typeof input.data !== "string") {
        const ctx = this._getOrReturnCtx(input);
        const expectedValues = this._def.values;
        addIssueToContext(ctx, {
          expected: util.joinValues(expectedValues),
          received: ctx.parsedType,
          code: ZodIssueCode.invalid_type
        });
        return INVALID;
      }
      if (this._def.values.indexOf(input.data) === -1) {
        const ctx = this._getOrReturnCtx(input);
        const expectedValues = this._def.values;
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_enum_value,
          options: expectedValues
        });
        return INVALID;
      }
      return OK(input.data);
    }
    get options() {
      return this._def.values;
    }
    get enum() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    get Values() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    get Enum() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    extract(values) {
      return _ZodEnum.create(values);
    }
    exclude(values) {
      return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));
    }
  };
  ZodEnum.create = createZodEnum;
  var ZodNativeEnum = class extends ZodType {
    _parse(input) {
      const nativeEnumValues = util.getValidEnumValues(this._def.values);
      const ctx = this._getOrReturnCtx(input);
      if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
        const expectedValues = util.objectValues(nativeEnumValues);
        addIssueToContext(ctx, {
          expected: util.joinValues(expectedValues),
          received: ctx.parsedType,
          code: ZodIssueCode.invalid_type
        });
        return INVALID;
      }
      if (nativeEnumValues.indexOf(input.data) === -1) {
        const expectedValues = util.objectValues(nativeEnumValues);
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_enum_value,
          options: expectedValues
        });
        return INVALID;
      }
      return OK(input.data);
    }
    get enum() {
      return this._def.values;
    }
  };
  ZodNativeEnum.create = (values, params) => {
    return new ZodNativeEnum({
      values,
      typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
      ...processCreateParams(params)
    });
  };
  var ZodPromise = class extends ZodType {
    unwrap() {
      return this._def.type;
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.promise,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
      return OK(promisified.then((data) => {
        return this._def.type.parseAsync(data, {
          path: ctx.path,
          errorMap: ctx.common.contextualErrorMap
        });
      }));
    }
  };
  ZodPromise.create = (schema, params) => {
    return new ZodPromise({
      type: schema,
      typeName: ZodFirstPartyTypeKind.ZodPromise,
      ...processCreateParams(params)
    });
  };
  var ZodEffects = class extends ZodType {
    innerType() {
      return this._def.schema;
    }
    sourceType() {
      return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      const effect = this._def.effect || null;
      const checkCtx = {
        addIssue: (arg) => {
          addIssueToContext(ctx, arg);
          if (arg.fatal) {
            status.abort();
          } else {
            status.dirty();
          }
        },
        get path() {
          return ctx.path;
        }
      };
      checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
      if (effect.type === "preprocess") {
        const processed = effect.transform(ctx.data, checkCtx);
        if (ctx.common.issues.length) {
          return {
            status: "dirty",
            value: ctx.data
          };
        }
        if (ctx.common.async) {
          return Promise.resolve(processed).then((processed2) => {
            return this._def.schema._parseAsync({
              data: processed2,
              path: ctx.path,
              parent: ctx
            });
          });
        } else {
          return this._def.schema._parseSync({
            data: processed,
            path: ctx.path,
            parent: ctx
          });
        }
      }
      if (effect.type === "refinement") {
        const executeRefinement = (acc) => {
          const result = effect.refinement(acc, checkCtx);
          if (ctx.common.async) {
            return Promise.resolve(result);
          }
          if (result instanceof Promise) {
            throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
          }
          return acc;
        };
        if (ctx.common.async === false) {
          const inner = this._def.schema._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          executeRefinement(inner.value);
          return { status: status.value, value: inner.value };
        } else {
          return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
            if (inner.status === "aborted")
              return INVALID;
            if (inner.status === "dirty")
              status.dirty();
            return executeRefinement(inner.value).then(() => {
              return { status: status.value, value: inner.value };
            });
          });
        }
      }
      if (effect.type === "transform") {
        if (ctx.common.async === false) {
          const base = this._def.schema._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (!isValid(base))
            return base;
          const result = effect.transform(base.value, checkCtx);
          if (result instanceof Promise) {
            throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
          }
          return { status: status.value, value: result };
        } else {
          return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
            if (!isValid(base))
              return base;
            return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
          });
        }
      }
      util.assertNever(effect);
    }
  };
  ZodEffects.create = (schema, effect, params) => {
    return new ZodEffects({
      schema,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect,
      ...processCreateParams(params)
    });
  };
  ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
    return new ZodEffects({
      schema,
      effect: { type: "preprocess", transform: preprocess },
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      ...processCreateParams(params)
    });
  };
  var ZodOptional = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType === ZodParsedType.undefined) {
        return OK(void 0);
      }
      return this._def.innerType._parse(input);
    }
    unwrap() {
      return this._def.innerType;
    }
  };
  ZodOptional.create = (type, params) => {
    return new ZodOptional({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodOptional,
      ...processCreateParams(params)
    });
  };
  var ZodNullable = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType === ZodParsedType.null) {
        return OK(null);
      }
      return this._def.innerType._parse(input);
    }
    unwrap() {
      return this._def.innerType;
    }
  };
  ZodNullable.create = (type, params) => {
    return new ZodNullable({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodNullable,
      ...processCreateParams(params)
    });
  };
  var ZodDefault = class extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      let data = ctx.data;
      if (ctx.parsedType === ZodParsedType.undefined) {
        data = this._def.defaultValue();
      }
      return this._def.innerType._parse({
        data,
        path: ctx.path,
        parent: ctx
      });
    }
    removeDefault() {
      return this._def.innerType;
    }
  };
  ZodDefault.create = (type, params) => {
    return new ZodDefault({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodDefault,
      defaultValue: typeof params.default === "function" ? params.default : () => params.default,
      ...processCreateParams(params)
    });
  };
  var ZodCatch = class extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const newCtx = {
        ...ctx,
        common: {
          ...ctx.common,
          issues: []
        }
      };
      const result = this._def.innerType._parse({
        data: newCtx.data,
        path: newCtx.path,
        parent: {
          ...newCtx
        }
      });
      if (isAsync(result)) {
        return result.then((result2) => {
          return {
            status: "valid",
            value: result2.status === "valid" ? result2.value : this._def.catchValue({
              get error() {
                return new ZodError(newCtx.common.issues);
              },
              input: newCtx.data
            })
          };
        });
      } else {
        return {
          status: "valid",
          value: result.status === "valid" ? result.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      }
    }
    removeCatch() {
      return this._def.innerType;
    }
  };
  ZodCatch.create = (type, params) => {
    return new ZodCatch({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodCatch,
      catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
      ...processCreateParams(params)
    });
  };
  var ZodNaN = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.nan) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.nan,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return { status: "valid", value: input.data };
    }
  };
  ZodNaN.create = (params) => {
    return new ZodNaN({
      typeName: ZodFirstPartyTypeKind.ZodNaN,
      ...processCreateParams(params)
    });
  };
  var BRAND = Symbol("zod_brand");
  var ZodBranded = class extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const data = ctx.data;
      return this._def.type._parse({
        data,
        path: ctx.path,
        parent: ctx
      });
    }
    unwrap() {
      return this._def.type;
    }
  };
  var ZodPipeline = class _ZodPipeline extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.common.async) {
        const handleAsync = async () => {
          const inResult = await this._def.in._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inResult.status === "aborted")
            return INVALID;
          if (inResult.status === "dirty") {
            status.dirty();
            return DIRTY(inResult.value);
          } else {
            return this._def.out._parseAsync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            });
          }
        };
        return handleAsync();
      } else {
        const inResult = this._def.in._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return {
            status: "dirty",
            value: inResult.value
          };
        } else {
          return this._def.out._parseSync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      }
    }
    static create(a, b) {
      return new _ZodPipeline({
        in: a,
        out: b,
        typeName: ZodFirstPartyTypeKind.ZodPipeline
      });
    }
  };
  var ZodReadonly = class extends ZodType {
    _parse(input) {
      const result = this._def.innerType._parse(input);
      if (isValid(result)) {
        result.value = Object.freeze(result.value);
      }
      return result;
    }
  };
  ZodReadonly.create = (type, params) => {
    return new ZodReadonly({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodReadonly,
      ...processCreateParams(params)
    });
  };
  var custom = (check, params = {}, fatal) => {
    if (check)
      return ZodAny.create().superRefine((data, ctx) => {
        var _a, _b;
        if (!check(data)) {
          const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
          const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
          const p2 = typeof p === "string" ? { message: p } : p;
          ctx.addIssue({ code: "custom", ...p2, fatal: _fatal });
        }
      });
    return ZodAny.create();
  };
  var late = {
    object: ZodObject.lazycreate
  };
  var ZodFirstPartyTypeKind;
  (function(ZodFirstPartyTypeKind2) {
    ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
    ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
  })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
  var instanceOfType = (cls, params = {
    message: `Input not instance of ${cls.name}`
  }) => custom((data) => data instanceof cls, params);
  var stringType = ZodString.create;
  var numberType = ZodNumber.create;
  var nanType = ZodNaN.create;
  var bigIntType = ZodBigInt.create;
  var booleanType = ZodBoolean.create;
  var dateType = ZodDate.create;
  var symbolType = ZodSymbol.create;
  var undefinedType = ZodUndefined.create;
  var nullType = ZodNull.create;
  var anyType = ZodAny.create;
  var unknownType = ZodUnknown.create;
  var neverType = ZodNever.create;
  var voidType = ZodVoid.create;
  var arrayType = ZodArray.create;
  var objectType = ZodObject.create;
  var strictObjectType = ZodObject.strictCreate;
  var unionType = ZodUnion.create;
  var discriminatedUnionType = ZodDiscriminatedUnion.create;
  var intersectionType = ZodIntersection.create;
  var tupleType = ZodTuple.create;
  var recordType = ZodRecord.create;
  var mapType = ZodMap.create;
  var setType = ZodSet.create;
  var functionType = ZodFunction.create;
  var lazyType = ZodLazy.create;
  var literalType = ZodLiteral.create;
  var enumType = ZodEnum.create;
  var nativeEnumType = ZodNativeEnum.create;
  var promiseType = ZodPromise.create;
  var effectsType = ZodEffects.create;
  var optionalType = ZodOptional.create;
  var nullableType = ZodNullable.create;
  var preprocessType = ZodEffects.createWithPreprocess;
  var pipelineType = ZodPipeline.create;
  var ostring = () => stringType().optional();
  var onumber = () => numberType().optional();
  var oboolean = () => booleanType().optional();
  var coerce = {
    string: (arg) => ZodString.create({ ...arg, coerce: true }),
    number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
    boolean: (arg) => ZodBoolean.create({
      ...arg,
      coerce: true
    }),
    bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
    date: (arg) => ZodDate.create({ ...arg, coerce: true })
  };
  var NEVER = INVALID;
  var z = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    defaultErrorMap: errorMap,
    setErrorMap,
    getErrorMap,
    makeIssue,
    EMPTY_PATH,
    addIssueToContext,
    ParseStatus,
    INVALID,
    DIRTY,
    OK,
    isAborted,
    isDirty,
    isValid,
    isAsync,
    get util() {
      return util;
    },
    get objectUtil() {
      return objectUtil;
    },
    ZodParsedType,
    getParsedType,
    ZodType,
    ZodString,
    ZodNumber,
    ZodBigInt,
    ZodBoolean,
    ZodDate,
    ZodSymbol,
    ZodUndefined,
    ZodNull,
    ZodAny,
    ZodUnknown,
    ZodNever,
    ZodVoid,
    ZodArray,
    ZodObject,
    ZodUnion,
    ZodDiscriminatedUnion,
    ZodIntersection,
    ZodTuple,
    ZodRecord,
    ZodMap,
    ZodSet,
    ZodFunction,
    ZodLazy,
    ZodLiteral,
    ZodEnum,
    ZodNativeEnum,
    ZodPromise,
    ZodEffects,
    ZodTransformer: ZodEffects,
    ZodOptional,
    ZodNullable,
    ZodDefault,
    ZodCatch,
    ZodNaN,
    BRAND,
    ZodBranded,
    ZodPipeline,
    ZodReadonly,
    custom,
    Schema: ZodType,
    ZodSchema: ZodType,
    late,
    get ZodFirstPartyTypeKind() {
      return ZodFirstPartyTypeKind;
    },
    coerce,
    any: anyType,
    array: arrayType,
    bigint: bigIntType,
    boolean: booleanType,
    date: dateType,
    discriminatedUnion: discriminatedUnionType,
    effect: effectsType,
    "enum": enumType,
    "function": functionType,
    "instanceof": instanceOfType,
    intersection: intersectionType,
    lazy: lazyType,
    literal: literalType,
    map: mapType,
    nan: nanType,
    nativeEnum: nativeEnumType,
    never: neverType,
    "null": nullType,
    nullable: nullableType,
    number: numberType,
    object: objectType,
    oboolean,
    onumber,
    optional: optionalType,
    ostring,
    pipeline: pipelineType,
    preprocess: preprocessType,
    promise: promiseType,
    record: recordType,
    set: setType,
    strictObject: strictObjectType,
    string: stringType,
    symbol: symbolType,
    transformer: effectsType,
    tuple: tupleType,
    "undefined": undefinedType,
    union: unionType,
    unknown: unknownType,
    "void": voidType,
    NEVER,
    ZodIssueCode,
    quotelessJson,
    ZodError
  });

  // src/core/bcf/zod.ts
  var BCFBaseSchema = z.object({});
  var zod_default = BCFBaseSchema;

  // src/core/bcf/topic.ts
  var TopicSchema_Core = zod_default.extend({
    /**
     * Title of the topic.
     */
    title: z.string(),
    /**
     * Description of the topic.
     */
    description: z.string().optional(),
    /**
     * Number to maintain the order of the topics.
     * This property is deprecated and will be removed in a future release
     */
    index: z.number(),
    /**
     * Date when the topic was created.
     *
     * E.g. `2023-07-03T21:02:50+02:00`
     */
    creationDate: z.string(),
    /**
     * User who created the topic.
     *
     * E.g. `andre.wisen@gmail.com`
     */
    creationAuthor: z.string()
  });
  var topic_default2 = TopicSchema_Core;

  // src/constants.ts
  var FILE_EXTENSIONS = {
    /**
     * ZIP file.
     */
    ZIP: "zip",
    /**
     * BCFZIP file.
     */
    BCFZIP: "bcfzip",
    /**
     * BCF file.
     */
    BCF: "bcf"
  };

  // src/types.ts
  var EXTENSION = FILE_EXTENSIONS.BCF;
  var Vector3TupleSchema = tupleType([numberType(), numberType(), numberType()]);
  var DEFAULT_VECTOR3_TUPLE = new Vector3(-1, -1, -1).toArray();
  var TopicBaseSchema_Three = topic_default2.extend({
    /**
     * Position of the camera in local three.js space.
     */
    position: Vector3TupleSchema,
    /**
     * Direction of the camera in local three.js space.
     */
    direction: Vector3TupleSchema,
    /**
     * target vector of the camera in local three.js space.
     */
    target: Vector3TupleSchema,
    /**
     * Field of view of the perspective camera.
     */
    fieldOfView: numberType().min(1).max(140),
    /**
     * Aspect ratio of the perspective camera.
     */
    aspectRatio: numberType().min(0.1).max(4)
  });
  var TopicSchema_Three = TopicBaseSchema_Three.extend({
    uuid: stringType(),
    /**
     * Screenshot as a base64 string generated by three.js.
     */
    screenshot: stringType()
  });
  var TopicSchema_Worker = topic_default2.merge(
    TopicSchema_Three.pick({ screenshot: true })
  ).extend({
    cameraViewPoint: Vector3TupleSchema,
    cameraDirection: Vector3TupleSchema,
    cameraUpVector: Vector3TupleSchema
  }).merge(TopicBaseSchema_Three.pick({ fieldOfView: true, aspectRatio: true }));

  // src/worker/utils.ts
  var dataURLtoBlob = (dataURL) => {
    const arr = dataURL.split(",");
    const mime = arr[0].match(/:(.*?);/)[1];
    const bstr = atob(arr[1]);
    let n = bstr.length;
    const u8arr = new Uint8Array(n);
    while (n--) {
      u8arr[n] = bstr.charCodeAt(n);
    }
    return new Blob([u8arr], { type: mime });
  };

  // src/worker/zip.ts
  var createZipAsync = async (e) => {
    const zipFile = new import_jszip.default();
    zipFile.file("bcf.version", new bcf_version_default().create());
    for (let i = 0; i < e.topics.length; i++) {
      const topic = e.topics[i];
      TopicSchema_Worker.parse(topic);
      const topicGuid = MathUtils.generateUUID();
      const viewpointGuid = MathUtils.generateUUID();
      const params = {
        ...topic,
        topicGuid,
        viewpointGuid,
        index: i
      };
      const topicFolder = zipFile.folder(topicGuid);
      if (topicFolder === null)
        throw new Error("Could not create topic folder");
      topicFolder.file(`${viewpointGuid}.png`, dataURLtoBlob(topic.screenshot), {
        binary: true
      });
      topicFolder.file(`${viewpointGuid}.bcfv`, new viewpoint_default().create(params));
      topicFolder.file("markup.bcf", new markup_default().create(params));
    }
    const data = await zipFile.generateAsync({ type: "blob" });
    return data;
  };
  var zip_default = createZipAsync;

  // src/worker/worker.ts
  var onBeginAsync = async (e) => {
    console.log("Got message from main thread. Creating ZIP");
    const content = await zip_default(e);
    console.log("ZIP created. Sending back to main thread");
    const message = {
      type: "begin",
      data: content
    };
    postMessage(message);
  };
  var onBeginTest = () => {
    console.log(
      "THREE.BCF.WORKER: Got test message from main thread. Sending response to main thread"
    );
    const message = { type: "test", data: "test" };
    postMessage(message);
  };
  onmessage = async function(e) {
    switch (e.data.type) {
      case "begin":
        await onBeginAsync(e.data);
        break;
      case "test":
        onBeginTest();
        break;
      default:
        break;
    }
  };
})();
/*! Bundled license information:

jszip/dist/jszip.min.js:
  (*!
  
  JSZip v3.10.1 - A JavaScript class for generating and reading zip files
  <http://stuartk.com/jszip>
  
  (c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
  Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.
  
  JSZip uses the library pako released under the MIT license :
  https://github.com/nodeca/pako/blob/main/LICENSE
  *)

xmlbuilder2/lib/xmlbuilder2.min.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <http://feross.org>
   * @license  MIT
   *)
  (*! https://mths.be/punycode v1.4.1 by @mathias *)

three/build/three.module.js:
  (**
   * @license
   * Copyright 2010-2023 Three.js Authors
   * SPDX-License-Identifier: MIT
   *)
*/
